/**
 *
 *  Shop.h
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#pragma once
#include <drogon/orm/Result.h>
#include <drogon/orm/Row.h>
#include <drogon/orm/Field.h>
#include <drogon/orm/SqlBinder.h>
#include <drogon/orm/Mapper.h>
#include <trantor/utils/Date.h>
#include <trantor/utils/Logger.h>
#include <json/json.h>
#include <string>
#include <memory>
#include <vector>
#include <tuple>
#include <stdint.h>
#include <iostream>

using namespace drogon::orm;
namespace drogon
{
namespace orm
{
class DbClient;
using DbClientPtr = std::shared_ptr<DbClient>;
}
}
namespace drogon_model
{
namespace v2 
{

class Shop
{
  public:
    struct Cols
    {
        static const std::string _id;
        static const std::string _create_time;
        static const std::string _update_time;
        static const std::string _shop_title;
        static const std::string _shop_brief_introduction;
        static const std::string _shop_keywords;
        static const std::string _shop_description;
        static const std::string _shop_qq;
        static const std::string _shop_phone;
        static const std::string _shop_logo;
        static const std::string _shop_type;
        static const std::string _shop_status;
        static const std::string _is_closed;
        static const std::string _shop_avatar;
        static const std::string _shop_business_start_time;
        static const std::string _shop_business_end_time;
        static const std::string _remark;
        static const std::string _sort;
        static const std::string _is_recommend;
        static const std::string _is_lock;
        static const std::string _shop_email;
        static const std::string _shop_main_variety;
        static const std::string _is_delete;
        static const std::string _k3_on_off;
    };

    const static int primaryKeyNumber;
    const static std::string tableName;
    const static bool hasPrimaryKey;
    const static std::string primaryKeyName;
    using PrimaryKeyType = uint64_t;
    const PrimaryKeyType &getPrimaryKey() const;

    /**
     * @brief constructor
     * @param r One row of records in the SQL query result.
     * @param indexOffset Set the offset to -1 to access all columns by column names, 
     * otherwise access all columns by offsets.
     * @note If the SQL is not a style of 'select * from table_name ...' (select all 
     * columns by an asterisk), please set the offset to -1.
     */
    explicit Shop(const Row &r, const ssize_t indexOffset = 0) noexcept;

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     */
    explicit Shop(const Json::Value &pJson) noexcept(false);

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     * @param pMasqueradingVector The aliases of table columns.
     */
    Shop(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false);

    Shop() = default;
    
    void updateByJson(const Json::Value &pJson) noexcept(false);
    void updateByMasqueradedJson(const Json::Value &pJson,
                                 const std::vector<std::string> &pMasqueradingVector) noexcept(false);
    static bool validateJsonForCreation(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForCreation(const Json::Value &,
                                                const std::vector<std::string> &pMasqueradingVector,
                                                    std::string &err);
    static bool validateJsonForUpdate(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForUpdate(const Json::Value &,
                                          const std::vector<std::string> &pMasqueradingVector,
                                          std::string &err);
    static bool validJsonOfField(size_t index,
                          const std::string &fieldName,
                          const Json::Value &pJson, 
                          std::string &err, 
                          bool isForCreation);

    /**  For column id  */
    ///Get the value of the column id, returns the default value if the column is null
    const uint64_t &getValueOfId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint64_t> &getId() const noexcept;

    ///Set the value of the column id
    void setId(const uint64_t &pId) noexcept;


    /**  For column create_time  */
    ///Get the value of the column create_time, returns the default value if the column is null
    const ::trantor::Date &getValueOfCreateTime() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getCreateTime() const noexcept;

    ///Set the value of the column create_time
    void setCreateTime(const ::trantor::Date &pCreateTime) noexcept;


    /**  For column update_time  */
    ///Get the value of the column update_time, returns the default value if the column is null
    const ::trantor::Date &getValueOfUpdateTime() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getUpdateTime() const noexcept;

    ///Set the value of the column update_time
    void setUpdateTime(const ::trantor::Date &pUpdateTime) noexcept;


    /**  For column shop_title  */
    ///Get the value of the column shop_title, returns the default value if the column is null
    const std::string &getValueOfShopTitle() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getShopTitle() const noexcept;

    ///Set the value of the column shop_title
    void setShopTitle(const std::string &pShopTitle) noexcept;
    void setShopTitle(std::string &&pShopTitle) noexcept;
    void setShopTitleToNull() noexcept;


    /**  For column shop_brief_introduction  */
    ///Get the value of the column shop_brief_introduction, returns the default value if the column is null
    const std::string &getValueOfShopBriefIntroduction() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getShopBriefIntroduction() const noexcept;

    ///Set the value of the column shop_brief_introduction
    void setShopBriefIntroduction(const std::string &pShopBriefIntroduction) noexcept;
    void setShopBriefIntroduction(std::string &&pShopBriefIntroduction) noexcept;
    void setShopBriefIntroductionToNull() noexcept;


    /**  For column shop_keywords  */
    ///Get the value of the column shop_keywords, returns the default value if the column is null
    const std::string &getValueOfShopKeywords() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getShopKeywords() const noexcept;

    ///Set the value of the column shop_keywords
    void setShopKeywords(const std::string &pShopKeywords) noexcept;
    void setShopKeywords(std::string &&pShopKeywords) noexcept;
    void setShopKeywordsToNull() noexcept;


    /**  For column shop_description  */
    ///Get the value of the column shop_description, returns the default value if the column is null
    const std::string &getValueOfShopDescription() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getShopDescription() const noexcept;

    ///Set the value of the column shop_description
    void setShopDescription(const std::string &pShopDescription) noexcept;
    void setShopDescription(std::string &&pShopDescription) noexcept;
    void setShopDescriptionToNull() noexcept;


    /**  For column shop_qq  */
    ///Get the value of the column shop_qq, returns the default value if the column is null
    const std::string &getValueOfShopQq() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getShopQq() const noexcept;

    ///Set the value of the column shop_qq
    void setShopQq(const std::string &pShopQq) noexcept;
    void setShopQq(std::string &&pShopQq) noexcept;
    void setShopQqToNull() noexcept;


    /**  For column shop_phone  */
    ///Get the value of the column shop_phone, returns the default value if the column is null
    const std::string &getValueOfShopPhone() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getShopPhone() const noexcept;

    ///Set the value of the column shop_phone
    void setShopPhone(const std::string &pShopPhone) noexcept;
    void setShopPhone(std::string &&pShopPhone) noexcept;
    void setShopPhoneToNull() noexcept;


    /**  For column shop_logo  */
    ///Get the value of the column shop_logo, returns the default value if the column is null
    const std::string &getValueOfShopLogo() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getShopLogo() const noexcept;

    ///Set the value of the column shop_logo
    void setShopLogo(const std::string &pShopLogo) noexcept;
    void setShopLogo(std::string &&pShopLogo) noexcept;
    void setShopLogoToNull() noexcept;


    /**  For column shop_type  */
    ///Get the value of the column shop_type, returns the default value if the column is null
    const uint8_t &getValueOfShopType() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint8_t> &getShopType() const noexcept;

    ///Set the value of the column shop_type
    void setShopType(const uint8_t &pShopType) noexcept;


    /**  For column shop_status  */
    ///Get the value of the column shop_status, returns the default value if the column is null
    const uint8_t &getValueOfShopStatus() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint8_t> &getShopStatus() const noexcept;

    ///Set the value of the column shop_status
    void setShopStatus(const uint8_t &pShopStatus) noexcept;


    /**  For column is_closed  */
    ///Get the value of the column is_closed, returns the default value if the column is null
    const uint8_t &getValueOfIsClosed() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint8_t> &getIsClosed() const noexcept;

    ///Set the value of the column is_closed
    void setIsClosed(const uint8_t &pIsClosed) noexcept;


    /**  For column shop_avatar  */
    ///Get the value of the column shop_avatar, returns the default value if the column is null
    const std::string &getValueOfShopAvatar() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getShopAvatar() const noexcept;

    ///Set the value of the column shop_avatar
    void setShopAvatar(const std::string &pShopAvatar) noexcept;
    void setShopAvatar(std::string &&pShopAvatar) noexcept;
    void setShopAvatarToNull() noexcept;


    /**  For column shop_business_start_time  */
    ///Get the value of the column shop_business_start_time, returns the default value if the column is null
    const std::string &getValueOfShopBusinessStartTime() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getShopBusinessStartTime() const noexcept;

    ///Set the value of the column shop_business_start_time
    void setShopBusinessStartTime(const std::string &pShopBusinessStartTime) noexcept;
    void setShopBusinessStartTime(std::string &&pShopBusinessStartTime) noexcept;


    /**  For column shop_business_end_time  */
    ///Get the value of the column shop_business_end_time, returns the default value if the column is null
    const std::string &getValueOfShopBusinessEndTime() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getShopBusinessEndTime() const noexcept;

    ///Set the value of the column shop_business_end_time
    void setShopBusinessEndTime(const std::string &pShopBusinessEndTime) noexcept;
    void setShopBusinessEndTime(std::string &&pShopBusinessEndTime) noexcept;


    /**  For column remark  */
    ///Get the value of the column remark, returns the default value if the column is null
    const std::string &getValueOfRemark() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getRemark() const noexcept;

    ///Set the value of the column remark
    void setRemark(const std::string &pRemark) noexcept;
    void setRemark(std::string &&pRemark) noexcept;
    void setRemarkToNull() noexcept;


    /**  For column sort  */
    ///Get the value of the column sort, returns the default value if the column is null
    const uint8_t &getValueOfSort() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint8_t> &getSort() const noexcept;

    ///Set the value of the column sort
    void setSort(const uint8_t &pSort) noexcept;


    /**  For column is_recommend  */
    ///Get the value of the column is_recommend, returns the default value if the column is null
    const int8_t &getValueOfIsRecommend() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int8_t> &getIsRecommend() const noexcept;

    ///Set the value of the column is_recommend
    void setIsRecommend(const int8_t &pIsRecommend) noexcept;


    /**  For column is_lock  */
    ///Get the value of the column is_lock, returns the default value if the column is null
    const int8_t &getValueOfIsLock() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int8_t> &getIsLock() const noexcept;

    ///Set the value of the column is_lock
    void setIsLock(const int8_t &pIsLock) noexcept;


    /**  For column shop_email  */
    ///Get the value of the column shop_email, returns the default value if the column is null
    const std::string &getValueOfShopEmail() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getShopEmail() const noexcept;

    ///Set the value of the column shop_email
    void setShopEmail(const std::string &pShopEmail) noexcept;
    void setShopEmail(std::string &&pShopEmail) noexcept;
    void setShopEmailToNull() noexcept;


    /**  For column shop_main_variety  */
    ///Get the value of the column shop_main_variety, returns the default value if the column is null
    const std::string &getValueOfShopMainVariety() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getShopMainVariety() const noexcept;

    ///Set the value of the column shop_main_variety
    void setShopMainVariety(const std::string &pShopMainVariety) noexcept;
    void setShopMainVariety(std::string &&pShopMainVariety) noexcept;
    void setShopMainVarietyToNull() noexcept;


    /**  For column is_delete  */
    ///Get the value of the column is_delete, returns the default value if the column is null
    const int8_t &getValueOfIsDelete() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int8_t> &getIsDelete() const noexcept;

    ///Set the value of the column is_delete
    void setIsDelete(const int8_t &pIsDelete) noexcept;


    /**  For column k3_on_off  */
    ///Get the value of the column k3_on_off, returns the default value if the column is null
    const int8_t &getValueOfK3OnOff() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int8_t> &getK3OnOff() const noexcept;

    ///Set the value of the column k3_on_off
    void setK3OnOff(const int8_t &pK3OnOff) noexcept;



    static size_t getColumnNumber() noexcept {  return 24;  }
    static const std::string &getColumnName(size_t index) noexcept(false);

    Json::Value toJson() const;
    Json::Value toMasqueradedJson(const std::vector<std::string> &pMasqueradingVector) const;
    /// Relationship interfaces
  private:
    friend Mapper<Shop>;
    static const std::vector<std::string> &insertColumns() noexcept;
    void outputArgs(drogon::orm::internal::SqlBinder &binder) const;
    const std::vector<std::string> updateColumns() const;
    void updateArgs(drogon::orm::internal::SqlBinder &binder) const;
    ///For mysql or sqlite3
    void updateId(const uint64_t id);
    std::shared_ptr<uint64_t> id_;
    std::shared_ptr<::trantor::Date> createTime_;
    std::shared_ptr<::trantor::Date> updateTime_;
    std::shared_ptr<std::string> shopTitle_;
    std::shared_ptr<std::string> shopBriefIntroduction_;
    std::shared_ptr<std::string> shopKeywords_;
    std::shared_ptr<std::string> shopDescription_;
    std::shared_ptr<std::string> shopQq_;
    std::shared_ptr<std::string> shopPhone_;
    std::shared_ptr<std::string> shopLogo_;
    std::shared_ptr<uint8_t> shopType_;
    std::shared_ptr<uint8_t> shopStatus_;
    std::shared_ptr<uint8_t> isClosed_;
    std::shared_ptr<std::string> shopAvatar_;
    std::shared_ptr<std::string> shopBusinessStartTime_;
    std::shared_ptr<std::string> shopBusinessEndTime_;
    std::shared_ptr<std::string> remark_;
    std::shared_ptr<uint8_t> sort_;
    std::shared_ptr<int8_t> isRecommend_;
    std::shared_ptr<int8_t> isLock_;
    std::shared_ptr<std::string> shopEmail_;
    std::shared_ptr<std::string> shopMainVariety_;
    std::shared_ptr<int8_t> isDelete_;
    std::shared_ptr<int8_t> k3OnOff_;
    struct MetaData
    {
        const std::string colName_;
        const std::string colType_;
        const std::string colDatabaseType_;
        const ssize_t colLength_;
        const bool isAutoVal_;
        const bool isPrimaryKey_;
        const bool notNull_;
    };
    static const std::vector<MetaData> metaData_;
    bool dirtyFlag_[24]={ false };
  public:
    static const std::string &sqlForFindingByPrimaryKey()
    {
        static const std::string sql="select * from " + tableName + " where id = ?";
        return sql;                   
    }

    static const std::string &sqlForDeletingByPrimaryKey()
    {
        static const std::string sql="delete from " + tableName + " where id = ?";
        return sql;                   
    }
    std::string sqlForInserting(bool &needSelection) const
    {
        std::string sql="insert into " + tableName + " (";
        size_t parametersCount = 0;
        needSelection = false;
            sql += "id,";
            ++parametersCount;
        sql += "create_time,";
        ++parametersCount;
        if(!dirtyFlag_[1])
        {
            needSelection=true;
        }
        sql += "update_time,";
        ++parametersCount;
        if(!dirtyFlag_[2])
        {
            needSelection=true;
        }
        if(dirtyFlag_[3])
        {
            sql += "shop_title,";
            ++parametersCount;
        }
        if(dirtyFlag_[4])
        {
            sql += "shop_brief_introduction,";
            ++parametersCount;
        }
        if(dirtyFlag_[5])
        {
            sql += "shop_keywords,";
            ++parametersCount;
        }
        if(dirtyFlag_[6])
        {
            sql += "shop_description,";
            ++parametersCount;
        }
        if(dirtyFlag_[7])
        {
            sql += "shop_qq,";
            ++parametersCount;
        }
        if(dirtyFlag_[8])
        {
            sql += "shop_phone,";
            ++parametersCount;
        }
        if(dirtyFlag_[9])
        {
            sql += "shop_logo,";
            ++parametersCount;
        }
        sql += "shop_type,";
        ++parametersCount;
        if(!dirtyFlag_[10])
        {
            needSelection=true;
        }
        sql += "shop_status,";
        ++parametersCount;
        if(!dirtyFlag_[11])
        {
            needSelection=true;
        }
        sql += "is_closed,";
        ++parametersCount;
        if(!dirtyFlag_[12])
        {
            needSelection=true;
        }
        if(dirtyFlag_[13])
        {
            sql += "shop_avatar,";
            ++parametersCount;
        }
        sql += "shop_business_start_time,";
        ++parametersCount;
        if(!dirtyFlag_[14])
        {
            needSelection=true;
        }
        sql += "shop_business_end_time,";
        ++parametersCount;
        if(!dirtyFlag_[15])
        {
            needSelection=true;
        }
        if(dirtyFlag_[16])
        {
            sql += "remark,";
            ++parametersCount;
        }
        sql += "sort,";
        ++parametersCount;
        if(!dirtyFlag_[17])
        {
            needSelection=true;
        }
        sql += "is_recommend,";
        ++parametersCount;
        if(!dirtyFlag_[18])
        {
            needSelection=true;
        }
        sql += "is_lock,";
        ++parametersCount;
        if(!dirtyFlag_[19])
        {
            needSelection=true;
        }
        if(dirtyFlag_[20])
        {
            sql += "shop_email,";
            ++parametersCount;
        }
        if(dirtyFlag_[21])
        {
            sql += "shop_main_variety,";
            ++parametersCount;
        }
        sql += "is_delete,";
        ++parametersCount;
        if(!dirtyFlag_[22])
        {
            needSelection=true;
        }
        sql += "k3_on_off,";
        ++parametersCount;
        if(!dirtyFlag_[23])
        {
            needSelection=true;
        }
        needSelection=true;
        if(parametersCount > 0)
        {
            sql[sql.length()-1]=')';
            sql += " values (";
        }
        else
            sql += ") values (";
        
        sql +="default,";
        if(dirtyFlag_[1])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[2])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[3])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[4])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[5])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[6])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[7])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[8])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[9])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[10])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[11])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[12])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[13])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[14])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[15])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[16])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[17])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[18])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[19])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[20])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[21])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[22])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[23])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(parametersCount > 0)
        {
            sql.resize(sql.length() - 1);
        }
        sql.append(1, ')');
        LOG_TRACE << sql;
        return sql;   
    }
};
} // namespace v2
} // namespace drogon_model
