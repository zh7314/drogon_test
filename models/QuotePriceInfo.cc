/**
 *
 *  QuotePriceInfo.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "QuotePriceInfo.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::v2;

const std::string QuotePriceInfo::Cols::_id = "id";
const std::string QuotePriceInfo::Cols::_create_time = "create_time";
const std::string QuotePriceInfo::Cols::_update_time = "update_time";
const std::string QuotePriceInfo::Cols::_quote_price = "quote_price";
const std::string QuotePriceInfo::Cols::_lifting_water = "lifting_water";
const std::string QuotePriceInfo::Cols::_processing_fee = "processing_fee";
const std::string QuotePriceInfo::Cols::_contract = "contract";
const std::string QuotePriceInfo::Cols::_quote_date = "quote_date";
const std::string QuotePriceInfo::Cols::_quote_price_id = "quote_price_id";
const std::string QuotePriceInfo::Cols::_product_category_id = "product_category_id";
const std::string QuotePriceInfo::Cols::_product_model_id = "product_model_id";
const std::string QuotePriceInfo::Cols::_is_delete = "is_delete";
const std::string QuotePriceInfo::Cols::_admin_id = "admin_id";
const std::string QuotePriceInfo::Cols::_remark = "remark";
const std::string QuotePriceInfo::Cols::_shop_id = "shop_id";
const std::string QuotePriceInfo::Cols::_is_cancel = "is_cancel";
const std::string QuotePriceInfo::Cols::_area = "area";
const std::string QuotePriceInfo::primaryKeyName = "id";
const bool QuotePriceInfo::hasPrimaryKey = true;
const std::string QuotePriceInfo::tableName = "quote_price_info";

const std::vector<typename QuotePriceInfo::MetaData> QuotePriceInfo::metaData_={
{"id","uint64_t","bigint(20) unsigned",8,1,1,1},
{"create_time","::trantor::Date","datetime",0,0,0,0},
{"update_time","::trantor::Date","datetime",0,0,0,0},
{"quote_price","std::string","varchar(50)",50,0,0,0},
{"lifting_water","std::string","varchar(50)",50,0,0,0},
{"processing_fee","std::string","varchar(50)",50,0,0,0},
{"contract","std::string","varchar(50)",50,0,0,0},
{"quote_date","::trantor::Date","date",0,0,0,0},
{"quote_price_id","uint64_t","bigint(20) unsigned",8,0,0,1},
{"product_category_id","uint64_t","bigint(20) unsigned",8,0,0,1},
{"product_model_id","uint64_t","bigint(20) unsigned",8,0,0,1},
{"is_delete","uint8_t","tinyint(1) unsigned",1,0,0,1},
{"admin_id","uint64_t","bigint(20) unsigned",8,0,0,1},
{"remark","std::string","varchar(255)",255,0,0,0},
{"shop_id","uint64_t","bigint(20) unsigned",8,0,0,0},
{"is_cancel","uint8_t","tinyint(1) unsigned",1,0,0,1},
{"area","std::string","varchar(20)",20,0,0,0}
};
const std::string &QuotePriceInfo::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
QuotePriceInfo::QuotePriceInfo(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<uint64_t>(r["id"].as<uint64_t>());
        }
        if(!r["create_time"].isNull())
        {
            auto timeStr = r["create_time"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        if(!r["update_time"].isNull())
        {
            auto timeStr = r["update_time"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        if(!r["quote_price"].isNull())
        {
            quotePrice_=std::make_shared<std::string>(r["quote_price"].as<std::string>());
        }
        if(!r["lifting_water"].isNull())
        {
            liftingWater_=std::make_shared<std::string>(r["lifting_water"].as<std::string>());
        }
        if(!r["processing_fee"].isNull())
        {
            processingFee_=std::make_shared<std::string>(r["processing_fee"].as<std::string>());
        }
        if(!r["contract"].isNull())
        {
            contract_=std::make_shared<std::string>(r["contract"].as<std::string>());
        }
        if(!r["quote_date"].isNull())
        {
            auto daysStr = r["quote_date"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            quoteDate_=std::make_shared<::trantor::Date>(t*1000000);
        }
        if(!r["quote_price_id"].isNull())
        {
            quotePriceId_=std::make_shared<uint64_t>(r["quote_price_id"].as<uint64_t>());
        }
        if(!r["product_category_id"].isNull())
        {
            productCategoryId_=std::make_shared<uint64_t>(r["product_category_id"].as<uint64_t>());
        }
        if(!r["product_model_id"].isNull())
        {
            productModelId_=std::make_shared<uint64_t>(r["product_model_id"].as<uint64_t>());
        }
        if(!r["is_delete"].isNull())
        {
            isDelete_=std::make_shared<uint8_t>(r["is_delete"].as<uint8_t>());
        }
        if(!r["admin_id"].isNull())
        {
            adminId_=std::make_shared<uint64_t>(r["admin_id"].as<uint64_t>());
        }
        if(!r["remark"].isNull())
        {
            remark_=std::make_shared<std::string>(r["remark"].as<std::string>());
        }
        if(!r["shop_id"].isNull())
        {
            shopId_=std::make_shared<uint64_t>(r["shop_id"].as<uint64_t>());
        }
        if(!r["is_cancel"].isNull())
        {
            isCancel_=std::make_shared<uint8_t>(r["is_cancel"].as<uint8_t>());
        }
        if(!r["area"].isNull())
        {
            area_=std::make_shared<std::string>(r["area"].as<std::string>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 17 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            quotePrice_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            liftingWater_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            processingFee_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            contract_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            auto daysStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            quoteDate_=std::make_shared<::trantor::Date>(t*1000000);
        }
        index = offset + 8;
        if(!r[index].isNull())
        {
            quotePriceId_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 9;
        if(!r[index].isNull())
        {
            productCategoryId_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 10;
        if(!r[index].isNull())
        {
            productModelId_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 11;
        if(!r[index].isNull())
        {
            isDelete_=std::make_shared<uint8_t>(r[index].as<uint8_t>());
        }
        index = offset + 12;
        if(!r[index].isNull())
        {
            adminId_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 13;
        if(!r[index].isNull())
        {
            remark_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 14;
        if(!r[index].isNull())
        {
            shopId_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 15;
        if(!r[index].isNull())
        {
            isCancel_=std::make_shared<uint8_t>(r[index].as<uint8_t>());
        }
        index = offset + 16;
        if(!r[index].isNull())
        {
            area_=std::make_shared<std::string>(r[index].as<std::string>());
        }
    }

}

QuotePriceInfo::QuotePriceInfo(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 17)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[1]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[2]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            quotePrice_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            liftingWater_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            processingFee_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            contract_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            auto daysStr = pJson[pMasqueradingVector[7]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            quoteDate_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            quotePriceId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[8]].asUInt64());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            productCategoryId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[9]].asUInt64());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            productModelId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[10]].asUInt64());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            isDelete_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[11]].asUInt64());
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            adminId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[12]].asUInt64());
        }
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        dirtyFlag_[13] = true;
        if(!pJson[pMasqueradingVector[13]].isNull())
        {
            remark_=std::make_shared<std::string>(pJson[pMasqueradingVector[13]].asString());
        }
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        dirtyFlag_[14] = true;
        if(!pJson[pMasqueradingVector[14]].isNull())
        {
            shopId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[14]].asUInt64());
        }
    }
    if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
    {
        dirtyFlag_[15] = true;
        if(!pJson[pMasqueradingVector[15]].isNull())
        {
            isCancel_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[15]].asUInt64());
        }
    }
    if(!pMasqueradingVector[16].empty() && pJson.isMember(pMasqueradingVector[16]))
    {
        dirtyFlag_[16] = true;
        if(!pJson[pMasqueradingVector[16]].isNull())
        {
            area_=std::make_shared<std::string>(pJson[pMasqueradingVector[16]].asString());
        }
    }
}

QuotePriceInfo::QuotePriceInfo(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson["id"].asUInt64());
        }
    }
    if(pJson.isMember("create_time"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["create_time"].isNull())
        {
            auto timeStr = pJson["create_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("update_time"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["update_time"].isNull())
        {
            auto timeStr = pJson["update_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("quote_price"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["quote_price"].isNull())
        {
            quotePrice_=std::make_shared<std::string>(pJson["quote_price"].asString());
        }
    }
    if(pJson.isMember("lifting_water"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["lifting_water"].isNull())
        {
            liftingWater_=std::make_shared<std::string>(pJson["lifting_water"].asString());
        }
    }
    if(pJson.isMember("processing_fee"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["processing_fee"].isNull())
        {
            processingFee_=std::make_shared<std::string>(pJson["processing_fee"].asString());
        }
    }
    if(pJson.isMember("contract"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["contract"].isNull())
        {
            contract_=std::make_shared<std::string>(pJson["contract"].asString());
        }
    }
    if(pJson.isMember("quote_date"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["quote_date"].isNull())
        {
            auto daysStr = pJson["quote_date"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            quoteDate_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    if(pJson.isMember("quote_price_id"))
    {
        dirtyFlag_[8]=true;
        if(!pJson["quote_price_id"].isNull())
        {
            quotePriceId_=std::make_shared<uint64_t>((uint64_t)pJson["quote_price_id"].asUInt64());
        }
    }
    if(pJson.isMember("product_category_id"))
    {
        dirtyFlag_[9]=true;
        if(!pJson["product_category_id"].isNull())
        {
            productCategoryId_=std::make_shared<uint64_t>((uint64_t)pJson["product_category_id"].asUInt64());
        }
    }
    if(pJson.isMember("product_model_id"))
    {
        dirtyFlag_[10]=true;
        if(!pJson["product_model_id"].isNull())
        {
            productModelId_=std::make_shared<uint64_t>((uint64_t)pJson["product_model_id"].asUInt64());
        }
    }
    if(pJson.isMember("is_delete"))
    {
        dirtyFlag_[11]=true;
        if(!pJson["is_delete"].isNull())
        {
            isDelete_=std::make_shared<uint8_t>((uint8_t)pJson["is_delete"].asUInt64());
        }
    }
    if(pJson.isMember("admin_id"))
    {
        dirtyFlag_[12]=true;
        if(!pJson["admin_id"].isNull())
        {
            adminId_=std::make_shared<uint64_t>((uint64_t)pJson["admin_id"].asUInt64());
        }
    }
    if(pJson.isMember("remark"))
    {
        dirtyFlag_[13]=true;
        if(!pJson["remark"].isNull())
        {
            remark_=std::make_shared<std::string>(pJson["remark"].asString());
        }
    }
    if(pJson.isMember("shop_id"))
    {
        dirtyFlag_[14]=true;
        if(!pJson["shop_id"].isNull())
        {
            shopId_=std::make_shared<uint64_t>((uint64_t)pJson["shop_id"].asUInt64());
        }
    }
    if(pJson.isMember("is_cancel"))
    {
        dirtyFlag_[15]=true;
        if(!pJson["is_cancel"].isNull())
        {
            isCancel_=std::make_shared<uint8_t>((uint8_t)pJson["is_cancel"].asUInt64());
        }
    }
    if(pJson.isMember("area"))
    {
        dirtyFlag_[16]=true;
        if(!pJson["area"].isNull())
        {
            area_=std::make_shared<std::string>(pJson["area"].asString());
        }
    }
}

void QuotePriceInfo::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 17)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[1]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[2]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            quotePrice_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            liftingWater_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            processingFee_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            contract_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            auto daysStr = pJson[pMasqueradingVector[7]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            quoteDate_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            quotePriceId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[8]].asUInt64());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            productCategoryId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[9]].asUInt64());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            productModelId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[10]].asUInt64());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            isDelete_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[11]].asUInt64());
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            adminId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[12]].asUInt64());
        }
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        dirtyFlag_[13] = true;
        if(!pJson[pMasqueradingVector[13]].isNull())
        {
            remark_=std::make_shared<std::string>(pJson[pMasqueradingVector[13]].asString());
        }
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        dirtyFlag_[14] = true;
        if(!pJson[pMasqueradingVector[14]].isNull())
        {
            shopId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[14]].asUInt64());
        }
    }
    if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
    {
        dirtyFlag_[15] = true;
        if(!pJson[pMasqueradingVector[15]].isNull())
        {
            isCancel_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[15]].asUInt64());
        }
    }
    if(!pMasqueradingVector[16].empty() && pJson.isMember(pMasqueradingVector[16]))
    {
        dirtyFlag_[16] = true;
        if(!pJson[pMasqueradingVector[16]].isNull())
        {
            area_=std::make_shared<std::string>(pJson[pMasqueradingVector[16]].asString());
        }
    }
}
                                                                    
void QuotePriceInfo::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson["id"].asUInt64());
        }
    }
    if(pJson.isMember("create_time"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["create_time"].isNull())
        {
            auto timeStr = pJson["create_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("update_time"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["update_time"].isNull())
        {
            auto timeStr = pJson["update_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("quote_price"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["quote_price"].isNull())
        {
            quotePrice_=std::make_shared<std::string>(pJson["quote_price"].asString());
        }
    }
    if(pJson.isMember("lifting_water"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["lifting_water"].isNull())
        {
            liftingWater_=std::make_shared<std::string>(pJson["lifting_water"].asString());
        }
    }
    if(pJson.isMember("processing_fee"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["processing_fee"].isNull())
        {
            processingFee_=std::make_shared<std::string>(pJson["processing_fee"].asString());
        }
    }
    if(pJson.isMember("contract"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["contract"].isNull())
        {
            contract_=std::make_shared<std::string>(pJson["contract"].asString());
        }
    }
    if(pJson.isMember("quote_date"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["quote_date"].isNull())
        {
            auto daysStr = pJson["quote_date"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            quoteDate_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    if(pJson.isMember("quote_price_id"))
    {
        dirtyFlag_[8] = true;
        if(!pJson["quote_price_id"].isNull())
        {
            quotePriceId_=std::make_shared<uint64_t>((uint64_t)pJson["quote_price_id"].asUInt64());
        }
    }
    if(pJson.isMember("product_category_id"))
    {
        dirtyFlag_[9] = true;
        if(!pJson["product_category_id"].isNull())
        {
            productCategoryId_=std::make_shared<uint64_t>((uint64_t)pJson["product_category_id"].asUInt64());
        }
    }
    if(pJson.isMember("product_model_id"))
    {
        dirtyFlag_[10] = true;
        if(!pJson["product_model_id"].isNull())
        {
            productModelId_=std::make_shared<uint64_t>((uint64_t)pJson["product_model_id"].asUInt64());
        }
    }
    if(pJson.isMember("is_delete"))
    {
        dirtyFlag_[11] = true;
        if(!pJson["is_delete"].isNull())
        {
            isDelete_=std::make_shared<uint8_t>((uint8_t)pJson["is_delete"].asUInt64());
        }
    }
    if(pJson.isMember("admin_id"))
    {
        dirtyFlag_[12] = true;
        if(!pJson["admin_id"].isNull())
        {
            adminId_=std::make_shared<uint64_t>((uint64_t)pJson["admin_id"].asUInt64());
        }
    }
    if(pJson.isMember("remark"))
    {
        dirtyFlag_[13] = true;
        if(!pJson["remark"].isNull())
        {
            remark_=std::make_shared<std::string>(pJson["remark"].asString());
        }
    }
    if(pJson.isMember("shop_id"))
    {
        dirtyFlag_[14] = true;
        if(!pJson["shop_id"].isNull())
        {
            shopId_=std::make_shared<uint64_t>((uint64_t)pJson["shop_id"].asUInt64());
        }
    }
    if(pJson.isMember("is_cancel"))
    {
        dirtyFlag_[15] = true;
        if(!pJson["is_cancel"].isNull())
        {
            isCancel_=std::make_shared<uint8_t>((uint8_t)pJson["is_cancel"].asUInt64());
        }
    }
    if(pJson.isMember("area"))
    {
        dirtyFlag_[16] = true;
        if(!pJson["area"].isNull())
        {
            area_=std::make_shared<std::string>(pJson["area"].asString());
        }
    }
}

const uint64_t &QuotePriceInfo::getValueOfId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &QuotePriceInfo::getId() const noexcept
{
    return id_;
}
void QuotePriceInfo::setId(const uint64_t &pId) noexcept
{
    id_ = std::make_shared<uint64_t>(pId);
    dirtyFlag_[0] = true;
}



const typename QuotePriceInfo::PrimaryKeyType & QuotePriceInfo::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const ::trantor::Date &QuotePriceInfo::getValueOfCreateTime() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(createTime_)
        return *createTime_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &QuotePriceInfo::getCreateTime() const noexcept
{
    return createTime_;
}
void QuotePriceInfo::setCreateTime(const ::trantor::Date &pCreateTime) noexcept
{
    createTime_ = std::make_shared<::trantor::Date>(pCreateTime);
    dirtyFlag_[1] = true;
}


void QuotePriceInfo::setCreateTimeToNull() noexcept
{
    createTime_.reset();
    dirtyFlag_[1] = true;
}


const ::trantor::Date &QuotePriceInfo::getValueOfUpdateTime() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(updateTime_)
        return *updateTime_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &QuotePriceInfo::getUpdateTime() const noexcept
{
    return updateTime_;
}
void QuotePriceInfo::setUpdateTime(const ::trantor::Date &pUpdateTime) noexcept
{
    updateTime_ = std::make_shared<::trantor::Date>(pUpdateTime);
    dirtyFlag_[2] = true;
}


void QuotePriceInfo::setUpdateTimeToNull() noexcept
{
    updateTime_.reset();
    dirtyFlag_[2] = true;
}


const std::string &QuotePriceInfo::getValueOfQuotePrice() const noexcept
{
    const static std::string defaultValue = std::string();
    if(quotePrice_)
        return *quotePrice_;
    return defaultValue;
}
const std::shared_ptr<std::string> &QuotePriceInfo::getQuotePrice() const noexcept
{
    return quotePrice_;
}
void QuotePriceInfo::setQuotePrice(const std::string &pQuotePrice) noexcept
{
    quotePrice_ = std::make_shared<std::string>(pQuotePrice);
    dirtyFlag_[3] = true;
}
void QuotePriceInfo::setQuotePrice(std::string &&pQuotePrice) noexcept
{
    quotePrice_ = std::make_shared<std::string>(std::move(pQuotePrice));
    dirtyFlag_[3] = true;
}


void QuotePriceInfo::setQuotePriceToNull() noexcept
{
    quotePrice_.reset();
    dirtyFlag_[3] = true;
}


const std::string &QuotePriceInfo::getValueOfLiftingWater() const noexcept
{
    const static std::string defaultValue = std::string();
    if(liftingWater_)
        return *liftingWater_;
    return defaultValue;
}
const std::shared_ptr<std::string> &QuotePriceInfo::getLiftingWater() const noexcept
{
    return liftingWater_;
}
void QuotePriceInfo::setLiftingWater(const std::string &pLiftingWater) noexcept
{
    liftingWater_ = std::make_shared<std::string>(pLiftingWater);
    dirtyFlag_[4] = true;
}
void QuotePriceInfo::setLiftingWater(std::string &&pLiftingWater) noexcept
{
    liftingWater_ = std::make_shared<std::string>(std::move(pLiftingWater));
    dirtyFlag_[4] = true;
}


void QuotePriceInfo::setLiftingWaterToNull() noexcept
{
    liftingWater_.reset();
    dirtyFlag_[4] = true;
}


const std::string &QuotePriceInfo::getValueOfProcessingFee() const noexcept
{
    const static std::string defaultValue = std::string();
    if(processingFee_)
        return *processingFee_;
    return defaultValue;
}
const std::shared_ptr<std::string> &QuotePriceInfo::getProcessingFee() const noexcept
{
    return processingFee_;
}
void QuotePriceInfo::setProcessingFee(const std::string &pProcessingFee) noexcept
{
    processingFee_ = std::make_shared<std::string>(pProcessingFee);
    dirtyFlag_[5] = true;
}
void QuotePriceInfo::setProcessingFee(std::string &&pProcessingFee) noexcept
{
    processingFee_ = std::make_shared<std::string>(std::move(pProcessingFee));
    dirtyFlag_[5] = true;
}


void QuotePriceInfo::setProcessingFeeToNull() noexcept
{
    processingFee_.reset();
    dirtyFlag_[5] = true;
}


const std::string &QuotePriceInfo::getValueOfContract() const noexcept
{
    const static std::string defaultValue = std::string();
    if(contract_)
        return *contract_;
    return defaultValue;
}
const std::shared_ptr<std::string> &QuotePriceInfo::getContract() const noexcept
{
    return contract_;
}
void QuotePriceInfo::setContract(const std::string &pContract) noexcept
{
    contract_ = std::make_shared<std::string>(pContract);
    dirtyFlag_[6] = true;
}
void QuotePriceInfo::setContract(std::string &&pContract) noexcept
{
    contract_ = std::make_shared<std::string>(std::move(pContract));
    dirtyFlag_[6] = true;
}


void QuotePriceInfo::setContractToNull() noexcept
{
    contract_.reset();
    dirtyFlag_[6] = true;
}


const ::trantor::Date &QuotePriceInfo::getValueOfQuoteDate() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(quoteDate_)
        return *quoteDate_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &QuotePriceInfo::getQuoteDate() const noexcept
{
    return quoteDate_;
}
void QuotePriceInfo::setQuoteDate(const ::trantor::Date &pQuoteDate) noexcept
{
    quoteDate_ = std::make_shared<::trantor::Date>(pQuoteDate.roundDay());
    dirtyFlag_[7] = true;
}


void QuotePriceInfo::setQuoteDateToNull() noexcept
{
    quoteDate_.reset();
    dirtyFlag_[7] = true;
}


const uint64_t &QuotePriceInfo::getValueOfQuotePriceId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(quotePriceId_)
        return *quotePriceId_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &QuotePriceInfo::getQuotePriceId() const noexcept
{
    return quotePriceId_;
}
void QuotePriceInfo::setQuotePriceId(const uint64_t &pQuotePriceId) noexcept
{
    quotePriceId_ = std::make_shared<uint64_t>(pQuotePriceId);
    dirtyFlag_[8] = true;
}




const uint64_t &QuotePriceInfo::getValueOfProductCategoryId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(productCategoryId_)
        return *productCategoryId_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &QuotePriceInfo::getProductCategoryId() const noexcept
{
    return productCategoryId_;
}
void QuotePriceInfo::setProductCategoryId(const uint64_t &pProductCategoryId) noexcept
{
    productCategoryId_ = std::make_shared<uint64_t>(pProductCategoryId);
    dirtyFlag_[9] = true;
}




const uint64_t &QuotePriceInfo::getValueOfProductModelId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(productModelId_)
        return *productModelId_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &QuotePriceInfo::getProductModelId() const noexcept
{
    return productModelId_;
}
void QuotePriceInfo::setProductModelId(const uint64_t &pProductModelId) noexcept
{
    productModelId_ = std::make_shared<uint64_t>(pProductModelId);
    dirtyFlag_[10] = true;
}




const uint8_t &QuotePriceInfo::getValueOfIsDelete() const noexcept
{
    const static uint8_t defaultValue = uint8_t();
    if(isDelete_)
        return *isDelete_;
    return defaultValue;
}
const std::shared_ptr<uint8_t> &QuotePriceInfo::getIsDelete() const noexcept
{
    return isDelete_;
}
void QuotePriceInfo::setIsDelete(const uint8_t &pIsDelete) noexcept
{
    isDelete_ = std::make_shared<uint8_t>(pIsDelete);
    dirtyFlag_[11] = true;
}




const uint64_t &QuotePriceInfo::getValueOfAdminId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(adminId_)
        return *adminId_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &QuotePriceInfo::getAdminId() const noexcept
{
    return adminId_;
}
void QuotePriceInfo::setAdminId(const uint64_t &pAdminId) noexcept
{
    adminId_ = std::make_shared<uint64_t>(pAdminId);
    dirtyFlag_[12] = true;
}




const std::string &QuotePriceInfo::getValueOfRemark() const noexcept
{
    const static std::string defaultValue = std::string();
    if(remark_)
        return *remark_;
    return defaultValue;
}
const std::shared_ptr<std::string> &QuotePriceInfo::getRemark() const noexcept
{
    return remark_;
}
void QuotePriceInfo::setRemark(const std::string &pRemark) noexcept
{
    remark_ = std::make_shared<std::string>(pRemark);
    dirtyFlag_[13] = true;
}
void QuotePriceInfo::setRemark(std::string &&pRemark) noexcept
{
    remark_ = std::make_shared<std::string>(std::move(pRemark));
    dirtyFlag_[13] = true;
}


void QuotePriceInfo::setRemarkToNull() noexcept
{
    remark_.reset();
    dirtyFlag_[13] = true;
}


const uint64_t &QuotePriceInfo::getValueOfShopId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(shopId_)
        return *shopId_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &QuotePriceInfo::getShopId() const noexcept
{
    return shopId_;
}
void QuotePriceInfo::setShopId(const uint64_t &pShopId) noexcept
{
    shopId_ = std::make_shared<uint64_t>(pShopId);
    dirtyFlag_[14] = true;
}


void QuotePriceInfo::setShopIdToNull() noexcept
{
    shopId_.reset();
    dirtyFlag_[14] = true;
}


const uint8_t &QuotePriceInfo::getValueOfIsCancel() const noexcept
{
    const static uint8_t defaultValue = uint8_t();
    if(isCancel_)
        return *isCancel_;
    return defaultValue;
}
const std::shared_ptr<uint8_t> &QuotePriceInfo::getIsCancel() const noexcept
{
    return isCancel_;
}
void QuotePriceInfo::setIsCancel(const uint8_t &pIsCancel) noexcept
{
    isCancel_ = std::make_shared<uint8_t>(pIsCancel);
    dirtyFlag_[15] = true;
}




const std::string &QuotePriceInfo::getValueOfArea() const noexcept
{
    const static std::string defaultValue = std::string();
    if(area_)
        return *area_;
    return defaultValue;
}
const std::shared_ptr<std::string> &QuotePriceInfo::getArea() const noexcept
{
    return area_;
}
void QuotePriceInfo::setArea(const std::string &pArea) noexcept
{
    area_ = std::make_shared<std::string>(pArea);
    dirtyFlag_[16] = true;
}
void QuotePriceInfo::setArea(std::string &&pArea) noexcept
{
    area_ = std::make_shared<std::string>(std::move(pArea));
    dirtyFlag_[16] = true;
}


void QuotePriceInfo::setAreaToNull() noexcept
{
    area_.reset();
    dirtyFlag_[16] = true;
}


void QuotePriceInfo::updateId(const uint64_t id)
{
    id_ = std::make_shared<uint64_t>(id);
}

const std::vector<std::string> &QuotePriceInfo::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "create_time",
        "update_time",
        "quote_price",
        "lifting_water",
        "processing_fee",
        "contract",
        "quote_date",
        "quote_price_id",
        "product_category_id",
        "product_model_id",
        "is_delete",
        "admin_id",
        "remark",
        "shop_id",
        "is_cancel",
        "area"
    };
    return inCols;
}

void QuotePriceInfo::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getCreateTime())
        {
            binder << getValueOfCreateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getUpdateTime())
        {
            binder << getValueOfUpdateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getQuotePrice())
        {
            binder << getValueOfQuotePrice();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getLiftingWater())
        {
            binder << getValueOfLiftingWater();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getProcessingFee())
        {
            binder << getValueOfProcessingFee();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getContract())
        {
            binder << getValueOfContract();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getQuoteDate())
        {
            binder << getValueOfQuoteDate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getQuotePriceId())
        {
            binder << getValueOfQuotePriceId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getProductCategoryId())
        {
            binder << getValueOfProductCategoryId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getProductModelId())
        {
            binder << getValueOfProductModelId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getIsDelete())
        {
            binder << getValueOfIsDelete();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getAdminId())
        {
            binder << getValueOfAdminId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[13])
    {
        if(getRemark())
        {
            binder << getValueOfRemark();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[14])
    {
        if(getShopId())
        {
            binder << getValueOfShopId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[15])
    {
        if(getIsCancel())
        {
            binder << getValueOfIsCancel();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[16])
    {
        if(getArea())
        {
            binder << getValueOfArea();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> QuotePriceInfo::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    if(dirtyFlag_[8])
    {
        ret.push_back(getColumnName(8));
    }
    if(dirtyFlag_[9])
    {
        ret.push_back(getColumnName(9));
    }
    if(dirtyFlag_[10])
    {
        ret.push_back(getColumnName(10));
    }
    if(dirtyFlag_[11])
    {
        ret.push_back(getColumnName(11));
    }
    if(dirtyFlag_[12])
    {
        ret.push_back(getColumnName(12));
    }
    if(dirtyFlag_[13])
    {
        ret.push_back(getColumnName(13));
    }
    if(dirtyFlag_[14])
    {
        ret.push_back(getColumnName(14));
    }
    if(dirtyFlag_[15])
    {
        ret.push_back(getColumnName(15));
    }
    if(dirtyFlag_[16])
    {
        ret.push_back(getColumnName(16));
    }
    return ret;
}

void QuotePriceInfo::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getCreateTime())
        {
            binder << getValueOfCreateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getUpdateTime())
        {
            binder << getValueOfUpdateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getQuotePrice())
        {
            binder << getValueOfQuotePrice();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getLiftingWater())
        {
            binder << getValueOfLiftingWater();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getProcessingFee())
        {
            binder << getValueOfProcessingFee();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getContract())
        {
            binder << getValueOfContract();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getQuoteDate())
        {
            binder << getValueOfQuoteDate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getQuotePriceId())
        {
            binder << getValueOfQuotePriceId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getProductCategoryId())
        {
            binder << getValueOfProductCategoryId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getProductModelId())
        {
            binder << getValueOfProductModelId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getIsDelete())
        {
            binder << getValueOfIsDelete();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getAdminId())
        {
            binder << getValueOfAdminId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[13])
    {
        if(getRemark())
        {
            binder << getValueOfRemark();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[14])
    {
        if(getShopId())
        {
            binder << getValueOfShopId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[15])
    {
        if(getIsCancel())
        {
            binder << getValueOfIsCancel();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[16])
    {
        if(getArea())
        {
            binder << getValueOfArea();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value QuotePriceInfo::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=(Json::UInt64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getCreateTime())
    {
        ret["create_time"]=getCreateTime()->toDbStringLocal();
    }
    else
    {
        ret["create_time"]=Json::Value();
    }
    if(getUpdateTime())
    {
        ret["update_time"]=getUpdateTime()->toDbStringLocal();
    }
    else
    {
        ret["update_time"]=Json::Value();
    }
    if(getQuotePrice())
    {
        ret["quote_price"]=getValueOfQuotePrice();
    }
    else
    {
        ret["quote_price"]=Json::Value();
    }
    if(getLiftingWater())
    {
        ret["lifting_water"]=getValueOfLiftingWater();
    }
    else
    {
        ret["lifting_water"]=Json::Value();
    }
    if(getProcessingFee())
    {
        ret["processing_fee"]=getValueOfProcessingFee();
    }
    else
    {
        ret["processing_fee"]=Json::Value();
    }
    if(getContract())
    {
        ret["contract"]=getValueOfContract();
    }
    else
    {
        ret["contract"]=Json::Value();
    }
    if(getQuoteDate())
    {
        ret["quote_date"]=getQuoteDate()->toDbStringLocal();
    }
    else
    {
        ret["quote_date"]=Json::Value();
    }
    if(getQuotePriceId())
    {
        ret["quote_price_id"]=(Json::UInt64)getValueOfQuotePriceId();
    }
    else
    {
        ret["quote_price_id"]=Json::Value();
    }
    if(getProductCategoryId())
    {
        ret["product_category_id"]=(Json::UInt64)getValueOfProductCategoryId();
    }
    else
    {
        ret["product_category_id"]=Json::Value();
    }
    if(getProductModelId())
    {
        ret["product_model_id"]=(Json::UInt64)getValueOfProductModelId();
    }
    else
    {
        ret["product_model_id"]=Json::Value();
    }
    if(getIsDelete())
    {
        ret["is_delete"]=getValueOfIsDelete();
    }
    else
    {
        ret["is_delete"]=Json::Value();
    }
    if(getAdminId())
    {
        ret["admin_id"]=(Json::UInt64)getValueOfAdminId();
    }
    else
    {
        ret["admin_id"]=Json::Value();
    }
    if(getRemark())
    {
        ret["remark"]=getValueOfRemark();
    }
    else
    {
        ret["remark"]=Json::Value();
    }
    if(getShopId())
    {
        ret["shop_id"]=(Json::UInt64)getValueOfShopId();
    }
    else
    {
        ret["shop_id"]=Json::Value();
    }
    if(getIsCancel())
    {
        ret["is_cancel"]=getValueOfIsCancel();
    }
    else
    {
        ret["is_cancel"]=Json::Value();
    }
    if(getArea())
    {
        ret["area"]=getValueOfArea();
    }
    else
    {
        ret["area"]=Json::Value();
    }
    return ret;
}

Json::Value QuotePriceInfo::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 17)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=(Json::UInt64)getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getCreateTime())
            {
                ret[pMasqueradingVector[1]]=getCreateTime()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getUpdateTime())
            {
                ret[pMasqueradingVector[2]]=getUpdateTime()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getQuotePrice())
            {
                ret[pMasqueradingVector[3]]=getValueOfQuotePrice();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getLiftingWater())
            {
                ret[pMasqueradingVector[4]]=getValueOfLiftingWater();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getProcessingFee())
            {
                ret[pMasqueradingVector[5]]=getValueOfProcessingFee();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getContract())
            {
                ret[pMasqueradingVector[6]]=getValueOfContract();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getQuoteDate())
            {
                ret[pMasqueradingVector[7]]=getQuoteDate()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[8].empty())
        {
            if(getQuotePriceId())
            {
                ret[pMasqueradingVector[8]]=(Json::UInt64)getValueOfQuotePriceId();
            }
            else
            {
                ret[pMasqueradingVector[8]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[9].empty())
        {
            if(getProductCategoryId())
            {
                ret[pMasqueradingVector[9]]=(Json::UInt64)getValueOfProductCategoryId();
            }
            else
            {
                ret[pMasqueradingVector[9]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[10].empty())
        {
            if(getProductModelId())
            {
                ret[pMasqueradingVector[10]]=(Json::UInt64)getValueOfProductModelId();
            }
            else
            {
                ret[pMasqueradingVector[10]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[11].empty())
        {
            if(getIsDelete())
            {
                ret[pMasqueradingVector[11]]=getValueOfIsDelete();
            }
            else
            {
                ret[pMasqueradingVector[11]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[12].empty())
        {
            if(getAdminId())
            {
                ret[pMasqueradingVector[12]]=(Json::UInt64)getValueOfAdminId();
            }
            else
            {
                ret[pMasqueradingVector[12]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[13].empty())
        {
            if(getRemark())
            {
                ret[pMasqueradingVector[13]]=getValueOfRemark();
            }
            else
            {
                ret[pMasqueradingVector[13]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[14].empty())
        {
            if(getShopId())
            {
                ret[pMasqueradingVector[14]]=(Json::UInt64)getValueOfShopId();
            }
            else
            {
                ret[pMasqueradingVector[14]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[15].empty())
        {
            if(getIsCancel())
            {
                ret[pMasqueradingVector[15]]=getValueOfIsCancel();
            }
            else
            {
                ret[pMasqueradingVector[15]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[16].empty())
        {
            if(getArea())
            {
                ret[pMasqueradingVector[16]]=getValueOfArea();
            }
            else
            {
                ret[pMasqueradingVector[16]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=(Json::UInt64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getCreateTime())
    {
        ret["create_time"]=getCreateTime()->toDbStringLocal();
    }
    else
    {
        ret["create_time"]=Json::Value();
    }
    if(getUpdateTime())
    {
        ret["update_time"]=getUpdateTime()->toDbStringLocal();
    }
    else
    {
        ret["update_time"]=Json::Value();
    }
    if(getQuotePrice())
    {
        ret["quote_price"]=getValueOfQuotePrice();
    }
    else
    {
        ret["quote_price"]=Json::Value();
    }
    if(getLiftingWater())
    {
        ret["lifting_water"]=getValueOfLiftingWater();
    }
    else
    {
        ret["lifting_water"]=Json::Value();
    }
    if(getProcessingFee())
    {
        ret["processing_fee"]=getValueOfProcessingFee();
    }
    else
    {
        ret["processing_fee"]=Json::Value();
    }
    if(getContract())
    {
        ret["contract"]=getValueOfContract();
    }
    else
    {
        ret["contract"]=Json::Value();
    }
    if(getQuoteDate())
    {
        ret["quote_date"]=getQuoteDate()->toDbStringLocal();
    }
    else
    {
        ret["quote_date"]=Json::Value();
    }
    if(getQuotePriceId())
    {
        ret["quote_price_id"]=(Json::UInt64)getValueOfQuotePriceId();
    }
    else
    {
        ret["quote_price_id"]=Json::Value();
    }
    if(getProductCategoryId())
    {
        ret["product_category_id"]=(Json::UInt64)getValueOfProductCategoryId();
    }
    else
    {
        ret["product_category_id"]=Json::Value();
    }
    if(getProductModelId())
    {
        ret["product_model_id"]=(Json::UInt64)getValueOfProductModelId();
    }
    else
    {
        ret["product_model_id"]=Json::Value();
    }
    if(getIsDelete())
    {
        ret["is_delete"]=getValueOfIsDelete();
    }
    else
    {
        ret["is_delete"]=Json::Value();
    }
    if(getAdminId())
    {
        ret["admin_id"]=(Json::UInt64)getValueOfAdminId();
    }
    else
    {
        ret["admin_id"]=Json::Value();
    }
    if(getRemark())
    {
        ret["remark"]=getValueOfRemark();
    }
    else
    {
        ret["remark"]=Json::Value();
    }
    if(getShopId())
    {
        ret["shop_id"]=(Json::UInt64)getValueOfShopId();
    }
    else
    {
        ret["shop_id"]=Json::Value();
    }
    if(getIsCancel())
    {
        ret["is_cancel"]=getValueOfIsCancel();
    }
    else
    {
        ret["is_cancel"]=Json::Value();
    }
    if(getArea())
    {
        ret["area"]=getValueOfArea();
    }
    else
    {
        ret["area"]=Json::Value();
    }
    return ret;
}

bool QuotePriceInfo::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("create_time"))
    {
        if(!validJsonOfField(1, "create_time", pJson["create_time"], err, true))
            return false;
    }
    if(pJson.isMember("update_time"))
    {
        if(!validJsonOfField(2, "update_time", pJson["update_time"], err, true))
            return false;
    }
    if(pJson.isMember("quote_price"))
    {
        if(!validJsonOfField(3, "quote_price", pJson["quote_price"], err, true))
            return false;
    }
    if(pJson.isMember("lifting_water"))
    {
        if(!validJsonOfField(4, "lifting_water", pJson["lifting_water"], err, true))
            return false;
    }
    if(pJson.isMember("processing_fee"))
    {
        if(!validJsonOfField(5, "processing_fee", pJson["processing_fee"], err, true))
            return false;
    }
    if(pJson.isMember("contract"))
    {
        if(!validJsonOfField(6, "contract", pJson["contract"], err, true))
            return false;
    }
    if(pJson.isMember("quote_date"))
    {
        if(!validJsonOfField(7, "quote_date", pJson["quote_date"], err, true))
            return false;
    }
    if(pJson.isMember("quote_price_id"))
    {
        if(!validJsonOfField(8, "quote_price_id", pJson["quote_price_id"], err, true))
            return false;
    }
    if(pJson.isMember("product_category_id"))
    {
        if(!validJsonOfField(9, "product_category_id", pJson["product_category_id"], err, true))
            return false;
    }
    if(pJson.isMember("product_model_id"))
    {
        if(!validJsonOfField(10, "product_model_id", pJson["product_model_id"], err, true))
            return false;
    }
    if(pJson.isMember("is_delete"))
    {
        if(!validJsonOfField(11, "is_delete", pJson["is_delete"], err, true))
            return false;
    }
    if(pJson.isMember("admin_id"))
    {
        if(!validJsonOfField(12, "admin_id", pJson["admin_id"], err, true))
            return false;
    }
    if(pJson.isMember("remark"))
    {
        if(!validJsonOfField(13, "remark", pJson["remark"], err, true))
            return false;
    }
    if(pJson.isMember("shop_id"))
    {
        if(!validJsonOfField(14, "shop_id", pJson["shop_id"], err, true))
            return false;
    }
    if(pJson.isMember("is_cancel"))
    {
        if(!validJsonOfField(15, "is_cancel", pJson["is_cancel"], err, true))
            return false;
    }
    if(pJson.isMember("area"))
    {
        if(!validJsonOfField(16, "area", pJson["area"], err, true))
            return false;
    }
    return true;
}
bool QuotePriceInfo::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                        const std::vector<std::string> &pMasqueradingVector,
                                                        std::string &err)
{
    if(pMasqueradingVector.size() != 17)
    {
        err = "Bad masquerading vector";
        return false;
    }
    if(!pMasqueradingVector[0].empty())
    {
        if(pJson.isMember(pMasqueradingVector[0]))
        {
            if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[1].empty())
    {
        if(pJson.isMember(pMasqueradingVector[1]))
        {
            if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[2].empty())
    {
        if(pJson.isMember(pMasqueradingVector[2]))
        {
            if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[3].empty())
    {
        if(pJson.isMember(pMasqueradingVector[3]))
        {
            if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[4].empty())
    {
        if(pJson.isMember(pMasqueradingVector[4]))
        {
            if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[5].empty())
    {
        if(pJson.isMember(pMasqueradingVector[5]))
        {
            if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[6].empty())
    {
        if(pJson.isMember(pMasqueradingVector[6]))
        {
            if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[7].empty())
    {
        if(pJson.isMember(pMasqueradingVector[7]))
        {
            if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[8].empty())
    {
        if(pJson.isMember(pMasqueradingVector[8]))
        {
            if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[9].empty())
    {
        if(pJson.isMember(pMasqueradingVector[9]))
        {
            if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[10].empty())
    {
        if(pJson.isMember(pMasqueradingVector[10]))
        {
            if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[11].empty())
    {
        if(pJson.isMember(pMasqueradingVector[11]))
        {
            if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[12].empty())
    {
        if(pJson.isMember(pMasqueradingVector[12]))
        {
            if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[13].empty())
    {
        if(pJson.isMember(pMasqueradingVector[13]))
        {
            if(!validJsonOfField(13, pMasqueradingVector[13], pJson[pMasqueradingVector[13]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[14].empty())
    {
        if(pJson.isMember(pMasqueradingVector[14]))
        {
            if(!validJsonOfField(14, pMasqueradingVector[14], pJson[pMasqueradingVector[14]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[15].empty())
    {
        if(pJson.isMember(pMasqueradingVector[15]))
        {
            if(!validJsonOfField(15, pMasqueradingVector[15], pJson[pMasqueradingVector[15]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[16].empty())
    {
        if(pJson.isMember(pMasqueradingVector[16]))
        {
            if(!validJsonOfField(16, pMasqueradingVector[16], pJson[pMasqueradingVector[16]], err, true))
                return false;
        }
    }
    return true;
}
bool QuotePriceInfo::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("create_time"))
    {
        if(!validJsonOfField(1, "create_time", pJson["create_time"], err, false))
            return false;
    }
    if(pJson.isMember("update_time"))
    {
        if(!validJsonOfField(2, "update_time", pJson["update_time"], err, false))
            return false;
    }
    if(pJson.isMember("quote_price"))
    {
        if(!validJsonOfField(3, "quote_price", pJson["quote_price"], err, false))
            return false;
    }
    if(pJson.isMember("lifting_water"))
    {
        if(!validJsonOfField(4, "lifting_water", pJson["lifting_water"], err, false))
            return false;
    }
    if(pJson.isMember("processing_fee"))
    {
        if(!validJsonOfField(5, "processing_fee", pJson["processing_fee"], err, false))
            return false;
    }
    if(pJson.isMember("contract"))
    {
        if(!validJsonOfField(6, "contract", pJson["contract"], err, false))
            return false;
    }
    if(pJson.isMember("quote_date"))
    {
        if(!validJsonOfField(7, "quote_date", pJson["quote_date"], err, false))
            return false;
    }
    if(pJson.isMember("quote_price_id"))
    {
        if(!validJsonOfField(8, "quote_price_id", pJson["quote_price_id"], err, false))
            return false;
    }
    if(pJson.isMember("product_category_id"))
    {
        if(!validJsonOfField(9, "product_category_id", pJson["product_category_id"], err, false))
            return false;
    }
    if(pJson.isMember("product_model_id"))
    {
        if(!validJsonOfField(10, "product_model_id", pJson["product_model_id"], err, false))
            return false;
    }
    if(pJson.isMember("is_delete"))
    {
        if(!validJsonOfField(11, "is_delete", pJson["is_delete"], err, false))
            return false;
    }
    if(pJson.isMember("admin_id"))
    {
        if(!validJsonOfField(12, "admin_id", pJson["admin_id"], err, false))
            return false;
    }
    if(pJson.isMember("remark"))
    {
        if(!validJsonOfField(13, "remark", pJson["remark"], err, false))
            return false;
    }
    if(pJson.isMember("shop_id"))
    {
        if(!validJsonOfField(14, "shop_id", pJson["shop_id"], err, false))
            return false;
    }
    if(pJson.isMember("is_cancel"))
    {
        if(!validJsonOfField(15, "is_cancel", pJson["is_cancel"], err, false))
            return false;
    }
    if(pJson.isMember("area"))
    {
        if(!validJsonOfField(16, "area", pJson["area"], err, false))
            return false;
    }
    return true;
}
bool QuotePriceInfo::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                      const std::vector<std::string> &pMasqueradingVector,
                                                      std::string &err)
{
    if(pMasqueradingVector.size() != 17)
    {
        err = "Bad masquerading vector";
        return false;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
            return false;
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
            return false;
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
            return false;
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
            return false;
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
            return false;
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
            return false;
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
            return false;
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, false))
            return false;
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, false))
            return false;
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, false))
            return false;
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, false))
            return false;
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, false))
            return false;
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        if(!validJsonOfField(13, pMasqueradingVector[13], pJson[pMasqueradingVector[13]], err, false))
            return false;
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        if(!validJsonOfField(14, pMasqueradingVector[14], pJson[pMasqueradingVector[14]], err, false))
            return false;
    }
    if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
    {
        if(!validJsonOfField(15, pMasqueradingVector[15], pJson[pMasqueradingVector[15]], err, false))
            return false;
    }
    if(!pMasqueradingVector[16].empty() && pJson.isMember(pMasqueradingVector[16]))
    {
        if(!validJsonOfField(16, pMasqueradingVector[16], pJson[pMasqueradingVector[16]], err, false))
            return false;
    }
    return true;
}
bool QuotePriceInfo::validJsonOfField(size_t index,
                                      const std::string &fieldName,
                                      const Json::Value &pJson, 
                                      std::string &err, 
                                      bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }        
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 50)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 50)";
                return false;               
            }

            break;
        case 4:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 50)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 50)";
                return false;               
            }

            break;
        case 5:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 50)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 50)";
                return false;               
            }

            break;
        case 6:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 50)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 50)";
                return false;               
            }

            break;
        case 7:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 8:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 9:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 10:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 11:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 12:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 13:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;               
            }

            break;
        case 14:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 15:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 16:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 20)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 20)";
                return false;               
            }

            break;
     
        default:
            err="Internal error in the server";
            return false;
            break;
    }
    return true;
}
