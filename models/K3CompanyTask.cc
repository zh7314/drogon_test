/**
 *
 *  K3CompanyTask.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "K3CompanyTask.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::v2;

const std::string K3CompanyTask::Cols::_id = "id";
const std::string K3CompanyTask::Cols::_company_id = "company_id";
const std::string K3CompanyTask::Cols::_company_name = "company_name";
const std::string K3CompanyTask::Cols::_k3_FItemID = "k3_FItemID";
const std::string K3CompanyTask::Cols::_status = "status";
const std::string K3CompanyTask::Cols::_comment = "comment";
const std::string K3CompanyTask::Cols::_remark = "remark";
const std::string K3CompanyTask::Cols::_create_time = "create_time";
const std::string K3CompanyTask::Cols::_update_time = "update_time";
const std::string K3CompanyTask::Cols::_version = "version";
const std::string K3CompanyTask::Cols::_is_cancel = "is_cancel";
const std::string K3CompanyTask::Cols::_type = "type";
const std::string K3CompanyTask::Cols::_is_delete = "is_delete";
const std::string K3CompanyTask::Cols::_shop_id = "shop_id";
const std::string K3CompanyTask::Cols::_admin_id = "admin_id";
const std::string K3CompanyTask::Cols::_company_category = "company_category";
const std::string K3CompanyTask::primaryKeyName = "id";
const bool K3CompanyTask::hasPrimaryKey = true;
const std::string K3CompanyTask::tableName = "k3_company_task";

const std::vector<typename K3CompanyTask::MetaData> K3CompanyTask::metaData_={
{"id","uint64_t","bigint(20) unsigned",8,1,1,1},
{"company_id","uint64_t","bigint(20) unsigned",8,0,0,1},
{"company_name","std::string","varchar(50)",50,0,0,0},
{"k3_FItemID","int64_t","bigint(20)",8,0,0,1},
{"status","int8_t","tinyint(1)",1,0,0,1},
{"comment","std::string","text",0,0,0,0},
{"remark","std::string","varchar(255)",255,0,0,0},
{"create_time","::trantor::Date","datetime",0,0,0,0},
{"update_time","::trantor::Date","datetime",0,0,0,0},
{"version","int32_t","int(11)",4,0,0,1},
{"is_cancel","uint8_t","tinyint(1) unsigned",1,0,0,1},
{"type","uint8_t","tinyint(1) unsigned",1,0,0,1},
{"is_delete","uint8_t","tinyint(1) unsigned",1,0,0,1},
{"shop_id","uint64_t","bigint(20) unsigned",8,0,0,1},
{"admin_id","uint64_t","bigint(20) unsigned",8,0,0,1},
{"company_category","uint8_t","tinyint(1) unsigned",1,0,0,1}
};
const std::string &K3CompanyTask::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
K3CompanyTask::K3CompanyTask(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<uint64_t>(r["id"].as<uint64_t>());
        }
        if(!r["company_id"].isNull())
        {
            companyId_=std::make_shared<uint64_t>(r["company_id"].as<uint64_t>());
        }
        if(!r["company_name"].isNull())
        {
            companyName_=std::make_shared<std::string>(r["company_name"].as<std::string>());
        }
        if(!r["k3_FItemID"].isNull())
        {
            k3Fitemid_=std::make_shared<int64_t>(r["k3_FItemID"].as<int64_t>());
        }
        if(!r["status"].isNull())
        {
            status_=std::make_shared<int8_t>(r["status"].as<int8_t>());
        }
        if(!r["comment"].isNull())
        {
            comment_=std::make_shared<std::string>(r["comment"].as<std::string>());
        }
        if(!r["remark"].isNull())
        {
            remark_=std::make_shared<std::string>(r["remark"].as<std::string>());
        }
        if(!r["create_time"].isNull())
        {
            auto timeStr = r["create_time"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        if(!r["update_time"].isNull())
        {
            auto timeStr = r["update_time"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        if(!r["version"].isNull())
        {
            version_=std::make_shared<int32_t>(r["version"].as<int32_t>());
        }
        if(!r["is_cancel"].isNull())
        {
            isCancel_=std::make_shared<uint8_t>(r["is_cancel"].as<uint8_t>());
        }
        if(!r["type"].isNull())
        {
            type_=std::make_shared<uint8_t>(r["type"].as<uint8_t>());
        }
        if(!r["is_delete"].isNull())
        {
            isDelete_=std::make_shared<uint8_t>(r["is_delete"].as<uint8_t>());
        }
        if(!r["shop_id"].isNull())
        {
            shopId_=std::make_shared<uint64_t>(r["shop_id"].as<uint64_t>());
        }
        if(!r["admin_id"].isNull())
        {
            adminId_=std::make_shared<uint64_t>(r["admin_id"].as<uint64_t>());
        }
        if(!r["company_category"].isNull())
        {
            companyCategory_=std::make_shared<uint8_t>(r["company_category"].as<uint8_t>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 16 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            companyId_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            companyName_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            k3Fitemid_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            status_=std::make_shared<int8_t>(r[index].as<int8_t>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            comment_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            remark_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        index = offset + 8;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        index = offset + 9;
        if(!r[index].isNull())
        {
            version_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 10;
        if(!r[index].isNull())
        {
            isCancel_=std::make_shared<uint8_t>(r[index].as<uint8_t>());
        }
        index = offset + 11;
        if(!r[index].isNull())
        {
            type_=std::make_shared<uint8_t>(r[index].as<uint8_t>());
        }
        index = offset + 12;
        if(!r[index].isNull())
        {
            isDelete_=std::make_shared<uint8_t>(r[index].as<uint8_t>());
        }
        index = offset + 13;
        if(!r[index].isNull())
        {
            shopId_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 14;
        if(!r[index].isNull())
        {
            adminId_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 15;
        if(!r[index].isNull())
        {
            companyCategory_=std::make_shared<uint8_t>(r[index].as<uint8_t>());
        }
    }

}

K3CompanyTask::K3CompanyTask(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 16)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            companyId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[1]].asUInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            companyName_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            k3Fitemid_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[3]].asInt64());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            status_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[4]].asInt64());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            comment_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            remark_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[7]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[8]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            version_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[9]].asInt64());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            isCancel_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[10]].asUInt64());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            type_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[11]].asUInt64());
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            isDelete_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[12]].asUInt64());
        }
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        dirtyFlag_[13] = true;
        if(!pJson[pMasqueradingVector[13]].isNull())
        {
            shopId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[13]].asUInt64());
        }
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        dirtyFlag_[14] = true;
        if(!pJson[pMasqueradingVector[14]].isNull())
        {
            adminId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[14]].asUInt64());
        }
    }
    if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
    {
        dirtyFlag_[15] = true;
        if(!pJson[pMasqueradingVector[15]].isNull())
        {
            companyCategory_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[15]].asUInt64());
        }
    }
}

K3CompanyTask::K3CompanyTask(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson["id"].asUInt64());
        }
    }
    if(pJson.isMember("company_id"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["company_id"].isNull())
        {
            companyId_=std::make_shared<uint64_t>((uint64_t)pJson["company_id"].asUInt64());
        }
    }
    if(pJson.isMember("company_name"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["company_name"].isNull())
        {
            companyName_=std::make_shared<std::string>(pJson["company_name"].asString());
        }
    }
    if(pJson.isMember("k3_FItemID"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["k3_FItemID"].isNull())
        {
            k3Fitemid_=std::make_shared<int64_t>((int64_t)pJson["k3_FItemID"].asInt64());
        }
    }
    if(pJson.isMember("status"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["status"].isNull())
        {
            status_=std::make_shared<int8_t>((int8_t)pJson["status"].asInt64());
        }
    }
    if(pJson.isMember("comment"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["comment"].isNull())
        {
            comment_=std::make_shared<std::string>(pJson["comment"].asString());
        }
    }
    if(pJson.isMember("remark"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["remark"].isNull())
        {
            remark_=std::make_shared<std::string>(pJson["remark"].asString());
        }
    }
    if(pJson.isMember("create_time"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["create_time"].isNull())
        {
            auto timeStr = pJson["create_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("update_time"))
    {
        dirtyFlag_[8]=true;
        if(!pJson["update_time"].isNull())
        {
            auto timeStr = pJson["update_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("version"))
    {
        dirtyFlag_[9]=true;
        if(!pJson["version"].isNull())
        {
            version_=std::make_shared<int32_t>((int32_t)pJson["version"].asInt64());
        }
    }
    if(pJson.isMember("is_cancel"))
    {
        dirtyFlag_[10]=true;
        if(!pJson["is_cancel"].isNull())
        {
            isCancel_=std::make_shared<uint8_t>((uint8_t)pJson["is_cancel"].asUInt64());
        }
    }
    if(pJson.isMember("type"))
    {
        dirtyFlag_[11]=true;
        if(!pJson["type"].isNull())
        {
            type_=std::make_shared<uint8_t>((uint8_t)pJson["type"].asUInt64());
        }
    }
    if(pJson.isMember("is_delete"))
    {
        dirtyFlag_[12]=true;
        if(!pJson["is_delete"].isNull())
        {
            isDelete_=std::make_shared<uint8_t>((uint8_t)pJson["is_delete"].asUInt64());
        }
    }
    if(pJson.isMember("shop_id"))
    {
        dirtyFlag_[13]=true;
        if(!pJson["shop_id"].isNull())
        {
            shopId_=std::make_shared<uint64_t>((uint64_t)pJson["shop_id"].asUInt64());
        }
    }
    if(pJson.isMember("admin_id"))
    {
        dirtyFlag_[14]=true;
        if(!pJson["admin_id"].isNull())
        {
            adminId_=std::make_shared<uint64_t>((uint64_t)pJson["admin_id"].asUInt64());
        }
    }
    if(pJson.isMember("company_category"))
    {
        dirtyFlag_[15]=true;
        if(!pJson["company_category"].isNull())
        {
            companyCategory_=std::make_shared<uint8_t>((uint8_t)pJson["company_category"].asUInt64());
        }
    }
}

void K3CompanyTask::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 16)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            companyId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[1]].asUInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            companyName_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            k3Fitemid_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[3]].asInt64());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            status_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[4]].asInt64());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            comment_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            remark_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[7]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[8]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            version_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[9]].asInt64());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            isCancel_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[10]].asUInt64());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            type_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[11]].asUInt64());
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            isDelete_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[12]].asUInt64());
        }
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        dirtyFlag_[13] = true;
        if(!pJson[pMasqueradingVector[13]].isNull())
        {
            shopId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[13]].asUInt64());
        }
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        dirtyFlag_[14] = true;
        if(!pJson[pMasqueradingVector[14]].isNull())
        {
            adminId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[14]].asUInt64());
        }
    }
    if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
    {
        dirtyFlag_[15] = true;
        if(!pJson[pMasqueradingVector[15]].isNull())
        {
            companyCategory_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[15]].asUInt64());
        }
    }
}
                                                                    
void K3CompanyTask::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson["id"].asUInt64());
        }
    }
    if(pJson.isMember("company_id"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["company_id"].isNull())
        {
            companyId_=std::make_shared<uint64_t>((uint64_t)pJson["company_id"].asUInt64());
        }
    }
    if(pJson.isMember("company_name"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["company_name"].isNull())
        {
            companyName_=std::make_shared<std::string>(pJson["company_name"].asString());
        }
    }
    if(pJson.isMember("k3_FItemID"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["k3_FItemID"].isNull())
        {
            k3Fitemid_=std::make_shared<int64_t>((int64_t)pJson["k3_FItemID"].asInt64());
        }
    }
    if(pJson.isMember("status"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["status"].isNull())
        {
            status_=std::make_shared<int8_t>((int8_t)pJson["status"].asInt64());
        }
    }
    if(pJson.isMember("comment"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["comment"].isNull())
        {
            comment_=std::make_shared<std::string>(pJson["comment"].asString());
        }
    }
    if(pJson.isMember("remark"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["remark"].isNull())
        {
            remark_=std::make_shared<std::string>(pJson["remark"].asString());
        }
    }
    if(pJson.isMember("create_time"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["create_time"].isNull())
        {
            auto timeStr = pJson["create_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("update_time"))
    {
        dirtyFlag_[8] = true;
        if(!pJson["update_time"].isNull())
        {
            auto timeStr = pJson["update_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("version"))
    {
        dirtyFlag_[9] = true;
        if(!pJson["version"].isNull())
        {
            version_=std::make_shared<int32_t>((int32_t)pJson["version"].asInt64());
        }
    }
    if(pJson.isMember("is_cancel"))
    {
        dirtyFlag_[10] = true;
        if(!pJson["is_cancel"].isNull())
        {
            isCancel_=std::make_shared<uint8_t>((uint8_t)pJson["is_cancel"].asUInt64());
        }
    }
    if(pJson.isMember("type"))
    {
        dirtyFlag_[11] = true;
        if(!pJson["type"].isNull())
        {
            type_=std::make_shared<uint8_t>((uint8_t)pJson["type"].asUInt64());
        }
    }
    if(pJson.isMember("is_delete"))
    {
        dirtyFlag_[12] = true;
        if(!pJson["is_delete"].isNull())
        {
            isDelete_=std::make_shared<uint8_t>((uint8_t)pJson["is_delete"].asUInt64());
        }
    }
    if(pJson.isMember("shop_id"))
    {
        dirtyFlag_[13] = true;
        if(!pJson["shop_id"].isNull())
        {
            shopId_=std::make_shared<uint64_t>((uint64_t)pJson["shop_id"].asUInt64());
        }
    }
    if(pJson.isMember("admin_id"))
    {
        dirtyFlag_[14] = true;
        if(!pJson["admin_id"].isNull())
        {
            adminId_=std::make_shared<uint64_t>((uint64_t)pJson["admin_id"].asUInt64());
        }
    }
    if(pJson.isMember("company_category"))
    {
        dirtyFlag_[15] = true;
        if(!pJson["company_category"].isNull())
        {
            companyCategory_=std::make_shared<uint8_t>((uint8_t)pJson["company_category"].asUInt64());
        }
    }
}

const uint64_t &K3CompanyTask::getValueOfId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &K3CompanyTask::getId() const noexcept
{
    return id_;
}
void K3CompanyTask::setId(const uint64_t &pId) noexcept
{
    id_ = std::make_shared<uint64_t>(pId);
    dirtyFlag_[0] = true;
}



const typename K3CompanyTask::PrimaryKeyType & K3CompanyTask::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const uint64_t &K3CompanyTask::getValueOfCompanyId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(companyId_)
        return *companyId_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &K3CompanyTask::getCompanyId() const noexcept
{
    return companyId_;
}
void K3CompanyTask::setCompanyId(const uint64_t &pCompanyId) noexcept
{
    companyId_ = std::make_shared<uint64_t>(pCompanyId);
    dirtyFlag_[1] = true;
}




const std::string &K3CompanyTask::getValueOfCompanyName() const noexcept
{
    const static std::string defaultValue = std::string();
    if(companyName_)
        return *companyName_;
    return defaultValue;
}
const std::shared_ptr<std::string> &K3CompanyTask::getCompanyName() const noexcept
{
    return companyName_;
}
void K3CompanyTask::setCompanyName(const std::string &pCompanyName) noexcept
{
    companyName_ = std::make_shared<std::string>(pCompanyName);
    dirtyFlag_[2] = true;
}
void K3CompanyTask::setCompanyName(std::string &&pCompanyName) noexcept
{
    companyName_ = std::make_shared<std::string>(std::move(pCompanyName));
    dirtyFlag_[2] = true;
}


void K3CompanyTask::setCompanyNameToNull() noexcept
{
    companyName_.reset();
    dirtyFlag_[2] = true;
}


const int64_t &K3CompanyTask::getValueOfK3Fitemid() const noexcept
{
    const static int64_t defaultValue = int64_t();
    if(k3Fitemid_)
        return *k3Fitemid_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &K3CompanyTask::getK3Fitemid() const noexcept
{
    return k3Fitemid_;
}
void K3CompanyTask::setK3Fitemid(const int64_t &pK3Fitemid) noexcept
{
    k3Fitemid_ = std::make_shared<int64_t>(pK3Fitemid);
    dirtyFlag_[3] = true;
}




const int8_t &K3CompanyTask::getValueOfStatus() const noexcept
{
    const static int8_t defaultValue = int8_t();
    if(status_)
        return *status_;
    return defaultValue;
}
const std::shared_ptr<int8_t> &K3CompanyTask::getStatus() const noexcept
{
    return status_;
}
void K3CompanyTask::setStatus(const int8_t &pStatus) noexcept
{
    status_ = std::make_shared<int8_t>(pStatus);
    dirtyFlag_[4] = true;
}




const std::string &K3CompanyTask::getValueOfComment() const noexcept
{
    const static std::string defaultValue = std::string();
    if(comment_)
        return *comment_;
    return defaultValue;
}
const std::shared_ptr<std::string> &K3CompanyTask::getComment() const noexcept
{
    return comment_;
}
void K3CompanyTask::setComment(const std::string &pComment) noexcept
{
    comment_ = std::make_shared<std::string>(pComment);
    dirtyFlag_[5] = true;
}
void K3CompanyTask::setComment(std::string &&pComment) noexcept
{
    comment_ = std::make_shared<std::string>(std::move(pComment));
    dirtyFlag_[5] = true;
}


void K3CompanyTask::setCommentToNull() noexcept
{
    comment_.reset();
    dirtyFlag_[5] = true;
}


const std::string &K3CompanyTask::getValueOfRemark() const noexcept
{
    const static std::string defaultValue = std::string();
    if(remark_)
        return *remark_;
    return defaultValue;
}
const std::shared_ptr<std::string> &K3CompanyTask::getRemark() const noexcept
{
    return remark_;
}
void K3CompanyTask::setRemark(const std::string &pRemark) noexcept
{
    remark_ = std::make_shared<std::string>(pRemark);
    dirtyFlag_[6] = true;
}
void K3CompanyTask::setRemark(std::string &&pRemark) noexcept
{
    remark_ = std::make_shared<std::string>(std::move(pRemark));
    dirtyFlag_[6] = true;
}


void K3CompanyTask::setRemarkToNull() noexcept
{
    remark_.reset();
    dirtyFlag_[6] = true;
}


const ::trantor::Date &K3CompanyTask::getValueOfCreateTime() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(createTime_)
        return *createTime_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &K3CompanyTask::getCreateTime() const noexcept
{
    return createTime_;
}
void K3CompanyTask::setCreateTime(const ::trantor::Date &pCreateTime) noexcept
{
    createTime_ = std::make_shared<::trantor::Date>(pCreateTime);
    dirtyFlag_[7] = true;
}


void K3CompanyTask::setCreateTimeToNull() noexcept
{
    createTime_.reset();
    dirtyFlag_[7] = true;
}


const ::trantor::Date &K3CompanyTask::getValueOfUpdateTime() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(updateTime_)
        return *updateTime_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &K3CompanyTask::getUpdateTime() const noexcept
{
    return updateTime_;
}
void K3CompanyTask::setUpdateTime(const ::trantor::Date &pUpdateTime) noexcept
{
    updateTime_ = std::make_shared<::trantor::Date>(pUpdateTime);
    dirtyFlag_[8] = true;
}


void K3CompanyTask::setUpdateTimeToNull() noexcept
{
    updateTime_.reset();
    dirtyFlag_[8] = true;
}


const int32_t &K3CompanyTask::getValueOfVersion() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(version_)
        return *version_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &K3CompanyTask::getVersion() const noexcept
{
    return version_;
}
void K3CompanyTask::setVersion(const int32_t &pVersion) noexcept
{
    version_ = std::make_shared<int32_t>(pVersion);
    dirtyFlag_[9] = true;
}




const uint8_t &K3CompanyTask::getValueOfIsCancel() const noexcept
{
    const static uint8_t defaultValue = uint8_t();
    if(isCancel_)
        return *isCancel_;
    return defaultValue;
}
const std::shared_ptr<uint8_t> &K3CompanyTask::getIsCancel() const noexcept
{
    return isCancel_;
}
void K3CompanyTask::setIsCancel(const uint8_t &pIsCancel) noexcept
{
    isCancel_ = std::make_shared<uint8_t>(pIsCancel);
    dirtyFlag_[10] = true;
}




const uint8_t &K3CompanyTask::getValueOfType() const noexcept
{
    const static uint8_t defaultValue = uint8_t();
    if(type_)
        return *type_;
    return defaultValue;
}
const std::shared_ptr<uint8_t> &K3CompanyTask::getType() const noexcept
{
    return type_;
}
void K3CompanyTask::setType(const uint8_t &pType) noexcept
{
    type_ = std::make_shared<uint8_t>(pType);
    dirtyFlag_[11] = true;
}




const uint8_t &K3CompanyTask::getValueOfIsDelete() const noexcept
{
    const static uint8_t defaultValue = uint8_t();
    if(isDelete_)
        return *isDelete_;
    return defaultValue;
}
const std::shared_ptr<uint8_t> &K3CompanyTask::getIsDelete() const noexcept
{
    return isDelete_;
}
void K3CompanyTask::setIsDelete(const uint8_t &pIsDelete) noexcept
{
    isDelete_ = std::make_shared<uint8_t>(pIsDelete);
    dirtyFlag_[12] = true;
}




const uint64_t &K3CompanyTask::getValueOfShopId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(shopId_)
        return *shopId_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &K3CompanyTask::getShopId() const noexcept
{
    return shopId_;
}
void K3CompanyTask::setShopId(const uint64_t &pShopId) noexcept
{
    shopId_ = std::make_shared<uint64_t>(pShopId);
    dirtyFlag_[13] = true;
}




const uint64_t &K3CompanyTask::getValueOfAdminId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(adminId_)
        return *adminId_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &K3CompanyTask::getAdminId() const noexcept
{
    return adminId_;
}
void K3CompanyTask::setAdminId(const uint64_t &pAdminId) noexcept
{
    adminId_ = std::make_shared<uint64_t>(pAdminId);
    dirtyFlag_[14] = true;
}




const uint8_t &K3CompanyTask::getValueOfCompanyCategory() const noexcept
{
    const static uint8_t defaultValue = uint8_t();
    if(companyCategory_)
        return *companyCategory_;
    return defaultValue;
}
const std::shared_ptr<uint8_t> &K3CompanyTask::getCompanyCategory() const noexcept
{
    return companyCategory_;
}
void K3CompanyTask::setCompanyCategory(const uint8_t &pCompanyCategory) noexcept
{
    companyCategory_ = std::make_shared<uint8_t>(pCompanyCategory);
    dirtyFlag_[15] = true;
}




void K3CompanyTask::updateId(const uint64_t id)
{
    id_ = std::make_shared<uint64_t>(id);
}

const std::vector<std::string> &K3CompanyTask::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "company_id",
        "company_name",
        "k3_FItemID",
        "status",
        "comment",
        "remark",
        "create_time",
        "update_time",
        "version",
        "is_cancel",
        "type",
        "is_delete",
        "shop_id",
        "admin_id",
        "company_category"
    };
    return inCols;
}

void K3CompanyTask::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getCompanyId())
        {
            binder << getValueOfCompanyId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getCompanyName())
        {
            binder << getValueOfCompanyName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getK3Fitemid())
        {
            binder << getValueOfK3Fitemid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getStatus())
        {
            binder << getValueOfStatus();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getComment())
        {
            binder << getValueOfComment();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getRemark())
        {
            binder << getValueOfRemark();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getCreateTime())
        {
            binder << getValueOfCreateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getUpdateTime())
        {
            binder << getValueOfUpdateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getVersion())
        {
            binder << getValueOfVersion();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getIsCancel())
        {
            binder << getValueOfIsCancel();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getType())
        {
            binder << getValueOfType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getIsDelete())
        {
            binder << getValueOfIsDelete();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[13])
    {
        if(getShopId())
        {
            binder << getValueOfShopId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[14])
    {
        if(getAdminId())
        {
            binder << getValueOfAdminId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[15])
    {
        if(getCompanyCategory())
        {
            binder << getValueOfCompanyCategory();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> K3CompanyTask::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    if(dirtyFlag_[8])
    {
        ret.push_back(getColumnName(8));
    }
    if(dirtyFlag_[9])
    {
        ret.push_back(getColumnName(9));
    }
    if(dirtyFlag_[10])
    {
        ret.push_back(getColumnName(10));
    }
    if(dirtyFlag_[11])
    {
        ret.push_back(getColumnName(11));
    }
    if(dirtyFlag_[12])
    {
        ret.push_back(getColumnName(12));
    }
    if(dirtyFlag_[13])
    {
        ret.push_back(getColumnName(13));
    }
    if(dirtyFlag_[14])
    {
        ret.push_back(getColumnName(14));
    }
    if(dirtyFlag_[15])
    {
        ret.push_back(getColumnName(15));
    }
    return ret;
}

void K3CompanyTask::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getCompanyId())
        {
            binder << getValueOfCompanyId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getCompanyName())
        {
            binder << getValueOfCompanyName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getK3Fitemid())
        {
            binder << getValueOfK3Fitemid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getStatus())
        {
            binder << getValueOfStatus();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getComment())
        {
            binder << getValueOfComment();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getRemark())
        {
            binder << getValueOfRemark();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getCreateTime())
        {
            binder << getValueOfCreateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getUpdateTime())
        {
            binder << getValueOfUpdateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getVersion())
        {
            binder << getValueOfVersion();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getIsCancel())
        {
            binder << getValueOfIsCancel();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getType())
        {
            binder << getValueOfType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getIsDelete())
        {
            binder << getValueOfIsDelete();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[13])
    {
        if(getShopId())
        {
            binder << getValueOfShopId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[14])
    {
        if(getAdminId())
        {
            binder << getValueOfAdminId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[15])
    {
        if(getCompanyCategory())
        {
            binder << getValueOfCompanyCategory();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value K3CompanyTask::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=(Json::UInt64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getCompanyId())
    {
        ret["company_id"]=(Json::UInt64)getValueOfCompanyId();
    }
    else
    {
        ret["company_id"]=Json::Value();
    }
    if(getCompanyName())
    {
        ret["company_name"]=getValueOfCompanyName();
    }
    else
    {
        ret["company_name"]=Json::Value();
    }
    if(getK3Fitemid())
    {
        ret["k3_FItemID"]=(Json::Int64)getValueOfK3Fitemid();
    }
    else
    {
        ret["k3_FItemID"]=Json::Value();
    }
    if(getStatus())
    {
        ret["status"]=getValueOfStatus();
    }
    else
    {
        ret["status"]=Json::Value();
    }
    if(getComment())
    {
        ret["comment"]=getValueOfComment();
    }
    else
    {
        ret["comment"]=Json::Value();
    }
    if(getRemark())
    {
        ret["remark"]=getValueOfRemark();
    }
    else
    {
        ret["remark"]=Json::Value();
    }
    if(getCreateTime())
    {
        ret["create_time"]=getCreateTime()->toDbStringLocal();
    }
    else
    {
        ret["create_time"]=Json::Value();
    }
    if(getUpdateTime())
    {
        ret["update_time"]=getUpdateTime()->toDbStringLocal();
    }
    else
    {
        ret["update_time"]=Json::Value();
    }
    if(getVersion())
    {
        ret["version"]=getValueOfVersion();
    }
    else
    {
        ret["version"]=Json::Value();
    }
    if(getIsCancel())
    {
        ret["is_cancel"]=getValueOfIsCancel();
    }
    else
    {
        ret["is_cancel"]=Json::Value();
    }
    if(getType())
    {
        ret["type"]=getValueOfType();
    }
    else
    {
        ret["type"]=Json::Value();
    }
    if(getIsDelete())
    {
        ret["is_delete"]=getValueOfIsDelete();
    }
    else
    {
        ret["is_delete"]=Json::Value();
    }
    if(getShopId())
    {
        ret["shop_id"]=(Json::UInt64)getValueOfShopId();
    }
    else
    {
        ret["shop_id"]=Json::Value();
    }
    if(getAdminId())
    {
        ret["admin_id"]=(Json::UInt64)getValueOfAdminId();
    }
    else
    {
        ret["admin_id"]=Json::Value();
    }
    if(getCompanyCategory())
    {
        ret["company_category"]=getValueOfCompanyCategory();
    }
    else
    {
        ret["company_category"]=Json::Value();
    }
    return ret;
}

Json::Value K3CompanyTask::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 16)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=(Json::UInt64)getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getCompanyId())
            {
                ret[pMasqueradingVector[1]]=(Json::UInt64)getValueOfCompanyId();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getCompanyName())
            {
                ret[pMasqueradingVector[2]]=getValueOfCompanyName();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getK3Fitemid())
            {
                ret[pMasqueradingVector[3]]=(Json::Int64)getValueOfK3Fitemid();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getStatus())
            {
                ret[pMasqueradingVector[4]]=getValueOfStatus();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getComment())
            {
                ret[pMasqueradingVector[5]]=getValueOfComment();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getRemark())
            {
                ret[pMasqueradingVector[6]]=getValueOfRemark();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getCreateTime())
            {
                ret[pMasqueradingVector[7]]=getCreateTime()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[8].empty())
        {
            if(getUpdateTime())
            {
                ret[pMasqueradingVector[8]]=getUpdateTime()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[8]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[9].empty())
        {
            if(getVersion())
            {
                ret[pMasqueradingVector[9]]=getValueOfVersion();
            }
            else
            {
                ret[pMasqueradingVector[9]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[10].empty())
        {
            if(getIsCancel())
            {
                ret[pMasqueradingVector[10]]=getValueOfIsCancel();
            }
            else
            {
                ret[pMasqueradingVector[10]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[11].empty())
        {
            if(getType())
            {
                ret[pMasqueradingVector[11]]=getValueOfType();
            }
            else
            {
                ret[pMasqueradingVector[11]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[12].empty())
        {
            if(getIsDelete())
            {
                ret[pMasqueradingVector[12]]=getValueOfIsDelete();
            }
            else
            {
                ret[pMasqueradingVector[12]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[13].empty())
        {
            if(getShopId())
            {
                ret[pMasqueradingVector[13]]=(Json::UInt64)getValueOfShopId();
            }
            else
            {
                ret[pMasqueradingVector[13]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[14].empty())
        {
            if(getAdminId())
            {
                ret[pMasqueradingVector[14]]=(Json::UInt64)getValueOfAdminId();
            }
            else
            {
                ret[pMasqueradingVector[14]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[15].empty())
        {
            if(getCompanyCategory())
            {
                ret[pMasqueradingVector[15]]=getValueOfCompanyCategory();
            }
            else
            {
                ret[pMasqueradingVector[15]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=(Json::UInt64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getCompanyId())
    {
        ret["company_id"]=(Json::UInt64)getValueOfCompanyId();
    }
    else
    {
        ret["company_id"]=Json::Value();
    }
    if(getCompanyName())
    {
        ret["company_name"]=getValueOfCompanyName();
    }
    else
    {
        ret["company_name"]=Json::Value();
    }
    if(getK3Fitemid())
    {
        ret["k3_FItemID"]=(Json::Int64)getValueOfK3Fitemid();
    }
    else
    {
        ret["k3_FItemID"]=Json::Value();
    }
    if(getStatus())
    {
        ret["status"]=getValueOfStatus();
    }
    else
    {
        ret["status"]=Json::Value();
    }
    if(getComment())
    {
        ret["comment"]=getValueOfComment();
    }
    else
    {
        ret["comment"]=Json::Value();
    }
    if(getRemark())
    {
        ret["remark"]=getValueOfRemark();
    }
    else
    {
        ret["remark"]=Json::Value();
    }
    if(getCreateTime())
    {
        ret["create_time"]=getCreateTime()->toDbStringLocal();
    }
    else
    {
        ret["create_time"]=Json::Value();
    }
    if(getUpdateTime())
    {
        ret["update_time"]=getUpdateTime()->toDbStringLocal();
    }
    else
    {
        ret["update_time"]=Json::Value();
    }
    if(getVersion())
    {
        ret["version"]=getValueOfVersion();
    }
    else
    {
        ret["version"]=Json::Value();
    }
    if(getIsCancel())
    {
        ret["is_cancel"]=getValueOfIsCancel();
    }
    else
    {
        ret["is_cancel"]=Json::Value();
    }
    if(getType())
    {
        ret["type"]=getValueOfType();
    }
    else
    {
        ret["type"]=Json::Value();
    }
    if(getIsDelete())
    {
        ret["is_delete"]=getValueOfIsDelete();
    }
    else
    {
        ret["is_delete"]=Json::Value();
    }
    if(getShopId())
    {
        ret["shop_id"]=(Json::UInt64)getValueOfShopId();
    }
    else
    {
        ret["shop_id"]=Json::Value();
    }
    if(getAdminId())
    {
        ret["admin_id"]=(Json::UInt64)getValueOfAdminId();
    }
    else
    {
        ret["admin_id"]=Json::Value();
    }
    if(getCompanyCategory())
    {
        ret["company_category"]=getValueOfCompanyCategory();
    }
    else
    {
        ret["company_category"]=Json::Value();
    }
    return ret;
}

bool K3CompanyTask::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("company_id"))
    {
        if(!validJsonOfField(1, "company_id", pJson["company_id"], err, true))
            return false;
    }
    if(pJson.isMember("company_name"))
    {
        if(!validJsonOfField(2, "company_name", pJson["company_name"], err, true))
            return false;
    }
    if(pJson.isMember("k3_FItemID"))
    {
        if(!validJsonOfField(3, "k3_FItemID", pJson["k3_FItemID"], err, true))
            return false;
    }
    if(pJson.isMember("status"))
    {
        if(!validJsonOfField(4, "status", pJson["status"], err, true))
            return false;
    }
    if(pJson.isMember("comment"))
    {
        if(!validJsonOfField(5, "comment", pJson["comment"], err, true))
            return false;
    }
    if(pJson.isMember("remark"))
    {
        if(!validJsonOfField(6, "remark", pJson["remark"], err, true))
            return false;
    }
    if(pJson.isMember("create_time"))
    {
        if(!validJsonOfField(7, "create_time", pJson["create_time"], err, true))
            return false;
    }
    if(pJson.isMember("update_time"))
    {
        if(!validJsonOfField(8, "update_time", pJson["update_time"], err, true))
            return false;
    }
    if(pJson.isMember("version"))
    {
        if(!validJsonOfField(9, "version", pJson["version"], err, true))
            return false;
    }
    if(pJson.isMember("is_cancel"))
    {
        if(!validJsonOfField(10, "is_cancel", pJson["is_cancel"], err, true))
            return false;
    }
    if(pJson.isMember("type"))
    {
        if(!validJsonOfField(11, "type", pJson["type"], err, true))
            return false;
    }
    if(pJson.isMember("is_delete"))
    {
        if(!validJsonOfField(12, "is_delete", pJson["is_delete"], err, true))
            return false;
    }
    if(pJson.isMember("shop_id"))
    {
        if(!validJsonOfField(13, "shop_id", pJson["shop_id"], err, true))
            return false;
    }
    if(pJson.isMember("admin_id"))
    {
        if(!validJsonOfField(14, "admin_id", pJson["admin_id"], err, true))
            return false;
    }
    if(pJson.isMember("company_category"))
    {
        if(!validJsonOfField(15, "company_category", pJson["company_category"], err, true))
            return false;
    }
    return true;
}
bool K3CompanyTask::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                       const std::vector<std::string> &pMasqueradingVector,
                                                       std::string &err)
{
    if(pMasqueradingVector.size() != 16)
    {
        err = "Bad masquerading vector";
        return false;
    }
    if(!pMasqueradingVector[0].empty())
    {
        if(pJson.isMember(pMasqueradingVector[0]))
        {
            if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[1].empty())
    {
        if(pJson.isMember(pMasqueradingVector[1]))
        {
            if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[2].empty())
    {
        if(pJson.isMember(pMasqueradingVector[2]))
        {
            if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[3].empty())
    {
        if(pJson.isMember(pMasqueradingVector[3]))
        {
            if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[4].empty())
    {
        if(pJson.isMember(pMasqueradingVector[4]))
        {
            if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[5].empty())
    {
        if(pJson.isMember(pMasqueradingVector[5]))
        {
            if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[6].empty())
    {
        if(pJson.isMember(pMasqueradingVector[6]))
        {
            if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[7].empty())
    {
        if(pJson.isMember(pMasqueradingVector[7]))
        {
            if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[8].empty())
    {
        if(pJson.isMember(pMasqueradingVector[8]))
        {
            if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[9].empty())
    {
        if(pJson.isMember(pMasqueradingVector[9]))
        {
            if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[10].empty())
    {
        if(pJson.isMember(pMasqueradingVector[10]))
        {
            if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[11].empty())
    {
        if(pJson.isMember(pMasqueradingVector[11]))
        {
            if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[12].empty())
    {
        if(pJson.isMember(pMasqueradingVector[12]))
        {
            if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[13].empty())
    {
        if(pJson.isMember(pMasqueradingVector[13]))
        {
            if(!validJsonOfField(13, pMasqueradingVector[13], pJson[pMasqueradingVector[13]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[14].empty())
    {
        if(pJson.isMember(pMasqueradingVector[14]))
        {
            if(!validJsonOfField(14, pMasqueradingVector[14], pJson[pMasqueradingVector[14]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[15].empty())
    {
        if(pJson.isMember(pMasqueradingVector[15]))
        {
            if(!validJsonOfField(15, pMasqueradingVector[15], pJson[pMasqueradingVector[15]], err, true))
                return false;
        }
    }
    return true;
}
bool K3CompanyTask::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("company_id"))
    {
        if(!validJsonOfField(1, "company_id", pJson["company_id"], err, false))
            return false;
    }
    if(pJson.isMember("company_name"))
    {
        if(!validJsonOfField(2, "company_name", pJson["company_name"], err, false))
            return false;
    }
    if(pJson.isMember("k3_FItemID"))
    {
        if(!validJsonOfField(3, "k3_FItemID", pJson["k3_FItemID"], err, false))
            return false;
    }
    if(pJson.isMember("status"))
    {
        if(!validJsonOfField(4, "status", pJson["status"], err, false))
            return false;
    }
    if(pJson.isMember("comment"))
    {
        if(!validJsonOfField(5, "comment", pJson["comment"], err, false))
            return false;
    }
    if(pJson.isMember("remark"))
    {
        if(!validJsonOfField(6, "remark", pJson["remark"], err, false))
            return false;
    }
    if(pJson.isMember("create_time"))
    {
        if(!validJsonOfField(7, "create_time", pJson["create_time"], err, false))
            return false;
    }
    if(pJson.isMember("update_time"))
    {
        if(!validJsonOfField(8, "update_time", pJson["update_time"], err, false))
            return false;
    }
    if(pJson.isMember("version"))
    {
        if(!validJsonOfField(9, "version", pJson["version"], err, false))
            return false;
    }
    if(pJson.isMember("is_cancel"))
    {
        if(!validJsonOfField(10, "is_cancel", pJson["is_cancel"], err, false))
            return false;
    }
    if(pJson.isMember("type"))
    {
        if(!validJsonOfField(11, "type", pJson["type"], err, false))
            return false;
    }
    if(pJson.isMember("is_delete"))
    {
        if(!validJsonOfField(12, "is_delete", pJson["is_delete"], err, false))
            return false;
    }
    if(pJson.isMember("shop_id"))
    {
        if(!validJsonOfField(13, "shop_id", pJson["shop_id"], err, false))
            return false;
    }
    if(pJson.isMember("admin_id"))
    {
        if(!validJsonOfField(14, "admin_id", pJson["admin_id"], err, false))
            return false;
    }
    if(pJson.isMember("company_category"))
    {
        if(!validJsonOfField(15, "company_category", pJson["company_category"], err, false))
            return false;
    }
    return true;
}
bool K3CompanyTask::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                     const std::vector<std::string> &pMasqueradingVector,
                                                     std::string &err)
{
    if(pMasqueradingVector.size() != 16)
    {
        err = "Bad masquerading vector";
        return false;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
            return false;
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
            return false;
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
            return false;
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
            return false;
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
            return false;
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
            return false;
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
            return false;
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, false))
            return false;
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, false))
            return false;
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, false))
            return false;
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, false))
            return false;
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, false))
            return false;
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        if(!validJsonOfField(13, pMasqueradingVector[13], pJson[pMasqueradingVector[13]], err, false))
            return false;
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        if(!validJsonOfField(14, pMasqueradingVector[14], pJson[pMasqueradingVector[14]], err, false))
            return false;
    }
    if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
    {
        if(!validJsonOfField(15, pMasqueradingVector[15], pJson[pMasqueradingVector[15]], err, false))
            return false;
    }
    return true;
}
bool K3CompanyTask::validJsonOfField(size_t index,
                                     const std::string &fieldName,
                                     const Json::Value &pJson, 
                                     std::string &err, 
                                     bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }        
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 50)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 50)";
                return false;               
            }

            break;
        case 3:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 5:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 6:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;               
            }

            break;
        case 7:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 8:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 9:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 10:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 11:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 12:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 13:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 14:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 15:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
     
        default:
            err="Internal error in the server";
            return false;
            break;
    }
    return true;
}
