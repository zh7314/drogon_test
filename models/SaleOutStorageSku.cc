/**
 *
 *  SaleOutStorageSku.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "SaleOutStorageSku.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::v2;

const std::string SaleOutStorageSku::Cols::_id = "id";
const std::string SaleOutStorageSku::Cols::_shop_id = "shop_id";
const std::string SaleOutStorageSku::Cols::_admin_id = "admin_id";
const std::string SaleOutStorageSku::Cols::_sale_out_storage_id = "sale_out_storage_id";
const std::string SaleOutStorageSku::Cols::_sale_order_sku_id = "sale_order_sku_id";
const std::string SaleOutStorageSku::Cols::_purchase_in_storage_sku_id = "purchase_in_storage_sku_id";
const std::string SaleOutStorageSku::Cols::_storage_number = "storage_number";
const std::string SaleOutStorageSku::Cols::_product_id = "product_id";
const std::string SaleOutStorageSku::Cols::_loss_number = "loss_number";
const std::string SaleOutStorageSku::Cols::_is_delete = "is_delete";
const std::string SaleOutStorageSku::Cols::_remark = "remark";
const std::string SaleOutStorageSku::Cols::_create_time = "create_time";
const std::string SaleOutStorageSku::Cols::_update_time = "update_time";
const std::string SaleOutStorageSku::Cols::_pay_number = "pay_number";
const std::string SaleOutStorageSku::Cols::_settle_number = "settle_number";
const std::string SaleOutStorageSku::Cols::_count_storage_number = "count_storage_number";
const std::string SaleOutStorageSku::Cols::_storage_price = "storage_price";
const std::string SaleOutStorageSku::Cols::_storage_status = "storage_status";
const std::string SaleOutStorageSku::Cols::_company_id = "company_id";
const std::string SaleOutStorageSku::Cols::_storage_type = "storage_type";
const std::string SaleOutStorageSku::Cols::_sale_out_storage_sku_change_id = "sale_out_storage_sku_change_id";
const std::string SaleOutStorageSku::Cols::_sale_out_storage_sku_bind_id = "sale_out_storage_sku_bind_id";
const std::string SaleOutStorageSku::Cols::_sale_out_storage_sku_return_id = "sale_out_storage_sku_return_id";
const std::string SaleOutStorageSku::Cols::_actual_storage_amount = "actual_storage_amount";
const std::string SaleOutStorageSku::Cols::_sale_order_id = "sale_order_id";
const std::string SaleOutStorageSku::Cols::_sale_order_key = "sale_order_key";
const std::string SaleOutStorageSku::Cols::_check_invoice_number = "check_invoice_number";
const std::string SaleOutStorageSku::primaryKeyName = "id";
const bool SaleOutStorageSku::hasPrimaryKey = true;
const std::string SaleOutStorageSku::tableName = "sale_out_storage_sku";

const std::vector<typename SaleOutStorageSku::MetaData> SaleOutStorageSku::metaData_={
{"id","uint64_t","bigint(20) unsigned",8,1,1,1},
{"shop_id","uint64_t","bigint(20) unsigned",8,0,0,1},
{"admin_id","uint64_t","bigint(20) unsigned",8,0,0,1},
{"sale_out_storage_id","uint64_t","bigint(20) unsigned",8,0,0,1},
{"sale_order_sku_id","uint64_t","bigint(20) unsigned",8,0,0,1},
{"purchase_in_storage_sku_id","uint64_t","bigint(20) unsigned",8,0,0,1},
{"storage_number","std::string","decimal(32,5)",0,0,0,1},
{"product_id","int64_t","bigint(20)",8,0,0,1},
{"loss_number","std::string","decimal(32,5)",0,0,0,1},
{"is_delete","uint8_t","tinyint(1) unsigned",1,0,0,1},
{"remark","std::string","varchar(255)",255,0,0,0},
{"create_time","::trantor::Date","datetime",0,0,0,1},
{"update_time","::trantor::Date","datetime",0,0,0,1},
{"pay_number","std::string","decimal(32,5)",0,0,0,1},
{"settle_number","std::string","decimal(32,5)",0,0,0,1},
{"count_storage_number","std::string","decimal(32,5)",0,0,0,1},
{"storage_price","std::string","decimal(32,5)",0,0,0,1},
{"storage_status","int8_t","tinyint(1)",1,0,0,1},
{"company_id","int64_t","bigint(20)",8,0,0,1},
{"storage_type","int8_t","tinyint(1)",1,0,0,1},
{"sale_out_storage_sku_change_id","int64_t","bigint(20)",8,0,0,1},
{"sale_out_storage_sku_bind_id","int64_t","bigint(20)",8,0,0,1},
{"sale_out_storage_sku_return_id","uint64_t","bigint(20) unsigned",8,0,0,1},
{"actual_storage_amount","std::string","decimal(32,2)",0,0,0,1},
{"sale_order_id","int64_t","bigint(20)",8,0,0,1},
{"sale_order_key","std::string","varchar(20)",20,0,0,0},
{"check_invoice_number","std::string","decimal(32,5)",0,0,0,1}
};
const std::string &SaleOutStorageSku::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
SaleOutStorageSku::SaleOutStorageSku(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<uint64_t>(r["id"].as<uint64_t>());
        }
        if(!r["shop_id"].isNull())
        {
            shopId_=std::make_shared<uint64_t>(r["shop_id"].as<uint64_t>());
        }
        if(!r["admin_id"].isNull())
        {
            adminId_=std::make_shared<uint64_t>(r["admin_id"].as<uint64_t>());
        }
        if(!r["sale_out_storage_id"].isNull())
        {
            saleOutStorageId_=std::make_shared<uint64_t>(r["sale_out_storage_id"].as<uint64_t>());
        }
        if(!r["sale_order_sku_id"].isNull())
        {
            saleOrderSkuId_=std::make_shared<uint64_t>(r["sale_order_sku_id"].as<uint64_t>());
        }
        if(!r["purchase_in_storage_sku_id"].isNull())
        {
            purchaseInStorageSkuId_=std::make_shared<uint64_t>(r["purchase_in_storage_sku_id"].as<uint64_t>());
        }
        if(!r["storage_number"].isNull())
        {
            storageNumber_=std::make_shared<std::string>(r["storage_number"].as<std::string>());
        }
        if(!r["product_id"].isNull())
        {
            productId_=std::make_shared<int64_t>(r["product_id"].as<int64_t>());
        }
        if(!r["loss_number"].isNull())
        {
            lossNumber_=std::make_shared<std::string>(r["loss_number"].as<std::string>());
        }
        if(!r["is_delete"].isNull())
        {
            isDelete_=std::make_shared<uint8_t>(r["is_delete"].as<uint8_t>());
        }
        if(!r["remark"].isNull())
        {
            remark_=std::make_shared<std::string>(r["remark"].as<std::string>());
        }
        if(!r["create_time"].isNull())
        {
            auto timeStr = r["create_time"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        if(!r["update_time"].isNull())
        {
            auto timeStr = r["update_time"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        if(!r["pay_number"].isNull())
        {
            payNumber_=std::make_shared<std::string>(r["pay_number"].as<std::string>());
        }
        if(!r["settle_number"].isNull())
        {
            settleNumber_=std::make_shared<std::string>(r["settle_number"].as<std::string>());
        }
        if(!r["count_storage_number"].isNull())
        {
            countStorageNumber_=std::make_shared<std::string>(r["count_storage_number"].as<std::string>());
        }
        if(!r["storage_price"].isNull())
        {
            storagePrice_=std::make_shared<std::string>(r["storage_price"].as<std::string>());
        }
        if(!r["storage_status"].isNull())
        {
            storageStatus_=std::make_shared<int8_t>(r["storage_status"].as<int8_t>());
        }
        if(!r["company_id"].isNull())
        {
            companyId_=std::make_shared<int64_t>(r["company_id"].as<int64_t>());
        }
        if(!r["storage_type"].isNull())
        {
            storageType_=std::make_shared<int8_t>(r["storage_type"].as<int8_t>());
        }
        if(!r["sale_out_storage_sku_change_id"].isNull())
        {
            saleOutStorageSkuChangeId_=std::make_shared<int64_t>(r["sale_out_storage_sku_change_id"].as<int64_t>());
        }
        if(!r["sale_out_storage_sku_bind_id"].isNull())
        {
            saleOutStorageSkuBindId_=std::make_shared<int64_t>(r["sale_out_storage_sku_bind_id"].as<int64_t>());
        }
        if(!r["sale_out_storage_sku_return_id"].isNull())
        {
            saleOutStorageSkuReturnId_=std::make_shared<uint64_t>(r["sale_out_storage_sku_return_id"].as<uint64_t>());
        }
        if(!r["actual_storage_amount"].isNull())
        {
            actualStorageAmount_=std::make_shared<std::string>(r["actual_storage_amount"].as<std::string>());
        }
        if(!r["sale_order_id"].isNull())
        {
            saleOrderId_=std::make_shared<int64_t>(r["sale_order_id"].as<int64_t>());
        }
        if(!r["sale_order_key"].isNull())
        {
            saleOrderKey_=std::make_shared<std::string>(r["sale_order_key"].as<std::string>());
        }
        if(!r["check_invoice_number"].isNull())
        {
            checkInvoiceNumber_=std::make_shared<std::string>(r["check_invoice_number"].as<std::string>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 27 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            shopId_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            adminId_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            saleOutStorageId_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            saleOrderSkuId_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            purchaseInStorageSkuId_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            storageNumber_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            productId_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 8;
        if(!r[index].isNull())
        {
            lossNumber_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 9;
        if(!r[index].isNull())
        {
            isDelete_=std::make_shared<uint8_t>(r[index].as<uint8_t>());
        }
        index = offset + 10;
        if(!r[index].isNull())
        {
            remark_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 11;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        index = offset + 12;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        index = offset + 13;
        if(!r[index].isNull())
        {
            payNumber_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 14;
        if(!r[index].isNull())
        {
            settleNumber_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 15;
        if(!r[index].isNull())
        {
            countStorageNumber_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 16;
        if(!r[index].isNull())
        {
            storagePrice_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 17;
        if(!r[index].isNull())
        {
            storageStatus_=std::make_shared<int8_t>(r[index].as<int8_t>());
        }
        index = offset + 18;
        if(!r[index].isNull())
        {
            companyId_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 19;
        if(!r[index].isNull())
        {
            storageType_=std::make_shared<int8_t>(r[index].as<int8_t>());
        }
        index = offset + 20;
        if(!r[index].isNull())
        {
            saleOutStorageSkuChangeId_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 21;
        if(!r[index].isNull())
        {
            saleOutStorageSkuBindId_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 22;
        if(!r[index].isNull())
        {
            saleOutStorageSkuReturnId_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 23;
        if(!r[index].isNull())
        {
            actualStorageAmount_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 24;
        if(!r[index].isNull())
        {
            saleOrderId_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 25;
        if(!r[index].isNull())
        {
            saleOrderKey_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 26;
        if(!r[index].isNull())
        {
            checkInvoiceNumber_=std::make_shared<std::string>(r[index].as<std::string>());
        }
    }

}

SaleOutStorageSku::SaleOutStorageSku(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 27)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            shopId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[1]].asUInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            adminId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[2]].asUInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            saleOutStorageId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[3]].asUInt64());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            saleOrderSkuId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[4]].asUInt64());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            purchaseInStorageSkuId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[5]].asUInt64());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            storageNumber_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            productId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[7]].asInt64());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            lossNumber_=std::make_shared<std::string>(pJson[pMasqueradingVector[8]].asString());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            isDelete_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[9]].asUInt64());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            remark_=std::make_shared<std::string>(pJson[pMasqueradingVector[10]].asString());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[11]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[12]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        dirtyFlag_[13] = true;
        if(!pJson[pMasqueradingVector[13]].isNull())
        {
            payNumber_=std::make_shared<std::string>(pJson[pMasqueradingVector[13]].asString());
        }
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        dirtyFlag_[14] = true;
        if(!pJson[pMasqueradingVector[14]].isNull())
        {
            settleNumber_=std::make_shared<std::string>(pJson[pMasqueradingVector[14]].asString());
        }
    }
    if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
    {
        dirtyFlag_[15] = true;
        if(!pJson[pMasqueradingVector[15]].isNull())
        {
            countStorageNumber_=std::make_shared<std::string>(pJson[pMasqueradingVector[15]].asString());
        }
    }
    if(!pMasqueradingVector[16].empty() && pJson.isMember(pMasqueradingVector[16]))
    {
        dirtyFlag_[16] = true;
        if(!pJson[pMasqueradingVector[16]].isNull())
        {
            storagePrice_=std::make_shared<std::string>(pJson[pMasqueradingVector[16]].asString());
        }
    }
    if(!pMasqueradingVector[17].empty() && pJson.isMember(pMasqueradingVector[17]))
    {
        dirtyFlag_[17] = true;
        if(!pJson[pMasqueradingVector[17]].isNull())
        {
            storageStatus_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[17]].asInt64());
        }
    }
    if(!pMasqueradingVector[18].empty() && pJson.isMember(pMasqueradingVector[18]))
    {
        dirtyFlag_[18] = true;
        if(!pJson[pMasqueradingVector[18]].isNull())
        {
            companyId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[18]].asInt64());
        }
    }
    if(!pMasqueradingVector[19].empty() && pJson.isMember(pMasqueradingVector[19]))
    {
        dirtyFlag_[19] = true;
        if(!pJson[pMasqueradingVector[19]].isNull())
        {
            storageType_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[19]].asInt64());
        }
    }
    if(!pMasqueradingVector[20].empty() && pJson.isMember(pMasqueradingVector[20]))
    {
        dirtyFlag_[20] = true;
        if(!pJson[pMasqueradingVector[20]].isNull())
        {
            saleOutStorageSkuChangeId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[20]].asInt64());
        }
    }
    if(!pMasqueradingVector[21].empty() && pJson.isMember(pMasqueradingVector[21]))
    {
        dirtyFlag_[21] = true;
        if(!pJson[pMasqueradingVector[21]].isNull())
        {
            saleOutStorageSkuBindId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[21]].asInt64());
        }
    }
    if(!pMasqueradingVector[22].empty() && pJson.isMember(pMasqueradingVector[22]))
    {
        dirtyFlag_[22] = true;
        if(!pJson[pMasqueradingVector[22]].isNull())
        {
            saleOutStorageSkuReturnId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[22]].asUInt64());
        }
    }
    if(!pMasqueradingVector[23].empty() && pJson.isMember(pMasqueradingVector[23]))
    {
        dirtyFlag_[23] = true;
        if(!pJson[pMasqueradingVector[23]].isNull())
        {
            actualStorageAmount_=std::make_shared<std::string>(pJson[pMasqueradingVector[23]].asString());
        }
    }
    if(!pMasqueradingVector[24].empty() && pJson.isMember(pMasqueradingVector[24]))
    {
        dirtyFlag_[24] = true;
        if(!pJson[pMasqueradingVector[24]].isNull())
        {
            saleOrderId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[24]].asInt64());
        }
    }
    if(!pMasqueradingVector[25].empty() && pJson.isMember(pMasqueradingVector[25]))
    {
        dirtyFlag_[25] = true;
        if(!pJson[pMasqueradingVector[25]].isNull())
        {
            saleOrderKey_=std::make_shared<std::string>(pJson[pMasqueradingVector[25]].asString());
        }
    }
    if(!pMasqueradingVector[26].empty() && pJson.isMember(pMasqueradingVector[26]))
    {
        dirtyFlag_[26] = true;
        if(!pJson[pMasqueradingVector[26]].isNull())
        {
            checkInvoiceNumber_=std::make_shared<std::string>(pJson[pMasqueradingVector[26]].asString());
        }
    }
}

SaleOutStorageSku::SaleOutStorageSku(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson["id"].asUInt64());
        }
    }
    if(pJson.isMember("shop_id"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["shop_id"].isNull())
        {
            shopId_=std::make_shared<uint64_t>((uint64_t)pJson["shop_id"].asUInt64());
        }
    }
    if(pJson.isMember("admin_id"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["admin_id"].isNull())
        {
            adminId_=std::make_shared<uint64_t>((uint64_t)pJson["admin_id"].asUInt64());
        }
    }
    if(pJson.isMember("sale_out_storage_id"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["sale_out_storage_id"].isNull())
        {
            saleOutStorageId_=std::make_shared<uint64_t>((uint64_t)pJson["sale_out_storage_id"].asUInt64());
        }
    }
    if(pJson.isMember("sale_order_sku_id"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["sale_order_sku_id"].isNull())
        {
            saleOrderSkuId_=std::make_shared<uint64_t>((uint64_t)pJson["sale_order_sku_id"].asUInt64());
        }
    }
    if(pJson.isMember("purchase_in_storage_sku_id"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["purchase_in_storage_sku_id"].isNull())
        {
            purchaseInStorageSkuId_=std::make_shared<uint64_t>((uint64_t)pJson["purchase_in_storage_sku_id"].asUInt64());
        }
    }
    if(pJson.isMember("storage_number"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["storage_number"].isNull())
        {
            storageNumber_=std::make_shared<std::string>(pJson["storage_number"].asString());
        }
    }
    if(pJson.isMember("product_id"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["product_id"].isNull())
        {
            productId_=std::make_shared<int64_t>((int64_t)pJson["product_id"].asInt64());
        }
    }
    if(pJson.isMember("loss_number"))
    {
        dirtyFlag_[8]=true;
        if(!pJson["loss_number"].isNull())
        {
            lossNumber_=std::make_shared<std::string>(pJson["loss_number"].asString());
        }
    }
    if(pJson.isMember("is_delete"))
    {
        dirtyFlag_[9]=true;
        if(!pJson["is_delete"].isNull())
        {
            isDelete_=std::make_shared<uint8_t>((uint8_t)pJson["is_delete"].asUInt64());
        }
    }
    if(pJson.isMember("remark"))
    {
        dirtyFlag_[10]=true;
        if(!pJson["remark"].isNull())
        {
            remark_=std::make_shared<std::string>(pJson["remark"].asString());
        }
    }
    if(pJson.isMember("create_time"))
    {
        dirtyFlag_[11]=true;
        if(!pJson["create_time"].isNull())
        {
            auto timeStr = pJson["create_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("update_time"))
    {
        dirtyFlag_[12]=true;
        if(!pJson["update_time"].isNull())
        {
            auto timeStr = pJson["update_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("pay_number"))
    {
        dirtyFlag_[13]=true;
        if(!pJson["pay_number"].isNull())
        {
            payNumber_=std::make_shared<std::string>(pJson["pay_number"].asString());
        }
    }
    if(pJson.isMember("settle_number"))
    {
        dirtyFlag_[14]=true;
        if(!pJson["settle_number"].isNull())
        {
            settleNumber_=std::make_shared<std::string>(pJson["settle_number"].asString());
        }
    }
    if(pJson.isMember("count_storage_number"))
    {
        dirtyFlag_[15]=true;
        if(!pJson["count_storage_number"].isNull())
        {
            countStorageNumber_=std::make_shared<std::string>(pJson["count_storage_number"].asString());
        }
    }
    if(pJson.isMember("storage_price"))
    {
        dirtyFlag_[16]=true;
        if(!pJson["storage_price"].isNull())
        {
            storagePrice_=std::make_shared<std::string>(pJson["storage_price"].asString());
        }
    }
    if(pJson.isMember("storage_status"))
    {
        dirtyFlag_[17]=true;
        if(!pJson["storage_status"].isNull())
        {
            storageStatus_=std::make_shared<int8_t>((int8_t)pJson["storage_status"].asInt64());
        }
    }
    if(pJson.isMember("company_id"))
    {
        dirtyFlag_[18]=true;
        if(!pJson["company_id"].isNull())
        {
            companyId_=std::make_shared<int64_t>((int64_t)pJson["company_id"].asInt64());
        }
    }
    if(pJson.isMember("storage_type"))
    {
        dirtyFlag_[19]=true;
        if(!pJson["storage_type"].isNull())
        {
            storageType_=std::make_shared<int8_t>((int8_t)pJson["storage_type"].asInt64());
        }
    }
    if(pJson.isMember("sale_out_storage_sku_change_id"))
    {
        dirtyFlag_[20]=true;
        if(!pJson["sale_out_storage_sku_change_id"].isNull())
        {
            saleOutStorageSkuChangeId_=std::make_shared<int64_t>((int64_t)pJson["sale_out_storage_sku_change_id"].asInt64());
        }
    }
    if(pJson.isMember("sale_out_storage_sku_bind_id"))
    {
        dirtyFlag_[21]=true;
        if(!pJson["sale_out_storage_sku_bind_id"].isNull())
        {
            saleOutStorageSkuBindId_=std::make_shared<int64_t>((int64_t)pJson["sale_out_storage_sku_bind_id"].asInt64());
        }
    }
    if(pJson.isMember("sale_out_storage_sku_return_id"))
    {
        dirtyFlag_[22]=true;
        if(!pJson["sale_out_storage_sku_return_id"].isNull())
        {
            saleOutStorageSkuReturnId_=std::make_shared<uint64_t>((uint64_t)pJson["sale_out_storage_sku_return_id"].asUInt64());
        }
    }
    if(pJson.isMember("actual_storage_amount"))
    {
        dirtyFlag_[23]=true;
        if(!pJson["actual_storage_amount"].isNull())
        {
            actualStorageAmount_=std::make_shared<std::string>(pJson["actual_storage_amount"].asString());
        }
    }
    if(pJson.isMember("sale_order_id"))
    {
        dirtyFlag_[24]=true;
        if(!pJson["sale_order_id"].isNull())
        {
            saleOrderId_=std::make_shared<int64_t>((int64_t)pJson["sale_order_id"].asInt64());
        }
    }
    if(pJson.isMember("sale_order_key"))
    {
        dirtyFlag_[25]=true;
        if(!pJson["sale_order_key"].isNull())
        {
            saleOrderKey_=std::make_shared<std::string>(pJson["sale_order_key"].asString());
        }
    }
    if(pJson.isMember("check_invoice_number"))
    {
        dirtyFlag_[26]=true;
        if(!pJson["check_invoice_number"].isNull())
        {
            checkInvoiceNumber_=std::make_shared<std::string>(pJson["check_invoice_number"].asString());
        }
    }
}

void SaleOutStorageSku::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 27)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            shopId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[1]].asUInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            adminId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[2]].asUInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            saleOutStorageId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[3]].asUInt64());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            saleOrderSkuId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[4]].asUInt64());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            purchaseInStorageSkuId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[5]].asUInt64());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            storageNumber_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            productId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[7]].asInt64());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            lossNumber_=std::make_shared<std::string>(pJson[pMasqueradingVector[8]].asString());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            isDelete_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[9]].asUInt64());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            remark_=std::make_shared<std::string>(pJson[pMasqueradingVector[10]].asString());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[11]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[12]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        dirtyFlag_[13] = true;
        if(!pJson[pMasqueradingVector[13]].isNull())
        {
            payNumber_=std::make_shared<std::string>(pJson[pMasqueradingVector[13]].asString());
        }
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        dirtyFlag_[14] = true;
        if(!pJson[pMasqueradingVector[14]].isNull())
        {
            settleNumber_=std::make_shared<std::string>(pJson[pMasqueradingVector[14]].asString());
        }
    }
    if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
    {
        dirtyFlag_[15] = true;
        if(!pJson[pMasqueradingVector[15]].isNull())
        {
            countStorageNumber_=std::make_shared<std::string>(pJson[pMasqueradingVector[15]].asString());
        }
    }
    if(!pMasqueradingVector[16].empty() && pJson.isMember(pMasqueradingVector[16]))
    {
        dirtyFlag_[16] = true;
        if(!pJson[pMasqueradingVector[16]].isNull())
        {
            storagePrice_=std::make_shared<std::string>(pJson[pMasqueradingVector[16]].asString());
        }
    }
    if(!pMasqueradingVector[17].empty() && pJson.isMember(pMasqueradingVector[17]))
    {
        dirtyFlag_[17] = true;
        if(!pJson[pMasqueradingVector[17]].isNull())
        {
            storageStatus_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[17]].asInt64());
        }
    }
    if(!pMasqueradingVector[18].empty() && pJson.isMember(pMasqueradingVector[18]))
    {
        dirtyFlag_[18] = true;
        if(!pJson[pMasqueradingVector[18]].isNull())
        {
            companyId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[18]].asInt64());
        }
    }
    if(!pMasqueradingVector[19].empty() && pJson.isMember(pMasqueradingVector[19]))
    {
        dirtyFlag_[19] = true;
        if(!pJson[pMasqueradingVector[19]].isNull())
        {
            storageType_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[19]].asInt64());
        }
    }
    if(!pMasqueradingVector[20].empty() && pJson.isMember(pMasqueradingVector[20]))
    {
        dirtyFlag_[20] = true;
        if(!pJson[pMasqueradingVector[20]].isNull())
        {
            saleOutStorageSkuChangeId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[20]].asInt64());
        }
    }
    if(!pMasqueradingVector[21].empty() && pJson.isMember(pMasqueradingVector[21]))
    {
        dirtyFlag_[21] = true;
        if(!pJson[pMasqueradingVector[21]].isNull())
        {
            saleOutStorageSkuBindId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[21]].asInt64());
        }
    }
    if(!pMasqueradingVector[22].empty() && pJson.isMember(pMasqueradingVector[22]))
    {
        dirtyFlag_[22] = true;
        if(!pJson[pMasqueradingVector[22]].isNull())
        {
            saleOutStorageSkuReturnId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[22]].asUInt64());
        }
    }
    if(!pMasqueradingVector[23].empty() && pJson.isMember(pMasqueradingVector[23]))
    {
        dirtyFlag_[23] = true;
        if(!pJson[pMasqueradingVector[23]].isNull())
        {
            actualStorageAmount_=std::make_shared<std::string>(pJson[pMasqueradingVector[23]].asString());
        }
    }
    if(!pMasqueradingVector[24].empty() && pJson.isMember(pMasqueradingVector[24]))
    {
        dirtyFlag_[24] = true;
        if(!pJson[pMasqueradingVector[24]].isNull())
        {
            saleOrderId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[24]].asInt64());
        }
    }
    if(!pMasqueradingVector[25].empty() && pJson.isMember(pMasqueradingVector[25]))
    {
        dirtyFlag_[25] = true;
        if(!pJson[pMasqueradingVector[25]].isNull())
        {
            saleOrderKey_=std::make_shared<std::string>(pJson[pMasqueradingVector[25]].asString());
        }
    }
    if(!pMasqueradingVector[26].empty() && pJson.isMember(pMasqueradingVector[26]))
    {
        dirtyFlag_[26] = true;
        if(!pJson[pMasqueradingVector[26]].isNull())
        {
            checkInvoiceNumber_=std::make_shared<std::string>(pJson[pMasqueradingVector[26]].asString());
        }
    }
}
                                                                    
void SaleOutStorageSku::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson["id"].asUInt64());
        }
    }
    if(pJson.isMember("shop_id"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["shop_id"].isNull())
        {
            shopId_=std::make_shared<uint64_t>((uint64_t)pJson["shop_id"].asUInt64());
        }
    }
    if(pJson.isMember("admin_id"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["admin_id"].isNull())
        {
            adminId_=std::make_shared<uint64_t>((uint64_t)pJson["admin_id"].asUInt64());
        }
    }
    if(pJson.isMember("sale_out_storage_id"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["sale_out_storage_id"].isNull())
        {
            saleOutStorageId_=std::make_shared<uint64_t>((uint64_t)pJson["sale_out_storage_id"].asUInt64());
        }
    }
    if(pJson.isMember("sale_order_sku_id"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["sale_order_sku_id"].isNull())
        {
            saleOrderSkuId_=std::make_shared<uint64_t>((uint64_t)pJson["sale_order_sku_id"].asUInt64());
        }
    }
    if(pJson.isMember("purchase_in_storage_sku_id"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["purchase_in_storage_sku_id"].isNull())
        {
            purchaseInStorageSkuId_=std::make_shared<uint64_t>((uint64_t)pJson["purchase_in_storage_sku_id"].asUInt64());
        }
    }
    if(pJson.isMember("storage_number"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["storage_number"].isNull())
        {
            storageNumber_=std::make_shared<std::string>(pJson["storage_number"].asString());
        }
    }
    if(pJson.isMember("product_id"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["product_id"].isNull())
        {
            productId_=std::make_shared<int64_t>((int64_t)pJson["product_id"].asInt64());
        }
    }
    if(pJson.isMember("loss_number"))
    {
        dirtyFlag_[8] = true;
        if(!pJson["loss_number"].isNull())
        {
            lossNumber_=std::make_shared<std::string>(pJson["loss_number"].asString());
        }
    }
    if(pJson.isMember("is_delete"))
    {
        dirtyFlag_[9] = true;
        if(!pJson["is_delete"].isNull())
        {
            isDelete_=std::make_shared<uint8_t>((uint8_t)pJson["is_delete"].asUInt64());
        }
    }
    if(pJson.isMember("remark"))
    {
        dirtyFlag_[10] = true;
        if(!pJson["remark"].isNull())
        {
            remark_=std::make_shared<std::string>(pJson["remark"].asString());
        }
    }
    if(pJson.isMember("create_time"))
    {
        dirtyFlag_[11] = true;
        if(!pJson["create_time"].isNull())
        {
            auto timeStr = pJson["create_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("update_time"))
    {
        dirtyFlag_[12] = true;
        if(!pJson["update_time"].isNull())
        {
            auto timeStr = pJson["update_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("pay_number"))
    {
        dirtyFlag_[13] = true;
        if(!pJson["pay_number"].isNull())
        {
            payNumber_=std::make_shared<std::string>(pJson["pay_number"].asString());
        }
    }
    if(pJson.isMember("settle_number"))
    {
        dirtyFlag_[14] = true;
        if(!pJson["settle_number"].isNull())
        {
            settleNumber_=std::make_shared<std::string>(pJson["settle_number"].asString());
        }
    }
    if(pJson.isMember("count_storage_number"))
    {
        dirtyFlag_[15] = true;
        if(!pJson["count_storage_number"].isNull())
        {
            countStorageNumber_=std::make_shared<std::string>(pJson["count_storage_number"].asString());
        }
    }
    if(pJson.isMember("storage_price"))
    {
        dirtyFlag_[16] = true;
        if(!pJson["storage_price"].isNull())
        {
            storagePrice_=std::make_shared<std::string>(pJson["storage_price"].asString());
        }
    }
    if(pJson.isMember("storage_status"))
    {
        dirtyFlag_[17] = true;
        if(!pJson["storage_status"].isNull())
        {
            storageStatus_=std::make_shared<int8_t>((int8_t)pJson["storage_status"].asInt64());
        }
    }
    if(pJson.isMember("company_id"))
    {
        dirtyFlag_[18] = true;
        if(!pJson["company_id"].isNull())
        {
            companyId_=std::make_shared<int64_t>((int64_t)pJson["company_id"].asInt64());
        }
    }
    if(pJson.isMember("storage_type"))
    {
        dirtyFlag_[19] = true;
        if(!pJson["storage_type"].isNull())
        {
            storageType_=std::make_shared<int8_t>((int8_t)pJson["storage_type"].asInt64());
        }
    }
    if(pJson.isMember("sale_out_storage_sku_change_id"))
    {
        dirtyFlag_[20] = true;
        if(!pJson["sale_out_storage_sku_change_id"].isNull())
        {
            saleOutStorageSkuChangeId_=std::make_shared<int64_t>((int64_t)pJson["sale_out_storage_sku_change_id"].asInt64());
        }
    }
    if(pJson.isMember("sale_out_storage_sku_bind_id"))
    {
        dirtyFlag_[21] = true;
        if(!pJson["sale_out_storage_sku_bind_id"].isNull())
        {
            saleOutStorageSkuBindId_=std::make_shared<int64_t>((int64_t)pJson["sale_out_storage_sku_bind_id"].asInt64());
        }
    }
    if(pJson.isMember("sale_out_storage_sku_return_id"))
    {
        dirtyFlag_[22] = true;
        if(!pJson["sale_out_storage_sku_return_id"].isNull())
        {
            saleOutStorageSkuReturnId_=std::make_shared<uint64_t>((uint64_t)pJson["sale_out_storage_sku_return_id"].asUInt64());
        }
    }
    if(pJson.isMember("actual_storage_amount"))
    {
        dirtyFlag_[23] = true;
        if(!pJson["actual_storage_amount"].isNull())
        {
            actualStorageAmount_=std::make_shared<std::string>(pJson["actual_storage_amount"].asString());
        }
    }
    if(pJson.isMember("sale_order_id"))
    {
        dirtyFlag_[24] = true;
        if(!pJson["sale_order_id"].isNull())
        {
            saleOrderId_=std::make_shared<int64_t>((int64_t)pJson["sale_order_id"].asInt64());
        }
    }
    if(pJson.isMember("sale_order_key"))
    {
        dirtyFlag_[25] = true;
        if(!pJson["sale_order_key"].isNull())
        {
            saleOrderKey_=std::make_shared<std::string>(pJson["sale_order_key"].asString());
        }
    }
    if(pJson.isMember("check_invoice_number"))
    {
        dirtyFlag_[26] = true;
        if(!pJson["check_invoice_number"].isNull())
        {
            checkInvoiceNumber_=std::make_shared<std::string>(pJson["check_invoice_number"].asString());
        }
    }
}

const uint64_t &SaleOutStorageSku::getValueOfId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &SaleOutStorageSku::getId() const noexcept
{
    return id_;
}
void SaleOutStorageSku::setId(const uint64_t &pId) noexcept
{
    id_ = std::make_shared<uint64_t>(pId);
    dirtyFlag_[0] = true;
}



const typename SaleOutStorageSku::PrimaryKeyType & SaleOutStorageSku::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const uint64_t &SaleOutStorageSku::getValueOfShopId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(shopId_)
        return *shopId_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &SaleOutStorageSku::getShopId() const noexcept
{
    return shopId_;
}
void SaleOutStorageSku::setShopId(const uint64_t &pShopId) noexcept
{
    shopId_ = std::make_shared<uint64_t>(pShopId);
    dirtyFlag_[1] = true;
}




const uint64_t &SaleOutStorageSku::getValueOfAdminId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(adminId_)
        return *adminId_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &SaleOutStorageSku::getAdminId() const noexcept
{
    return adminId_;
}
void SaleOutStorageSku::setAdminId(const uint64_t &pAdminId) noexcept
{
    adminId_ = std::make_shared<uint64_t>(pAdminId);
    dirtyFlag_[2] = true;
}




const uint64_t &SaleOutStorageSku::getValueOfSaleOutStorageId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(saleOutStorageId_)
        return *saleOutStorageId_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &SaleOutStorageSku::getSaleOutStorageId() const noexcept
{
    return saleOutStorageId_;
}
void SaleOutStorageSku::setSaleOutStorageId(const uint64_t &pSaleOutStorageId) noexcept
{
    saleOutStorageId_ = std::make_shared<uint64_t>(pSaleOutStorageId);
    dirtyFlag_[3] = true;
}




const uint64_t &SaleOutStorageSku::getValueOfSaleOrderSkuId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(saleOrderSkuId_)
        return *saleOrderSkuId_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &SaleOutStorageSku::getSaleOrderSkuId() const noexcept
{
    return saleOrderSkuId_;
}
void SaleOutStorageSku::setSaleOrderSkuId(const uint64_t &pSaleOrderSkuId) noexcept
{
    saleOrderSkuId_ = std::make_shared<uint64_t>(pSaleOrderSkuId);
    dirtyFlag_[4] = true;
}




const uint64_t &SaleOutStorageSku::getValueOfPurchaseInStorageSkuId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(purchaseInStorageSkuId_)
        return *purchaseInStorageSkuId_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &SaleOutStorageSku::getPurchaseInStorageSkuId() const noexcept
{
    return purchaseInStorageSkuId_;
}
void SaleOutStorageSku::setPurchaseInStorageSkuId(const uint64_t &pPurchaseInStorageSkuId) noexcept
{
    purchaseInStorageSkuId_ = std::make_shared<uint64_t>(pPurchaseInStorageSkuId);
    dirtyFlag_[5] = true;
}




const std::string &SaleOutStorageSku::getValueOfStorageNumber() const noexcept
{
    const static std::string defaultValue = std::string();
    if(storageNumber_)
        return *storageNumber_;
    return defaultValue;
}
const std::shared_ptr<std::string> &SaleOutStorageSku::getStorageNumber() const noexcept
{
    return storageNumber_;
}
void SaleOutStorageSku::setStorageNumber(const std::string &pStorageNumber) noexcept
{
    storageNumber_ = std::make_shared<std::string>(pStorageNumber);
    dirtyFlag_[6] = true;
}
void SaleOutStorageSku::setStorageNumber(std::string &&pStorageNumber) noexcept
{
    storageNumber_ = std::make_shared<std::string>(std::move(pStorageNumber));
    dirtyFlag_[6] = true;
}




const int64_t &SaleOutStorageSku::getValueOfProductId() const noexcept
{
    const static int64_t defaultValue = int64_t();
    if(productId_)
        return *productId_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &SaleOutStorageSku::getProductId() const noexcept
{
    return productId_;
}
void SaleOutStorageSku::setProductId(const int64_t &pProductId) noexcept
{
    productId_ = std::make_shared<int64_t>(pProductId);
    dirtyFlag_[7] = true;
}




const std::string &SaleOutStorageSku::getValueOfLossNumber() const noexcept
{
    const static std::string defaultValue = std::string();
    if(lossNumber_)
        return *lossNumber_;
    return defaultValue;
}
const std::shared_ptr<std::string> &SaleOutStorageSku::getLossNumber() const noexcept
{
    return lossNumber_;
}
void SaleOutStorageSku::setLossNumber(const std::string &pLossNumber) noexcept
{
    lossNumber_ = std::make_shared<std::string>(pLossNumber);
    dirtyFlag_[8] = true;
}
void SaleOutStorageSku::setLossNumber(std::string &&pLossNumber) noexcept
{
    lossNumber_ = std::make_shared<std::string>(std::move(pLossNumber));
    dirtyFlag_[8] = true;
}




const uint8_t &SaleOutStorageSku::getValueOfIsDelete() const noexcept
{
    const static uint8_t defaultValue = uint8_t();
    if(isDelete_)
        return *isDelete_;
    return defaultValue;
}
const std::shared_ptr<uint8_t> &SaleOutStorageSku::getIsDelete() const noexcept
{
    return isDelete_;
}
void SaleOutStorageSku::setIsDelete(const uint8_t &pIsDelete) noexcept
{
    isDelete_ = std::make_shared<uint8_t>(pIsDelete);
    dirtyFlag_[9] = true;
}




const std::string &SaleOutStorageSku::getValueOfRemark() const noexcept
{
    const static std::string defaultValue = std::string();
    if(remark_)
        return *remark_;
    return defaultValue;
}
const std::shared_ptr<std::string> &SaleOutStorageSku::getRemark() const noexcept
{
    return remark_;
}
void SaleOutStorageSku::setRemark(const std::string &pRemark) noexcept
{
    remark_ = std::make_shared<std::string>(pRemark);
    dirtyFlag_[10] = true;
}
void SaleOutStorageSku::setRemark(std::string &&pRemark) noexcept
{
    remark_ = std::make_shared<std::string>(std::move(pRemark));
    dirtyFlag_[10] = true;
}


void SaleOutStorageSku::setRemarkToNull() noexcept
{
    remark_.reset();
    dirtyFlag_[10] = true;
}


const ::trantor::Date &SaleOutStorageSku::getValueOfCreateTime() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(createTime_)
        return *createTime_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &SaleOutStorageSku::getCreateTime() const noexcept
{
    return createTime_;
}
void SaleOutStorageSku::setCreateTime(const ::trantor::Date &pCreateTime) noexcept
{
    createTime_ = std::make_shared<::trantor::Date>(pCreateTime);
    dirtyFlag_[11] = true;
}




const ::trantor::Date &SaleOutStorageSku::getValueOfUpdateTime() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(updateTime_)
        return *updateTime_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &SaleOutStorageSku::getUpdateTime() const noexcept
{
    return updateTime_;
}
void SaleOutStorageSku::setUpdateTime(const ::trantor::Date &pUpdateTime) noexcept
{
    updateTime_ = std::make_shared<::trantor::Date>(pUpdateTime);
    dirtyFlag_[12] = true;
}




const std::string &SaleOutStorageSku::getValueOfPayNumber() const noexcept
{
    const static std::string defaultValue = std::string();
    if(payNumber_)
        return *payNumber_;
    return defaultValue;
}
const std::shared_ptr<std::string> &SaleOutStorageSku::getPayNumber() const noexcept
{
    return payNumber_;
}
void SaleOutStorageSku::setPayNumber(const std::string &pPayNumber) noexcept
{
    payNumber_ = std::make_shared<std::string>(pPayNumber);
    dirtyFlag_[13] = true;
}
void SaleOutStorageSku::setPayNumber(std::string &&pPayNumber) noexcept
{
    payNumber_ = std::make_shared<std::string>(std::move(pPayNumber));
    dirtyFlag_[13] = true;
}




const std::string &SaleOutStorageSku::getValueOfSettleNumber() const noexcept
{
    const static std::string defaultValue = std::string();
    if(settleNumber_)
        return *settleNumber_;
    return defaultValue;
}
const std::shared_ptr<std::string> &SaleOutStorageSku::getSettleNumber() const noexcept
{
    return settleNumber_;
}
void SaleOutStorageSku::setSettleNumber(const std::string &pSettleNumber) noexcept
{
    settleNumber_ = std::make_shared<std::string>(pSettleNumber);
    dirtyFlag_[14] = true;
}
void SaleOutStorageSku::setSettleNumber(std::string &&pSettleNumber) noexcept
{
    settleNumber_ = std::make_shared<std::string>(std::move(pSettleNumber));
    dirtyFlag_[14] = true;
}




const std::string &SaleOutStorageSku::getValueOfCountStorageNumber() const noexcept
{
    const static std::string defaultValue = std::string();
    if(countStorageNumber_)
        return *countStorageNumber_;
    return defaultValue;
}
const std::shared_ptr<std::string> &SaleOutStorageSku::getCountStorageNumber() const noexcept
{
    return countStorageNumber_;
}
void SaleOutStorageSku::setCountStorageNumber(const std::string &pCountStorageNumber) noexcept
{
    countStorageNumber_ = std::make_shared<std::string>(pCountStorageNumber);
    dirtyFlag_[15] = true;
}
void SaleOutStorageSku::setCountStorageNumber(std::string &&pCountStorageNumber) noexcept
{
    countStorageNumber_ = std::make_shared<std::string>(std::move(pCountStorageNumber));
    dirtyFlag_[15] = true;
}




const std::string &SaleOutStorageSku::getValueOfStoragePrice() const noexcept
{
    const static std::string defaultValue = std::string();
    if(storagePrice_)
        return *storagePrice_;
    return defaultValue;
}
const std::shared_ptr<std::string> &SaleOutStorageSku::getStoragePrice() const noexcept
{
    return storagePrice_;
}
void SaleOutStorageSku::setStoragePrice(const std::string &pStoragePrice) noexcept
{
    storagePrice_ = std::make_shared<std::string>(pStoragePrice);
    dirtyFlag_[16] = true;
}
void SaleOutStorageSku::setStoragePrice(std::string &&pStoragePrice) noexcept
{
    storagePrice_ = std::make_shared<std::string>(std::move(pStoragePrice));
    dirtyFlag_[16] = true;
}




const int8_t &SaleOutStorageSku::getValueOfStorageStatus() const noexcept
{
    const static int8_t defaultValue = int8_t();
    if(storageStatus_)
        return *storageStatus_;
    return defaultValue;
}
const std::shared_ptr<int8_t> &SaleOutStorageSku::getStorageStatus() const noexcept
{
    return storageStatus_;
}
void SaleOutStorageSku::setStorageStatus(const int8_t &pStorageStatus) noexcept
{
    storageStatus_ = std::make_shared<int8_t>(pStorageStatus);
    dirtyFlag_[17] = true;
}




const int64_t &SaleOutStorageSku::getValueOfCompanyId() const noexcept
{
    const static int64_t defaultValue = int64_t();
    if(companyId_)
        return *companyId_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &SaleOutStorageSku::getCompanyId() const noexcept
{
    return companyId_;
}
void SaleOutStorageSku::setCompanyId(const int64_t &pCompanyId) noexcept
{
    companyId_ = std::make_shared<int64_t>(pCompanyId);
    dirtyFlag_[18] = true;
}




const int8_t &SaleOutStorageSku::getValueOfStorageType() const noexcept
{
    const static int8_t defaultValue = int8_t();
    if(storageType_)
        return *storageType_;
    return defaultValue;
}
const std::shared_ptr<int8_t> &SaleOutStorageSku::getStorageType() const noexcept
{
    return storageType_;
}
void SaleOutStorageSku::setStorageType(const int8_t &pStorageType) noexcept
{
    storageType_ = std::make_shared<int8_t>(pStorageType);
    dirtyFlag_[19] = true;
}




const int64_t &SaleOutStorageSku::getValueOfSaleOutStorageSkuChangeId() const noexcept
{
    const static int64_t defaultValue = int64_t();
    if(saleOutStorageSkuChangeId_)
        return *saleOutStorageSkuChangeId_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &SaleOutStorageSku::getSaleOutStorageSkuChangeId() const noexcept
{
    return saleOutStorageSkuChangeId_;
}
void SaleOutStorageSku::setSaleOutStorageSkuChangeId(const int64_t &pSaleOutStorageSkuChangeId) noexcept
{
    saleOutStorageSkuChangeId_ = std::make_shared<int64_t>(pSaleOutStorageSkuChangeId);
    dirtyFlag_[20] = true;
}




const int64_t &SaleOutStorageSku::getValueOfSaleOutStorageSkuBindId() const noexcept
{
    const static int64_t defaultValue = int64_t();
    if(saleOutStorageSkuBindId_)
        return *saleOutStorageSkuBindId_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &SaleOutStorageSku::getSaleOutStorageSkuBindId() const noexcept
{
    return saleOutStorageSkuBindId_;
}
void SaleOutStorageSku::setSaleOutStorageSkuBindId(const int64_t &pSaleOutStorageSkuBindId) noexcept
{
    saleOutStorageSkuBindId_ = std::make_shared<int64_t>(pSaleOutStorageSkuBindId);
    dirtyFlag_[21] = true;
}




const uint64_t &SaleOutStorageSku::getValueOfSaleOutStorageSkuReturnId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(saleOutStorageSkuReturnId_)
        return *saleOutStorageSkuReturnId_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &SaleOutStorageSku::getSaleOutStorageSkuReturnId() const noexcept
{
    return saleOutStorageSkuReturnId_;
}
void SaleOutStorageSku::setSaleOutStorageSkuReturnId(const uint64_t &pSaleOutStorageSkuReturnId) noexcept
{
    saleOutStorageSkuReturnId_ = std::make_shared<uint64_t>(pSaleOutStorageSkuReturnId);
    dirtyFlag_[22] = true;
}




const std::string &SaleOutStorageSku::getValueOfActualStorageAmount() const noexcept
{
    const static std::string defaultValue = std::string();
    if(actualStorageAmount_)
        return *actualStorageAmount_;
    return defaultValue;
}
const std::shared_ptr<std::string> &SaleOutStorageSku::getActualStorageAmount() const noexcept
{
    return actualStorageAmount_;
}
void SaleOutStorageSku::setActualStorageAmount(const std::string &pActualStorageAmount) noexcept
{
    actualStorageAmount_ = std::make_shared<std::string>(pActualStorageAmount);
    dirtyFlag_[23] = true;
}
void SaleOutStorageSku::setActualStorageAmount(std::string &&pActualStorageAmount) noexcept
{
    actualStorageAmount_ = std::make_shared<std::string>(std::move(pActualStorageAmount));
    dirtyFlag_[23] = true;
}




const int64_t &SaleOutStorageSku::getValueOfSaleOrderId() const noexcept
{
    const static int64_t defaultValue = int64_t();
    if(saleOrderId_)
        return *saleOrderId_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &SaleOutStorageSku::getSaleOrderId() const noexcept
{
    return saleOrderId_;
}
void SaleOutStorageSku::setSaleOrderId(const int64_t &pSaleOrderId) noexcept
{
    saleOrderId_ = std::make_shared<int64_t>(pSaleOrderId);
    dirtyFlag_[24] = true;
}




const std::string &SaleOutStorageSku::getValueOfSaleOrderKey() const noexcept
{
    const static std::string defaultValue = std::string();
    if(saleOrderKey_)
        return *saleOrderKey_;
    return defaultValue;
}
const std::shared_ptr<std::string> &SaleOutStorageSku::getSaleOrderKey() const noexcept
{
    return saleOrderKey_;
}
void SaleOutStorageSku::setSaleOrderKey(const std::string &pSaleOrderKey) noexcept
{
    saleOrderKey_ = std::make_shared<std::string>(pSaleOrderKey);
    dirtyFlag_[25] = true;
}
void SaleOutStorageSku::setSaleOrderKey(std::string &&pSaleOrderKey) noexcept
{
    saleOrderKey_ = std::make_shared<std::string>(std::move(pSaleOrderKey));
    dirtyFlag_[25] = true;
}


void SaleOutStorageSku::setSaleOrderKeyToNull() noexcept
{
    saleOrderKey_.reset();
    dirtyFlag_[25] = true;
}


const std::string &SaleOutStorageSku::getValueOfCheckInvoiceNumber() const noexcept
{
    const static std::string defaultValue = std::string();
    if(checkInvoiceNumber_)
        return *checkInvoiceNumber_;
    return defaultValue;
}
const std::shared_ptr<std::string> &SaleOutStorageSku::getCheckInvoiceNumber() const noexcept
{
    return checkInvoiceNumber_;
}
void SaleOutStorageSku::setCheckInvoiceNumber(const std::string &pCheckInvoiceNumber) noexcept
{
    checkInvoiceNumber_ = std::make_shared<std::string>(pCheckInvoiceNumber);
    dirtyFlag_[26] = true;
}
void SaleOutStorageSku::setCheckInvoiceNumber(std::string &&pCheckInvoiceNumber) noexcept
{
    checkInvoiceNumber_ = std::make_shared<std::string>(std::move(pCheckInvoiceNumber));
    dirtyFlag_[26] = true;
}




void SaleOutStorageSku::updateId(const uint64_t id)
{
    id_ = std::make_shared<uint64_t>(id);
}

const std::vector<std::string> &SaleOutStorageSku::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "shop_id",
        "admin_id",
        "sale_out_storage_id",
        "sale_order_sku_id",
        "purchase_in_storage_sku_id",
        "storage_number",
        "product_id",
        "loss_number",
        "is_delete",
        "remark",
        "create_time",
        "update_time",
        "pay_number",
        "settle_number",
        "count_storage_number",
        "storage_price",
        "storage_status",
        "company_id",
        "storage_type",
        "sale_out_storage_sku_change_id",
        "sale_out_storage_sku_bind_id",
        "sale_out_storage_sku_return_id",
        "actual_storage_amount",
        "sale_order_id",
        "sale_order_key",
        "check_invoice_number"
    };
    return inCols;
}

void SaleOutStorageSku::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getShopId())
        {
            binder << getValueOfShopId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getAdminId())
        {
            binder << getValueOfAdminId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getSaleOutStorageId())
        {
            binder << getValueOfSaleOutStorageId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getSaleOrderSkuId())
        {
            binder << getValueOfSaleOrderSkuId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getPurchaseInStorageSkuId())
        {
            binder << getValueOfPurchaseInStorageSkuId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getStorageNumber())
        {
            binder << getValueOfStorageNumber();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getProductId())
        {
            binder << getValueOfProductId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getLossNumber())
        {
            binder << getValueOfLossNumber();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getIsDelete())
        {
            binder << getValueOfIsDelete();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getRemark())
        {
            binder << getValueOfRemark();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getCreateTime())
        {
            binder << getValueOfCreateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getUpdateTime())
        {
            binder << getValueOfUpdateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[13])
    {
        if(getPayNumber())
        {
            binder << getValueOfPayNumber();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[14])
    {
        if(getSettleNumber())
        {
            binder << getValueOfSettleNumber();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[15])
    {
        if(getCountStorageNumber())
        {
            binder << getValueOfCountStorageNumber();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[16])
    {
        if(getStoragePrice())
        {
            binder << getValueOfStoragePrice();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[17])
    {
        if(getStorageStatus())
        {
            binder << getValueOfStorageStatus();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[18])
    {
        if(getCompanyId())
        {
            binder << getValueOfCompanyId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[19])
    {
        if(getStorageType())
        {
            binder << getValueOfStorageType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[20])
    {
        if(getSaleOutStorageSkuChangeId())
        {
            binder << getValueOfSaleOutStorageSkuChangeId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[21])
    {
        if(getSaleOutStorageSkuBindId())
        {
            binder << getValueOfSaleOutStorageSkuBindId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[22])
    {
        if(getSaleOutStorageSkuReturnId())
        {
            binder << getValueOfSaleOutStorageSkuReturnId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[23])
    {
        if(getActualStorageAmount())
        {
            binder << getValueOfActualStorageAmount();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[24])
    {
        if(getSaleOrderId())
        {
            binder << getValueOfSaleOrderId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[25])
    {
        if(getSaleOrderKey())
        {
            binder << getValueOfSaleOrderKey();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[26])
    {
        if(getCheckInvoiceNumber())
        {
            binder << getValueOfCheckInvoiceNumber();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> SaleOutStorageSku::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    if(dirtyFlag_[8])
    {
        ret.push_back(getColumnName(8));
    }
    if(dirtyFlag_[9])
    {
        ret.push_back(getColumnName(9));
    }
    if(dirtyFlag_[10])
    {
        ret.push_back(getColumnName(10));
    }
    if(dirtyFlag_[11])
    {
        ret.push_back(getColumnName(11));
    }
    if(dirtyFlag_[12])
    {
        ret.push_back(getColumnName(12));
    }
    if(dirtyFlag_[13])
    {
        ret.push_back(getColumnName(13));
    }
    if(dirtyFlag_[14])
    {
        ret.push_back(getColumnName(14));
    }
    if(dirtyFlag_[15])
    {
        ret.push_back(getColumnName(15));
    }
    if(dirtyFlag_[16])
    {
        ret.push_back(getColumnName(16));
    }
    if(dirtyFlag_[17])
    {
        ret.push_back(getColumnName(17));
    }
    if(dirtyFlag_[18])
    {
        ret.push_back(getColumnName(18));
    }
    if(dirtyFlag_[19])
    {
        ret.push_back(getColumnName(19));
    }
    if(dirtyFlag_[20])
    {
        ret.push_back(getColumnName(20));
    }
    if(dirtyFlag_[21])
    {
        ret.push_back(getColumnName(21));
    }
    if(dirtyFlag_[22])
    {
        ret.push_back(getColumnName(22));
    }
    if(dirtyFlag_[23])
    {
        ret.push_back(getColumnName(23));
    }
    if(dirtyFlag_[24])
    {
        ret.push_back(getColumnName(24));
    }
    if(dirtyFlag_[25])
    {
        ret.push_back(getColumnName(25));
    }
    if(dirtyFlag_[26])
    {
        ret.push_back(getColumnName(26));
    }
    return ret;
}

void SaleOutStorageSku::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getShopId())
        {
            binder << getValueOfShopId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getAdminId())
        {
            binder << getValueOfAdminId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getSaleOutStorageId())
        {
            binder << getValueOfSaleOutStorageId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getSaleOrderSkuId())
        {
            binder << getValueOfSaleOrderSkuId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getPurchaseInStorageSkuId())
        {
            binder << getValueOfPurchaseInStorageSkuId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getStorageNumber())
        {
            binder << getValueOfStorageNumber();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getProductId())
        {
            binder << getValueOfProductId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getLossNumber())
        {
            binder << getValueOfLossNumber();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getIsDelete())
        {
            binder << getValueOfIsDelete();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getRemark())
        {
            binder << getValueOfRemark();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getCreateTime())
        {
            binder << getValueOfCreateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getUpdateTime())
        {
            binder << getValueOfUpdateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[13])
    {
        if(getPayNumber())
        {
            binder << getValueOfPayNumber();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[14])
    {
        if(getSettleNumber())
        {
            binder << getValueOfSettleNumber();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[15])
    {
        if(getCountStorageNumber())
        {
            binder << getValueOfCountStorageNumber();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[16])
    {
        if(getStoragePrice())
        {
            binder << getValueOfStoragePrice();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[17])
    {
        if(getStorageStatus())
        {
            binder << getValueOfStorageStatus();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[18])
    {
        if(getCompanyId())
        {
            binder << getValueOfCompanyId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[19])
    {
        if(getStorageType())
        {
            binder << getValueOfStorageType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[20])
    {
        if(getSaleOutStorageSkuChangeId())
        {
            binder << getValueOfSaleOutStorageSkuChangeId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[21])
    {
        if(getSaleOutStorageSkuBindId())
        {
            binder << getValueOfSaleOutStorageSkuBindId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[22])
    {
        if(getSaleOutStorageSkuReturnId())
        {
            binder << getValueOfSaleOutStorageSkuReturnId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[23])
    {
        if(getActualStorageAmount())
        {
            binder << getValueOfActualStorageAmount();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[24])
    {
        if(getSaleOrderId())
        {
            binder << getValueOfSaleOrderId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[25])
    {
        if(getSaleOrderKey())
        {
            binder << getValueOfSaleOrderKey();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[26])
    {
        if(getCheckInvoiceNumber())
        {
            binder << getValueOfCheckInvoiceNumber();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value SaleOutStorageSku::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=(Json::UInt64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getShopId())
    {
        ret["shop_id"]=(Json::UInt64)getValueOfShopId();
    }
    else
    {
        ret["shop_id"]=Json::Value();
    }
    if(getAdminId())
    {
        ret["admin_id"]=(Json::UInt64)getValueOfAdminId();
    }
    else
    {
        ret["admin_id"]=Json::Value();
    }
    if(getSaleOutStorageId())
    {
        ret["sale_out_storage_id"]=(Json::UInt64)getValueOfSaleOutStorageId();
    }
    else
    {
        ret["sale_out_storage_id"]=Json::Value();
    }
    if(getSaleOrderSkuId())
    {
        ret["sale_order_sku_id"]=(Json::UInt64)getValueOfSaleOrderSkuId();
    }
    else
    {
        ret["sale_order_sku_id"]=Json::Value();
    }
    if(getPurchaseInStorageSkuId())
    {
        ret["purchase_in_storage_sku_id"]=(Json::UInt64)getValueOfPurchaseInStorageSkuId();
    }
    else
    {
        ret["purchase_in_storage_sku_id"]=Json::Value();
    }
    if(getStorageNumber())
    {
        ret["storage_number"]=getValueOfStorageNumber();
    }
    else
    {
        ret["storage_number"]=Json::Value();
    }
    if(getProductId())
    {
        ret["product_id"]=(Json::Int64)getValueOfProductId();
    }
    else
    {
        ret["product_id"]=Json::Value();
    }
    if(getLossNumber())
    {
        ret["loss_number"]=getValueOfLossNumber();
    }
    else
    {
        ret["loss_number"]=Json::Value();
    }
    if(getIsDelete())
    {
        ret["is_delete"]=getValueOfIsDelete();
    }
    else
    {
        ret["is_delete"]=Json::Value();
    }
    if(getRemark())
    {
        ret["remark"]=getValueOfRemark();
    }
    else
    {
        ret["remark"]=Json::Value();
    }
    if(getCreateTime())
    {
        ret["create_time"]=getCreateTime()->toDbStringLocal();
    }
    else
    {
        ret["create_time"]=Json::Value();
    }
    if(getUpdateTime())
    {
        ret["update_time"]=getUpdateTime()->toDbStringLocal();
    }
    else
    {
        ret["update_time"]=Json::Value();
    }
    if(getPayNumber())
    {
        ret["pay_number"]=getValueOfPayNumber();
    }
    else
    {
        ret["pay_number"]=Json::Value();
    }
    if(getSettleNumber())
    {
        ret["settle_number"]=getValueOfSettleNumber();
    }
    else
    {
        ret["settle_number"]=Json::Value();
    }
    if(getCountStorageNumber())
    {
        ret["count_storage_number"]=getValueOfCountStorageNumber();
    }
    else
    {
        ret["count_storage_number"]=Json::Value();
    }
    if(getStoragePrice())
    {
        ret["storage_price"]=getValueOfStoragePrice();
    }
    else
    {
        ret["storage_price"]=Json::Value();
    }
    if(getStorageStatus())
    {
        ret["storage_status"]=getValueOfStorageStatus();
    }
    else
    {
        ret["storage_status"]=Json::Value();
    }
    if(getCompanyId())
    {
        ret["company_id"]=(Json::Int64)getValueOfCompanyId();
    }
    else
    {
        ret["company_id"]=Json::Value();
    }
    if(getStorageType())
    {
        ret["storage_type"]=getValueOfStorageType();
    }
    else
    {
        ret["storage_type"]=Json::Value();
    }
    if(getSaleOutStorageSkuChangeId())
    {
        ret["sale_out_storage_sku_change_id"]=(Json::Int64)getValueOfSaleOutStorageSkuChangeId();
    }
    else
    {
        ret["sale_out_storage_sku_change_id"]=Json::Value();
    }
    if(getSaleOutStorageSkuBindId())
    {
        ret["sale_out_storage_sku_bind_id"]=(Json::Int64)getValueOfSaleOutStorageSkuBindId();
    }
    else
    {
        ret["sale_out_storage_sku_bind_id"]=Json::Value();
    }
    if(getSaleOutStorageSkuReturnId())
    {
        ret["sale_out_storage_sku_return_id"]=(Json::UInt64)getValueOfSaleOutStorageSkuReturnId();
    }
    else
    {
        ret["sale_out_storage_sku_return_id"]=Json::Value();
    }
    if(getActualStorageAmount())
    {
        ret["actual_storage_amount"]=getValueOfActualStorageAmount();
    }
    else
    {
        ret["actual_storage_amount"]=Json::Value();
    }
    if(getSaleOrderId())
    {
        ret["sale_order_id"]=(Json::Int64)getValueOfSaleOrderId();
    }
    else
    {
        ret["sale_order_id"]=Json::Value();
    }
    if(getSaleOrderKey())
    {
        ret["sale_order_key"]=getValueOfSaleOrderKey();
    }
    else
    {
        ret["sale_order_key"]=Json::Value();
    }
    if(getCheckInvoiceNumber())
    {
        ret["check_invoice_number"]=getValueOfCheckInvoiceNumber();
    }
    else
    {
        ret["check_invoice_number"]=Json::Value();
    }
    return ret;
}

Json::Value SaleOutStorageSku::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 27)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=(Json::UInt64)getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getShopId())
            {
                ret[pMasqueradingVector[1]]=(Json::UInt64)getValueOfShopId();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getAdminId())
            {
                ret[pMasqueradingVector[2]]=(Json::UInt64)getValueOfAdminId();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getSaleOutStorageId())
            {
                ret[pMasqueradingVector[3]]=(Json::UInt64)getValueOfSaleOutStorageId();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getSaleOrderSkuId())
            {
                ret[pMasqueradingVector[4]]=(Json::UInt64)getValueOfSaleOrderSkuId();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getPurchaseInStorageSkuId())
            {
                ret[pMasqueradingVector[5]]=(Json::UInt64)getValueOfPurchaseInStorageSkuId();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getStorageNumber())
            {
                ret[pMasqueradingVector[6]]=getValueOfStorageNumber();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getProductId())
            {
                ret[pMasqueradingVector[7]]=(Json::Int64)getValueOfProductId();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[8].empty())
        {
            if(getLossNumber())
            {
                ret[pMasqueradingVector[8]]=getValueOfLossNumber();
            }
            else
            {
                ret[pMasqueradingVector[8]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[9].empty())
        {
            if(getIsDelete())
            {
                ret[pMasqueradingVector[9]]=getValueOfIsDelete();
            }
            else
            {
                ret[pMasqueradingVector[9]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[10].empty())
        {
            if(getRemark())
            {
                ret[pMasqueradingVector[10]]=getValueOfRemark();
            }
            else
            {
                ret[pMasqueradingVector[10]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[11].empty())
        {
            if(getCreateTime())
            {
                ret[pMasqueradingVector[11]]=getCreateTime()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[11]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[12].empty())
        {
            if(getUpdateTime())
            {
                ret[pMasqueradingVector[12]]=getUpdateTime()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[12]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[13].empty())
        {
            if(getPayNumber())
            {
                ret[pMasqueradingVector[13]]=getValueOfPayNumber();
            }
            else
            {
                ret[pMasqueradingVector[13]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[14].empty())
        {
            if(getSettleNumber())
            {
                ret[pMasqueradingVector[14]]=getValueOfSettleNumber();
            }
            else
            {
                ret[pMasqueradingVector[14]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[15].empty())
        {
            if(getCountStorageNumber())
            {
                ret[pMasqueradingVector[15]]=getValueOfCountStorageNumber();
            }
            else
            {
                ret[pMasqueradingVector[15]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[16].empty())
        {
            if(getStoragePrice())
            {
                ret[pMasqueradingVector[16]]=getValueOfStoragePrice();
            }
            else
            {
                ret[pMasqueradingVector[16]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[17].empty())
        {
            if(getStorageStatus())
            {
                ret[pMasqueradingVector[17]]=getValueOfStorageStatus();
            }
            else
            {
                ret[pMasqueradingVector[17]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[18].empty())
        {
            if(getCompanyId())
            {
                ret[pMasqueradingVector[18]]=(Json::Int64)getValueOfCompanyId();
            }
            else
            {
                ret[pMasqueradingVector[18]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[19].empty())
        {
            if(getStorageType())
            {
                ret[pMasqueradingVector[19]]=getValueOfStorageType();
            }
            else
            {
                ret[pMasqueradingVector[19]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[20].empty())
        {
            if(getSaleOutStorageSkuChangeId())
            {
                ret[pMasqueradingVector[20]]=(Json::Int64)getValueOfSaleOutStorageSkuChangeId();
            }
            else
            {
                ret[pMasqueradingVector[20]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[21].empty())
        {
            if(getSaleOutStorageSkuBindId())
            {
                ret[pMasqueradingVector[21]]=(Json::Int64)getValueOfSaleOutStorageSkuBindId();
            }
            else
            {
                ret[pMasqueradingVector[21]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[22].empty())
        {
            if(getSaleOutStorageSkuReturnId())
            {
                ret[pMasqueradingVector[22]]=(Json::UInt64)getValueOfSaleOutStorageSkuReturnId();
            }
            else
            {
                ret[pMasqueradingVector[22]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[23].empty())
        {
            if(getActualStorageAmount())
            {
                ret[pMasqueradingVector[23]]=getValueOfActualStorageAmount();
            }
            else
            {
                ret[pMasqueradingVector[23]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[24].empty())
        {
            if(getSaleOrderId())
            {
                ret[pMasqueradingVector[24]]=(Json::Int64)getValueOfSaleOrderId();
            }
            else
            {
                ret[pMasqueradingVector[24]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[25].empty())
        {
            if(getSaleOrderKey())
            {
                ret[pMasqueradingVector[25]]=getValueOfSaleOrderKey();
            }
            else
            {
                ret[pMasqueradingVector[25]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[26].empty())
        {
            if(getCheckInvoiceNumber())
            {
                ret[pMasqueradingVector[26]]=getValueOfCheckInvoiceNumber();
            }
            else
            {
                ret[pMasqueradingVector[26]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=(Json::UInt64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getShopId())
    {
        ret["shop_id"]=(Json::UInt64)getValueOfShopId();
    }
    else
    {
        ret["shop_id"]=Json::Value();
    }
    if(getAdminId())
    {
        ret["admin_id"]=(Json::UInt64)getValueOfAdminId();
    }
    else
    {
        ret["admin_id"]=Json::Value();
    }
    if(getSaleOutStorageId())
    {
        ret["sale_out_storage_id"]=(Json::UInt64)getValueOfSaleOutStorageId();
    }
    else
    {
        ret["sale_out_storage_id"]=Json::Value();
    }
    if(getSaleOrderSkuId())
    {
        ret["sale_order_sku_id"]=(Json::UInt64)getValueOfSaleOrderSkuId();
    }
    else
    {
        ret["sale_order_sku_id"]=Json::Value();
    }
    if(getPurchaseInStorageSkuId())
    {
        ret["purchase_in_storage_sku_id"]=(Json::UInt64)getValueOfPurchaseInStorageSkuId();
    }
    else
    {
        ret["purchase_in_storage_sku_id"]=Json::Value();
    }
    if(getStorageNumber())
    {
        ret["storage_number"]=getValueOfStorageNumber();
    }
    else
    {
        ret["storage_number"]=Json::Value();
    }
    if(getProductId())
    {
        ret["product_id"]=(Json::Int64)getValueOfProductId();
    }
    else
    {
        ret["product_id"]=Json::Value();
    }
    if(getLossNumber())
    {
        ret["loss_number"]=getValueOfLossNumber();
    }
    else
    {
        ret["loss_number"]=Json::Value();
    }
    if(getIsDelete())
    {
        ret["is_delete"]=getValueOfIsDelete();
    }
    else
    {
        ret["is_delete"]=Json::Value();
    }
    if(getRemark())
    {
        ret["remark"]=getValueOfRemark();
    }
    else
    {
        ret["remark"]=Json::Value();
    }
    if(getCreateTime())
    {
        ret["create_time"]=getCreateTime()->toDbStringLocal();
    }
    else
    {
        ret["create_time"]=Json::Value();
    }
    if(getUpdateTime())
    {
        ret["update_time"]=getUpdateTime()->toDbStringLocal();
    }
    else
    {
        ret["update_time"]=Json::Value();
    }
    if(getPayNumber())
    {
        ret["pay_number"]=getValueOfPayNumber();
    }
    else
    {
        ret["pay_number"]=Json::Value();
    }
    if(getSettleNumber())
    {
        ret["settle_number"]=getValueOfSettleNumber();
    }
    else
    {
        ret["settle_number"]=Json::Value();
    }
    if(getCountStorageNumber())
    {
        ret["count_storage_number"]=getValueOfCountStorageNumber();
    }
    else
    {
        ret["count_storage_number"]=Json::Value();
    }
    if(getStoragePrice())
    {
        ret["storage_price"]=getValueOfStoragePrice();
    }
    else
    {
        ret["storage_price"]=Json::Value();
    }
    if(getStorageStatus())
    {
        ret["storage_status"]=getValueOfStorageStatus();
    }
    else
    {
        ret["storage_status"]=Json::Value();
    }
    if(getCompanyId())
    {
        ret["company_id"]=(Json::Int64)getValueOfCompanyId();
    }
    else
    {
        ret["company_id"]=Json::Value();
    }
    if(getStorageType())
    {
        ret["storage_type"]=getValueOfStorageType();
    }
    else
    {
        ret["storage_type"]=Json::Value();
    }
    if(getSaleOutStorageSkuChangeId())
    {
        ret["sale_out_storage_sku_change_id"]=(Json::Int64)getValueOfSaleOutStorageSkuChangeId();
    }
    else
    {
        ret["sale_out_storage_sku_change_id"]=Json::Value();
    }
    if(getSaleOutStorageSkuBindId())
    {
        ret["sale_out_storage_sku_bind_id"]=(Json::Int64)getValueOfSaleOutStorageSkuBindId();
    }
    else
    {
        ret["sale_out_storage_sku_bind_id"]=Json::Value();
    }
    if(getSaleOutStorageSkuReturnId())
    {
        ret["sale_out_storage_sku_return_id"]=(Json::UInt64)getValueOfSaleOutStorageSkuReturnId();
    }
    else
    {
        ret["sale_out_storage_sku_return_id"]=Json::Value();
    }
    if(getActualStorageAmount())
    {
        ret["actual_storage_amount"]=getValueOfActualStorageAmount();
    }
    else
    {
        ret["actual_storage_amount"]=Json::Value();
    }
    if(getSaleOrderId())
    {
        ret["sale_order_id"]=(Json::Int64)getValueOfSaleOrderId();
    }
    else
    {
        ret["sale_order_id"]=Json::Value();
    }
    if(getSaleOrderKey())
    {
        ret["sale_order_key"]=getValueOfSaleOrderKey();
    }
    else
    {
        ret["sale_order_key"]=Json::Value();
    }
    if(getCheckInvoiceNumber())
    {
        ret["check_invoice_number"]=getValueOfCheckInvoiceNumber();
    }
    else
    {
        ret["check_invoice_number"]=Json::Value();
    }
    return ret;
}

bool SaleOutStorageSku::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("shop_id"))
    {
        if(!validJsonOfField(1, "shop_id", pJson["shop_id"], err, true))
            return false;
    }
    if(pJson.isMember("admin_id"))
    {
        if(!validJsonOfField(2, "admin_id", pJson["admin_id"], err, true))
            return false;
    }
    if(pJson.isMember("sale_out_storage_id"))
    {
        if(!validJsonOfField(3, "sale_out_storage_id", pJson["sale_out_storage_id"], err, true))
            return false;
    }
    if(pJson.isMember("sale_order_sku_id"))
    {
        if(!validJsonOfField(4, "sale_order_sku_id", pJson["sale_order_sku_id"], err, true))
            return false;
    }
    if(pJson.isMember("purchase_in_storage_sku_id"))
    {
        if(!validJsonOfField(5, "purchase_in_storage_sku_id", pJson["purchase_in_storage_sku_id"], err, true))
            return false;
    }
    if(pJson.isMember("storage_number"))
    {
        if(!validJsonOfField(6, "storage_number", pJson["storage_number"], err, true))
            return false;
    }
    if(pJson.isMember("product_id"))
    {
        if(!validJsonOfField(7, "product_id", pJson["product_id"], err, true))
            return false;
    }
    else
    {
        err="The product_id column cannot be null";
        return false;
    }
    if(pJson.isMember("loss_number"))
    {
        if(!validJsonOfField(8, "loss_number", pJson["loss_number"], err, true))
            return false;
    }
    if(pJson.isMember("is_delete"))
    {
        if(!validJsonOfField(9, "is_delete", pJson["is_delete"], err, true))
            return false;
    }
    if(pJson.isMember("remark"))
    {
        if(!validJsonOfField(10, "remark", pJson["remark"], err, true))
            return false;
    }
    if(pJson.isMember("create_time"))
    {
        if(!validJsonOfField(11, "create_time", pJson["create_time"], err, true))
            return false;
    }
    if(pJson.isMember("update_time"))
    {
        if(!validJsonOfField(12, "update_time", pJson["update_time"], err, true))
            return false;
    }
    if(pJson.isMember("pay_number"))
    {
        if(!validJsonOfField(13, "pay_number", pJson["pay_number"], err, true))
            return false;
    }
    if(pJson.isMember("settle_number"))
    {
        if(!validJsonOfField(14, "settle_number", pJson["settle_number"], err, true))
            return false;
    }
    if(pJson.isMember("count_storage_number"))
    {
        if(!validJsonOfField(15, "count_storage_number", pJson["count_storage_number"], err, true))
            return false;
    }
    if(pJson.isMember("storage_price"))
    {
        if(!validJsonOfField(16, "storage_price", pJson["storage_price"], err, true))
            return false;
    }
    if(pJson.isMember("storage_status"))
    {
        if(!validJsonOfField(17, "storage_status", pJson["storage_status"], err, true))
            return false;
    }
    if(pJson.isMember("company_id"))
    {
        if(!validJsonOfField(18, "company_id", pJson["company_id"], err, true))
            return false;
    }
    if(pJson.isMember("storage_type"))
    {
        if(!validJsonOfField(19, "storage_type", pJson["storage_type"], err, true))
            return false;
    }
    if(pJson.isMember("sale_out_storage_sku_change_id"))
    {
        if(!validJsonOfField(20, "sale_out_storage_sku_change_id", pJson["sale_out_storage_sku_change_id"], err, true))
            return false;
    }
    if(pJson.isMember("sale_out_storage_sku_bind_id"))
    {
        if(!validJsonOfField(21, "sale_out_storage_sku_bind_id", pJson["sale_out_storage_sku_bind_id"], err, true))
            return false;
    }
    if(pJson.isMember("sale_out_storage_sku_return_id"))
    {
        if(!validJsonOfField(22, "sale_out_storage_sku_return_id", pJson["sale_out_storage_sku_return_id"], err, true))
            return false;
    }
    if(pJson.isMember("actual_storage_amount"))
    {
        if(!validJsonOfField(23, "actual_storage_amount", pJson["actual_storage_amount"], err, true))
            return false;
    }
    if(pJson.isMember("sale_order_id"))
    {
        if(!validJsonOfField(24, "sale_order_id", pJson["sale_order_id"], err, true))
            return false;
    }
    if(pJson.isMember("sale_order_key"))
    {
        if(!validJsonOfField(25, "sale_order_key", pJson["sale_order_key"], err, true))
            return false;
    }
    if(pJson.isMember("check_invoice_number"))
    {
        if(!validJsonOfField(26, "check_invoice_number", pJson["check_invoice_number"], err, true))
            return false;
    }
    return true;
}
bool SaleOutStorageSku::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                           const std::vector<std::string> &pMasqueradingVector,
                                                           std::string &err)
{
    if(pMasqueradingVector.size() != 27)
    {
        err = "Bad masquerading vector";
        return false;
    }
    if(!pMasqueradingVector[0].empty())
    {
        if(pJson.isMember(pMasqueradingVector[0]))
        {
            if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[1].empty())
    {
        if(pJson.isMember(pMasqueradingVector[1]))
        {
            if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[2].empty())
    {
        if(pJson.isMember(pMasqueradingVector[2]))
        {
            if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[3].empty())
    {
        if(pJson.isMember(pMasqueradingVector[3]))
        {
            if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[4].empty())
    {
        if(pJson.isMember(pMasqueradingVector[4]))
        {
            if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[5].empty())
    {
        if(pJson.isMember(pMasqueradingVector[5]))
        {
            if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[6].empty())
    {
        if(pJson.isMember(pMasqueradingVector[6]))
        {
            if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[7].empty())
    {
        if(pJson.isMember(pMasqueradingVector[7]))
        {
            if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                return false;
        }
        else
        {
            err="The " + pMasqueradingVector[7] + " column cannot be null";
            return false;
        }
    }
    if(!pMasqueradingVector[8].empty())
    {
        if(pJson.isMember(pMasqueradingVector[8]))
        {
            if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[9].empty())
    {
        if(pJson.isMember(pMasqueradingVector[9]))
        {
            if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[10].empty())
    {
        if(pJson.isMember(pMasqueradingVector[10]))
        {
            if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[11].empty())
    {
        if(pJson.isMember(pMasqueradingVector[11]))
        {
            if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[12].empty())
    {
        if(pJson.isMember(pMasqueradingVector[12]))
        {
            if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[13].empty())
    {
        if(pJson.isMember(pMasqueradingVector[13]))
        {
            if(!validJsonOfField(13, pMasqueradingVector[13], pJson[pMasqueradingVector[13]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[14].empty())
    {
        if(pJson.isMember(pMasqueradingVector[14]))
        {
            if(!validJsonOfField(14, pMasqueradingVector[14], pJson[pMasqueradingVector[14]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[15].empty())
    {
        if(pJson.isMember(pMasqueradingVector[15]))
        {
            if(!validJsonOfField(15, pMasqueradingVector[15], pJson[pMasqueradingVector[15]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[16].empty())
    {
        if(pJson.isMember(pMasqueradingVector[16]))
        {
            if(!validJsonOfField(16, pMasqueradingVector[16], pJson[pMasqueradingVector[16]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[17].empty())
    {
        if(pJson.isMember(pMasqueradingVector[17]))
        {
            if(!validJsonOfField(17, pMasqueradingVector[17], pJson[pMasqueradingVector[17]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[18].empty())
    {
        if(pJson.isMember(pMasqueradingVector[18]))
        {
            if(!validJsonOfField(18, pMasqueradingVector[18], pJson[pMasqueradingVector[18]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[19].empty())
    {
        if(pJson.isMember(pMasqueradingVector[19]))
        {
            if(!validJsonOfField(19, pMasqueradingVector[19], pJson[pMasqueradingVector[19]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[20].empty())
    {
        if(pJson.isMember(pMasqueradingVector[20]))
        {
            if(!validJsonOfField(20, pMasqueradingVector[20], pJson[pMasqueradingVector[20]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[21].empty())
    {
        if(pJson.isMember(pMasqueradingVector[21]))
        {
            if(!validJsonOfField(21, pMasqueradingVector[21], pJson[pMasqueradingVector[21]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[22].empty())
    {
        if(pJson.isMember(pMasqueradingVector[22]))
        {
            if(!validJsonOfField(22, pMasqueradingVector[22], pJson[pMasqueradingVector[22]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[23].empty())
    {
        if(pJson.isMember(pMasqueradingVector[23]))
        {
            if(!validJsonOfField(23, pMasqueradingVector[23], pJson[pMasqueradingVector[23]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[24].empty())
    {
        if(pJson.isMember(pMasqueradingVector[24]))
        {
            if(!validJsonOfField(24, pMasqueradingVector[24], pJson[pMasqueradingVector[24]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[25].empty())
    {
        if(pJson.isMember(pMasqueradingVector[25]))
        {
            if(!validJsonOfField(25, pMasqueradingVector[25], pJson[pMasqueradingVector[25]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[26].empty())
    {
        if(pJson.isMember(pMasqueradingVector[26]))
        {
            if(!validJsonOfField(26, pMasqueradingVector[26], pJson[pMasqueradingVector[26]], err, true))
                return false;
        }
    }
    return true;
}
bool SaleOutStorageSku::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("shop_id"))
    {
        if(!validJsonOfField(1, "shop_id", pJson["shop_id"], err, false))
            return false;
    }
    if(pJson.isMember("admin_id"))
    {
        if(!validJsonOfField(2, "admin_id", pJson["admin_id"], err, false))
            return false;
    }
    if(pJson.isMember("sale_out_storage_id"))
    {
        if(!validJsonOfField(3, "sale_out_storage_id", pJson["sale_out_storage_id"], err, false))
            return false;
    }
    if(pJson.isMember("sale_order_sku_id"))
    {
        if(!validJsonOfField(4, "sale_order_sku_id", pJson["sale_order_sku_id"], err, false))
            return false;
    }
    if(pJson.isMember("purchase_in_storage_sku_id"))
    {
        if(!validJsonOfField(5, "purchase_in_storage_sku_id", pJson["purchase_in_storage_sku_id"], err, false))
            return false;
    }
    if(pJson.isMember("storage_number"))
    {
        if(!validJsonOfField(6, "storage_number", pJson["storage_number"], err, false))
            return false;
    }
    if(pJson.isMember("product_id"))
    {
        if(!validJsonOfField(7, "product_id", pJson["product_id"], err, false))
            return false;
    }
    if(pJson.isMember("loss_number"))
    {
        if(!validJsonOfField(8, "loss_number", pJson["loss_number"], err, false))
            return false;
    }
    if(pJson.isMember("is_delete"))
    {
        if(!validJsonOfField(9, "is_delete", pJson["is_delete"], err, false))
            return false;
    }
    if(pJson.isMember("remark"))
    {
        if(!validJsonOfField(10, "remark", pJson["remark"], err, false))
            return false;
    }
    if(pJson.isMember("create_time"))
    {
        if(!validJsonOfField(11, "create_time", pJson["create_time"], err, false))
            return false;
    }
    if(pJson.isMember("update_time"))
    {
        if(!validJsonOfField(12, "update_time", pJson["update_time"], err, false))
            return false;
    }
    if(pJson.isMember("pay_number"))
    {
        if(!validJsonOfField(13, "pay_number", pJson["pay_number"], err, false))
            return false;
    }
    if(pJson.isMember("settle_number"))
    {
        if(!validJsonOfField(14, "settle_number", pJson["settle_number"], err, false))
            return false;
    }
    if(pJson.isMember("count_storage_number"))
    {
        if(!validJsonOfField(15, "count_storage_number", pJson["count_storage_number"], err, false))
            return false;
    }
    if(pJson.isMember("storage_price"))
    {
        if(!validJsonOfField(16, "storage_price", pJson["storage_price"], err, false))
            return false;
    }
    if(pJson.isMember("storage_status"))
    {
        if(!validJsonOfField(17, "storage_status", pJson["storage_status"], err, false))
            return false;
    }
    if(pJson.isMember("company_id"))
    {
        if(!validJsonOfField(18, "company_id", pJson["company_id"], err, false))
            return false;
    }
    if(pJson.isMember("storage_type"))
    {
        if(!validJsonOfField(19, "storage_type", pJson["storage_type"], err, false))
            return false;
    }
    if(pJson.isMember("sale_out_storage_sku_change_id"))
    {
        if(!validJsonOfField(20, "sale_out_storage_sku_change_id", pJson["sale_out_storage_sku_change_id"], err, false))
            return false;
    }
    if(pJson.isMember("sale_out_storage_sku_bind_id"))
    {
        if(!validJsonOfField(21, "sale_out_storage_sku_bind_id", pJson["sale_out_storage_sku_bind_id"], err, false))
            return false;
    }
    if(pJson.isMember("sale_out_storage_sku_return_id"))
    {
        if(!validJsonOfField(22, "sale_out_storage_sku_return_id", pJson["sale_out_storage_sku_return_id"], err, false))
            return false;
    }
    if(pJson.isMember("actual_storage_amount"))
    {
        if(!validJsonOfField(23, "actual_storage_amount", pJson["actual_storage_amount"], err, false))
            return false;
    }
    if(pJson.isMember("sale_order_id"))
    {
        if(!validJsonOfField(24, "sale_order_id", pJson["sale_order_id"], err, false))
            return false;
    }
    if(pJson.isMember("sale_order_key"))
    {
        if(!validJsonOfField(25, "sale_order_key", pJson["sale_order_key"], err, false))
            return false;
    }
    if(pJson.isMember("check_invoice_number"))
    {
        if(!validJsonOfField(26, "check_invoice_number", pJson["check_invoice_number"], err, false))
            return false;
    }
    return true;
}
bool SaleOutStorageSku::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                         const std::vector<std::string> &pMasqueradingVector,
                                                         std::string &err)
{
    if(pMasqueradingVector.size() != 27)
    {
        err = "Bad masquerading vector";
        return false;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
            return false;
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
            return false;
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
            return false;
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
            return false;
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
            return false;
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
            return false;
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
            return false;
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, false))
            return false;
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, false))
            return false;
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, false))
            return false;
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, false))
            return false;
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, false))
            return false;
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        if(!validJsonOfField(13, pMasqueradingVector[13], pJson[pMasqueradingVector[13]], err, false))
            return false;
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        if(!validJsonOfField(14, pMasqueradingVector[14], pJson[pMasqueradingVector[14]], err, false))
            return false;
    }
    if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
    {
        if(!validJsonOfField(15, pMasqueradingVector[15], pJson[pMasqueradingVector[15]], err, false))
            return false;
    }
    if(!pMasqueradingVector[16].empty() && pJson.isMember(pMasqueradingVector[16]))
    {
        if(!validJsonOfField(16, pMasqueradingVector[16], pJson[pMasqueradingVector[16]], err, false))
            return false;
    }
    if(!pMasqueradingVector[17].empty() && pJson.isMember(pMasqueradingVector[17]))
    {
        if(!validJsonOfField(17, pMasqueradingVector[17], pJson[pMasqueradingVector[17]], err, false))
            return false;
    }
    if(!pMasqueradingVector[18].empty() && pJson.isMember(pMasqueradingVector[18]))
    {
        if(!validJsonOfField(18, pMasqueradingVector[18], pJson[pMasqueradingVector[18]], err, false))
            return false;
    }
    if(!pMasqueradingVector[19].empty() && pJson.isMember(pMasqueradingVector[19]))
    {
        if(!validJsonOfField(19, pMasqueradingVector[19], pJson[pMasqueradingVector[19]], err, false))
            return false;
    }
    if(!pMasqueradingVector[20].empty() && pJson.isMember(pMasqueradingVector[20]))
    {
        if(!validJsonOfField(20, pMasqueradingVector[20], pJson[pMasqueradingVector[20]], err, false))
            return false;
    }
    if(!pMasqueradingVector[21].empty() && pJson.isMember(pMasqueradingVector[21]))
    {
        if(!validJsonOfField(21, pMasqueradingVector[21], pJson[pMasqueradingVector[21]], err, false))
            return false;
    }
    if(!pMasqueradingVector[22].empty() && pJson.isMember(pMasqueradingVector[22]))
    {
        if(!validJsonOfField(22, pMasqueradingVector[22], pJson[pMasqueradingVector[22]], err, false))
            return false;
    }
    if(!pMasqueradingVector[23].empty() && pJson.isMember(pMasqueradingVector[23]))
    {
        if(!validJsonOfField(23, pMasqueradingVector[23], pJson[pMasqueradingVector[23]], err, false))
            return false;
    }
    if(!pMasqueradingVector[24].empty() && pJson.isMember(pMasqueradingVector[24]))
    {
        if(!validJsonOfField(24, pMasqueradingVector[24], pJson[pMasqueradingVector[24]], err, false))
            return false;
    }
    if(!pMasqueradingVector[25].empty() && pJson.isMember(pMasqueradingVector[25]))
    {
        if(!validJsonOfField(25, pMasqueradingVector[25], pJson[pMasqueradingVector[25]], err, false))
            return false;
    }
    if(!pMasqueradingVector[26].empty() && pJson.isMember(pMasqueradingVector[26]))
    {
        if(!validJsonOfField(26, pMasqueradingVector[26], pJson[pMasqueradingVector[26]], err, false))
            return false;
    }
    return true;
}
bool SaleOutStorageSku::validJsonOfField(size_t index,
                                         const std::string &fieldName,
                                         const Json::Value &pJson, 
                                         std::string &err, 
                                         bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }        
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 5:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 6:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 7:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 8:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 9:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 10:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;               
            }

            break;
        case 11:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 12:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 13:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 14:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 15:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 16:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 17:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 18:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 19:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 20:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 21:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 22:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 23:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 24:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 25:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 20)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 20)";
                return false;               
            }

            break;
        case 26:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
     
        default:
            err="Internal error in the server";
            return false;
            break;
    }
    return true;
}
