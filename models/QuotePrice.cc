/**
 *
 *  QuotePrice.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "QuotePrice.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::v2;

const std::string QuotePrice::Cols::_id = "id";
const std::string QuotePrice::Cols::_create_time = "create_time";
const std::string QuotePrice::Cols::_update_time = "update_time";
const std::string QuotePrice::Cols::_remark = "remark";
const std::string QuotePrice::Cols::_is_delete = "is_delete";
const std::string QuotePrice::Cols::_shop_id = "shop_id";
const std::string QuotePrice::Cols::_admin_id = "admin_id";
const std::string QuotePrice::Cols::_company_id = "company_id";
const std::string QuotePrice::Cols::_source = "source";
const std::string QuotePrice::Cols::_quote_price_type = "quote_price_type";
const std::string QuotePrice::Cols::_period_type = "period_type";
const std::string QuotePrice::Cols::_service_id = "service_id";
const std::string QuotePrice::Cols::_delivery_method = "delivery_method";
const std::string QuotePrice::Cols::_currency_type = "currency_type";
const std::string QuotePrice::Cols::_quote_price = "quote_price";
const std::string QuotePrice::Cols::_lifting_water = "lifting_water";
const std::string QuotePrice::Cols::_processing_fee = "processing_fee";
const std::string QuotePrice::Cols::_sell_out_number = "sell_out_number";
const std::string QuotePrice::Cols::_quote_price_info = "quote_price_info";
const std::string QuotePrice::Cols::_product_id = "product_id";
const std::string QuotePrice::Cols::_product_category_id = "product_category_id";
const std::string QuotePrice::Cols::_product_model_id = "product_model_id";
const std::string QuotePrice::Cols::_product_brand_id = "product_brand_id";
const std::string QuotePrice::Cols::_is_cancel = "is_cancel";
const std::string QuotePrice::Cols::_delivery_place = "delivery_place";
const std::string QuotePrice::Cols::_sort = "sort";
const std::string QuotePrice::Cols::_province_id = "province_id";
const std::string QuotePrice::Cols::_city_id = "city_id";
const std::string QuotePrice::Cols::_area_id = "area_id";
const std::string QuotePrice::Cols::_address = "address";
const std::string QuotePrice::Cols::_payment_method = "payment_method";
const std::string QuotePrice::Cols::_delivery_date = "delivery_date";
const std::string QuotePrice::Cols::_point_price_type = "point_price_type";
const std::string QuotePrice::Cols::_cash_on_delivery_days = "cash_on_delivery_days";
const std::string QuotePrice::Cols::_is_show = "is_show";
const std::string QuotePrice::Cols::_quote_date = "quote_date";
const std::string QuotePrice::primaryKeyName = "id";
const bool QuotePrice::hasPrimaryKey = true;
const std::string QuotePrice::tableName = "quote_price";

const std::vector<typename QuotePrice::MetaData> QuotePrice::metaData_={
{"id","uint64_t","bigint(20) unsigned",8,1,1,1},
{"create_time","::trantor::Date","datetime",0,0,0,1},
{"update_time","::trantor::Date","datetime",0,0,0,1},
{"remark","std::string","varchar(200)",200,0,0,0},
{"is_delete","int8_t","tinyint(1)",1,0,0,1},
{"shop_id","uint64_t","bigint(20) unsigned",8,0,0,0},
{"admin_id","uint64_t","bigint(20) unsigned",8,0,0,1},
{"company_id","uint64_t","bigint(20) unsigned",8,0,0,1},
{"source","std::string","varchar(10)",10,0,0,0},
{"quote_price_type","uint8_t","tinyint(1) unsigned",1,0,0,1},
{"period_type","uint8_t","tinyint(1) unsigned",1,0,0,1},
{"service_id","uint64_t","bigint(20) unsigned",8,0,0,1},
{"delivery_method","uint8_t","tinyint(1) unsigned",1,0,0,1},
{"currency_type","uint8_t","tinyint(1) unsigned",1,0,0,1},
{"quote_price","std::string","decimal(32,5)",0,0,0,1},
{"lifting_water","std::string","decimal(32,5)",0,0,0,1},
{"processing_fee","std::string","decimal(32,5)",0,0,0,1},
{"sell_out_number","std::string","decimal(32,5)",0,0,0,1},
{"quote_price_info","std::string","text",0,0,0,0},
{"product_id","uint64_t","bigint(20) unsigned",8,0,0,1},
{"product_category_id","uint64_t","bigint(20) unsigned",8,0,0,1},
{"product_model_id","uint64_t","bigint(20) unsigned",8,0,0,1},
{"product_brand_id","uint64_t","bigint(20) unsigned",8,0,0,1},
{"is_cancel","uint8_t","tinyint(1) unsigned",1,0,0,1},
{"delivery_place","std::string","varchar(20)",20,0,0,0},
{"sort","int32_t","int(10)",4,0,0,1},
{"province_id","int64_t","bigint(20)",8,0,0,1},
{"city_id","int64_t","bigint(20)",8,0,0,1},
{"area_id","int64_t","bigint(20)",8,0,0,1},
{"address","std::string","varchar(50)",50,0,0,0},
{"payment_method","int8_t","tinyint(1)",1,0,0,0},
{"delivery_date","::trantor::Date","datetime",0,0,0,0},
{"point_price_type","int8_t","tinyint(1)",1,0,0,1},
{"cash_on_delivery_days","int8_t","tinyint(1)",1,0,0,1},
{"is_show","uint8_t","tinyint(1) unsigned",1,0,0,1},
{"quote_date","::trantor::Date","date",0,0,0,0}
};
const std::string &QuotePrice::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
QuotePrice::QuotePrice(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<uint64_t>(r["id"].as<uint64_t>());
        }
        if(!r["create_time"].isNull())
        {
            auto timeStr = r["create_time"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        if(!r["update_time"].isNull())
        {
            auto timeStr = r["update_time"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        if(!r["remark"].isNull())
        {
            remark_=std::make_shared<std::string>(r["remark"].as<std::string>());
        }
        if(!r["is_delete"].isNull())
        {
            isDelete_=std::make_shared<int8_t>(r["is_delete"].as<int8_t>());
        }
        if(!r["shop_id"].isNull())
        {
            shopId_=std::make_shared<uint64_t>(r["shop_id"].as<uint64_t>());
        }
        if(!r["admin_id"].isNull())
        {
            adminId_=std::make_shared<uint64_t>(r["admin_id"].as<uint64_t>());
        }
        if(!r["company_id"].isNull())
        {
            companyId_=std::make_shared<uint64_t>(r["company_id"].as<uint64_t>());
        }
        if(!r["source"].isNull())
        {
            source_=std::make_shared<std::string>(r["source"].as<std::string>());
        }
        if(!r["quote_price_type"].isNull())
        {
            quotePriceType_=std::make_shared<uint8_t>(r["quote_price_type"].as<uint8_t>());
        }
        if(!r["period_type"].isNull())
        {
            periodType_=std::make_shared<uint8_t>(r["period_type"].as<uint8_t>());
        }
        if(!r["service_id"].isNull())
        {
            serviceId_=std::make_shared<uint64_t>(r["service_id"].as<uint64_t>());
        }
        if(!r["delivery_method"].isNull())
        {
            deliveryMethod_=std::make_shared<uint8_t>(r["delivery_method"].as<uint8_t>());
        }
        if(!r["currency_type"].isNull())
        {
            currencyType_=std::make_shared<uint8_t>(r["currency_type"].as<uint8_t>());
        }
        if(!r["quote_price"].isNull())
        {
            quotePrice_=std::make_shared<std::string>(r["quote_price"].as<std::string>());
        }
        if(!r["lifting_water"].isNull())
        {
            liftingWater_=std::make_shared<std::string>(r["lifting_water"].as<std::string>());
        }
        if(!r["processing_fee"].isNull())
        {
            processingFee_=std::make_shared<std::string>(r["processing_fee"].as<std::string>());
        }
        if(!r["sell_out_number"].isNull())
        {
            sellOutNumber_=std::make_shared<std::string>(r["sell_out_number"].as<std::string>());
        }
        if(!r["quote_price_info"].isNull())
        {
            quotePriceInfo_=std::make_shared<std::string>(r["quote_price_info"].as<std::string>());
        }
        if(!r["product_id"].isNull())
        {
            productId_=std::make_shared<uint64_t>(r["product_id"].as<uint64_t>());
        }
        if(!r["product_category_id"].isNull())
        {
            productCategoryId_=std::make_shared<uint64_t>(r["product_category_id"].as<uint64_t>());
        }
        if(!r["product_model_id"].isNull())
        {
            productModelId_=std::make_shared<uint64_t>(r["product_model_id"].as<uint64_t>());
        }
        if(!r["product_brand_id"].isNull())
        {
            productBrandId_=std::make_shared<uint64_t>(r["product_brand_id"].as<uint64_t>());
        }
        if(!r["is_cancel"].isNull())
        {
            isCancel_=std::make_shared<uint8_t>(r["is_cancel"].as<uint8_t>());
        }
        if(!r["delivery_place"].isNull())
        {
            deliveryPlace_=std::make_shared<std::string>(r["delivery_place"].as<std::string>());
        }
        if(!r["sort"].isNull())
        {
            sort_=std::make_shared<int32_t>(r["sort"].as<int32_t>());
        }
        if(!r["province_id"].isNull())
        {
            provinceId_=std::make_shared<int64_t>(r["province_id"].as<int64_t>());
        }
        if(!r["city_id"].isNull())
        {
            cityId_=std::make_shared<int64_t>(r["city_id"].as<int64_t>());
        }
        if(!r["area_id"].isNull())
        {
            areaId_=std::make_shared<int64_t>(r["area_id"].as<int64_t>());
        }
        if(!r["address"].isNull())
        {
            address_=std::make_shared<std::string>(r["address"].as<std::string>());
        }
        if(!r["payment_method"].isNull())
        {
            paymentMethod_=std::make_shared<int8_t>(r["payment_method"].as<int8_t>());
        }
        if(!r["delivery_date"].isNull())
        {
            auto timeStr = r["delivery_date"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            deliveryDate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        if(!r["point_price_type"].isNull())
        {
            pointPriceType_=std::make_shared<int8_t>(r["point_price_type"].as<int8_t>());
        }
        if(!r["cash_on_delivery_days"].isNull())
        {
            cashOnDeliveryDays_=std::make_shared<int8_t>(r["cash_on_delivery_days"].as<int8_t>());
        }
        if(!r["is_show"].isNull())
        {
            isShow_=std::make_shared<uint8_t>(r["is_show"].as<uint8_t>());
        }
        if(!r["quote_date"].isNull())
        {
            auto daysStr = r["quote_date"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            quoteDate_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 36 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            remark_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            isDelete_=std::make_shared<int8_t>(r[index].as<int8_t>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            shopId_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            adminId_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            companyId_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 8;
        if(!r[index].isNull())
        {
            source_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 9;
        if(!r[index].isNull())
        {
            quotePriceType_=std::make_shared<uint8_t>(r[index].as<uint8_t>());
        }
        index = offset + 10;
        if(!r[index].isNull())
        {
            periodType_=std::make_shared<uint8_t>(r[index].as<uint8_t>());
        }
        index = offset + 11;
        if(!r[index].isNull())
        {
            serviceId_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 12;
        if(!r[index].isNull())
        {
            deliveryMethod_=std::make_shared<uint8_t>(r[index].as<uint8_t>());
        }
        index = offset + 13;
        if(!r[index].isNull())
        {
            currencyType_=std::make_shared<uint8_t>(r[index].as<uint8_t>());
        }
        index = offset + 14;
        if(!r[index].isNull())
        {
            quotePrice_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 15;
        if(!r[index].isNull())
        {
            liftingWater_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 16;
        if(!r[index].isNull())
        {
            processingFee_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 17;
        if(!r[index].isNull())
        {
            sellOutNumber_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 18;
        if(!r[index].isNull())
        {
            quotePriceInfo_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 19;
        if(!r[index].isNull())
        {
            productId_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 20;
        if(!r[index].isNull())
        {
            productCategoryId_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 21;
        if(!r[index].isNull())
        {
            productModelId_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 22;
        if(!r[index].isNull())
        {
            productBrandId_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 23;
        if(!r[index].isNull())
        {
            isCancel_=std::make_shared<uint8_t>(r[index].as<uint8_t>());
        }
        index = offset + 24;
        if(!r[index].isNull())
        {
            deliveryPlace_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 25;
        if(!r[index].isNull())
        {
            sort_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 26;
        if(!r[index].isNull())
        {
            provinceId_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 27;
        if(!r[index].isNull())
        {
            cityId_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 28;
        if(!r[index].isNull())
        {
            areaId_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 29;
        if(!r[index].isNull())
        {
            address_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 30;
        if(!r[index].isNull())
        {
            paymentMethod_=std::make_shared<int8_t>(r[index].as<int8_t>());
        }
        index = offset + 31;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            deliveryDate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        index = offset + 32;
        if(!r[index].isNull())
        {
            pointPriceType_=std::make_shared<int8_t>(r[index].as<int8_t>());
        }
        index = offset + 33;
        if(!r[index].isNull())
        {
            cashOnDeliveryDays_=std::make_shared<int8_t>(r[index].as<int8_t>());
        }
        index = offset + 34;
        if(!r[index].isNull())
        {
            isShow_=std::make_shared<uint8_t>(r[index].as<uint8_t>());
        }
        index = offset + 35;
        if(!r[index].isNull())
        {
            auto daysStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            quoteDate_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }

}

QuotePrice::QuotePrice(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 36)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[1]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[2]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            remark_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            isDelete_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[4]].asInt64());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            shopId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[5]].asUInt64());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            adminId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[6]].asUInt64());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            companyId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[7]].asUInt64());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            source_=std::make_shared<std::string>(pJson[pMasqueradingVector[8]].asString());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            quotePriceType_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[9]].asUInt64());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            periodType_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[10]].asUInt64());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            serviceId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[11]].asUInt64());
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            deliveryMethod_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[12]].asUInt64());
        }
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        dirtyFlag_[13] = true;
        if(!pJson[pMasqueradingVector[13]].isNull())
        {
            currencyType_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[13]].asUInt64());
        }
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        dirtyFlag_[14] = true;
        if(!pJson[pMasqueradingVector[14]].isNull())
        {
            quotePrice_=std::make_shared<std::string>(pJson[pMasqueradingVector[14]].asString());
        }
    }
    if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
    {
        dirtyFlag_[15] = true;
        if(!pJson[pMasqueradingVector[15]].isNull())
        {
            liftingWater_=std::make_shared<std::string>(pJson[pMasqueradingVector[15]].asString());
        }
    }
    if(!pMasqueradingVector[16].empty() && pJson.isMember(pMasqueradingVector[16]))
    {
        dirtyFlag_[16] = true;
        if(!pJson[pMasqueradingVector[16]].isNull())
        {
            processingFee_=std::make_shared<std::string>(pJson[pMasqueradingVector[16]].asString());
        }
    }
    if(!pMasqueradingVector[17].empty() && pJson.isMember(pMasqueradingVector[17]))
    {
        dirtyFlag_[17] = true;
        if(!pJson[pMasqueradingVector[17]].isNull())
        {
            sellOutNumber_=std::make_shared<std::string>(pJson[pMasqueradingVector[17]].asString());
        }
    }
    if(!pMasqueradingVector[18].empty() && pJson.isMember(pMasqueradingVector[18]))
    {
        dirtyFlag_[18] = true;
        if(!pJson[pMasqueradingVector[18]].isNull())
        {
            quotePriceInfo_=std::make_shared<std::string>(pJson[pMasqueradingVector[18]].asString());
        }
    }
    if(!pMasqueradingVector[19].empty() && pJson.isMember(pMasqueradingVector[19]))
    {
        dirtyFlag_[19] = true;
        if(!pJson[pMasqueradingVector[19]].isNull())
        {
            productId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[19]].asUInt64());
        }
    }
    if(!pMasqueradingVector[20].empty() && pJson.isMember(pMasqueradingVector[20]))
    {
        dirtyFlag_[20] = true;
        if(!pJson[pMasqueradingVector[20]].isNull())
        {
            productCategoryId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[20]].asUInt64());
        }
    }
    if(!pMasqueradingVector[21].empty() && pJson.isMember(pMasqueradingVector[21]))
    {
        dirtyFlag_[21] = true;
        if(!pJson[pMasqueradingVector[21]].isNull())
        {
            productModelId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[21]].asUInt64());
        }
    }
    if(!pMasqueradingVector[22].empty() && pJson.isMember(pMasqueradingVector[22]))
    {
        dirtyFlag_[22] = true;
        if(!pJson[pMasqueradingVector[22]].isNull())
        {
            productBrandId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[22]].asUInt64());
        }
    }
    if(!pMasqueradingVector[23].empty() && pJson.isMember(pMasqueradingVector[23]))
    {
        dirtyFlag_[23] = true;
        if(!pJson[pMasqueradingVector[23]].isNull())
        {
            isCancel_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[23]].asUInt64());
        }
    }
    if(!pMasqueradingVector[24].empty() && pJson.isMember(pMasqueradingVector[24]))
    {
        dirtyFlag_[24] = true;
        if(!pJson[pMasqueradingVector[24]].isNull())
        {
            deliveryPlace_=std::make_shared<std::string>(pJson[pMasqueradingVector[24]].asString());
        }
    }
    if(!pMasqueradingVector[25].empty() && pJson.isMember(pMasqueradingVector[25]))
    {
        dirtyFlag_[25] = true;
        if(!pJson[pMasqueradingVector[25]].isNull())
        {
            sort_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[25]].asInt64());
        }
    }
    if(!pMasqueradingVector[26].empty() && pJson.isMember(pMasqueradingVector[26]))
    {
        dirtyFlag_[26] = true;
        if(!pJson[pMasqueradingVector[26]].isNull())
        {
            provinceId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[26]].asInt64());
        }
    }
    if(!pMasqueradingVector[27].empty() && pJson.isMember(pMasqueradingVector[27]))
    {
        dirtyFlag_[27] = true;
        if(!pJson[pMasqueradingVector[27]].isNull())
        {
            cityId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[27]].asInt64());
        }
    }
    if(!pMasqueradingVector[28].empty() && pJson.isMember(pMasqueradingVector[28]))
    {
        dirtyFlag_[28] = true;
        if(!pJson[pMasqueradingVector[28]].isNull())
        {
            areaId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[28]].asInt64());
        }
    }
    if(!pMasqueradingVector[29].empty() && pJson.isMember(pMasqueradingVector[29]))
    {
        dirtyFlag_[29] = true;
        if(!pJson[pMasqueradingVector[29]].isNull())
        {
            address_=std::make_shared<std::string>(pJson[pMasqueradingVector[29]].asString());
        }
    }
    if(!pMasqueradingVector[30].empty() && pJson.isMember(pMasqueradingVector[30]))
    {
        dirtyFlag_[30] = true;
        if(!pJson[pMasqueradingVector[30]].isNull())
        {
            paymentMethod_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[30]].asInt64());
        }
    }
    if(!pMasqueradingVector[31].empty() && pJson.isMember(pMasqueradingVector[31]))
    {
        dirtyFlag_[31] = true;
        if(!pJson[pMasqueradingVector[31]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[31]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            deliveryDate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[32].empty() && pJson.isMember(pMasqueradingVector[32]))
    {
        dirtyFlag_[32] = true;
        if(!pJson[pMasqueradingVector[32]].isNull())
        {
            pointPriceType_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[32]].asInt64());
        }
    }
    if(!pMasqueradingVector[33].empty() && pJson.isMember(pMasqueradingVector[33]))
    {
        dirtyFlag_[33] = true;
        if(!pJson[pMasqueradingVector[33]].isNull())
        {
            cashOnDeliveryDays_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[33]].asInt64());
        }
    }
    if(!pMasqueradingVector[34].empty() && pJson.isMember(pMasqueradingVector[34]))
    {
        dirtyFlag_[34] = true;
        if(!pJson[pMasqueradingVector[34]].isNull())
        {
            isShow_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[34]].asUInt64());
        }
    }
    if(!pMasqueradingVector[35].empty() && pJson.isMember(pMasqueradingVector[35]))
    {
        dirtyFlag_[35] = true;
        if(!pJson[pMasqueradingVector[35]].isNull())
        {
            auto daysStr = pJson[pMasqueradingVector[35]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            quoteDate_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
}

QuotePrice::QuotePrice(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson["id"].asUInt64());
        }
    }
    if(pJson.isMember("create_time"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["create_time"].isNull())
        {
            auto timeStr = pJson["create_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("update_time"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["update_time"].isNull())
        {
            auto timeStr = pJson["update_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("remark"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["remark"].isNull())
        {
            remark_=std::make_shared<std::string>(pJson["remark"].asString());
        }
    }
    if(pJson.isMember("is_delete"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["is_delete"].isNull())
        {
            isDelete_=std::make_shared<int8_t>((int8_t)pJson["is_delete"].asInt64());
        }
    }
    if(pJson.isMember("shop_id"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["shop_id"].isNull())
        {
            shopId_=std::make_shared<uint64_t>((uint64_t)pJson["shop_id"].asUInt64());
        }
    }
    if(pJson.isMember("admin_id"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["admin_id"].isNull())
        {
            adminId_=std::make_shared<uint64_t>((uint64_t)pJson["admin_id"].asUInt64());
        }
    }
    if(pJson.isMember("company_id"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["company_id"].isNull())
        {
            companyId_=std::make_shared<uint64_t>((uint64_t)pJson["company_id"].asUInt64());
        }
    }
    if(pJson.isMember("source"))
    {
        dirtyFlag_[8]=true;
        if(!pJson["source"].isNull())
        {
            source_=std::make_shared<std::string>(pJson["source"].asString());
        }
    }
    if(pJson.isMember("quote_price_type"))
    {
        dirtyFlag_[9]=true;
        if(!pJson["quote_price_type"].isNull())
        {
            quotePriceType_=std::make_shared<uint8_t>((uint8_t)pJson["quote_price_type"].asUInt64());
        }
    }
    if(pJson.isMember("period_type"))
    {
        dirtyFlag_[10]=true;
        if(!pJson["period_type"].isNull())
        {
            periodType_=std::make_shared<uint8_t>((uint8_t)pJson["period_type"].asUInt64());
        }
    }
    if(pJson.isMember("service_id"))
    {
        dirtyFlag_[11]=true;
        if(!pJson["service_id"].isNull())
        {
            serviceId_=std::make_shared<uint64_t>((uint64_t)pJson["service_id"].asUInt64());
        }
    }
    if(pJson.isMember("delivery_method"))
    {
        dirtyFlag_[12]=true;
        if(!pJson["delivery_method"].isNull())
        {
            deliveryMethod_=std::make_shared<uint8_t>((uint8_t)pJson["delivery_method"].asUInt64());
        }
    }
    if(pJson.isMember("currency_type"))
    {
        dirtyFlag_[13]=true;
        if(!pJson["currency_type"].isNull())
        {
            currencyType_=std::make_shared<uint8_t>((uint8_t)pJson["currency_type"].asUInt64());
        }
    }
    if(pJson.isMember("quote_price"))
    {
        dirtyFlag_[14]=true;
        if(!pJson["quote_price"].isNull())
        {
            quotePrice_=std::make_shared<std::string>(pJson["quote_price"].asString());
        }
    }
    if(pJson.isMember("lifting_water"))
    {
        dirtyFlag_[15]=true;
        if(!pJson["lifting_water"].isNull())
        {
            liftingWater_=std::make_shared<std::string>(pJson["lifting_water"].asString());
        }
    }
    if(pJson.isMember("processing_fee"))
    {
        dirtyFlag_[16]=true;
        if(!pJson["processing_fee"].isNull())
        {
            processingFee_=std::make_shared<std::string>(pJson["processing_fee"].asString());
        }
    }
    if(pJson.isMember("sell_out_number"))
    {
        dirtyFlag_[17]=true;
        if(!pJson["sell_out_number"].isNull())
        {
            sellOutNumber_=std::make_shared<std::string>(pJson["sell_out_number"].asString());
        }
    }
    if(pJson.isMember("quote_price_info"))
    {
        dirtyFlag_[18]=true;
        if(!pJson["quote_price_info"].isNull())
        {
            quotePriceInfo_=std::make_shared<std::string>(pJson["quote_price_info"].asString());
        }
    }
    if(pJson.isMember("product_id"))
    {
        dirtyFlag_[19]=true;
        if(!pJson["product_id"].isNull())
        {
            productId_=std::make_shared<uint64_t>((uint64_t)pJson["product_id"].asUInt64());
        }
    }
    if(pJson.isMember("product_category_id"))
    {
        dirtyFlag_[20]=true;
        if(!pJson["product_category_id"].isNull())
        {
            productCategoryId_=std::make_shared<uint64_t>((uint64_t)pJson["product_category_id"].asUInt64());
        }
    }
    if(pJson.isMember("product_model_id"))
    {
        dirtyFlag_[21]=true;
        if(!pJson["product_model_id"].isNull())
        {
            productModelId_=std::make_shared<uint64_t>((uint64_t)pJson["product_model_id"].asUInt64());
        }
    }
    if(pJson.isMember("product_brand_id"))
    {
        dirtyFlag_[22]=true;
        if(!pJson["product_brand_id"].isNull())
        {
            productBrandId_=std::make_shared<uint64_t>((uint64_t)pJson["product_brand_id"].asUInt64());
        }
    }
    if(pJson.isMember("is_cancel"))
    {
        dirtyFlag_[23]=true;
        if(!pJson["is_cancel"].isNull())
        {
            isCancel_=std::make_shared<uint8_t>((uint8_t)pJson["is_cancel"].asUInt64());
        }
    }
    if(pJson.isMember("delivery_place"))
    {
        dirtyFlag_[24]=true;
        if(!pJson["delivery_place"].isNull())
        {
            deliveryPlace_=std::make_shared<std::string>(pJson["delivery_place"].asString());
        }
    }
    if(pJson.isMember("sort"))
    {
        dirtyFlag_[25]=true;
        if(!pJson["sort"].isNull())
        {
            sort_=std::make_shared<int32_t>((int32_t)pJson["sort"].asInt64());
        }
    }
    if(pJson.isMember("province_id"))
    {
        dirtyFlag_[26]=true;
        if(!pJson["province_id"].isNull())
        {
            provinceId_=std::make_shared<int64_t>((int64_t)pJson["province_id"].asInt64());
        }
    }
    if(pJson.isMember("city_id"))
    {
        dirtyFlag_[27]=true;
        if(!pJson["city_id"].isNull())
        {
            cityId_=std::make_shared<int64_t>((int64_t)pJson["city_id"].asInt64());
        }
    }
    if(pJson.isMember("area_id"))
    {
        dirtyFlag_[28]=true;
        if(!pJson["area_id"].isNull())
        {
            areaId_=std::make_shared<int64_t>((int64_t)pJson["area_id"].asInt64());
        }
    }
    if(pJson.isMember("address"))
    {
        dirtyFlag_[29]=true;
        if(!pJson["address"].isNull())
        {
            address_=std::make_shared<std::string>(pJson["address"].asString());
        }
    }
    if(pJson.isMember("payment_method"))
    {
        dirtyFlag_[30]=true;
        if(!pJson["payment_method"].isNull())
        {
            paymentMethod_=std::make_shared<int8_t>((int8_t)pJson["payment_method"].asInt64());
        }
    }
    if(pJson.isMember("delivery_date"))
    {
        dirtyFlag_[31]=true;
        if(!pJson["delivery_date"].isNull())
        {
            auto timeStr = pJson["delivery_date"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            deliveryDate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("point_price_type"))
    {
        dirtyFlag_[32]=true;
        if(!pJson["point_price_type"].isNull())
        {
            pointPriceType_=std::make_shared<int8_t>((int8_t)pJson["point_price_type"].asInt64());
        }
    }
    if(pJson.isMember("cash_on_delivery_days"))
    {
        dirtyFlag_[33]=true;
        if(!pJson["cash_on_delivery_days"].isNull())
        {
            cashOnDeliveryDays_=std::make_shared<int8_t>((int8_t)pJson["cash_on_delivery_days"].asInt64());
        }
    }
    if(pJson.isMember("is_show"))
    {
        dirtyFlag_[34]=true;
        if(!pJson["is_show"].isNull())
        {
            isShow_=std::make_shared<uint8_t>((uint8_t)pJson["is_show"].asUInt64());
        }
    }
    if(pJson.isMember("quote_date"))
    {
        dirtyFlag_[35]=true;
        if(!pJson["quote_date"].isNull())
        {
            auto daysStr = pJson["quote_date"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            quoteDate_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
}

void QuotePrice::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 36)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[1]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[2]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            remark_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            isDelete_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[4]].asInt64());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            shopId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[5]].asUInt64());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            adminId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[6]].asUInt64());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            companyId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[7]].asUInt64());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            source_=std::make_shared<std::string>(pJson[pMasqueradingVector[8]].asString());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            quotePriceType_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[9]].asUInt64());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            periodType_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[10]].asUInt64());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            serviceId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[11]].asUInt64());
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            deliveryMethod_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[12]].asUInt64());
        }
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        dirtyFlag_[13] = true;
        if(!pJson[pMasqueradingVector[13]].isNull())
        {
            currencyType_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[13]].asUInt64());
        }
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        dirtyFlag_[14] = true;
        if(!pJson[pMasqueradingVector[14]].isNull())
        {
            quotePrice_=std::make_shared<std::string>(pJson[pMasqueradingVector[14]].asString());
        }
    }
    if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
    {
        dirtyFlag_[15] = true;
        if(!pJson[pMasqueradingVector[15]].isNull())
        {
            liftingWater_=std::make_shared<std::string>(pJson[pMasqueradingVector[15]].asString());
        }
    }
    if(!pMasqueradingVector[16].empty() && pJson.isMember(pMasqueradingVector[16]))
    {
        dirtyFlag_[16] = true;
        if(!pJson[pMasqueradingVector[16]].isNull())
        {
            processingFee_=std::make_shared<std::string>(pJson[pMasqueradingVector[16]].asString());
        }
    }
    if(!pMasqueradingVector[17].empty() && pJson.isMember(pMasqueradingVector[17]))
    {
        dirtyFlag_[17] = true;
        if(!pJson[pMasqueradingVector[17]].isNull())
        {
            sellOutNumber_=std::make_shared<std::string>(pJson[pMasqueradingVector[17]].asString());
        }
    }
    if(!pMasqueradingVector[18].empty() && pJson.isMember(pMasqueradingVector[18]))
    {
        dirtyFlag_[18] = true;
        if(!pJson[pMasqueradingVector[18]].isNull())
        {
            quotePriceInfo_=std::make_shared<std::string>(pJson[pMasqueradingVector[18]].asString());
        }
    }
    if(!pMasqueradingVector[19].empty() && pJson.isMember(pMasqueradingVector[19]))
    {
        dirtyFlag_[19] = true;
        if(!pJson[pMasqueradingVector[19]].isNull())
        {
            productId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[19]].asUInt64());
        }
    }
    if(!pMasqueradingVector[20].empty() && pJson.isMember(pMasqueradingVector[20]))
    {
        dirtyFlag_[20] = true;
        if(!pJson[pMasqueradingVector[20]].isNull())
        {
            productCategoryId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[20]].asUInt64());
        }
    }
    if(!pMasqueradingVector[21].empty() && pJson.isMember(pMasqueradingVector[21]))
    {
        dirtyFlag_[21] = true;
        if(!pJson[pMasqueradingVector[21]].isNull())
        {
            productModelId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[21]].asUInt64());
        }
    }
    if(!pMasqueradingVector[22].empty() && pJson.isMember(pMasqueradingVector[22]))
    {
        dirtyFlag_[22] = true;
        if(!pJson[pMasqueradingVector[22]].isNull())
        {
            productBrandId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[22]].asUInt64());
        }
    }
    if(!pMasqueradingVector[23].empty() && pJson.isMember(pMasqueradingVector[23]))
    {
        dirtyFlag_[23] = true;
        if(!pJson[pMasqueradingVector[23]].isNull())
        {
            isCancel_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[23]].asUInt64());
        }
    }
    if(!pMasqueradingVector[24].empty() && pJson.isMember(pMasqueradingVector[24]))
    {
        dirtyFlag_[24] = true;
        if(!pJson[pMasqueradingVector[24]].isNull())
        {
            deliveryPlace_=std::make_shared<std::string>(pJson[pMasqueradingVector[24]].asString());
        }
    }
    if(!pMasqueradingVector[25].empty() && pJson.isMember(pMasqueradingVector[25]))
    {
        dirtyFlag_[25] = true;
        if(!pJson[pMasqueradingVector[25]].isNull())
        {
            sort_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[25]].asInt64());
        }
    }
    if(!pMasqueradingVector[26].empty() && pJson.isMember(pMasqueradingVector[26]))
    {
        dirtyFlag_[26] = true;
        if(!pJson[pMasqueradingVector[26]].isNull())
        {
            provinceId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[26]].asInt64());
        }
    }
    if(!pMasqueradingVector[27].empty() && pJson.isMember(pMasqueradingVector[27]))
    {
        dirtyFlag_[27] = true;
        if(!pJson[pMasqueradingVector[27]].isNull())
        {
            cityId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[27]].asInt64());
        }
    }
    if(!pMasqueradingVector[28].empty() && pJson.isMember(pMasqueradingVector[28]))
    {
        dirtyFlag_[28] = true;
        if(!pJson[pMasqueradingVector[28]].isNull())
        {
            areaId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[28]].asInt64());
        }
    }
    if(!pMasqueradingVector[29].empty() && pJson.isMember(pMasqueradingVector[29]))
    {
        dirtyFlag_[29] = true;
        if(!pJson[pMasqueradingVector[29]].isNull())
        {
            address_=std::make_shared<std::string>(pJson[pMasqueradingVector[29]].asString());
        }
    }
    if(!pMasqueradingVector[30].empty() && pJson.isMember(pMasqueradingVector[30]))
    {
        dirtyFlag_[30] = true;
        if(!pJson[pMasqueradingVector[30]].isNull())
        {
            paymentMethod_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[30]].asInt64());
        }
    }
    if(!pMasqueradingVector[31].empty() && pJson.isMember(pMasqueradingVector[31]))
    {
        dirtyFlag_[31] = true;
        if(!pJson[pMasqueradingVector[31]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[31]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            deliveryDate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[32].empty() && pJson.isMember(pMasqueradingVector[32]))
    {
        dirtyFlag_[32] = true;
        if(!pJson[pMasqueradingVector[32]].isNull())
        {
            pointPriceType_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[32]].asInt64());
        }
    }
    if(!pMasqueradingVector[33].empty() && pJson.isMember(pMasqueradingVector[33]))
    {
        dirtyFlag_[33] = true;
        if(!pJson[pMasqueradingVector[33]].isNull())
        {
            cashOnDeliveryDays_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[33]].asInt64());
        }
    }
    if(!pMasqueradingVector[34].empty() && pJson.isMember(pMasqueradingVector[34]))
    {
        dirtyFlag_[34] = true;
        if(!pJson[pMasqueradingVector[34]].isNull())
        {
            isShow_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[34]].asUInt64());
        }
    }
    if(!pMasqueradingVector[35].empty() && pJson.isMember(pMasqueradingVector[35]))
    {
        dirtyFlag_[35] = true;
        if(!pJson[pMasqueradingVector[35]].isNull())
        {
            auto daysStr = pJson[pMasqueradingVector[35]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            quoteDate_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
}
                                                                    
void QuotePrice::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson["id"].asUInt64());
        }
    }
    if(pJson.isMember("create_time"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["create_time"].isNull())
        {
            auto timeStr = pJson["create_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("update_time"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["update_time"].isNull())
        {
            auto timeStr = pJson["update_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("remark"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["remark"].isNull())
        {
            remark_=std::make_shared<std::string>(pJson["remark"].asString());
        }
    }
    if(pJson.isMember("is_delete"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["is_delete"].isNull())
        {
            isDelete_=std::make_shared<int8_t>((int8_t)pJson["is_delete"].asInt64());
        }
    }
    if(pJson.isMember("shop_id"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["shop_id"].isNull())
        {
            shopId_=std::make_shared<uint64_t>((uint64_t)pJson["shop_id"].asUInt64());
        }
    }
    if(pJson.isMember("admin_id"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["admin_id"].isNull())
        {
            adminId_=std::make_shared<uint64_t>((uint64_t)pJson["admin_id"].asUInt64());
        }
    }
    if(pJson.isMember("company_id"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["company_id"].isNull())
        {
            companyId_=std::make_shared<uint64_t>((uint64_t)pJson["company_id"].asUInt64());
        }
    }
    if(pJson.isMember("source"))
    {
        dirtyFlag_[8] = true;
        if(!pJson["source"].isNull())
        {
            source_=std::make_shared<std::string>(pJson["source"].asString());
        }
    }
    if(pJson.isMember("quote_price_type"))
    {
        dirtyFlag_[9] = true;
        if(!pJson["quote_price_type"].isNull())
        {
            quotePriceType_=std::make_shared<uint8_t>((uint8_t)pJson["quote_price_type"].asUInt64());
        }
    }
    if(pJson.isMember("period_type"))
    {
        dirtyFlag_[10] = true;
        if(!pJson["period_type"].isNull())
        {
            periodType_=std::make_shared<uint8_t>((uint8_t)pJson["period_type"].asUInt64());
        }
    }
    if(pJson.isMember("service_id"))
    {
        dirtyFlag_[11] = true;
        if(!pJson["service_id"].isNull())
        {
            serviceId_=std::make_shared<uint64_t>((uint64_t)pJson["service_id"].asUInt64());
        }
    }
    if(pJson.isMember("delivery_method"))
    {
        dirtyFlag_[12] = true;
        if(!pJson["delivery_method"].isNull())
        {
            deliveryMethod_=std::make_shared<uint8_t>((uint8_t)pJson["delivery_method"].asUInt64());
        }
    }
    if(pJson.isMember("currency_type"))
    {
        dirtyFlag_[13] = true;
        if(!pJson["currency_type"].isNull())
        {
            currencyType_=std::make_shared<uint8_t>((uint8_t)pJson["currency_type"].asUInt64());
        }
    }
    if(pJson.isMember("quote_price"))
    {
        dirtyFlag_[14] = true;
        if(!pJson["quote_price"].isNull())
        {
            quotePrice_=std::make_shared<std::string>(pJson["quote_price"].asString());
        }
    }
    if(pJson.isMember("lifting_water"))
    {
        dirtyFlag_[15] = true;
        if(!pJson["lifting_water"].isNull())
        {
            liftingWater_=std::make_shared<std::string>(pJson["lifting_water"].asString());
        }
    }
    if(pJson.isMember("processing_fee"))
    {
        dirtyFlag_[16] = true;
        if(!pJson["processing_fee"].isNull())
        {
            processingFee_=std::make_shared<std::string>(pJson["processing_fee"].asString());
        }
    }
    if(pJson.isMember("sell_out_number"))
    {
        dirtyFlag_[17] = true;
        if(!pJson["sell_out_number"].isNull())
        {
            sellOutNumber_=std::make_shared<std::string>(pJson["sell_out_number"].asString());
        }
    }
    if(pJson.isMember("quote_price_info"))
    {
        dirtyFlag_[18] = true;
        if(!pJson["quote_price_info"].isNull())
        {
            quotePriceInfo_=std::make_shared<std::string>(pJson["quote_price_info"].asString());
        }
    }
    if(pJson.isMember("product_id"))
    {
        dirtyFlag_[19] = true;
        if(!pJson["product_id"].isNull())
        {
            productId_=std::make_shared<uint64_t>((uint64_t)pJson["product_id"].asUInt64());
        }
    }
    if(pJson.isMember("product_category_id"))
    {
        dirtyFlag_[20] = true;
        if(!pJson["product_category_id"].isNull())
        {
            productCategoryId_=std::make_shared<uint64_t>((uint64_t)pJson["product_category_id"].asUInt64());
        }
    }
    if(pJson.isMember("product_model_id"))
    {
        dirtyFlag_[21] = true;
        if(!pJson["product_model_id"].isNull())
        {
            productModelId_=std::make_shared<uint64_t>((uint64_t)pJson["product_model_id"].asUInt64());
        }
    }
    if(pJson.isMember("product_brand_id"))
    {
        dirtyFlag_[22] = true;
        if(!pJson["product_brand_id"].isNull())
        {
            productBrandId_=std::make_shared<uint64_t>((uint64_t)pJson["product_brand_id"].asUInt64());
        }
    }
    if(pJson.isMember("is_cancel"))
    {
        dirtyFlag_[23] = true;
        if(!pJson["is_cancel"].isNull())
        {
            isCancel_=std::make_shared<uint8_t>((uint8_t)pJson["is_cancel"].asUInt64());
        }
    }
    if(pJson.isMember("delivery_place"))
    {
        dirtyFlag_[24] = true;
        if(!pJson["delivery_place"].isNull())
        {
            deliveryPlace_=std::make_shared<std::string>(pJson["delivery_place"].asString());
        }
    }
    if(pJson.isMember("sort"))
    {
        dirtyFlag_[25] = true;
        if(!pJson["sort"].isNull())
        {
            sort_=std::make_shared<int32_t>((int32_t)pJson["sort"].asInt64());
        }
    }
    if(pJson.isMember("province_id"))
    {
        dirtyFlag_[26] = true;
        if(!pJson["province_id"].isNull())
        {
            provinceId_=std::make_shared<int64_t>((int64_t)pJson["province_id"].asInt64());
        }
    }
    if(pJson.isMember("city_id"))
    {
        dirtyFlag_[27] = true;
        if(!pJson["city_id"].isNull())
        {
            cityId_=std::make_shared<int64_t>((int64_t)pJson["city_id"].asInt64());
        }
    }
    if(pJson.isMember("area_id"))
    {
        dirtyFlag_[28] = true;
        if(!pJson["area_id"].isNull())
        {
            areaId_=std::make_shared<int64_t>((int64_t)pJson["area_id"].asInt64());
        }
    }
    if(pJson.isMember("address"))
    {
        dirtyFlag_[29] = true;
        if(!pJson["address"].isNull())
        {
            address_=std::make_shared<std::string>(pJson["address"].asString());
        }
    }
    if(pJson.isMember("payment_method"))
    {
        dirtyFlag_[30] = true;
        if(!pJson["payment_method"].isNull())
        {
            paymentMethod_=std::make_shared<int8_t>((int8_t)pJson["payment_method"].asInt64());
        }
    }
    if(pJson.isMember("delivery_date"))
    {
        dirtyFlag_[31] = true;
        if(!pJson["delivery_date"].isNull())
        {
            auto timeStr = pJson["delivery_date"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            deliveryDate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("point_price_type"))
    {
        dirtyFlag_[32] = true;
        if(!pJson["point_price_type"].isNull())
        {
            pointPriceType_=std::make_shared<int8_t>((int8_t)pJson["point_price_type"].asInt64());
        }
    }
    if(pJson.isMember("cash_on_delivery_days"))
    {
        dirtyFlag_[33] = true;
        if(!pJson["cash_on_delivery_days"].isNull())
        {
            cashOnDeliveryDays_=std::make_shared<int8_t>((int8_t)pJson["cash_on_delivery_days"].asInt64());
        }
    }
    if(pJson.isMember("is_show"))
    {
        dirtyFlag_[34] = true;
        if(!pJson["is_show"].isNull())
        {
            isShow_=std::make_shared<uint8_t>((uint8_t)pJson["is_show"].asUInt64());
        }
    }
    if(pJson.isMember("quote_date"))
    {
        dirtyFlag_[35] = true;
        if(!pJson["quote_date"].isNull())
        {
            auto daysStr = pJson["quote_date"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            quoteDate_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
}

const uint64_t &QuotePrice::getValueOfId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &QuotePrice::getId() const noexcept
{
    return id_;
}
void QuotePrice::setId(const uint64_t &pId) noexcept
{
    id_ = std::make_shared<uint64_t>(pId);
    dirtyFlag_[0] = true;
}



const typename QuotePrice::PrimaryKeyType & QuotePrice::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const ::trantor::Date &QuotePrice::getValueOfCreateTime() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(createTime_)
        return *createTime_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &QuotePrice::getCreateTime() const noexcept
{
    return createTime_;
}
void QuotePrice::setCreateTime(const ::trantor::Date &pCreateTime) noexcept
{
    createTime_ = std::make_shared<::trantor::Date>(pCreateTime);
    dirtyFlag_[1] = true;
}




const ::trantor::Date &QuotePrice::getValueOfUpdateTime() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(updateTime_)
        return *updateTime_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &QuotePrice::getUpdateTime() const noexcept
{
    return updateTime_;
}
void QuotePrice::setUpdateTime(const ::trantor::Date &pUpdateTime) noexcept
{
    updateTime_ = std::make_shared<::trantor::Date>(pUpdateTime);
    dirtyFlag_[2] = true;
}




const std::string &QuotePrice::getValueOfRemark() const noexcept
{
    const static std::string defaultValue = std::string();
    if(remark_)
        return *remark_;
    return defaultValue;
}
const std::shared_ptr<std::string> &QuotePrice::getRemark() const noexcept
{
    return remark_;
}
void QuotePrice::setRemark(const std::string &pRemark) noexcept
{
    remark_ = std::make_shared<std::string>(pRemark);
    dirtyFlag_[3] = true;
}
void QuotePrice::setRemark(std::string &&pRemark) noexcept
{
    remark_ = std::make_shared<std::string>(std::move(pRemark));
    dirtyFlag_[3] = true;
}


void QuotePrice::setRemarkToNull() noexcept
{
    remark_.reset();
    dirtyFlag_[3] = true;
}


const int8_t &QuotePrice::getValueOfIsDelete() const noexcept
{
    const static int8_t defaultValue = int8_t();
    if(isDelete_)
        return *isDelete_;
    return defaultValue;
}
const std::shared_ptr<int8_t> &QuotePrice::getIsDelete() const noexcept
{
    return isDelete_;
}
void QuotePrice::setIsDelete(const int8_t &pIsDelete) noexcept
{
    isDelete_ = std::make_shared<int8_t>(pIsDelete);
    dirtyFlag_[4] = true;
}




const uint64_t &QuotePrice::getValueOfShopId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(shopId_)
        return *shopId_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &QuotePrice::getShopId() const noexcept
{
    return shopId_;
}
void QuotePrice::setShopId(const uint64_t &pShopId) noexcept
{
    shopId_ = std::make_shared<uint64_t>(pShopId);
    dirtyFlag_[5] = true;
}


void QuotePrice::setShopIdToNull() noexcept
{
    shopId_.reset();
    dirtyFlag_[5] = true;
}


const uint64_t &QuotePrice::getValueOfAdminId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(adminId_)
        return *adminId_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &QuotePrice::getAdminId() const noexcept
{
    return adminId_;
}
void QuotePrice::setAdminId(const uint64_t &pAdminId) noexcept
{
    adminId_ = std::make_shared<uint64_t>(pAdminId);
    dirtyFlag_[6] = true;
}




const uint64_t &QuotePrice::getValueOfCompanyId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(companyId_)
        return *companyId_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &QuotePrice::getCompanyId() const noexcept
{
    return companyId_;
}
void QuotePrice::setCompanyId(const uint64_t &pCompanyId) noexcept
{
    companyId_ = std::make_shared<uint64_t>(pCompanyId);
    dirtyFlag_[7] = true;
}




const std::string &QuotePrice::getValueOfSource() const noexcept
{
    const static std::string defaultValue = std::string();
    if(source_)
        return *source_;
    return defaultValue;
}
const std::shared_ptr<std::string> &QuotePrice::getSource() const noexcept
{
    return source_;
}
void QuotePrice::setSource(const std::string &pSource) noexcept
{
    source_ = std::make_shared<std::string>(pSource);
    dirtyFlag_[8] = true;
}
void QuotePrice::setSource(std::string &&pSource) noexcept
{
    source_ = std::make_shared<std::string>(std::move(pSource));
    dirtyFlag_[8] = true;
}


void QuotePrice::setSourceToNull() noexcept
{
    source_.reset();
    dirtyFlag_[8] = true;
}


const uint8_t &QuotePrice::getValueOfQuotePriceType() const noexcept
{
    const static uint8_t defaultValue = uint8_t();
    if(quotePriceType_)
        return *quotePriceType_;
    return defaultValue;
}
const std::shared_ptr<uint8_t> &QuotePrice::getQuotePriceType() const noexcept
{
    return quotePriceType_;
}
void QuotePrice::setQuotePriceType(const uint8_t &pQuotePriceType) noexcept
{
    quotePriceType_ = std::make_shared<uint8_t>(pQuotePriceType);
    dirtyFlag_[9] = true;
}




const uint8_t &QuotePrice::getValueOfPeriodType() const noexcept
{
    const static uint8_t defaultValue = uint8_t();
    if(periodType_)
        return *periodType_;
    return defaultValue;
}
const std::shared_ptr<uint8_t> &QuotePrice::getPeriodType() const noexcept
{
    return periodType_;
}
void QuotePrice::setPeriodType(const uint8_t &pPeriodType) noexcept
{
    periodType_ = std::make_shared<uint8_t>(pPeriodType);
    dirtyFlag_[10] = true;
}




const uint64_t &QuotePrice::getValueOfServiceId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(serviceId_)
        return *serviceId_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &QuotePrice::getServiceId() const noexcept
{
    return serviceId_;
}
void QuotePrice::setServiceId(const uint64_t &pServiceId) noexcept
{
    serviceId_ = std::make_shared<uint64_t>(pServiceId);
    dirtyFlag_[11] = true;
}




const uint8_t &QuotePrice::getValueOfDeliveryMethod() const noexcept
{
    const static uint8_t defaultValue = uint8_t();
    if(deliveryMethod_)
        return *deliveryMethod_;
    return defaultValue;
}
const std::shared_ptr<uint8_t> &QuotePrice::getDeliveryMethod() const noexcept
{
    return deliveryMethod_;
}
void QuotePrice::setDeliveryMethod(const uint8_t &pDeliveryMethod) noexcept
{
    deliveryMethod_ = std::make_shared<uint8_t>(pDeliveryMethod);
    dirtyFlag_[12] = true;
}




const uint8_t &QuotePrice::getValueOfCurrencyType() const noexcept
{
    const static uint8_t defaultValue = uint8_t();
    if(currencyType_)
        return *currencyType_;
    return defaultValue;
}
const std::shared_ptr<uint8_t> &QuotePrice::getCurrencyType() const noexcept
{
    return currencyType_;
}
void QuotePrice::setCurrencyType(const uint8_t &pCurrencyType) noexcept
{
    currencyType_ = std::make_shared<uint8_t>(pCurrencyType);
    dirtyFlag_[13] = true;
}




const std::string &QuotePrice::getValueOfQuotePrice() const noexcept
{
    const static std::string defaultValue = std::string();
    if(quotePrice_)
        return *quotePrice_;
    return defaultValue;
}
const std::shared_ptr<std::string> &QuotePrice::getQuotePrice() const noexcept
{
    return quotePrice_;
}
void QuotePrice::setQuotePrice(const std::string &pQuotePrice) noexcept
{
    quotePrice_ = std::make_shared<std::string>(pQuotePrice);
    dirtyFlag_[14] = true;
}
void QuotePrice::setQuotePrice(std::string &&pQuotePrice) noexcept
{
    quotePrice_ = std::make_shared<std::string>(std::move(pQuotePrice));
    dirtyFlag_[14] = true;
}




const std::string &QuotePrice::getValueOfLiftingWater() const noexcept
{
    const static std::string defaultValue = std::string();
    if(liftingWater_)
        return *liftingWater_;
    return defaultValue;
}
const std::shared_ptr<std::string> &QuotePrice::getLiftingWater() const noexcept
{
    return liftingWater_;
}
void QuotePrice::setLiftingWater(const std::string &pLiftingWater) noexcept
{
    liftingWater_ = std::make_shared<std::string>(pLiftingWater);
    dirtyFlag_[15] = true;
}
void QuotePrice::setLiftingWater(std::string &&pLiftingWater) noexcept
{
    liftingWater_ = std::make_shared<std::string>(std::move(pLiftingWater));
    dirtyFlag_[15] = true;
}




const std::string &QuotePrice::getValueOfProcessingFee() const noexcept
{
    const static std::string defaultValue = std::string();
    if(processingFee_)
        return *processingFee_;
    return defaultValue;
}
const std::shared_ptr<std::string> &QuotePrice::getProcessingFee() const noexcept
{
    return processingFee_;
}
void QuotePrice::setProcessingFee(const std::string &pProcessingFee) noexcept
{
    processingFee_ = std::make_shared<std::string>(pProcessingFee);
    dirtyFlag_[16] = true;
}
void QuotePrice::setProcessingFee(std::string &&pProcessingFee) noexcept
{
    processingFee_ = std::make_shared<std::string>(std::move(pProcessingFee));
    dirtyFlag_[16] = true;
}




const std::string &QuotePrice::getValueOfSellOutNumber() const noexcept
{
    const static std::string defaultValue = std::string();
    if(sellOutNumber_)
        return *sellOutNumber_;
    return defaultValue;
}
const std::shared_ptr<std::string> &QuotePrice::getSellOutNumber() const noexcept
{
    return sellOutNumber_;
}
void QuotePrice::setSellOutNumber(const std::string &pSellOutNumber) noexcept
{
    sellOutNumber_ = std::make_shared<std::string>(pSellOutNumber);
    dirtyFlag_[17] = true;
}
void QuotePrice::setSellOutNumber(std::string &&pSellOutNumber) noexcept
{
    sellOutNumber_ = std::make_shared<std::string>(std::move(pSellOutNumber));
    dirtyFlag_[17] = true;
}




const std::string &QuotePrice::getValueOfQuotePriceInfo() const noexcept
{
    const static std::string defaultValue = std::string();
    if(quotePriceInfo_)
        return *quotePriceInfo_;
    return defaultValue;
}
const std::shared_ptr<std::string> &QuotePrice::getQuotePriceInfo() const noexcept
{
    return quotePriceInfo_;
}
void QuotePrice::setQuotePriceInfo(const std::string &pQuotePriceInfo) noexcept
{
    quotePriceInfo_ = std::make_shared<std::string>(pQuotePriceInfo);
    dirtyFlag_[18] = true;
}
void QuotePrice::setQuotePriceInfo(std::string &&pQuotePriceInfo) noexcept
{
    quotePriceInfo_ = std::make_shared<std::string>(std::move(pQuotePriceInfo));
    dirtyFlag_[18] = true;
}


void QuotePrice::setQuotePriceInfoToNull() noexcept
{
    quotePriceInfo_.reset();
    dirtyFlag_[18] = true;
}


const uint64_t &QuotePrice::getValueOfProductId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(productId_)
        return *productId_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &QuotePrice::getProductId() const noexcept
{
    return productId_;
}
void QuotePrice::setProductId(const uint64_t &pProductId) noexcept
{
    productId_ = std::make_shared<uint64_t>(pProductId);
    dirtyFlag_[19] = true;
}




const uint64_t &QuotePrice::getValueOfProductCategoryId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(productCategoryId_)
        return *productCategoryId_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &QuotePrice::getProductCategoryId() const noexcept
{
    return productCategoryId_;
}
void QuotePrice::setProductCategoryId(const uint64_t &pProductCategoryId) noexcept
{
    productCategoryId_ = std::make_shared<uint64_t>(pProductCategoryId);
    dirtyFlag_[20] = true;
}




const uint64_t &QuotePrice::getValueOfProductModelId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(productModelId_)
        return *productModelId_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &QuotePrice::getProductModelId() const noexcept
{
    return productModelId_;
}
void QuotePrice::setProductModelId(const uint64_t &pProductModelId) noexcept
{
    productModelId_ = std::make_shared<uint64_t>(pProductModelId);
    dirtyFlag_[21] = true;
}




const uint64_t &QuotePrice::getValueOfProductBrandId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(productBrandId_)
        return *productBrandId_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &QuotePrice::getProductBrandId() const noexcept
{
    return productBrandId_;
}
void QuotePrice::setProductBrandId(const uint64_t &pProductBrandId) noexcept
{
    productBrandId_ = std::make_shared<uint64_t>(pProductBrandId);
    dirtyFlag_[22] = true;
}




const uint8_t &QuotePrice::getValueOfIsCancel() const noexcept
{
    const static uint8_t defaultValue = uint8_t();
    if(isCancel_)
        return *isCancel_;
    return defaultValue;
}
const std::shared_ptr<uint8_t> &QuotePrice::getIsCancel() const noexcept
{
    return isCancel_;
}
void QuotePrice::setIsCancel(const uint8_t &pIsCancel) noexcept
{
    isCancel_ = std::make_shared<uint8_t>(pIsCancel);
    dirtyFlag_[23] = true;
}




const std::string &QuotePrice::getValueOfDeliveryPlace() const noexcept
{
    const static std::string defaultValue = std::string();
    if(deliveryPlace_)
        return *deliveryPlace_;
    return defaultValue;
}
const std::shared_ptr<std::string> &QuotePrice::getDeliveryPlace() const noexcept
{
    return deliveryPlace_;
}
void QuotePrice::setDeliveryPlace(const std::string &pDeliveryPlace) noexcept
{
    deliveryPlace_ = std::make_shared<std::string>(pDeliveryPlace);
    dirtyFlag_[24] = true;
}
void QuotePrice::setDeliveryPlace(std::string &&pDeliveryPlace) noexcept
{
    deliveryPlace_ = std::make_shared<std::string>(std::move(pDeliveryPlace));
    dirtyFlag_[24] = true;
}


void QuotePrice::setDeliveryPlaceToNull() noexcept
{
    deliveryPlace_.reset();
    dirtyFlag_[24] = true;
}


const int32_t &QuotePrice::getValueOfSort() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(sort_)
        return *sort_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &QuotePrice::getSort() const noexcept
{
    return sort_;
}
void QuotePrice::setSort(const int32_t &pSort) noexcept
{
    sort_ = std::make_shared<int32_t>(pSort);
    dirtyFlag_[25] = true;
}




const int64_t &QuotePrice::getValueOfProvinceId() const noexcept
{
    const static int64_t defaultValue = int64_t();
    if(provinceId_)
        return *provinceId_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &QuotePrice::getProvinceId() const noexcept
{
    return provinceId_;
}
void QuotePrice::setProvinceId(const int64_t &pProvinceId) noexcept
{
    provinceId_ = std::make_shared<int64_t>(pProvinceId);
    dirtyFlag_[26] = true;
}




const int64_t &QuotePrice::getValueOfCityId() const noexcept
{
    const static int64_t defaultValue = int64_t();
    if(cityId_)
        return *cityId_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &QuotePrice::getCityId() const noexcept
{
    return cityId_;
}
void QuotePrice::setCityId(const int64_t &pCityId) noexcept
{
    cityId_ = std::make_shared<int64_t>(pCityId);
    dirtyFlag_[27] = true;
}




const int64_t &QuotePrice::getValueOfAreaId() const noexcept
{
    const static int64_t defaultValue = int64_t();
    if(areaId_)
        return *areaId_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &QuotePrice::getAreaId() const noexcept
{
    return areaId_;
}
void QuotePrice::setAreaId(const int64_t &pAreaId) noexcept
{
    areaId_ = std::make_shared<int64_t>(pAreaId);
    dirtyFlag_[28] = true;
}




const std::string &QuotePrice::getValueOfAddress() const noexcept
{
    const static std::string defaultValue = std::string();
    if(address_)
        return *address_;
    return defaultValue;
}
const std::shared_ptr<std::string> &QuotePrice::getAddress() const noexcept
{
    return address_;
}
void QuotePrice::setAddress(const std::string &pAddress) noexcept
{
    address_ = std::make_shared<std::string>(pAddress);
    dirtyFlag_[29] = true;
}
void QuotePrice::setAddress(std::string &&pAddress) noexcept
{
    address_ = std::make_shared<std::string>(std::move(pAddress));
    dirtyFlag_[29] = true;
}


void QuotePrice::setAddressToNull() noexcept
{
    address_.reset();
    dirtyFlag_[29] = true;
}


const int8_t &QuotePrice::getValueOfPaymentMethod() const noexcept
{
    const static int8_t defaultValue = int8_t();
    if(paymentMethod_)
        return *paymentMethod_;
    return defaultValue;
}
const std::shared_ptr<int8_t> &QuotePrice::getPaymentMethod() const noexcept
{
    return paymentMethod_;
}
void QuotePrice::setPaymentMethod(const int8_t &pPaymentMethod) noexcept
{
    paymentMethod_ = std::make_shared<int8_t>(pPaymentMethod);
    dirtyFlag_[30] = true;
}


void QuotePrice::setPaymentMethodToNull() noexcept
{
    paymentMethod_.reset();
    dirtyFlag_[30] = true;
}


const ::trantor::Date &QuotePrice::getValueOfDeliveryDate() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(deliveryDate_)
        return *deliveryDate_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &QuotePrice::getDeliveryDate() const noexcept
{
    return deliveryDate_;
}
void QuotePrice::setDeliveryDate(const ::trantor::Date &pDeliveryDate) noexcept
{
    deliveryDate_ = std::make_shared<::trantor::Date>(pDeliveryDate);
    dirtyFlag_[31] = true;
}


void QuotePrice::setDeliveryDateToNull() noexcept
{
    deliveryDate_.reset();
    dirtyFlag_[31] = true;
}


const int8_t &QuotePrice::getValueOfPointPriceType() const noexcept
{
    const static int8_t defaultValue = int8_t();
    if(pointPriceType_)
        return *pointPriceType_;
    return defaultValue;
}
const std::shared_ptr<int8_t> &QuotePrice::getPointPriceType() const noexcept
{
    return pointPriceType_;
}
void QuotePrice::setPointPriceType(const int8_t &pPointPriceType) noexcept
{
    pointPriceType_ = std::make_shared<int8_t>(pPointPriceType);
    dirtyFlag_[32] = true;
}




const int8_t &QuotePrice::getValueOfCashOnDeliveryDays() const noexcept
{
    const static int8_t defaultValue = int8_t();
    if(cashOnDeliveryDays_)
        return *cashOnDeliveryDays_;
    return defaultValue;
}
const std::shared_ptr<int8_t> &QuotePrice::getCashOnDeliveryDays() const noexcept
{
    return cashOnDeliveryDays_;
}
void QuotePrice::setCashOnDeliveryDays(const int8_t &pCashOnDeliveryDays) noexcept
{
    cashOnDeliveryDays_ = std::make_shared<int8_t>(pCashOnDeliveryDays);
    dirtyFlag_[33] = true;
}




const uint8_t &QuotePrice::getValueOfIsShow() const noexcept
{
    const static uint8_t defaultValue = uint8_t();
    if(isShow_)
        return *isShow_;
    return defaultValue;
}
const std::shared_ptr<uint8_t> &QuotePrice::getIsShow() const noexcept
{
    return isShow_;
}
void QuotePrice::setIsShow(const uint8_t &pIsShow) noexcept
{
    isShow_ = std::make_shared<uint8_t>(pIsShow);
    dirtyFlag_[34] = true;
}




const ::trantor::Date &QuotePrice::getValueOfQuoteDate() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(quoteDate_)
        return *quoteDate_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &QuotePrice::getQuoteDate() const noexcept
{
    return quoteDate_;
}
void QuotePrice::setQuoteDate(const ::trantor::Date &pQuoteDate) noexcept
{
    quoteDate_ = std::make_shared<::trantor::Date>(pQuoteDate.roundDay());
    dirtyFlag_[35] = true;
}


void QuotePrice::setQuoteDateToNull() noexcept
{
    quoteDate_.reset();
    dirtyFlag_[35] = true;
}


void QuotePrice::updateId(const uint64_t id)
{
    id_ = std::make_shared<uint64_t>(id);
}

const std::vector<std::string> &QuotePrice::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "create_time",
        "update_time",
        "remark",
        "is_delete",
        "shop_id",
        "admin_id",
        "company_id",
        "source",
        "quote_price_type",
        "period_type",
        "service_id",
        "delivery_method",
        "currency_type",
        "quote_price",
        "lifting_water",
        "processing_fee",
        "sell_out_number",
        "quote_price_info",
        "product_id",
        "product_category_id",
        "product_model_id",
        "product_brand_id",
        "is_cancel",
        "delivery_place",
        "sort",
        "province_id",
        "city_id",
        "area_id",
        "address",
        "payment_method",
        "delivery_date",
        "point_price_type",
        "cash_on_delivery_days",
        "is_show",
        "quote_date"
    };
    return inCols;
}

void QuotePrice::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getCreateTime())
        {
            binder << getValueOfCreateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getUpdateTime())
        {
            binder << getValueOfUpdateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getRemark())
        {
            binder << getValueOfRemark();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getIsDelete())
        {
            binder << getValueOfIsDelete();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getShopId())
        {
            binder << getValueOfShopId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getAdminId())
        {
            binder << getValueOfAdminId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getCompanyId())
        {
            binder << getValueOfCompanyId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getSource())
        {
            binder << getValueOfSource();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getQuotePriceType())
        {
            binder << getValueOfQuotePriceType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getPeriodType())
        {
            binder << getValueOfPeriodType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getServiceId())
        {
            binder << getValueOfServiceId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getDeliveryMethod())
        {
            binder << getValueOfDeliveryMethod();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[13])
    {
        if(getCurrencyType())
        {
            binder << getValueOfCurrencyType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[14])
    {
        if(getQuotePrice())
        {
            binder << getValueOfQuotePrice();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[15])
    {
        if(getLiftingWater())
        {
            binder << getValueOfLiftingWater();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[16])
    {
        if(getProcessingFee())
        {
            binder << getValueOfProcessingFee();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[17])
    {
        if(getSellOutNumber())
        {
            binder << getValueOfSellOutNumber();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[18])
    {
        if(getQuotePriceInfo())
        {
            binder << getValueOfQuotePriceInfo();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[19])
    {
        if(getProductId())
        {
            binder << getValueOfProductId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[20])
    {
        if(getProductCategoryId())
        {
            binder << getValueOfProductCategoryId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[21])
    {
        if(getProductModelId())
        {
            binder << getValueOfProductModelId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[22])
    {
        if(getProductBrandId())
        {
            binder << getValueOfProductBrandId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[23])
    {
        if(getIsCancel())
        {
            binder << getValueOfIsCancel();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[24])
    {
        if(getDeliveryPlace())
        {
            binder << getValueOfDeliveryPlace();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[25])
    {
        if(getSort())
        {
            binder << getValueOfSort();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[26])
    {
        if(getProvinceId())
        {
            binder << getValueOfProvinceId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[27])
    {
        if(getCityId())
        {
            binder << getValueOfCityId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[28])
    {
        if(getAreaId())
        {
            binder << getValueOfAreaId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[29])
    {
        if(getAddress())
        {
            binder << getValueOfAddress();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[30])
    {
        if(getPaymentMethod())
        {
            binder << getValueOfPaymentMethod();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[31])
    {
        if(getDeliveryDate())
        {
            binder << getValueOfDeliveryDate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[32])
    {
        if(getPointPriceType())
        {
            binder << getValueOfPointPriceType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[33])
    {
        if(getCashOnDeliveryDays())
        {
            binder << getValueOfCashOnDeliveryDays();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[34])
    {
        if(getIsShow())
        {
            binder << getValueOfIsShow();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[35])
    {
        if(getQuoteDate())
        {
            binder << getValueOfQuoteDate();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> QuotePrice::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    if(dirtyFlag_[8])
    {
        ret.push_back(getColumnName(8));
    }
    if(dirtyFlag_[9])
    {
        ret.push_back(getColumnName(9));
    }
    if(dirtyFlag_[10])
    {
        ret.push_back(getColumnName(10));
    }
    if(dirtyFlag_[11])
    {
        ret.push_back(getColumnName(11));
    }
    if(dirtyFlag_[12])
    {
        ret.push_back(getColumnName(12));
    }
    if(dirtyFlag_[13])
    {
        ret.push_back(getColumnName(13));
    }
    if(dirtyFlag_[14])
    {
        ret.push_back(getColumnName(14));
    }
    if(dirtyFlag_[15])
    {
        ret.push_back(getColumnName(15));
    }
    if(dirtyFlag_[16])
    {
        ret.push_back(getColumnName(16));
    }
    if(dirtyFlag_[17])
    {
        ret.push_back(getColumnName(17));
    }
    if(dirtyFlag_[18])
    {
        ret.push_back(getColumnName(18));
    }
    if(dirtyFlag_[19])
    {
        ret.push_back(getColumnName(19));
    }
    if(dirtyFlag_[20])
    {
        ret.push_back(getColumnName(20));
    }
    if(dirtyFlag_[21])
    {
        ret.push_back(getColumnName(21));
    }
    if(dirtyFlag_[22])
    {
        ret.push_back(getColumnName(22));
    }
    if(dirtyFlag_[23])
    {
        ret.push_back(getColumnName(23));
    }
    if(dirtyFlag_[24])
    {
        ret.push_back(getColumnName(24));
    }
    if(dirtyFlag_[25])
    {
        ret.push_back(getColumnName(25));
    }
    if(dirtyFlag_[26])
    {
        ret.push_back(getColumnName(26));
    }
    if(dirtyFlag_[27])
    {
        ret.push_back(getColumnName(27));
    }
    if(dirtyFlag_[28])
    {
        ret.push_back(getColumnName(28));
    }
    if(dirtyFlag_[29])
    {
        ret.push_back(getColumnName(29));
    }
    if(dirtyFlag_[30])
    {
        ret.push_back(getColumnName(30));
    }
    if(dirtyFlag_[31])
    {
        ret.push_back(getColumnName(31));
    }
    if(dirtyFlag_[32])
    {
        ret.push_back(getColumnName(32));
    }
    if(dirtyFlag_[33])
    {
        ret.push_back(getColumnName(33));
    }
    if(dirtyFlag_[34])
    {
        ret.push_back(getColumnName(34));
    }
    if(dirtyFlag_[35])
    {
        ret.push_back(getColumnName(35));
    }
    return ret;
}

void QuotePrice::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getCreateTime())
        {
            binder << getValueOfCreateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getUpdateTime())
        {
            binder << getValueOfUpdateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getRemark())
        {
            binder << getValueOfRemark();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getIsDelete())
        {
            binder << getValueOfIsDelete();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getShopId())
        {
            binder << getValueOfShopId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getAdminId())
        {
            binder << getValueOfAdminId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getCompanyId())
        {
            binder << getValueOfCompanyId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getSource())
        {
            binder << getValueOfSource();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getQuotePriceType())
        {
            binder << getValueOfQuotePriceType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getPeriodType())
        {
            binder << getValueOfPeriodType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getServiceId())
        {
            binder << getValueOfServiceId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getDeliveryMethod())
        {
            binder << getValueOfDeliveryMethod();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[13])
    {
        if(getCurrencyType())
        {
            binder << getValueOfCurrencyType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[14])
    {
        if(getQuotePrice())
        {
            binder << getValueOfQuotePrice();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[15])
    {
        if(getLiftingWater())
        {
            binder << getValueOfLiftingWater();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[16])
    {
        if(getProcessingFee())
        {
            binder << getValueOfProcessingFee();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[17])
    {
        if(getSellOutNumber())
        {
            binder << getValueOfSellOutNumber();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[18])
    {
        if(getQuotePriceInfo())
        {
            binder << getValueOfQuotePriceInfo();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[19])
    {
        if(getProductId())
        {
            binder << getValueOfProductId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[20])
    {
        if(getProductCategoryId())
        {
            binder << getValueOfProductCategoryId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[21])
    {
        if(getProductModelId())
        {
            binder << getValueOfProductModelId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[22])
    {
        if(getProductBrandId())
        {
            binder << getValueOfProductBrandId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[23])
    {
        if(getIsCancel())
        {
            binder << getValueOfIsCancel();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[24])
    {
        if(getDeliveryPlace())
        {
            binder << getValueOfDeliveryPlace();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[25])
    {
        if(getSort())
        {
            binder << getValueOfSort();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[26])
    {
        if(getProvinceId())
        {
            binder << getValueOfProvinceId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[27])
    {
        if(getCityId())
        {
            binder << getValueOfCityId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[28])
    {
        if(getAreaId())
        {
            binder << getValueOfAreaId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[29])
    {
        if(getAddress())
        {
            binder << getValueOfAddress();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[30])
    {
        if(getPaymentMethod())
        {
            binder << getValueOfPaymentMethod();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[31])
    {
        if(getDeliveryDate())
        {
            binder << getValueOfDeliveryDate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[32])
    {
        if(getPointPriceType())
        {
            binder << getValueOfPointPriceType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[33])
    {
        if(getCashOnDeliveryDays())
        {
            binder << getValueOfCashOnDeliveryDays();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[34])
    {
        if(getIsShow())
        {
            binder << getValueOfIsShow();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[35])
    {
        if(getQuoteDate())
        {
            binder << getValueOfQuoteDate();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value QuotePrice::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=(Json::UInt64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getCreateTime())
    {
        ret["create_time"]=getCreateTime()->toDbStringLocal();
    }
    else
    {
        ret["create_time"]=Json::Value();
    }
    if(getUpdateTime())
    {
        ret["update_time"]=getUpdateTime()->toDbStringLocal();
    }
    else
    {
        ret["update_time"]=Json::Value();
    }
    if(getRemark())
    {
        ret["remark"]=getValueOfRemark();
    }
    else
    {
        ret["remark"]=Json::Value();
    }
    if(getIsDelete())
    {
        ret["is_delete"]=getValueOfIsDelete();
    }
    else
    {
        ret["is_delete"]=Json::Value();
    }
    if(getShopId())
    {
        ret["shop_id"]=(Json::UInt64)getValueOfShopId();
    }
    else
    {
        ret["shop_id"]=Json::Value();
    }
    if(getAdminId())
    {
        ret["admin_id"]=(Json::UInt64)getValueOfAdminId();
    }
    else
    {
        ret["admin_id"]=Json::Value();
    }
    if(getCompanyId())
    {
        ret["company_id"]=(Json::UInt64)getValueOfCompanyId();
    }
    else
    {
        ret["company_id"]=Json::Value();
    }
    if(getSource())
    {
        ret["source"]=getValueOfSource();
    }
    else
    {
        ret["source"]=Json::Value();
    }
    if(getQuotePriceType())
    {
        ret["quote_price_type"]=getValueOfQuotePriceType();
    }
    else
    {
        ret["quote_price_type"]=Json::Value();
    }
    if(getPeriodType())
    {
        ret["period_type"]=getValueOfPeriodType();
    }
    else
    {
        ret["period_type"]=Json::Value();
    }
    if(getServiceId())
    {
        ret["service_id"]=(Json::UInt64)getValueOfServiceId();
    }
    else
    {
        ret["service_id"]=Json::Value();
    }
    if(getDeliveryMethod())
    {
        ret["delivery_method"]=getValueOfDeliveryMethod();
    }
    else
    {
        ret["delivery_method"]=Json::Value();
    }
    if(getCurrencyType())
    {
        ret["currency_type"]=getValueOfCurrencyType();
    }
    else
    {
        ret["currency_type"]=Json::Value();
    }
    if(getQuotePrice())
    {
        ret["quote_price"]=getValueOfQuotePrice();
    }
    else
    {
        ret["quote_price"]=Json::Value();
    }
    if(getLiftingWater())
    {
        ret["lifting_water"]=getValueOfLiftingWater();
    }
    else
    {
        ret["lifting_water"]=Json::Value();
    }
    if(getProcessingFee())
    {
        ret["processing_fee"]=getValueOfProcessingFee();
    }
    else
    {
        ret["processing_fee"]=Json::Value();
    }
    if(getSellOutNumber())
    {
        ret["sell_out_number"]=getValueOfSellOutNumber();
    }
    else
    {
        ret["sell_out_number"]=Json::Value();
    }
    if(getQuotePriceInfo())
    {
        ret["quote_price_info"]=getValueOfQuotePriceInfo();
    }
    else
    {
        ret["quote_price_info"]=Json::Value();
    }
    if(getProductId())
    {
        ret["product_id"]=(Json::UInt64)getValueOfProductId();
    }
    else
    {
        ret["product_id"]=Json::Value();
    }
    if(getProductCategoryId())
    {
        ret["product_category_id"]=(Json::UInt64)getValueOfProductCategoryId();
    }
    else
    {
        ret["product_category_id"]=Json::Value();
    }
    if(getProductModelId())
    {
        ret["product_model_id"]=(Json::UInt64)getValueOfProductModelId();
    }
    else
    {
        ret["product_model_id"]=Json::Value();
    }
    if(getProductBrandId())
    {
        ret["product_brand_id"]=(Json::UInt64)getValueOfProductBrandId();
    }
    else
    {
        ret["product_brand_id"]=Json::Value();
    }
    if(getIsCancel())
    {
        ret["is_cancel"]=getValueOfIsCancel();
    }
    else
    {
        ret["is_cancel"]=Json::Value();
    }
    if(getDeliveryPlace())
    {
        ret["delivery_place"]=getValueOfDeliveryPlace();
    }
    else
    {
        ret["delivery_place"]=Json::Value();
    }
    if(getSort())
    {
        ret["sort"]=getValueOfSort();
    }
    else
    {
        ret["sort"]=Json::Value();
    }
    if(getProvinceId())
    {
        ret["province_id"]=(Json::Int64)getValueOfProvinceId();
    }
    else
    {
        ret["province_id"]=Json::Value();
    }
    if(getCityId())
    {
        ret["city_id"]=(Json::Int64)getValueOfCityId();
    }
    else
    {
        ret["city_id"]=Json::Value();
    }
    if(getAreaId())
    {
        ret["area_id"]=(Json::Int64)getValueOfAreaId();
    }
    else
    {
        ret["area_id"]=Json::Value();
    }
    if(getAddress())
    {
        ret["address"]=getValueOfAddress();
    }
    else
    {
        ret["address"]=Json::Value();
    }
    if(getPaymentMethod())
    {
        ret["payment_method"]=getValueOfPaymentMethod();
    }
    else
    {
        ret["payment_method"]=Json::Value();
    }
    if(getDeliveryDate())
    {
        ret["delivery_date"]=getDeliveryDate()->toDbStringLocal();
    }
    else
    {
        ret["delivery_date"]=Json::Value();
    }
    if(getPointPriceType())
    {
        ret["point_price_type"]=getValueOfPointPriceType();
    }
    else
    {
        ret["point_price_type"]=Json::Value();
    }
    if(getCashOnDeliveryDays())
    {
        ret["cash_on_delivery_days"]=getValueOfCashOnDeliveryDays();
    }
    else
    {
        ret["cash_on_delivery_days"]=Json::Value();
    }
    if(getIsShow())
    {
        ret["is_show"]=getValueOfIsShow();
    }
    else
    {
        ret["is_show"]=Json::Value();
    }
    if(getQuoteDate())
    {
        ret["quote_date"]=getQuoteDate()->toDbStringLocal();
    }
    else
    {
        ret["quote_date"]=Json::Value();
    }
    return ret;
}

Json::Value QuotePrice::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 36)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=(Json::UInt64)getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getCreateTime())
            {
                ret[pMasqueradingVector[1]]=getCreateTime()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getUpdateTime())
            {
                ret[pMasqueradingVector[2]]=getUpdateTime()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getRemark())
            {
                ret[pMasqueradingVector[3]]=getValueOfRemark();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getIsDelete())
            {
                ret[pMasqueradingVector[4]]=getValueOfIsDelete();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getShopId())
            {
                ret[pMasqueradingVector[5]]=(Json::UInt64)getValueOfShopId();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getAdminId())
            {
                ret[pMasqueradingVector[6]]=(Json::UInt64)getValueOfAdminId();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getCompanyId())
            {
                ret[pMasqueradingVector[7]]=(Json::UInt64)getValueOfCompanyId();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[8].empty())
        {
            if(getSource())
            {
                ret[pMasqueradingVector[8]]=getValueOfSource();
            }
            else
            {
                ret[pMasqueradingVector[8]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[9].empty())
        {
            if(getQuotePriceType())
            {
                ret[pMasqueradingVector[9]]=getValueOfQuotePriceType();
            }
            else
            {
                ret[pMasqueradingVector[9]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[10].empty())
        {
            if(getPeriodType())
            {
                ret[pMasqueradingVector[10]]=getValueOfPeriodType();
            }
            else
            {
                ret[pMasqueradingVector[10]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[11].empty())
        {
            if(getServiceId())
            {
                ret[pMasqueradingVector[11]]=(Json::UInt64)getValueOfServiceId();
            }
            else
            {
                ret[pMasqueradingVector[11]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[12].empty())
        {
            if(getDeliveryMethod())
            {
                ret[pMasqueradingVector[12]]=getValueOfDeliveryMethod();
            }
            else
            {
                ret[pMasqueradingVector[12]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[13].empty())
        {
            if(getCurrencyType())
            {
                ret[pMasqueradingVector[13]]=getValueOfCurrencyType();
            }
            else
            {
                ret[pMasqueradingVector[13]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[14].empty())
        {
            if(getQuotePrice())
            {
                ret[pMasqueradingVector[14]]=getValueOfQuotePrice();
            }
            else
            {
                ret[pMasqueradingVector[14]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[15].empty())
        {
            if(getLiftingWater())
            {
                ret[pMasqueradingVector[15]]=getValueOfLiftingWater();
            }
            else
            {
                ret[pMasqueradingVector[15]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[16].empty())
        {
            if(getProcessingFee())
            {
                ret[pMasqueradingVector[16]]=getValueOfProcessingFee();
            }
            else
            {
                ret[pMasqueradingVector[16]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[17].empty())
        {
            if(getSellOutNumber())
            {
                ret[pMasqueradingVector[17]]=getValueOfSellOutNumber();
            }
            else
            {
                ret[pMasqueradingVector[17]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[18].empty())
        {
            if(getQuotePriceInfo())
            {
                ret[pMasqueradingVector[18]]=getValueOfQuotePriceInfo();
            }
            else
            {
                ret[pMasqueradingVector[18]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[19].empty())
        {
            if(getProductId())
            {
                ret[pMasqueradingVector[19]]=(Json::UInt64)getValueOfProductId();
            }
            else
            {
                ret[pMasqueradingVector[19]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[20].empty())
        {
            if(getProductCategoryId())
            {
                ret[pMasqueradingVector[20]]=(Json::UInt64)getValueOfProductCategoryId();
            }
            else
            {
                ret[pMasqueradingVector[20]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[21].empty())
        {
            if(getProductModelId())
            {
                ret[pMasqueradingVector[21]]=(Json::UInt64)getValueOfProductModelId();
            }
            else
            {
                ret[pMasqueradingVector[21]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[22].empty())
        {
            if(getProductBrandId())
            {
                ret[pMasqueradingVector[22]]=(Json::UInt64)getValueOfProductBrandId();
            }
            else
            {
                ret[pMasqueradingVector[22]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[23].empty())
        {
            if(getIsCancel())
            {
                ret[pMasqueradingVector[23]]=getValueOfIsCancel();
            }
            else
            {
                ret[pMasqueradingVector[23]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[24].empty())
        {
            if(getDeliveryPlace())
            {
                ret[pMasqueradingVector[24]]=getValueOfDeliveryPlace();
            }
            else
            {
                ret[pMasqueradingVector[24]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[25].empty())
        {
            if(getSort())
            {
                ret[pMasqueradingVector[25]]=getValueOfSort();
            }
            else
            {
                ret[pMasqueradingVector[25]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[26].empty())
        {
            if(getProvinceId())
            {
                ret[pMasqueradingVector[26]]=(Json::Int64)getValueOfProvinceId();
            }
            else
            {
                ret[pMasqueradingVector[26]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[27].empty())
        {
            if(getCityId())
            {
                ret[pMasqueradingVector[27]]=(Json::Int64)getValueOfCityId();
            }
            else
            {
                ret[pMasqueradingVector[27]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[28].empty())
        {
            if(getAreaId())
            {
                ret[pMasqueradingVector[28]]=(Json::Int64)getValueOfAreaId();
            }
            else
            {
                ret[pMasqueradingVector[28]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[29].empty())
        {
            if(getAddress())
            {
                ret[pMasqueradingVector[29]]=getValueOfAddress();
            }
            else
            {
                ret[pMasqueradingVector[29]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[30].empty())
        {
            if(getPaymentMethod())
            {
                ret[pMasqueradingVector[30]]=getValueOfPaymentMethod();
            }
            else
            {
                ret[pMasqueradingVector[30]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[31].empty())
        {
            if(getDeliveryDate())
            {
                ret[pMasqueradingVector[31]]=getDeliveryDate()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[31]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[32].empty())
        {
            if(getPointPriceType())
            {
                ret[pMasqueradingVector[32]]=getValueOfPointPriceType();
            }
            else
            {
                ret[pMasqueradingVector[32]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[33].empty())
        {
            if(getCashOnDeliveryDays())
            {
                ret[pMasqueradingVector[33]]=getValueOfCashOnDeliveryDays();
            }
            else
            {
                ret[pMasqueradingVector[33]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[34].empty())
        {
            if(getIsShow())
            {
                ret[pMasqueradingVector[34]]=getValueOfIsShow();
            }
            else
            {
                ret[pMasqueradingVector[34]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[35].empty())
        {
            if(getQuoteDate())
            {
                ret[pMasqueradingVector[35]]=getQuoteDate()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[35]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=(Json::UInt64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getCreateTime())
    {
        ret["create_time"]=getCreateTime()->toDbStringLocal();
    }
    else
    {
        ret["create_time"]=Json::Value();
    }
    if(getUpdateTime())
    {
        ret["update_time"]=getUpdateTime()->toDbStringLocal();
    }
    else
    {
        ret["update_time"]=Json::Value();
    }
    if(getRemark())
    {
        ret["remark"]=getValueOfRemark();
    }
    else
    {
        ret["remark"]=Json::Value();
    }
    if(getIsDelete())
    {
        ret["is_delete"]=getValueOfIsDelete();
    }
    else
    {
        ret["is_delete"]=Json::Value();
    }
    if(getShopId())
    {
        ret["shop_id"]=(Json::UInt64)getValueOfShopId();
    }
    else
    {
        ret["shop_id"]=Json::Value();
    }
    if(getAdminId())
    {
        ret["admin_id"]=(Json::UInt64)getValueOfAdminId();
    }
    else
    {
        ret["admin_id"]=Json::Value();
    }
    if(getCompanyId())
    {
        ret["company_id"]=(Json::UInt64)getValueOfCompanyId();
    }
    else
    {
        ret["company_id"]=Json::Value();
    }
    if(getSource())
    {
        ret["source"]=getValueOfSource();
    }
    else
    {
        ret["source"]=Json::Value();
    }
    if(getQuotePriceType())
    {
        ret["quote_price_type"]=getValueOfQuotePriceType();
    }
    else
    {
        ret["quote_price_type"]=Json::Value();
    }
    if(getPeriodType())
    {
        ret["period_type"]=getValueOfPeriodType();
    }
    else
    {
        ret["period_type"]=Json::Value();
    }
    if(getServiceId())
    {
        ret["service_id"]=(Json::UInt64)getValueOfServiceId();
    }
    else
    {
        ret["service_id"]=Json::Value();
    }
    if(getDeliveryMethod())
    {
        ret["delivery_method"]=getValueOfDeliveryMethod();
    }
    else
    {
        ret["delivery_method"]=Json::Value();
    }
    if(getCurrencyType())
    {
        ret["currency_type"]=getValueOfCurrencyType();
    }
    else
    {
        ret["currency_type"]=Json::Value();
    }
    if(getQuotePrice())
    {
        ret["quote_price"]=getValueOfQuotePrice();
    }
    else
    {
        ret["quote_price"]=Json::Value();
    }
    if(getLiftingWater())
    {
        ret["lifting_water"]=getValueOfLiftingWater();
    }
    else
    {
        ret["lifting_water"]=Json::Value();
    }
    if(getProcessingFee())
    {
        ret["processing_fee"]=getValueOfProcessingFee();
    }
    else
    {
        ret["processing_fee"]=Json::Value();
    }
    if(getSellOutNumber())
    {
        ret["sell_out_number"]=getValueOfSellOutNumber();
    }
    else
    {
        ret["sell_out_number"]=Json::Value();
    }
    if(getQuotePriceInfo())
    {
        ret["quote_price_info"]=getValueOfQuotePriceInfo();
    }
    else
    {
        ret["quote_price_info"]=Json::Value();
    }
    if(getProductId())
    {
        ret["product_id"]=(Json::UInt64)getValueOfProductId();
    }
    else
    {
        ret["product_id"]=Json::Value();
    }
    if(getProductCategoryId())
    {
        ret["product_category_id"]=(Json::UInt64)getValueOfProductCategoryId();
    }
    else
    {
        ret["product_category_id"]=Json::Value();
    }
    if(getProductModelId())
    {
        ret["product_model_id"]=(Json::UInt64)getValueOfProductModelId();
    }
    else
    {
        ret["product_model_id"]=Json::Value();
    }
    if(getProductBrandId())
    {
        ret["product_brand_id"]=(Json::UInt64)getValueOfProductBrandId();
    }
    else
    {
        ret["product_brand_id"]=Json::Value();
    }
    if(getIsCancel())
    {
        ret["is_cancel"]=getValueOfIsCancel();
    }
    else
    {
        ret["is_cancel"]=Json::Value();
    }
    if(getDeliveryPlace())
    {
        ret["delivery_place"]=getValueOfDeliveryPlace();
    }
    else
    {
        ret["delivery_place"]=Json::Value();
    }
    if(getSort())
    {
        ret["sort"]=getValueOfSort();
    }
    else
    {
        ret["sort"]=Json::Value();
    }
    if(getProvinceId())
    {
        ret["province_id"]=(Json::Int64)getValueOfProvinceId();
    }
    else
    {
        ret["province_id"]=Json::Value();
    }
    if(getCityId())
    {
        ret["city_id"]=(Json::Int64)getValueOfCityId();
    }
    else
    {
        ret["city_id"]=Json::Value();
    }
    if(getAreaId())
    {
        ret["area_id"]=(Json::Int64)getValueOfAreaId();
    }
    else
    {
        ret["area_id"]=Json::Value();
    }
    if(getAddress())
    {
        ret["address"]=getValueOfAddress();
    }
    else
    {
        ret["address"]=Json::Value();
    }
    if(getPaymentMethod())
    {
        ret["payment_method"]=getValueOfPaymentMethod();
    }
    else
    {
        ret["payment_method"]=Json::Value();
    }
    if(getDeliveryDate())
    {
        ret["delivery_date"]=getDeliveryDate()->toDbStringLocal();
    }
    else
    {
        ret["delivery_date"]=Json::Value();
    }
    if(getPointPriceType())
    {
        ret["point_price_type"]=getValueOfPointPriceType();
    }
    else
    {
        ret["point_price_type"]=Json::Value();
    }
    if(getCashOnDeliveryDays())
    {
        ret["cash_on_delivery_days"]=getValueOfCashOnDeliveryDays();
    }
    else
    {
        ret["cash_on_delivery_days"]=Json::Value();
    }
    if(getIsShow())
    {
        ret["is_show"]=getValueOfIsShow();
    }
    else
    {
        ret["is_show"]=Json::Value();
    }
    if(getQuoteDate())
    {
        ret["quote_date"]=getQuoteDate()->toDbStringLocal();
    }
    else
    {
        ret["quote_date"]=Json::Value();
    }
    return ret;
}

bool QuotePrice::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("create_time"))
    {
        if(!validJsonOfField(1, "create_time", pJson["create_time"], err, true))
            return false;
    }
    if(pJson.isMember("update_time"))
    {
        if(!validJsonOfField(2, "update_time", pJson["update_time"], err, true))
            return false;
    }
    if(pJson.isMember("remark"))
    {
        if(!validJsonOfField(3, "remark", pJson["remark"], err, true))
            return false;
    }
    if(pJson.isMember("is_delete"))
    {
        if(!validJsonOfField(4, "is_delete", pJson["is_delete"], err, true))
            return false;
    }
    if(pJson.isMember("shop_id"))
    {
        if(!validJsonOfField(5, "shop_id", pJson["shop_id"], err, true))
            return false;
    }
    if(pJson.isMember("admin_id"))
    {
        if(!validJsonOfField(6, "admin_id", pJson["admin_id"], err, true))
            return false;
    }
    if(pJson.isMember("company_id"))
    {
        if(!validJsonOfField(7, "company_id", pJson["company_id"], err, true))
            return false;
    }
    if(pJson.isMember("source"))
    {
        if(!validJsonOfField(8, "source", pJson["source"], err, true))
            return false;
    }
    if(pJson.isMember("quote_price_type"))
    {
        if(!validJsonOfField(9, "quote_price_type", pJson["quote_price_type"], err, true))
            return false;
    }
    if(pJson.isMember("period_type"))
    {
        if(!validJsonOfField(10, "period_type", pJson["period_type"], err, true))
            return false;
    }
    if(pJson.isMember("service_id"))
    {
        if(!validJsonOfField(11, "service_id", pJson["service_id"], err, true))
            return false;
    }
    if(pJson.isMember("delivery_method"))
    {
        if(!validJsonOfField(12, "delivery_method", pJson["delivery_method"], err, true))
            return false;
    }
    if(pJson.isMember("currency_type"))
    {
        if(!validJsonOfField(13, "currency_type", pJson["currency_type"], err, true))
            return false;
    }
    if(pJson.isMember("quote_price"))
    {
        if(!validJsonOfField(14, "quote_price", pJson["quote_price"], err, true))
            return false;
    }
    if(pJson.isMember("lifting_water"))
    {
        if(!validJsonOfField(15, "lifting_water", pJson["lifting_water"], err, true))
            return false;
    }
    if(pJson.isMember("processing_fee"))
    {
        if(!validJsonOfField(16, "processing_fee", pJson["processing_fee"], err, true))
            return false;
    }
    if(pJson.isMember("sell_out_number"))
    {
        if(!validJsonOfField(17, "sell_out_number", pJson["sell_out_number"], err, true))
            return false;
    }
    if(pJson.isMember("quote_price_info"))
    {
        if(!validJsonOfField(18, "quote_price_info", pJson["quote_price_info"], err, true))
            return false;
    }
    if(pJson.isMember("product_id"))
    {
        if(!validJsonOfField(19, "product_id", pJson["product_id"], err, true))
            return false;
    }
    if(pJson.isMember("product_category_id"))
    {
        if(!validJsonOfField(20, "product_category_id", pJson["product_category_id"], err, true))
            return false;
    }
    if(pJson.isMember("product_model_id"))
    {
        if(!validJsonOfField(21, "product_model_id", pJson["product_model_id"], err, true))
            return false;
    }
    if(pJson.isMember("product_brand_id"))
    {
        if(!validJsonOfField(22, "product_brand_id", pJson["product_brand_id"], err, true))
            return false;
    }
    if(pJson.isMember("is_cancel"))
    {
        if(!validJsonOfField(23, "is_cancel", pJson["is_cancel"], err, true))
            return false;
    }
    if(pJson.isMember("delivery_place"))
    {
        if(!validJsonOfField(24, "delivery_place", pJson["delivery_place"], err, true))
            return false;
    }
    if(pJson.isMember("sort"))
    {
        if(!validJsonOfField(25, "sort", pJson["sort"], err, true))
            return false;
    }
    if(pJson.isMember("province_id"))
    {
        if(!validJsonOfField(26, "province_id", pJson["province_id"], err, true))
            return false;
    }
    if(pJson.isMember("city_id"))
    {
        if(!validJsonOfField(27, "city_id", pJson["city_id"], err, true))
            return false;
    }
    if(pJson.isMember("area_id"))
    {
        if(!validJsonOfField(28, "area_id", pJson["area_id"], err, true))
            return false;
    }
    if(pJson.isMember("address"))
    {
        if(!validJsonOfField(29, "address", pJson["address"], err, true))
            return false;
    }
    if(pJson.isMember("payment_method"))
    {
        if(!validJsonOfField(30, "payment_method", pJson["payment_method"], err, true))
            return false;
    }
    if(pJson.isMember("delivery_date"))
    {
        if(!validJsonOfField(31, "delivery_date", pJson["delivery_date"], err, true))
            return false;
    }
    if(pJson.isMember("point_price_type"))
    {
        if(!validJsonOfField(32, "point_price_type", pJson["point_price_type"], err, true))
            return false;
    }
    if(pJson.isMember("cash_on_delivery_days"))
    {
        if(!validJsonOfField(33, "cash_on_delivery_days", pJson["cash_on_delivery_days"], err, true))
            return false;
    }
    if(pJson.isMember("is_show"))
    {
        if(!validJsonOfField(34, "is_show", pJson["is_show"], err, true))
            return false;
    }
    if(pJson.isMember("quote_date"))
    {
        if(!validJsonOfField(35, "quote_date", pJson["quote_date"], err, true))
            return false;
    }
    return true;
}
bool QuotePrice::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                    const std::vector<std::string> &pMasqueradingVector,
                                                    std::string &err)
{
    if(pMasqueradingVector.size() != 36)
    {
        err = "Bad masquerading vector";
        return false;
    }
    if(!pMasqueradingVector[0].empty())
    {
        if(pJson.isMember(pMasqueradingVector[0]))
        {
            if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[1].empty())
    {
        if(pJson.isMember(pMasqueradingVector[1]))
        {
            if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[2].empty())
    {
        if(pJson.isMember(pMasqueradingVector[2]))
        {
            if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[3].empty())
    {
        if(pJson.isMember(pMasqueradingVector[3]))
        {
            if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[4].empty())
    {
        if(pJson.isMember(pMasqueradingVector[4]))
        {
            if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[5].empty())
    {
        if(pJson.isMember(pMasqueradingVector[5]))
        {
            if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[6].empty())
    {
        if(pJson.isMember(pMasqueradingVector[6]))
        {
            if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[7].empty())
    {
        if(pJson.isMember(pMasqueradingVector[7]))
        {
            if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[8].empty())
    {
        if(pJson.isMember(pMasqueradingVector[8]))
        {
            if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[9].empty())
    {
        if(pJson.isMember(pMasqueradingVector[9]))
        {
            if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[10].empty())
    {
        if(pJson.isMember(pMasqueradingVector[10]))
        {
            if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[11].empty())
    {
        if(pJson.isMember(pMasqueradingVector[11]))
        {
            if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[12].empty())
    {
        if(pJson.isMember(pMasqueradingVector[12]))
        {
            if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[13].empty())
    {
        if(pJson.isMember(pMasqueradingVector[13]))
        {
            if(!validJsonOfField(13, pMasqueradingVector[13], pJson[pMasqueradingVector[13]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[14].empty())
    {
        if(pJson.isMember(pMasqueradingVector[14]))
        {
            if(!validJsonOfField(14, pMasqueradingVector[14], pJson[pMasqueradingVector[14]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[15].empty())
    {
        if(pJson.isMember(pMasqueradingVector[15]))
        {
            if(!validJsonOfField(15, pMasqueradingVector[15], pJson[pMasqueradingVector[15]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[16].empty())
    {
        if(pJson.isMember(pMasqueradingVector[16]))
        {
            if(!validJsonOfField(16, pMasqueradingVector[16], pJson[pMasqueradingVector[16]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[17].empty())
    {
        if(pJson.isMember(pMasqueradingVector[17]))
        {
            if(!validJsonOfField(17, pMasqueradingVector[17], pJson[pMasqueradingVector[17]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[18].empty())
    {
        if(pJson.isMember(pMasqueradingVector[18]))
        {
            if(!validJsonOfField(18, pMasqueradingVector[18], pJson[pMasqueradingVector[18]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[19].empty())
    {
        if(pJson.isMember(pMasqueradingVector[19]))
        {
            if(!validJsonOfField(19, pMasqueradingVector[19], pJson[pMasqueradingVector[19]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[20].empty())
    {
        if(pJson.isMember(pMasqueradingVector[20]))
        {
            if(!validJsonOfField(20, pMasqueradingVector[20], pJson[pMasqueradingVector[20]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[21].empty())
    {
        if(pJson.isMember(pMasqueradingVector[21]))
        {
            if(!validJsonOfField(21, pMasqueradingVector[21], pJson[pMasqueradingVector[21]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[22].empty())
    {
        if(pJson.isMember(pMasqueradingVector[22]))
        {
            if(!validJsonOfField(22, pMasqueradingVector[22], pJson[pMasqueradingVector[22]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[23].empty())
    {
        if(pJson.isMember(pMasqueradingVector[23]))
        {
            if(!validJsonOfField(23, pMasqueradingVector[23], pJson[pMasqueradingVector[23]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[24].empty())
    {
        if(pJson.isMember(pMasqueradingVector[24]))
        {
            if(!validJsonOfField(24, pMasqueradingVector[24], pJson[pMasqueradingVector[24]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[25].empty())
    {
        if(pJson.isMember(pMasqueradingVector[25]))
        {
            if(!validJsonOfField(25, pMasqueradingVector[25], pJson[pMasqueradingVector[25]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[26].empty())
    {
        if(pJson.isMember(pMasqueradingVector[26]))
        {
            if(!validJsonOfField(26, pMasqueradingVector[26], pJson[pMasqueradingVector[26]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[27].empty())
    {
        if(pJson.isMember(pMasqueradingVector[27]))
        {
            if(!validJsonOfField(27, pMasqueradingVector[27], pJson[pMasqueradingVector[27]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[28].empty())
    {
        if(pJson.isMember(pMasqueradingVector[28]))
        {
            if(!validJsonOfField(28, pMasqueradingVector[28], pJson[pMasqueradingVector[28]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[29].empty())
    {
        if(pJson.isMember(pMasqueradingVector[29]))
        {
            if(!validJsonOfField(29, pMasqueradingVector[29], pJson[pMasqueradingVector[29]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[30].empty())
    {
        if(pJson.isMember(pMasqueradingVector[30]))
        {
            if(!validJsonOfField(30, pMasqueradingVector[30], pJson[pMasqueradingVector[30]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[31].empty())
    {
        if(pJson.isMember(pMasqueradingVector[31]))
        {
            if(!validJsonOfField(31, pMasqueradingVector[31], pJson[pMasqueradingVector[31]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[32].empty())
    {
        if(pJson.isMember(pMasqueradingVector[32]))
        {
            if(!validJsonOfField(32, pMasqueradingVector[32], pJson[pMasqueradingVector[32]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[33].empty())
    {
        if(pJson.isMember(pMasqueradingVector[33]))
        {
            if(!validJsonOfField(33, pMasqueradingVector[33], pJson[pMasqueradingVector[33]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[34].empty())
    {
        if(pJson.isMember(pMasqueradingVector[34]))
        {
            if(!validJsonOfField(34, pMasqueradingVector[34], pJson[pMasqueradingVector[34]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[35].empty())
    {
        if(pJson.isMember(pMasqueradingVector[35]))
        {
            if(!validJsonOfField(35, pMasqueradingVector[35], pJson[pMasqueradingVector[35]], err, true))
                return false;
        }
    }
    return true;
}
bool QuotePrice::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("create_time"))
    {
        if(!validJsonOfField(1, "create_time", pJson["create_time"], err, false))
            return false;
    }
    if(pJson.isMember("update_time"))
    {
        if(!validJsonOfField(2, "update_time", pJson["update_time"], err, false))
            return false;
    }
    if(pJson.isMember("remark"))
    {
        if(!validJsonOfField(3, "remark", pJson["remark"], err, false))
            return false;
    }
    if(pJson.isMember("is_delete"))
    {
        if(!validJsonOfField(4, "is_delete", pJson["is_delete"], err, false))
            return false;
    }
    if(pJson.isMember("shop_id"))
    {
        if(!validJsonOfField(5, "shop_id", pJson["shop_id"], err, false))
            return false;
    }
    if(pJson.isMember("admin_id"))
    {
        if(!validJsonOfField(6, "admin_id", pJson["admin_id"], err, false))
            return false;
    }
    if(pJson.isMember("company_id"))
    {
        if(!validJsonOfField(7, "company_id", pJson["company_id"], err, false))
            return false;
    }
    if(pJson.isMember("source"))
    {
        if(!validJsonOfField(8, "source", pJson["source"], err, false))
            return false;
    }
    if(pJson.isMember("quote_price_type"))
    {
        if(!validJsonOfField(9, "quote_price_type", pJson["quote_price_type"], err, false))
            return false;
    }
    if(pJson.isMember("period_type"))
    {
        if(!validJsonOfField(10, "period_type", pJson["period_type"], err, false))
            return false;
    }
    if(pJson.isMember("service_id"))
    {
        if(!validJsonOfField(11, "service_id", pJson["service_id"], err, false))
            return false;
    }
    if(pJson.isMember("delivery_method"))
    {
        if(!validJsonOfField(12, "delivery_method", pJson["delivery_method"], err, false))
            return false;
    }
    if(pJson.isMember("currency_type"))
    {
        if(!validJsonOfField(13, "currency_type", pJson["currency_type"], err, false))
            return false;
    }
    if(pJson.isMember("quote_price"))
    {
        if(!validJsonOfField(14, "quote_price", pJson["quote_price"], err, false))
            return false;
    }
    if(pJson.isMember("lifting_water"))
    {
        if(!validJsonOfField(15, "lifting_water", pJson["lifting_water"], err, false))
            return false;
    }
    if(pJson.isMember("processing_fee"))
    {
        if(!validJsonOfField(16, "processing_fee", pJson["processing_fee"], err, false))
            return false;
    }
    if(pJson.isMember("sell_out_number"))
    {
        if(!validJsonOfField(17, "sell_out_number", pJson["sell_out_number"], err, false))
            return false;
    }
    if(pJson.isMember("quote_price_info"))
    {
        if(!validJsonOfField(18, "quote_price_info", pJson["quote_price_info"], err, false))
            return false;
    }
    if(pJson.isMember("product_id"))
    {
        if(!validJsonOfField(19, "product_id", pJson["product_id"], err, false))
            return false;
    }
    if(pJson.isMember("product_category_id"))
    {
        if(!validJsonOfField(20, "product_category_id", pJson["product_category_id"], err, false))
            return false;
    }
    if(pJson.isMember("product_model_id"))
    {
        if(!validJsonOfField(21, "product_model_id", pJson["product_model_id"], err, false))
            return false;
    }
    if(pJson.isMember("product_brand_id"))
    {
        if(!validJsonOfField(22, "product_brand_id", pJson["product_brand_id"], err, false))
            return false;
    }
    if(pJson.isMember("is_cancel"))
    {
        if(!validJsonOfField(23, "is_cancel", pJson["is_cancel"], err, false))
            return false;
    }
    if(pJson.isMember("delivery_place"))
    {
        if(!validJsonOfField(24, "delivery_place", pJson["delivery_place"], err, false))
            return false;
    }
    if(pJson.isMember("sort"))
    {
        if(!validJsonOfField(25, "sort", pJson["sort"], err, false))
            return false;
    }
    if(pJson.isMember("province_id"))
    {
        if(!validJsonOfField(26, "province_id", pJson["province_id"], err, false))
            return false;
    }
    if(pJson.isMember("city_id"))
    {
        if(!validJsonOfField(27, "city_id", pJson["city_id"], err, false))
            return false;
    }
    if(pJson.isMember("area_id"))
    {
        if(!validJsonOfField(28, "area_id", pJson["area_id"], err, false))
            return false;
    }
    if(pJson.isMember("address"))
    {
        if(!validJsonOfField(29, "address", pJson["address"], err, false))
            return false;
    }
    if(pJson.isMember("payment_method"))
    {
        if(!validJsonOfField(30, "payment_method", pJson["payment_method"], err, false))
            return false;
    }
    if(pJson.isMember("delivery_date"))
    {
        if(!validJsonOfField(31, "delivery_date", pJson["delivery_date"], err, false))
            return false;
    }
    if(pJson.isMember("point_price_type"))
    {
        if(!validJsonOfField(32, "point_price_type", pJson["point_price_type"], err, false))
            return false;
    }
    if(pJson.isMember("cash_on_delivery_days"))
    {
        if(!validJsonOfField(33, "cash_on_delivery_days", pJson["cash_on_delivery_days"], err, false))
            return false;
    }
    if(pJson.isMember("is_show"))
    {
        if(!validJsonOfField(34, "is_show", pJson["is_show"], err, false))
            return false;
    }
    if(pJson.isMember("quote_date"))
    {
        if(!validJsonOfField(35, "quote_date", pJson["quote_date"], err, false))
            return false;
    }
    return true;
}
bool QuotePrice::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                  const std::vector<std::string> &pMasqueradingVector,
                                                  std::string &err)
{
    if(pMasqueradingVector.size() != 36)
    {
        err = "Bad masquerading vector";
        return false;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
            return false;
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
            return false;
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
            return false;
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
            return false;
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
            return false;
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
            return false;
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
            return false;
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, false))
            return false;
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, false))
            return false;
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, false))
            return false;
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, false))
            return false;
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, false))
            return false;
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        if(!validJsonOfField(13, pMasqueradingVector[13], pJson[pMasqueradingVector[13]], err, false))
            return false;
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        if(!validJsonOfField(14, pMasqueradingVector[14], pJson[pMasqueradingVector[14]], err, false))
            return false;
    }
    if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
    {
        if(!validJsonOfField(15, pMasqueradingVector[15], pJson[pMasqueradingVector[15]], err, false))
            return false;
    }
    if(!pMasqueradingVector[16].empty() && pJson.isMember(pMasqueradingVector[16]))
    {
        if(!validJsonOfField(16, pMasqueradingVector[16], pJson[pMasqueradingVector[16]], err, false))
            return false;
    }
    if(!pMasqueradingVector[17].empty() && pJson.isMember(pMasqueradingVector[17]))
    {
        if(!validJsonOfField(17, pMasqueradingVector[17], pJson[pMasqueradingVector[17]], err, false))
            return false;
    }
    if(!pMasqueradingVector[18].empty() && pJson.isMember(pMasqueradingVector[18]))
    {
        if(!validJsonOfField(18, pMasqueradingVector[18], pJson[pMasqueradingVector[18]], err, false))
            return false;
    }
    if(!pMasqueradingVector[19].empty() && pJson.isMember(pMasqueradingVector[19]))
    {
        if(!validJsonOfField(19, pMasqueradingVector[19], pJson[pMasqueradingVector[19]], err, false))
            return false;
    }
    if(!pMasqueradingVector[20].empty() && pJson.isMember(pMasqueradingVector[20]))
    {
        if(!validJsonOfField(20, pMasqueradingVector[20], pJson[pMasqueradingVector[20]], err, false))
            return false;
    }
    if(!pMasqueradingVector[21].empty() && pJson.isMember(pMasqueradingVector[21]))
    {
        if(!validJsonOfField(21, pMasqueradingVector[21], pJson[pMasqueradingVector[21]], err, false))
            return false;
    }
    if(!pMasqueradingVector[22].empty() && pJson.isMember(pMasqueradingVector[22]))
    {
        if(!validJsonOfField(22, pMasqueradingVector[22], pJson[pMasqueradingVector[22]], err, false))
            return false;
    }
    if(!pMasqueradingVector[23].empty() && pJson.isMember(pMasqueradingVector[23]))
    {
        if(!validJsonOfField(23, pMasqueradingVector[23], pJson[pMasqueradingVector[23]], err, false))
            return false;
    }
    if(!pMasqueradingVector[24].empty() && pJson.isMember(pMasqueradingVector[24]))
    {
        if(!validJsonOfField(24, pMasqueradingVector[24], pJson[pMasqueradingVector[24]], err, false))
            return false;
    }
    if(!pMasqueradingVector[25].empty() && pJson.isMember(pMasqueradingVector[25]))
    {
        if(!validJsonOfField(25, pMasqueradingVector[25], pJson[pMasqueradingVector[25]], err, false))
            return false;
    }
    if(!pMasqueradingVector[26].empty() && pJson.isMember(pMasqueradingVector[26]))
    {
        if(!validJsonOfField(26, pMasqueradingVector[26], pJson[pMasqueradingVector[26]], err, false))
            return false;
    }
    if(!pMasqueradingVector[27].empty() && pJson.isMember(pMasqueradingVector[27]))
    {
        if(!validJsonOfField(27, pMasqueradingVector[27], pJson[pMasqueradingVector[27]], err, false))
            return false;
    }
    if(!pMasqueradingVector[28].empty() && pJson.isMember(pMasqueradingVector[28]))
    {
        if(!validJsonOfField(28, pMasqueradingVector[28], pJson[pMasqueradingVector[28]], err, false))
            return false;
    }
    if(!pMasqueradingVector[29].empty() && pJson.isMember(pMasqueradingVector[29]))
    {
        if(!validJsonOfField(29, pMasqueradingVector[29], pJson[pMasqueradingVector[29]], err, false))
            return false;
    }
    if(!pMasqueradingVector[30].empty() && pJson.isMember(pMasqueradingVector[30]))
    {
        if(!validJsonOfField(30, pMasqueradingVector[30], pJson[pMasqueradingVector[30]], err, false))
            return false;
    }
    if(!pMasqueradingVector[31].empty() && pJson.isMember(pMasqueradingVector[31]))
    {
        if(!validJsonOfField(31, pMasqueradingVector[31], pJson[pMasqueradingVector[31]], err, false))
            return false;
    }
    if(!pMasqueradingVector[32].empty() && pJson.isMember(pMasqueradingVector[32]))
    {
        if(!validJsonOfField(32, pMasqueradingVector[32], pJson[pMasqueradingVector[32]], err, false))
            return false;
    }
    if(!pMasqueradingVector[33].empty() && pJson.isMember(pMasqueradingVector[33]))
    {
        if(!validJsonOfField(33, pMasqueradingVector[33], pJson[pMasqueradingVector[33]], err, false))
            return false;
    }
    if(!pMasqueradingVector[34].empty() && pJson.isMember(pMasqueradingVector[34]))
    {
        if(!validJsonOfField(34, pMasqueradingVector[34], pJson[pMasqueradingVector[34]], err, false))
            return false;
    }
    if(!pMasqueradingVector[35].empty() && pJson.isMember(pMasqueradingVector[35]))
    {
        if(!validJsonOfField(35, pMasqueradingVector[35], pJson[pMasqueradingVector[35]], err, false))
            return false;
    }
    return true;
}
bool QuotePrice::validJsonOfField(size_t index,
                                  const std::string &fieldName,
                                  const Json::Value &pJson, 
                                  std::string &err, 
                                  bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }        
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 200)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 200)";
                return false;               
            }

            break;
        case 4:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 5:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 6:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 7:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 8:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 10)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 10)";
                return false;               
            }

            break;
        case 9:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 10:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 11:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 12:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 13:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 14:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 15:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 16:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 17:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 18:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 19:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 20:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 21:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 22:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 23:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 24:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 20)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 20)";
                return false;               
            }

            break;
        case 25:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 26:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 27:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 28:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 29:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 50)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 50)";
                return false;               
            }

            break;
        case 30:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 31:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 32:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 33:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 34:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 35:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
     
        default:
            err="Internal error in the server";
            return false;
            break;
    }
    return true;
}
