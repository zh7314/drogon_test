/**
 *
 *  SaleOrder.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "SaleOrder.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::v2;

const std::string SaleOrder::Cols::_id = "id";
const std::string SaleOrder::Cols::_create_time = "create_time";
const std::string SaleOrder::Cols::_update_time = "update_time";
const std::string SaleOrder::Cols::_remark = "remark";
const std::string SaleOrder::Cols::_is_delete = "is_delete";
const std::string SaleOrder::Cols::_order_key = "order_key";
const std::string SaleOrder::Cols::_parent_order_key = "parent_order_key";
const std::string SaleOrder::Cols::_admin_id = "admin_id";
const std::string SaleOrder::Cols::_shop_id = "shop_id";
const std::string SaleOrder::Cols::_user_id = "user_id";
const std::string SaleOrder::Cols::_order_from = "order_from";
const std::string SaleOrder::Cols::_order_type = "order_type";
const std::string SaleOrder::Cols::_order_status = "order_status";
const std::string SaleOrder::Cols::_order_amount = "order_amount";
const std::string SaleOrder::Cols::_cancel_reasons = "cancel_reasons";
const std::string SaleOrder::Cols::_audit_remark = "audit_remark";
const std::string SaleOrder::Cols::_company_id = "company_id";
const std::string SaleOrder::Cols::_deposit_amount = "deposit_amount";
const std::string SaleOrder::Cols::_order_category = "order_category";
const std::string SaleOrder::Cols::_order_number = "order_number";
const std::string SaleOrder::Cols::_order_history_info = "order_history_info";
const std::string SaleOrder::Cols::_outside_order_key = "outside_order_key";
const std::string SaleOrder::primaryKeyName = "id";
const bool SaleOrder::hasPrimaryKey = true;
const std::string SaleOrder::tableName = "sale_order";

const std::vector<typename SaleOrder::MetaData> SaleOrder::metaData_={
{"id","uint64_t","bigint(20) unsigned",8,1,1,1},
{"create_time","::trantor::Date","datetime",0,0,0,1},
{"update_time","::trantor::Date","datetime",0,0,0,1},
{"remark","std::string","varchar(200)",200,0,0,0},
{"is_delete","uint8_t","tinyint(1) unsigned",1,0,0,1},
{"order_key","std::string","varchar(20)",20,0,0,0},
{"parent_order_key","std::string","varchar(20)",20,0,0,0},
{"admin_id","uint64_t","bigint(20) unsigned",8,0,0,1},
{"shop_id","uint64_t","bigint(20) unsigned",8,0,0,1},
{"user_id","int64_t","bigint(20)",8,0,0,1},
{"order_from","std::string","varchar(20)",20,0,0,0},
{"order_type","int8_t","tinyint(1)",1,0,0,1},
{"order_status","uint8_t","tinyint(1) unsigned",1,0,0,1},
{"order_amount","std::string","decimal(32,2)",0,0,0,1},
{"cancel_reasons","std::string","varchar(200)",200,0,0,0},
{"audit_remark","std::string","varchar(200)",200,0,0,0},
{"company_id","int64_t","bigint(20)",8,0,0,1},
{"deposit_amount","std::string","decimal(32,2)",0,0,0,0},
{"order_category","uint8_t","tinyint(1) unsigned",1,0,0,1},
{"order_number","std::string","decimal(32,5)",0,0,0,1},
{"order_history_info","std::string","text",0,0,0,0},
{"outside_order_key","std::string","varchar(40)",40,0,0,0}
};
const std::string &SaleOrder::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
SaleOrder::SaleOrder(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<uint64_t>(r["id"].as<uint64_t>());
        }
        if(!r["create_time"].isNull())
        {
            auto timeStr = r["create_time"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        if(!r["update_time"].isNull())
        {
            auto timeStr = r["update_time"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        if(!r["remark"].isNull())
        {
            remark_=std::make_shared<std::string>(r["remark"].as<std::string>());
        }
        if(!r["is_delete"].isNull())
        {
            isDelete_=std::make_shared<uint8_t>(r["is_delete"].as<uint8_t>());
        }
        if(!r["order_key"].isNull())
        {
            orderKey_=std::make_shared<std::string>(r["order_key"].as<std::string>());
        }
        if(!r["parent_order_key"].isNull())
        {
            parentOrderKey_=std::make_shared<std::string>(r["parent_order_key"].as<std::string>());
        }
        if(!r["admin_id"].isNull())
        {
            adminId_=std::make_shared<uint64_t>(r["admin_id"].as<uint64_t>());
        }
        if(!r["shop_id"].isNull())
        {
            shopId_=std::make_shared<uint64_t>(r["shop_id"].as<uint64_t>());
        }
        if(!r["user_id"].isNull())
        {
            userId_=std::make_shared<int64_t>(r["user_id"].as<int64_t>());
        }
        if(!r["order_from"].isNull())
        {
            orderFrom_=std::make_shared<std::string>(r["order_from"].as<std::string>());
        }
        if(!r["order_type"].isNull())
        {
            orderType_=std::make_shared<int8_t>(r["order_type"].as<int8_t>());
        }
        if(!r["order_status"].isNull())
        {
            orderStatus_=std::make_shared<uint8_t>(r["order_status"].as<uint8_t>());
        }
        if(!r["order_amount"].isNull())
        {
            orderAmount_=std::make_shared<std::string>(r["order_amount"].as<std::string>());
        }
        if(!r["cancel_reasons"].isNull())
        {
            cancelReasons_=std::make_shared<std::string>(r["cancel_reasons"].as<std::string>());
        }
        if(!r["audit_remark"].isNull())
        {
            auditRemark_=std::make_shared<std::string>(r["audit_remark"].as<std::string>());
        }
        if(!r["company_id"].isNull())
        {
            companyId_=std::make_shared<int64_t>(r["company_id"].as<int64_t>());
        }
        if(!r["deposit_amount"].isNull())
        {
            depositAmount_=std::make_shared<std::string>(r["deposit_amount"].as<std::string>());
        }
        if(!r["order_category"].isNull())
        {
            orderCategory_=std::make_shared<uint8_t>(r["order_category"].as<uint8_t>());
        }
        if(!r["order_number"].isNull())
        {
            orderNumber_=std::make_shared<std::string>(r["order_number"].as<std::string>());
        }
        if(!r["order_history_info"].isNull())
        {
            orderHistoryInfo_=std::make_shared<std::string>(r["order_history_info"].as<std::string>());
        }
        if(!r["outside_order_key"].isNull())
        {
            outsideOrderKey_=std::make_shared<std::string>(r["outside_order_key"].as<std::string>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 22 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            remark_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            isDelete_=std::make_shared<uint8_t>(r[index].as<uint8_t>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            orderKey_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            parentOrderKey_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            adminId_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 8;
        if(!r[index].isNull())
        {
            shopId_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 9;
        if(!r[index].isNull())
        {
            userId_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 10;
        if(!r[index].isNull())
        {
            orderFrom_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 11;
        if(!r[index].isNull())
        {
            orderType_=std::make_shared<int8_t>(r[index].as<int8_t>());
        }
        index = offset + 12;
        if(!r[index].isNull())
        {
            orderStatus_=std::make_shared<uint8_t>(r[index].as<uint8_t>());
        }
        index = offset + 13;
        if(!r[index].isNull())
        {
            orderAmount_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 14;
        if(!r[index].isNull())
        {
            cancelReasons_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 15;
        if(!r[index].isNull())
        {
            auditRemark_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 16;
        if(!r[index].isNull())
        {
            companyId_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 17;
        if(!r[index].isNull())
        {
            depositAmount_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 18;
        if(!r[index].isNull())
        {
            orderCategory_=std::make_shared<uint8_t>(r[index].as<uint8_t>());
        }
        index = offset + 19;
        if(!r[index].isNull())
        {
            orderNumber_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 20;
        if(!r[index].isNull())
        {
            orderHistoryInfo_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 21;
        if(!r[index].isNull())
        {
            outsideOrderKey_=std::make_shared<std::string>(r[index].as<std::string>());
        }
    }

}

SaleOrder::SaleOrder(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 22)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[1]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[2]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            remark_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            isDelete_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[4]].asUInt64());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            orderKey_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            parentOrderKey_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            adminId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[7]].asUInt64());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            shopId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[8]].asUInt64());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            userId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[9]].asInt64());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            orderFrom_=std::make_shared<std::string>(pJson[pMasqueradingVector[10]].asString());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            orderType_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[11]].asInt64());
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            orderStatus_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[12]].asUInt64());
        }
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        dirtyFlag_[13] = true;
        if(!pJson[pMasqueradingVector[13]].isNull())
        {
            orderAmount_=std::make_shared<std::string>(pJson[pMasqueradingVector[13]].asString());
        }
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        dirtyFlag_[14] = true;
        if(!pJson[pMasqueradingVector[14]].isNull())
        {
            cancelReasons_=std::make_shared<std::string>(pJson[pMasqueradingVector[14]].asString());
        }
    }
    if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
    {
        dirtyFlag_[15] = true;
        if(!pJson[pMasqueradingVector[15]].isNull())
        {
            auditRemark_=std::make_shared<std::string>(pJson[pMasqueradingVector[15]].asString());
        }
    }
    if(!pMasqueradingVector[16].empty() && pJson.isMember(pMasqueradingVector[16]))
    {
        dirtyFlag_[16] = true;
        if(!pJson[pMasqueradingVector[16]].isNull())
        {
            companyId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[16]].asInt64());
        }
    }
    if(!pMasqueradingVector[17].empty() && pJson.isMember(pMasqueradingVector[17]))
    {
        dirtyFlag_[17] = true;
        if(!pJson[pMasqueradingVector[17]].isNull())
        {
            depositAmount_=std::make_shared<std::string>(pJson[pMasqueradingVector[17]].asString());
        }
    }
    if(!pMasqueradingVector[18].empty() && pJson.isMember(pMasqueradingVector[18]))
    {
        dirtyFlag_[18] = true;
        if(!pJson[pMasqueradingVector[18]].isNull())
        {
            orderCategory_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[18]].asUInt64());
        }
    }
    if(!pMasqueradingVector[19].empty() && pJson.isMember(pMasqueradingVector[19]))
    {
        dirtyFlag_[19] = true;
        if(!pJson[pMasqueradingVector[19]].isNull())
        {
            orderNumber_=std::make_shared<std::string>(pJson[pMasqueradingVector[19]].asString());
        }
    }
    if(!pMasqueradingVector[20].empty() && pJson.isMember(pMasqueradingVector[20]))
    {
        dirtyFlag_[20] = true;
        if(!pJson[pMasqueradingVector[20]].isNull())
        {
            orderHistoryInfo_=std::make_shared<std::string>(pJson[pMasqueradingVector[20]].asString());
        }
    }
    if(!pMasqueradingVector[21].empty() && pJson.isMember(pMasqueradingVector[21]))
    {
        dirtyFlag_[21] = true;
        if(!pJson[pMasqueradingVector[21]].isNull())
        {
            outsideOrderKey_=std::make_shared<std::string>(pJson[pMasqueradingVector[21]].asString());
        }
    }
}

SaleOrder::SaleOrder(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson["id"].asUInt64());
        }
    }
    if(pJson.isMember("create_time"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["create_time"].isNull())
        {
            auto timeStr = pJson["create_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("update_time"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["update_time"].isNull())
        {
            auto timeStr = pJson["update_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("remark"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["remark"].isNull())
        {
            remark_=std::make_shared<std::string>(pJson["remark"].asString());
        }
    }
    if(pJson.isMember("is_delete"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["is_delete"].isNull())
        {
            isDelete_=std::make_shared<uint8_t>((uint8_t)pJson["is_delete"].asUInt64());
        }
    }
    if(pJson.isMember("order_key"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["order_key"].isNull())
        {
            orderKey_=std::make_shared<std::string>(pJson["order_key"].asString());
        }
    }
    if(pJson.isMember("parent_order_key"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["parent_order_key"].isNull())
        {
            parentOrderKey_=std::make_shared<std::string>(pJson["parent_order_key"].asString());
        }
    }
    if(pJson.isMember("admin_id"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["admin_id"].isNull())
        {
            adminId_=std::make_shared<uint64_t>((uint64_t)pJson["admin_id"].asUInt64());
        }
    }
    if(pJson.isMember("shop_id"))
    {
        dirtyFlag_[8]=true;
        if(!pJson["shop_id"].isNull())
        {
            shopId_=std::make_shared<uint64_t>((uint64_t)pJson["shop_id"].asUInt64());
        }
    }
    if(pJson.isMember("user_id"))
    {
        dirtyFlag_[9]=true;
        if(!pJson["user_id"].isNull())
        {
            userId_=std::make_shared<int64_t>((int64_t)pJson["user_id"].asInt64());
        }
    }
    if(pJson.isMember("order_from"))
    {
        dirtyFlag_[10]=true;
        if(!pJson["order_from"].isNull())
        {
            orderFrom_=std::make_shared<std::string>(pJson["order_from"].asString());
        }
    }
    if(pJson.isMember("order_type"))
    {
        dirtyFlag_[11]=true;
        if(!pJson["order_type"].isNull())
        {
            orderType_=std::make_shared<int8_t>((int8_t)pJson["order_type"].asInt64());
        }
    }
    if(pJson.isMember("order_status"))
    {
        dirtyFlag_[12]=true;
        if(!pJson["order_status"].isNull())
        {
            orderStatus_=std::make_shared<uint8_t>((uint8_t)pJson["order_status"].asUInt64());
        }
    }
    if(pJson.isMember("order_amount"))
    {
        dirtyFlag_[13]=true;
        if(!pJson["order_amount"].isNull())
        {
            orderAmount_=std::make_shared<std::string>(pJson["order_amount"].asString());
        }
    }
    if(pJson.isMember("cancel_reasons"))
    {
        dirtyFlag_[14]=true;
        if(!pJson["cancel_reasons"].isNull())
        {
            cancelReasons_=std::make_shared<std::string>(pJson["cancel_reasons"].asString());
        }
    }
    if(pJson.isMember("audit_remark"))
    {
        dirtyFlag_[15]=true;
        if(!pJson["audit_remark"].isNull())
        {
            auditRemark_=std::make_shared<std::string>(pJson["audit_remark"].asString());
        }
    }
    if(pJson.isMember("company_id"))
    {
        dirtyFlag_[16]=true;
        if(!pJson["company_id"].isNull())
        {
            companyId_=std::make_shared<int64_t>((int64_t)pJson["company_id"].asInt64());
        }
    }
    if(pJson.isMember("deposit_amount"))
    {
        dirtyFlag_[17]=true;
        if(!pJson["deposit_amount"].isNull())
        {
            depositAmount_=std::make_shared<std::string>(pJson["deposit_amount"].asString());
        }
    }
    if(pJson.isMember("order_category"))
    {
        dirtyFlag_[18]=true;
        if(!pJson["order_category"].isNull())
        {
            orderCategory_=std::make_shared<uint8_t>((uint8_t)pJson["order_category"].asUInt64());
        }
    }
    if(pJson.isMember("order_number"))
    {
        dirtyFlag_[19]=true;
        if(!pJson["order_number"].isNull())
        {
            orderNumber_=std::make_shared<std::string>(pJson["order_number"].asString());
        }
    }
    if(pJson.isMember("order_history_info"))
    {
        dirtyFlag_[20]=true;
        if(!pJson["order_history_info"].isNull())
        {
            orderHistoryInfo_=std::make_shared<std::string>(pJson["order_history_info"].asString());
        }
    }
    if(pJson.isMember("outside_order_key"))
    {
        dirtyFlag_[21]=true;
        if(!pJson["outside_order_key"].isNull())
        {
            outsideOrderKey_=std::make_shared<std::string>(pJson["outside_order_key"].asString());
        }
    }
}

void SaleOrder::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 22)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[1]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[2]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            remark_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            isDelete_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[4]].asUInt64());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            orderKey_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            parentOrderKey_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            adminId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[7]].asUInt64());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            shopId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[8]].asUInt64());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            userId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[9]].asInt64());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            orderFrom_=std::make_shared<std::string>(pJson[pMasqueradingVector[10]].asString());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            orderType_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[11]].asInt64());
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            orderStatus_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[12]].asUInt64());
        }
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        dirtyFlag_[13] = true;
        if(!pJson[pMasqueradingVector[13]].isNull())
        {
            orderAmount_=std::make_shared<std::string>(pJson[pMasqueradingVector[13]].asString());
        }
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        dirtyFlag_[14] = true;
        if(!pJson[pMasqueradingVector[14]].isNull())
        {
            cancelReasons_=std::make_shared<std::string>(pJson[pMasqueradingVector[14]].asString());
        }
    }
    if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
    {
        dirtyFlag_[15] = true;
        if(!pJson[pMasqueradingVector[15]].isNull())
        {
            auditRemark_=std::make_shared<std::string>(pJson[pMasqueradingVector[15]].asString());
        }
    }
    if(!pMasqueradingVector[16].empty() && pJson.isMember(pMasqueradingVector[16]))
    {
        dirtyFlag_[16] = true;
        if(!pJson[pMasqueradingVector[16]].isNull())
        {
            companyId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[16]].asInt64());
        }
    }
    if(!pMasqueradingVector[17].empty() && pJson.isMember(pMasqueradingVector[17]))
    {
        dirtyFlag_[17] = true;
        if(!pJson[pMasqueradingVector[17]].isNull())
        {
            depositAmount_=std::make_shared<std::string>(pJson[pMasqueradingVector[17]].asString());
        }
    }
    if(!pMasqueradingVector[18].empty() && pJson.isMember(pMasqueradingVector[18]))
    {
        dirtyFlag_[18] = true;
        if(!pJson[pMasqueradingVector[18]].isNull())
        {
            orderCategory_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[18]].asUInt64());
        }
    }
    if(!pMasqueradingVector[19].empty() && pJson.isMember(pMasqueradingVector[19]))
    {
        dirtyFlag_[19] = true;
        if(!pJson[pMasqueradingVector[19]].isNull())
        {
            orderNumber_=std::make_shared<std::string>(pJson[pMasqueradingVector[19]].asString());
        }
    }
    if(!pMasqueradingVector[20].empty() && pJson.isMember(pMasqueradingVector[20]))
    {
        dirtyFlag_[20] = true;
        if(!pJson[pMasqueradingVector[20]].isNull())
        {
            orderHistoryInfo_=std::make_shared<std::string>(pJson[pMasqueradingVector[20]].asString());
        }
    }
    if(!pMasqueradingVector[21].empty() && pJson.isMember(pMasqueradingVector[21]))
    {
        dirtyFlag_[21] = true;
        if(!pJson[pMasqueradingVector[21]].isNull())
        {
            outsideOrderKey_=std::make_shared<std::string>(pJson[pMasqueradingVector[21]].asString());
        }
    }
}
                                                                    
void SaleOrder::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson["id"].asUInt64());
        }
    }
    if(pJson.isMember("create_time"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["create_time"].isNull())
        {
            auto timeStr = pJson["create_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("update_time"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["update_time"].isNull())
        {
            auto timeStr = pJson["update_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("remark"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["remark"].isNull())
        {
            remark_=std::make_shared<std::string>(pJson["remark"].asString());
        }
    }
    if(pJson.isMember("is_delete"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["is_delete"].isNull())
        {
            isDelete_=std::make_shared<uint8_t>((uint8_t)pJson["is_delete"].asUInt64());
        }
    }
    if(pJson.isMember("order_key"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["order_key"].isNull())
        {
            orderKey_=std::make_shared<std::string>(pJson["order_key"].asString());
        }
    }
    if(pJson.isMember("parent_order_key"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["parent_order_key"].isNull())
        {
            parentOrderKey_=std::make_shared<std::string>(pJson["parent_order_key"].asString());
        }
    }
    if(pJson.isMember("admin_id"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["admin_id"].isNull())
        {
            adminId_=std::make_shared<uint64_t>((uint64_t)pJson["admin_id"].asUInt64());
        }
    }
    if(pJson.isMember("shop_id"))
    {
        dirtyFlag_[8] = true;
        if(!pJson["shop_id"].isNull())
        {
            shopId_=std::make_shared<uint64_t>((uint64_t)pJson["shop_id"].asUInt64());
        }
    }
    if(pJson.isMember("user_id"))
    {
        dirtyFlag_[9] = true;
        if(!pJson["user_id"].isNull())
        {
            userId_=std::make_shared<int64_t>((int64_t)pJson["user_id"].asInt64());
        }
    }
    if(pJson.isMember("order_from"))
    {
        dirtyFlag_[10] = true;
        if(!pJson["order_from"].isNull())
        {
            orderFrom_=std::make_shared<std::string>(pJson["order_from"].asString());
        }
    }
    if(pJson.isMember("order_type"))
    {
        dirtyFlag_[11] = true;
        if(!pJson["order_type"].isNull())
        {
            orderType_=std::make_shared<int8_t>((int8_t)pJson["order_type"].asInt64());
        }
    }
    if(pJson.isMember("order_status"))
    {
        dirtyFlag_[12] = true;
        if(!pJson["order_status"].isNull())
        {
            orderStatus_=std::make_shared<uint8_t>((uint8_t)pJson["order_status"].asUInt64());
        }
    }
    if(pJson.isMember("order_amount"))
    {
        dirtyFlag_[13] = true;
        if(!pJson["order_amount"].isNull())
        {
            orderAmount_=std::make_shared<std::string>(pJson["order_amount"].asString());
        }
    }
    if(pJson.isMember("cancel_reasons"))
    {
        dirtyFlag_[14] = true;
        if(!pJson["cancel_reasons"].isNull())
        {
            cancelReasons_=std::make_shared<std::string>(pJson["cancel_reasons"].asString());
        }
    }
    if(pJson.isMember("audit_remark"))
    {
        dirtyFlag_[15] = true;
        if(!pJson["audit_remark"].isNull())
        {
            auditRemark_=std::make_shared<std::string>(pJson["audit_remark"].asString());
        }
    }
    if(pJson.isMember("company_id"))
    {
        dirtyFlag_[16] = true;
        if(!pJson["company_id"].isNull())
        {
            companyId_=std::make_shared<int64_t>((int64_t)pJson["company_id"].asInt64());
        }
    }
    if(pJson.isMember("deposit_amount"))
    {
        dirtyFlag_[17] = true;
        if(!pJson["deposit_amount"].isNull())
        {
            depositAmount_=std::make_shared<std::string>(pJson["deposit_amount"].asString());
        }
    }
    if(pJson.isMember("order_category"))
    {
        dirtyFlag_[18] = true;
        if(!pJson["order_category"].isNull())
        {
            orderCategory_=std::make_shared<uint8_t>((uint8_t)pJson["order_category"].asUInt64());
        }
    }
    if(pJson.isMember("order_number"))
    {
        dirtyFlag_[19] = true;
        if(!pJson["order_number"].isNull())
        {
            orderNumber_=std::make_shared<std::string>(pJson["order_number"].asString());
        }
    }
    if(pJson.isMember("order_history_info"))
    {
        dirtyFlag_[20] = true;
        if(!pJson["order_history_info"].isNull())
        {
            orderHistoryInfo_=std::make_shared<std::string>(pJson["order_history_info"].asString());
        }
    }
    if(pJson.isMember("outside_order_key"))
    {
        dirtyFlag_[21] = true;
        if(!pJson["outside_order_key"].isNull())
        {
            outsideOrderKey_=std::make_shared<std::string>(pJson["outside_order_key"].asString());
        }
    }
}

const uint64_t &SaleOrder::getValueOfId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &SaleOrder::getId() const noexcept
{
    return id_;
}
void SaleOrder::setId(const uint64_t &pId) noexcept
{
    id_ = std::make_shared<uint64_t>(pId);
    dirtyFlag_[0] = true;
}



const typename SaleOrder::PrimaryKeyType & SaleOrder::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const ::trantor::Date &SaleOrder::getValueOfCreateTime() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(createTime_)
        return *createTime_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &SaleOrder::getCreateTime() const noexcept
{
    return createTime_;
}
void SaleOrder::setCreateTime(const ::trantor::Date &pCreateTime) noexcept
{
    createTime_ = std::make_shared<::trantor::Date>(pCreateTime);
    dirtyFlag_[1] = true;
}




const ::trantor::Date &SaleOrder::getValueOfUpdateTime() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(updateTime_)
        return *updateTime_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &SaleOrder::getUpdateTime() const noexcept
{
    return updateTime_;
}
void SaleOrder::setUpdateTime(const ::trantor::Date &pUpdateTime) noexcept
{
    updateTime_ = std::make_shared<::trantor::Date>(pUpdateTime);
    dirtyFlag_[2] = true;
}




const std::string &SaleOrder::getValueOfRemark() const noexcept
{
    const static std::string defaultValue = std::string();
    if(remark_)
        return *remark_;
    return defaultValue;
}
const std::shared_ptr<std::string> &SaleOrder::getRemark() const noexcept
{
    return remark_;
}
void SaleOrder::setRemark(const std::string &pRemark) noexcept
{
    remark_ = std::make_shared<std::string>(pRemark);
    dirtyFlag_[3] = true;
}
void SaleOrder::setRemark(std::string &&pRemark) noexcept
{
    remark_ = std::make_shared<std::string>(std::move(pRemark));
    dirtyFlag_[3] = true;
}


void SaleOrder::setRemarkToNull() noexcept
{
    remark_.reset();
    dirtyFlag_[3] = true;
}


const uint8_t &SaleOrder::getValueOfIsDelete() const noexcept
{
    const static uint8_t defaultValue = uint8_t();
    if(isDelete_)
        return *isDelete_;
    return defaultValue;
}
const std::shared_ptr<uint8_t> &SaleOrder::getIsDelete() const noexcept
{
    return isDelete_;
}
void SaleOrder::setIsDelete(const uint8_t &pIsDelete) noexcept
{
    isDelete_ = std::make_shared<uint8_t>(pIsDelete);
    dirtyFlag_[4] = true;
}




const std::string &SaleOrder::getValueOfOrderKey() const noexcept
{
    const static std::string defaultValue = std::string();
    if(orderKey_)
        return *orderKey_;
    return defaultValue;
}
const std::shared_ptr<std::string> &SaleOrder::getOrderKey() const noexcept
{
    return orderKey_;
}
void SaleOrder::setOrderKey(const std::string &pOrderKey) noexcept
{
    orderKey_ = std::make_shared<std::string>(pOrderKey);
    dirtyFlag_[5] = true;
}
void SaleOrder::setOrderKey(std::string &&pOrderKey) noexcept
{
    orderKey_ = std::make_shared<std::string>(std::move(pOrderKey));
    dirtyFlag_[5] = true;
}


void SaleOrder::setOrderKeyToNull() noexcept
{
    orderKey_.reset();
    dirtyFlag_[5] = true;
}


const std::string &SaleOrder::getValueOfParentOrderKey() const noexcept
{
    const static std::string defaultValue = std::string();
    if(parentOrderKey_)
        return *parentOrderKey_;
    return defaultValue;
}
const std::shared_ptr<std::string> &SaleOrder::getParentOrderKey() const noexcept
{
    return parentOrderKey_;
}
void SaleOrder::setParentOrderKey(const std::string &pParentOrderKey) noexcept
{
    parentOrderKey_ = std::make_shared<std::string>(pParentOrderKey);
    dirtyFlag_[6] = true;
}
void SaleOrder::setParentOrderKey(std::string &&pParentOrderKey) noexcept
{
    parentOrderKey_ = std::make_shared<std::string>(std::move(pParentOrderKey));
    dirtyFlag_[6] = true;
}


void SaleOrder::setParentOrderKeyToNull() noexcept
{
    parentOrderKey_.reset();
    dirtyFlag_[6] = true;
}


const uint64_t &SaleOrder::getValueOfAdminId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(adminId_)
        return *adminId_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &SaleOrder::getAdminId() const noexcept
{
    return adminId_;
}
void SaleOrder::setAdminId(const uint64_t &pAdminId) noexcept
{
    adminId_ = std::make_shared<uint64_t>(pAdminId);
    dirtyFlag_[7] = true;
}




const uint64_t &SaleOrder::getValueOfShopId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(shopId_)
        return *shopId_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &SaleOrder::getShopId() const noexcept
{
    return shopId_;
}
void SaleOrder::setShopId(const uint64_t &pShopId) noexcept
{
    shopId_ = std::make_shared<uint64_t>(pShopId);
    dirtyFlag_[8] = true;
}




const int64_t &SaleOrder::getValueOfUserId() const noexcept
{
    const static int64_t defaultValue = int64_t();
    if(userId_)
        return *userId_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &SaleOrder::getUserId() const noexcept
{
    return userId_;
}
void SaleOrder::setUserId(const int64_t &pUserId) noexcept
{
    userId_ = std::make_shared<int64_t>(pUserId);
    dirtyFlag_[9] = true;
}




const std::string &SaleOrder::getValueOfOrderFrom() const noexcept
{
    const static std::string defaultValue = std::string();
    if(orderFrom_)
        return *orderFrom_;
    return defaultValue;
}
const std::shared_ptr<std::string> &SaleOrder::getOrderFrom() const noexcept
{
    return orderFrom_;
}
void SaleOrder::setOrderFrom(const std::string &pOrderFrom) noexcept
{
    orderFrom_ = std::make_shared<std::string>(pOrderFrom);
    dirtyFlag_[10] = true;
}
void SaleOrder::setOrderFrom(std::string &&pOrderFrom) noexcept
{
    orderFrom_ = std::make_shared<std::string>(std::move(pOrderFrom));
    dirtyFlag_[10] = true;
}


void SaleOrder::setOrderFromToNull() noexcept
{
    orderFrom_.reset();
    dirtyFlag_[10] = true;
}


const int8_t &SaleOrder::getValueOfOrderType() const noexcept
{
    const static int8_t defaultValue = int8_t();
    if(orderType_)
        return *orderType_;
    return defaultValue;
}
const std::shared_ptr<int8_t> &SaleOrder::getOrderType() const noexcept
{
    return orderType_;
}
void SaleOrder::setOrderType(const int8_t &pOrderType) noexcept
{
    orderType_ = std::make_shared<int8_t>(pOrderType);
    dirtyFlag_[11] = true;
}




const uint8_t &SaleOrder::getValueOfOrderStatus() const noexcept
{
    const static uint8_t defaultValue = uint8_t();
    if(orderStatus_)
        return *orderStatus_;
    return defaultValue;
}
const std::shared_ptr<uint8_t> &SaleOrder::getOrderStatus() const noexcept
{
    return orderStatus_;
}
void SaleOrder::setOrderStatus(const uint8_t &pOrderStatus) noexcept
{
    orderStatus_ = std::make_shared<uint8_t>(pOrderStatus);
    dirtyFlag_[12] = true;
}




const std::string &SaleOrder::getValueOfOrderAmount() const noexcept
{
    const static std::string defaultValue = std::string();
    if(orderAmount_)
        return *orderAmount_;
    return defaultValue;
}
const std::shared_ptr<std::string> &SaleOrder::getOrderAmount() const noexcept
{
    return orderAmount_;
}
void SaleOrder::setOrderAmount(const std::string &pOrderAmount) noexcept
{
    orderAmount_ = std::make_shared<std::string>(pOrderAmount);
    dirtyFlag_[13] = true;
}
void SaleOrder::setOrderAmount(std::string &&pOrderAmount) noexcept
{
    orderAmount_ = std::make_shared<std::string>(std::move(pOrderAmount));
    dirtyFlag_[13] = true;
}




const std::string &SaleOrder::getValueOfCancelReasons() const noexcept
{
    const static std::string defaultValue = std::string();
    if(cancelReasons_)
        return *cancelReasons_;
    return defaultValue;
}
const std::shared_ptr<std::string> &SaleOrder::getCancelReasons() const noexcept
{
    return cancelReasons_;
}
void SaleOrder::setCancelReasons(const std::string &pCancelReasons) noexcept
{
    cancelReasons_ = std::make_shared<std::string>(pCancelReasons);
    dirtyFlag_[14] = true;
}
void SaleOrder::setCancelReasons(std::string &&pCancelReasons) noexcept
{
    cancelReasons_ = std::make_shared<std::string>(std::move(pCancelReasons));
    dirtyFlag_[14] = true;
}


void SaleOrder::setCancelReasonsToNull() noexcept
{
    cancelReasons_.reset();
    dirtyFlag_[14] = true;
}


const std::string &SaleOrder::getValueOfAuditRemark() const noexcept
{
    const static std::string defaultValue = std::string();
    if(auditRemark_)
        return *auditRemark_;
    return defaultValue;
}
const std::shared_ptr<std::string> &SaleOrder::getAuditRemark() const noexcept
{
    return auditRemark_;
}
void SaleOrder::setAuditRemark(const std::string &pAuditRemark) noexcept
{
    auditRemark_ = std::make_shared<std::string>(pAuditRemark);
    dirtyFlag_[15] = true;
}
void SaleOrder::setAuditRemark(std::string &&pAuditRemark) noexcept
{
    auditRemark_ = std::make_shared<std::string>(std::move(pAuditRemark));
    dirtyFlag_[15] = true;
}


void SaleOrder::setAuditRemarkToNull() noexcept
{
    auditRemark_.reset();
    dirtyFlag_[15] = true;
}


const int64_t &SaleOrder::getValueOfCompanyId() const noexcept
{
    const static int64_t defaultValue = int64_t();
    if(companyId_)
        return *companyId_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &SaleOrder::getCompanyId() const noexcept
{
    return companyId_;
}
void SaleOrder::setCompanyId(const int64_t &pCompanyId) noexcept
{
    companyId_ = std::make_shared<int64_t>(pCompanyId);
    dirtyFlag_[16] = true;
}




const std::string &SaleOrder::getValueOfDepositAmount() const noexcept
{
    const static std::string defaultValue = std::string();
    if(depositAmount_)
        return *depositAmount_;
    return defaultValue;
}
const std::shared_ptr<std::string> &SaleOrder::getDepositAmount() const noexcept
{
    return depositAmount_;
}
void SaleOrder::setDepositAmount(const std::string &pDepositAmount) noexcept
{
    depositAmount_ = std::make_shared<std::string>(pDepositAmount);
    dirtyFlag_[17] = true;
}
void SaleOrder::setDepositAmount(std::string &&pDepositAmount) noexcept
{
    depositAmount_ = std::make_shared<std::string>(std::move(pDepositAmount));
    dirtyFlag_[17] = true;
}


void SaleOrder::setDepositAmountToNull() noexcept
{
    depositAmount_.reset();
    dirtyFlag_[17] = true;
}


const uint8_t &SaleOrder::getValueOfOrderCategory() const noexcept
{
    const static uint8_t defaultValue = uint8_t();
    if(orderCategory_)
        return *orderCategory_;
    return defaultValue;
}
const std::shared_ptr<uint8_t> &SaleOrder::getOrderCategory() const noexcept
{
    return orderCategory_;
}
void SaleOrder::setOrderCategory(const uint8_t &pOrderCategory) noexcept
{
    orderCategory_ = std::make_shared<uint8_t>(pOrderCategory);
    dirtyFlag_[18] = true;
}




const std::string &SaleOrder::getValueOfOrderNumber() const noexcept
{
    const static std::string defaultValue = std::string();
    if(orderNumber_)
        return *orderNumber_;
    return defaultValue;
}
const std::shared_ptr<std::string> &SaleOrder::getOrderNumber() const noexcept
{
    return orderNumber_;
}
void SaleOrder::setOrderNumber(const std::string &pOrderNumber) noexcept
{
    orderNumber_ = std::make_shared<std::string>(pOrderNumber);
    dirtyFlag_[19] = true;
}
void SaleOrder::setOrderNumber(std::string &&pOrderNumber) noexcept
{
    orderNumber_ = std::make_shared<std::string>(std::move(pOrderNumber));
    dirtyFlag_[19] = true;
}




const std::string &SaleOrder::getValueOfOrderHistoryInfo() const noexcept
{
    const static std::string defaultValue = std::string();
    if(orderHistoryInfo_)
        return *orderHistoryInfo_;
    return defaultValue;
}
const std::shared_ptr<std::string> &SaleOrder::getOrderHistoryInfo() const noexcept
{
    return orderHistoryInfo_;
}
void SaleOrder::setOrderHistoryInfo(const std::string &pOrderHistoryInfo) noexcept
{
    orderHistoryInfo_ = std::make_shared<std::string>(pOrderHistoryInfo);
    dirtyFlag_[20] = true;
}
void SaleOrder::setOrderHistoryInfo(std::string &&pOrderHistoryInfo) noexcept
{
    orderHistoryInfo_ = std::make_shared<std::string>(std::move(pOrderHistoryInfo));
    dirtyFlag_[20] = true;
}


void SaleOrder::setOrderHistoryInfoToNull() noexcept
{
    orderHistoryInfo_.reset();
    dirtyFlag_[20] = true;
}


const std::string &SaleOrder::getValueOfOutsideOrderKey() const noexcept
{
    const static std::string defaultValue = std::string();
    if(outsideOrderKey_)
        return *outsideOrderKey_;
    return defaultValue;
}
const std::shared_ptr<std::string> &SaleOrder::getOutsideOrderKey() const noexcept
{
    return outsideOrderKey_;
}
void SaleOrder::setOutsideOrderKey(const std::string &pOutsideOrderKey) noexcept
{
    outsideOrderKey_ = std::make_shared<std::string>(pOutsideOrderKey);
    dirtyFlag_[21] = true;
}
void SaleOrder::setOutsideOrderKey(std::string &&pOutsideOrderKey) noexcept
{
    outsideOrderKey_ = std::make_shared<std::string>(std::move(pOutsideOrderKey));
    dirtyFlag_[21] = true;
}


void SaleOrder::setOutsideOrderKeyToNull() noexcept
{
    outsideOrderKey_.reset();
    dirtyFlag_[21] = true;
}


void SaleOrder::updateId(const uint64_t id)
{
    id_ = std::make_shared<uint64_t>(id);
}

const std::vector<std::string> &SaleOrder::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "create_time",
        "update_time",
        "remark",
        "is_delete",
        "order_key",
        "parent_order_key",
        "admin_id",
        "shop_id",
        "user_id",
        "order_from",
        "order_type",
        "order_status",
        "order_amount",
        "cancel_reasons",
        "audit_remark",
        "company_id",
        "deposit_amount",
        "order_category",
        "order_number",
        "order_history_info",
        "outside_order_key"
    };
    return inCols;
}

void SaleOrder::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getCreateTime())
        {
            binder << getValueOfCreateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getUpdateTime())
        {
            binder << getValueOfUpdateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getRemark())
        {
            binder << getValueOfRemark();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getIsDelete())
        {
            binder << getValueOfIsDelete();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getOrderKey())
        {
            binder << getValueOfOrderKey();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getParentOrderKey())
        {
            binder << getValueOfParentOrderKey();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getAdminId())
        {
            binder << getValueOfAdminId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getShopId())
        {
            binder << getValueOfShopId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getUserId())
        {
            binder << getValueOfUserId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getOrderFrom())
        {
            binder << getValueOfOrderFrom();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getOrderType())
        {
            binder << getValueOfOrderType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getOrderStatus())
        {
            binder << getValueOfOrderStatus();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[13])
    {
        if(getOrderAmount())
        {
            binder << getValueOfOrderAmount();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[14])
    {
        if(getCancelReasons())
        {
            binder << getValueOfCancelReasons();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[15])
    {
        if(getAuditRemark())
        {
            binder << getValueOfAuditRemark();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[16])
    {
        if(getCompanyId())
        {
            binder << getValueOfCompanyId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[17])
    {
        if(getDepositAmount())
        {
            binder << getValueOfDepositAmount();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[18])
    {
        if(getOrderCategory())
        {
            binder << getValueOfOrderCategory();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[19])
    {
        if(getOrderNumber())
        {
            binder << getValueOfOrderNumber();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[20])
    {
        if(getOrderHistoryInfo())
        {
            binder << getValueOfOrderHistoryInfo();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[21])
    {
        if(getOutsideOrderKey())
        {
            binder << getValueOfOutsideOrderKey();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> SaleOrder::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    if(dirtyFlag_[8])
    {
        ret.push_back(getColumnName(8));
    }
    if(dirtyFlag_[9])
    {
        ret.push_back(getColumnName(9));
    }
    if(dirtyFlag_[10])
    {
        ret.push_back(getColumnName(10));
    }
    if(dirtyFlag_[11])
    {
        ret.push_back(getColumnName(11));
    }
    if(dirtyFlag_[12])
    {
        ret.push_back(getColumnName(12));
    }
    if(dirtyFlag_[13])
    {
        ret.push_back(getColumnName(13));
    }
    if(dirtyFlag_[14])
    {
        ret.push_back(getColumnName(14));
    }
    if(dirtyFlag_[15])
    {
        ret.push_back(getColumnName(15));
    }
    if(dirtyFlag_[16])
    {
        ret.push_back(getColumnName(16));
    }
    if(dirtyFlag_[17])
    {
        ret.push_back(getColumnName(17));
    }
    if(dirtyFlag_[18])
    {
        ret.push_back(getColumnName(18));
    }
    if(dirtyFlag_[19])
    {
        ret.push_back(getColumnName(19));
    }
    if(dirtyFlag_[20])
    {
        ret.push_back(getColumnName(20));
    }
    if(dirtyFlag_[21])
    {
        ret.push_back(getColumnName(21));
    }
    return ret;
}

void SaleOrder::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getCreateTime())
        {
            binder << getValueOfCreateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getUpdateTime())
        {
            binder << getValueOfUpdateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getRemark())
        {
            binder << getValueOfRemark();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getIsDelete())
        {
            binder << getValueOfIsDelete();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getOrderKey())
        {
            binder << getValueOfOrderKey();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getParentOrderKey())
        {
            binder << getValueOfParentOrderKey();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getAdminId())
        {
            binder << getValueOfAdminId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getShopId())
        {
            binder << getValueOfShopId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getUserId())
        {
            binder << getValueOfUserId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getOrderFrom())
        {
            binder << getValueOfOrderFrom();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getOrderType())
        {
            binder << getValueOfOrderType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getOrderStatus())
        {
            binder << getValueOfOrderStatus();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[13])
    {
        if(getOrderAmount())
        {
            binder << getValueOfOrderAmount();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[14])
    {
        if(getCancelReasons())
        {
            binder << getValueOfCancelReasons();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[15])
    {
        if(getAuditRemark())
        {
            binder << getValueOfAuditRemark();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[16])
    {
        if(getCompanyId())
        {
            binder << getValueOfCompanyId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[17])
    {
        if(getDepositAmount())
        {
            binder << getValueOfDepositAmount();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[18])
    {
        if(getOrderCategory())
        {
            binder << getValueOfOrderCategory();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[19])
    {
        if(getOrderNumber())
        {
            binder << getValueOfOrderNumber();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[20])
    {
        if(getOrderHistoryInfo())
        {
            binder << getValueOfOrderHistoryInfo();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[21])
    {
        if(getOutsideOrderKey())
        {
            binder << getValueOfOutsideOrderKey();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value SaleOrder::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=(Json::UInt64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getCreateTime())
    {
        ret["create_time"]=getCreateTime()->toDbStringLocal();
    }
    else
    {
        ret["create_time"]=Json::Value();
    }
    if(getUpdateTime())
    {
        ret["update_time"]=getUpdateTime()->toDbStringLocal();
    }
    else
    {
        ret["update_time"]=Json::Value();
    }
    if(getRemark())
    {
        ret["remark"]=getValueOfRemark();
    }
    else
    {
        ret["remark"]=Json::Value();
    }
    if(getIsDelete())
    {
        ret["is_delete"]=getValueOfIsDelete();
    }
    else
    {
        ret["is_delete"]=Json::Value();
    }
    if(getOrderKey())
    {
        ret["order_key"]=getValueOfOrderKey();
    }
    else
    {
        ret["order_key"]=Json::Value();
    }
    if(getParentOrderKey())
    {
        ret["parent_order_key"]=getValueOfParentOrderKey();
    }
    else
    {
        ret["parent_order_key"]=Json::Value();
    }
    if(getAdminId())
    {
        ret["admin_id"]=(Json::UInt64)getValueOfAdminId();
    }
    else
    {
        ret["admin_id"]=Json::Value();
    }
    if(getShopId())
    {
        ret["shop_id"]=(Json::UInt64)getValueOfShopId();
    }
    else
    {
        ret["shop_id"]=Json::Value();
    }
    if(getUserId())
    {
        ret["user_id"]=(Json::Int64)getValueOfUserId();
    }
    else
    {
        ret["user_id"]=Json::Value();
    }
    if(getOrderFrom())
    {
        ret["order_from"]=getValueOfOrderFrom();
    }
    else
    {
        ret["order_from"]=Json::Value();
    }
    if(getOrderType())
    {
        ret["order_type"]=getValueOfOrderType();
    }
    else
    {
        ret["order_type"]=Json::Value();
    }
    if(getOrderStatus())
    {
        ret["order_status"]=getValueOfOrderStatus();
    }
    else
    {
        ret["order_status"]=Json::Value();
    }
    if(getOrderAmount())
    {
        ret["order_amount"]=getValueOfOrderAmount();
    }
    else
    {
        ret["order_amount"]=Json::Value();
    }
    if(getCancelReasons())
    {
        ret["cancel_reasons"]=getValueOfCancelReasons();
    }
    else
    {
        ret["cancel_reasons"]=Json::Value();
    }
    if(getAuditRemark())
    {
        ret["audit_remark"]=getValueOfAuditRemark();
    }
    else
    {
        ret["audit_remark"]=Json::Value();
    }
    if(getCompanyId())
    {
        ret["company_id"]=(Json::Int64)getValueOfCompanyId();
    }
    else
    {
        ret["company_id"]=Json::Value();
    }
    if(getDepositAmount())
    {
        ret["deposit_amount"]=getValueOfDepositAmount();
    }
    else
    {
        ret["deposit_amount"]=Json::Value();
    }
    if(getOrderCategory())
    {
        ret["order_category"]=getValueOfOrderCategory();
    }
    else
    {
        ret["order_category"]=Json::Value();
    }
    if(getOrderNumber())
    {
        ret["order_number"]=getValueOfOrderNumber();
    }
    else
    {
        ret["order_number"]=Json::Value();
    }
    if(getOrderHistoryInfo())
    {
        ret["order_history_info"]=getValueOfOrderHistoryInfo();
    }
    else
    {
        ret["order_history_info"]=Json::Value();
    }
    if(getOutsideOrderKey())
    {
        ret["outside_order_key"]=getValueOfOutsideOrderKey();
    }
    else
    {
        ret["outside_order_key"]=Json::Value();
    }
    return ret;
}

Json::Value SaleOrder::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 22)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=(Json::UInt64)getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getCreateTime())
            {
                ret[pMasqueradingVector[1]]=getCreateTime()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getUpdateTime())
            {
                ret[pMasqueradingVector[2]]=getUpdateTime()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getRemark())
            {
                ret[pMasqueradingVector[3]]=getValueOfRemark();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getIsDelete())
            {
                ret[pMasqueradingVector[4]]=getValueOfIsDelete();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getOrderKey())
            {
                ret[pMasqueradingVector[5]]=getValueOfOrderKey();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getParentOrderKey())
            {
                ret[pMasqueradingVector[6]]=getValueOfParentOrderKey();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getAdminId())
            {
                ret[pMasqueradingVector[7]]=(Json::UInt64)getValueOfAdminId();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[8].empty())
        {
            if(getShopId())
            {
                ret[pMasqueradingVector[8]]=(Json::UInt64)getValueOfShopId();
            }
            else
            {
                ret[pMasqueradingVector[8]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[9].empty())
        {
            if(getUserId())
            {
                ret[pMasqueradingVector[9]]=(Json::Int64)getValueOfUserId();
            }
            else
            {
                ret[pMasqueradingVector[9]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[10].empty())
        {
            if(getOrderFrom())
            {
                ret[pMasqueradingVector[10]]=getValueOfOrderFrom();
            }
            else
            {
                ret[pMasqueradingVector[10]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[11].empty())
        {
            if(getOrderType())
            {
                ret[pMasqueradingVector[11]]=getValueOfOrderType();
            }
            else
            {
                ret[pMasqueradingVector[11]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[12].empty())
        {
            if(getOrderStatus())
            {
                ret[pMasqueradingVector[12]]=getValueOfOrderStatus();
            }
            else
            {
                ret[pMasqueradingVector[12]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[13].empty())
        {
            if(getOrderAmount())
            {
                ret[pMasqueradingVector[13]]=getValueOfOrderAmount();
            }
            else
            {
                ret[pMasqueradingVector[13]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[14].empty())
        {
            if(getCancelReasons())
            {
                ret[pMasqueradingVector[14]]=getValueOfCancelReasons();
            }
            else
            {
                ret[pMasqueradingVector[14]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[15].empty())
        {
            if(getAuditRemark())
            {
                ret[pMasqueradingVector[15]]=getValueOfAuditRemark();
            }
            else
            {
                ret[pMasqueradingVector[15]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[16].empty())
        {
            if(getCompanyId())
            {
                ret[pMasqueradingVector[16]]=(Json::Int64)getValueOfCompanyId();
            }
            else
            {
                ret[pMasqueradingVector[16]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[17].empty())
        {
            if(getDepositAmount())
            {
                ret[pMasqueradingVector[17]]=getValueOfDepositAmount();
            }
            else
            {
                ret[pMasqueradingVector[17]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[18].empty())
        {
            if(getOrderCategory())
            {
                ret[pMasqueradingVector[18]]=getValueOfOrderCategory();
            }
            else
            {
                ret[pMasqueradingVector[18]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[19].empty())
        {
            if(getOrderNumber())
            {
                ret[pMasqueradingVector[19]]=getValueOfOrderNumber();
            }
            else
            {
                ret[pMasqueradingVector[19]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[20].empty())
        {
            if(getOrderHistoryInfo())
            {
                ret[pMasqueradingVector[20]]=getValueOfOrderHistoryInfo();
            }
            else
            {
                ret[pMasqueradingVector[20]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[21].empty())
        {
            if(getOutsideOrderKey())
            {
                ret[pMasqueradingVector[21]]=getValueOfOutsideOrderKey();
            }
            else
            {
                ret[pMasqueradingVector[21]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=(Json::UInt64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getCreateTime())
    {
        ret["create_time"]=getCreateTime()->toDbStringLocal();
    }
    else
    {
        ret["create_time"]=Json::Value();
    }
    if(getUpdateTime())
    {
        ret["update_time"]=getUpdateTime()->toDbStringLocal();
    }
    else
    {
        ret["update_time"]=Json::Value();
    }
    if(getRemark())
    {
        ret["remark"]=getValueOfRemark();
    }
    else
    {
        ret["remark"]=Json::Value();
    }
    if(getIsDelete())
    {
        ret["is_delete"]=getValueOfIsDelete();
    }
    else
    {
        ret["is_delete"]=Json::Value();
    }
    if(getOrderKey())
    {
        ret["order_key"]=getValueOfOrderKey();
    }
    else
    {
        ret["order_key"]=Json::Value();
    }
    if(getParentOrderKey())
    {
        ret["parent_order_key"]=getValueOfParentOrderKey();
    }
    else
    {
        ret["parent_order_key"]=Json::Value();
    }
    if(getAdminId())
    {
        ret["admin_id"]=(Json::UInt64)getValueOfAdminId();
    }
    else
    {
        ret["admin_id"]=Json::Value();
    }
    if(getShopId())
    {
        ret["shop_id"]=(Json::UInt64)getValueOfShopId();
    }
    else
    {
        ret["shop_id"]=Json::Value();
    }
    if(getUserId())
    {
        ret["user_id"]=(Json::Int64)getValueOfUserId();
    }
    else
    {
        ret["user_id"]=Json::Value();
    }
    if(getOrderFrom())
    {
        ret["order_from"]=getValueOfOrderFrom();
    }
    else
    {
        ret["order_from"]=Json::Value();
    }
    if(getOrderType())
    {
        ret["order_type"]=getValueOfOrderType();
    }
    else
    {
        ret["order_type"]=Json::Value();
    }
    if(getOrderStatus())
    {
        ret["order_status"]=getValueOfOrderStatus();
    }
    else
    {
        ret["order_status"]=Json::Value();
    }
    if(getOrderAmount())
    {
        ret["order_amount"]=getValueOfOrderAmount();
    }
    else
    {
        ret["order_amount"]=Json::Value();
    }
    if(getCancelReasons())
    {
        ret["cancel_reasons"]=getValueOfCancelReasons();
    }
    else
    {
        ret["cancel_reasons"]=Json::Value();
    }
    if(getAuditRemark())
    {
        ret["audit_remark"]=getValueOfAuditRemark();
    }
    else
    {
        ret["audit_remark"]=Json::Value();
    }
    if(getCompanyId())
    {
        ret["company_id"]=(Json::Int64)getValueOfCompanyId();
    }
    else
    {
        ret["company_id"]=Json::Value();
    }
    if(getDepositAmount())
    {
        ret["deposit_amount"]=getValueOfDepositAmount();
    }
    else
    {
        ret["deposit_amount"]=Json::Value();
    }
    if(getOrderCategory())
    {
        ret["order_category"]=getValueOfOrderCategory();
    }
    else
    {
        ret["order_category"]=Json::Value();
    }
    if(getOrderNumber())
    {
        ret["order_number"]=getValueOfOrderNumber();
    }
    else
    {
        ret["order_number"]=Json::Value();
    }
    if(getOrderHistoryInfo())
    {
        ret["order_history_info"]=getValueOfOrderHistoryInfo();
    }
    else
    {
        ret["order_history_info"]=Json::Value();
    }
    if(getOutsideOrderKey())
    {
        ret["outside_order_key"]=getValueOfOutsideOrderKey();
    }
    else
    {
        ret["outside_order_key"]=Json::Value();
    }
    return ret;
}

bool SaleOrder::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("create_time"))
    {
        if(!validJsonOfField(1, "create_time", pJson["create_time"], err, true))
            return false;
    }
    if(pJson.isMember("update_time"))
    {
        if(!validJsonOfField(2, "update_time", pJson["update_time"], err, true))
            return false;
    }
    if(pJson.isMember("remark"))
    {
        if(!validJsonOfField(3, "remark", pJson["remark"], err, true))
            return false;
    }
    if(pJson.isMember("is_delete"))
    {
        if(!validJsonOfField(4, "is_delete", pJson["is_delete"], err, true))
            return false;
    }
    if(pJson.isMember("order_key"))
    {
        if(!validJsonOfField(5, "order_key", pJson["order_key"], err, true))
            return false;
    }
    if(pJson.isMember("parent_order_key"))
    {
        if(!validJsonOfField(6, "parent_order_key", pJson["parent_order_key"], err, true))
            return false;
    }
    if(pJson.isMember("admin_id"))
    {
        if(!validJsonOfField(7, "admin_id", pJson["admin_id"], err, true))
            return false;
    }
    if(pJson.isMember("shop_id"))
    {
        if(!validJsonOfField(8, "shop_id", pJson["shop_id"], err, true))
            return false;
    }
    if(pJson.isMember("user_id"))
    {
        if(!validJsonOfField(9, "user_id", pJson["user_id"], err, true))
            return false;
    }
    if(pJson.isMember("order_from"))
    {
        if(!validJsonOfField(10, "order_from", pJson["order_from"], err, true))
            return false;
    }
    if(pJson.isMember("order_type"))
    {
        if(!validJsonOfField(11, "order_type", pJson["order_type"], err, true))
            return false;
    }
    if(pJson.isMember("order_status"))
    {
        if(!validJsonOfField(12, "order_status", pJson["order_status"], err, true))
            return false;
    }
    if(pJson.isMember("order_amount"))
    {
        if(!validJsonOfField(13, "order_amount", pJson["order_amount"], err, true))
            return false;
    }
    if(pJson.isMember("cancel_reasons"))
    {
        if(!validJsonOfField(14, "cancel_reasons", pJson["cancel_reasons"], err, true))
            return false;
    }
    if(pJson.isMember("audit_remark"))
    {
        if(!validJsonOfField(15, "audit_remark", pJson["audit_remark"], err, true))
            return false;
    }
    if(pJson.isMember("company_id"))
    {
        if(!validJsonOfField(16, "company_id", pJson["company_id"], err, true))
            return false;
    }
    if(pJson.isMember("deposit_amount"))
    {
        if(!validJsonOfField(17, "deposit_amount", pJson["deposit_amount"], err, true))
            return false;
    }
    if(pJson.isMember("order_category"))
    {
        if(!validJsonOfField(18, "order_category", pJson["order_category"], err, true))
            return false;
    }
    if(pJson.isMember("order_number"))
    {
        if(!validJsonOfField(19, "order_number", pJson["order_number"], err, true))
            return false;
    }
    if(pJson.isMember("order_history_info"))
    {
        if(!validJsonOfField(20, "order_history_info", pJson["order_history_info"], err, true))
            return false;
    }
    if(pJson.isMember("outside_order_key"))
    {
        if(!validJsonOfField(21, "outside_order_key", pJson["outside_order_key"], err, true))
            return false;
    }
    return true;
}
bool SaleOrder::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                   const std::vector<std::string> &pMasqueradingVector,
                                                   std::string &err)
{
    if(pMasqueradingVector.size() != 22)
    {
        err = "Bad masquerading vector";
        return false;
    }
    if(!pMasqueradingVector[0].empty())
    {
        if(pJson.isMember(pMasqueradingVector[0]))
        {
            if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[1].empty())
    {
        if(pJson.isMember(pMasqueradingVector[1]))
        {
            if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[2].empty())
    {
        if(pJson.isMember(pMasqueradingVector[2]))
        {
            if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[3].empty())
    {
        if(pJson.isMember(pMasqueradingVector[3]))
        {
            if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[4].empty())
    {
        if(pJson.isMember(pMasqueradingVector[4]))
        {
            if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[5].empty())
    {
        if(pJson.isMember(pMasqueradingVector[5]))
        {
            if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[6].empty())
    {
        if(pJson.isMember(pMasqueradingVector[6]))
        {
            if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[7].empty())
    {
        if(pJson.isMember(pMasqueradingVector[7]))
        {
            if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[8].empty())
    {
        if(pJson.isMember(pMasqueradingVector[8]))
        {
            if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[9].empty())
    {
        if(pJson.isMember(pMasqueradingVector[9]))
        {
            if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[10].empty())
    {
        if(pJson.isMember(pMasqueradingVector[10]))
        {
            if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[11].empty())
    {
        if(pJson.isMember(pMasqueradingVector[11]))
        {
            if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[12].empty())
    {
        if(pJson.isMember(pMasqueradingVector[12]))
        {
            if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[13].empty())
    {
        if(pJson.isMember(pMasqueradingVector[13]))
        {
            if(!validJsonOfField(13, pMasqueradingVector[13], pJson[pMasqueradingVector[13]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[14].empty())
    {
        if(pJson.isMember(pMasqueradingVector[14]))
        {
            if(!validJsonOfField(14, pMasqueradingVector[14], pJson[pMasqueradingVector[14]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[15].empty())
    {
        if(pJson.isMember(pMasqueradingVector[15]))
        {
            if(!validJsonOfField(15, pMasqueradingVector[15], pJson[pMasqueradingVector[15]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[16].empty())
    {
        if(pJson.isMember(pMasqueradingVector[16]))
        {
            if(!validJsonOfField(16, pMasqueradingVector[16], pJson[pMasqueradingVector[16]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[17].empty())
    {
        if(pJson.isMember(pMasqueradingVector[17]))
        {
            if(!validJsonOfField(17, pMasqueradingVector[17], pJson[pMasqueradingVector[17]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[18].empty())
    {
        if(pJson.isMember(pMasqueradingVector[18]))
        {
            if(!validJsonOfField(18, pMasqueradingVector[18], pJson[pMasqueradingVector[18]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[19].empty())
    {
        if(pJson.isMember(pMasqueradingVector[19]))
        {
            if(!validJsonOfField(19, pMasqueradingVector[19], pJson[pMasqueradingVector[19]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[20].empty())
    {
        if(pJson.isMember(pMasqueradingVector[20]))
        {
            if(!validJsonOfField(20, pMasqueradingVector[20], pJson[pMasqueradingVector[20]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[21].empty())
    {
        if(pJson.isMember(pMasqueradingVector[21]))
        {
            if(!validJsonOfField(21, pMasqueradingVector[21], pJson[pMasqueradingVector[21]], err, true))
                return false;
        }
    }
    return true;
}
bool SaleOrder::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("create_time"))
    {
        if(!validJsonOfField(1, "create_time", pJson["create_time"], err, false))
            return false;
    }
    if(pJson.isMember("update_time"))
    {
        if(!validJsonOfField(2, "update_time", pJson["update_time"], err, false))
            return false;
    }
    if(pJson.isMember("remark"))
    {
        if(!validJsonOfField(3, "remark", pJson["remark"], err, false))
            return false;
    }
    if(pJson.isMember("is_delete"))
    {
        if(!validJsonOfField(4, "is_delete", pJson["is_delete"], err, false))
            return false;
    }
    if(pJson.isMember("order_key"))
    {
        if(!validJsonOfField(5, "order_key", pJson["order_key"], err, false))
            return false;
    }
    if(pJson.isMember("parent_order_key"))
    {
        if(!validJsonOfField(6, "parent_order_key", pJson["parent_order_key"], err, false))
            return false;
    }
    if(pJson.isMember("admin_id"))
    {
        if(!validJsonOfField(7, "admin_id", pJson["admin_id"], err, false))
            return false;
    }
    if(pJson.isMember("shop_id"))
    {
        if(!validJsonOfField(8, "shop_id", pJson["shop_id"], err, false))
            return false;
    }
    if(pJson.isMember("user_id"))
    {
        if(!validJsonOfField(9, "user_id", pJson["user_id"], err, false))
            return false;
    }
    if(pJson.isMember("order_from"))
    {
        if(!validJsonOfField(10, "order_from", pJson["order_from"], err, false))
            return false;
    }
    if(pJson.isMember("order_type"))
    {
        if(!validJsonOfField(11, "order_type", pJson["order_type"], err, false))
            return false;
    }
    if(pJson.isMember("order_status"))
    {
        if(!validJsonOfField(12, "order_status", pJson["order_status"], err, false))
            return false;
    }
    if(pJson.isMember("order_amount"))
    {
        if(!validJsonOfField(13, "order_amount", pJson["order_amount"], err, false))
            return false;
    }
    if(pJson.isMember("cancel_reasons"))
    {
        if(!validJsonOfField(14, "cancel_reasons", pJson["cancel_reasons"], err, false))
            return false;
    }
    if(pJson.isMember("audit_remark"))
    {
        if(!validJsonOfField(15, "audit_remark", pJson["audit_remark"], err, false))
            return false;
    }
    if(pJson.isMember("company_id"))
    {
        if(!validJsonOfField(16, "company_id", pJson["company_id"], err, false))
            return false;
    }
    if(pJson.isMember("deposit_amount"))
    {
        if(!validJsonOfField(17, "deposit_amount", pJson["deposit_amount"], err, false))
            return false;
    }
    if(pJson.isMember("order_category"))
    {
        if(!validJsonOfField(18, "order_category", pJson["order_category"], err, false))
            return false;
    }
    if(pJson.isMember("order_number"))
    {
        if(!validJsonOfField(19, "order_number", pJson["order_number"], err, false))
            return false;
    }
    if(pJson.isMember("order_history_info"))
    {
        if(!validJsonOfField(20, "order_history_info", pJson["order_history_info"], err, false))
            return false;
    }
    if(pJson.isMember("outside_order_key"))
    {
        if(!validJsonOfField(21, "outside_order_key", pJson["outside_order_key"], err, false))
            return false;
    }
    return true;
}
bool SaleOrder::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                 const std::vector<std::string> &pMasqueradingVector,
                                                 std::string &err)
{
    if(pMasqueradingVector.size() != 22)
    {
        err = "Bad masquerading vector";
        return false;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
            return false;
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
            return false;
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
            return false;
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
            return false;
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
            return false;
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
            return false;
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
            return false;
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, false))
            return false;
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, false))
            return false;
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, false))
            return false;
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, false))
            return false;
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, false))
            return false;
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        if(!validJsonOfField(13, pMasqueradingVector[13], pJson[pMasqueradingVector[13]], err, false))
            return false;
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        if(!validJsonOfField(14, pMasqueradingVector[14], pJson[pMasqueradingVector[14]], err, false))
            return false;
    }
    if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
    {
        if(!validJsonOfField(15, pMasqueradingVector[15], pJson[pMasqueradingVector[15]], err, false))
            return false;
    }
    if(!pMasqueradingVector[16].empty() && pJson.isMember(pMasqueradingVector[16]))
    {
        if(!validJsonOfField(16, pMasqueradingVector[16], pJson[pMasqueradingVector[16]], err, false))
            return false;
    }
    if(!pMasqueradingVector[17].empty() && pJson.isMember(pMasqueradingVector[17]))
    {
        if(!validJsonOfField(17, pMasqueradingVector[17], pJson[pMasqueradingVector[17]], err, false))
            return false;
    }
    if(!pMasqueradingVector[18].empty() && pJson.isMember(pMasqueradingVector[18]))
    {
        if(!validJsonOfField(18, pMasqueradingVector[18], pJson[pMasqueradingVector[18]], err, false))
            return false;
    }
    if(!pMasqueradingVector[19].empty() && pJson.isMember(pMasqueradingVector[19]))
    {
        if(!validJsonOfField(19, pMasqueradingVector[19], pJson[pMasqueradingVector[19]], err, false))
            return false;
    }
    if(!pMasqueradingVector[20].empty() && pJson.isMember(pMasqueradingVector[20]))
    {
        if(!validJsonOfField(20, pMasqueradingVector[20], pJson[pMasqueradingVector[20]], err, false))
            return false;
    }
    if(!pMasqueradingVector[21].empty() && pJson.isMember(pMasqueradingVector[21]))
    {
        if(!validJsonOfField(21, pMasqueradingVector[21], pJson[pMasqueradingVector[21]], err, false))
            return false;
    }
    return true;
}
bool SaleOrder::validJsonOfField(size_t index,
                                 const std::string &fieldName,
                                 const Json::Value &pJson, 
                                 std::string &err, 
                                 bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }        
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 200)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 200)";
                return false;               
            }

            break;
        case 4:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 5:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 20)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 20)";
                return false;               
            }

            break;
        case 6:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 20)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 20)";
                return false;               
            }

            break;
        case 7:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 8:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 9:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 10:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 20)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 20)";
                return false;               
            }

            break;
        case 11:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 12:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 13:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 14:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 200)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 200)";
                return false;               
            }

            break;
        case 15:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 200)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 200)";
                return false;               
            }

            break;
        case 16:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 17:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 18:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 19:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 20:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 21:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 40)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 40)";
                return false;               
            }

            break;
     
        default:
            err="Internal error in the server";
            return false;
            break;
    }
    return true;
}
