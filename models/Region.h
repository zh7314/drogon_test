/**
 *
 *  Region.h
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#pragma once
#include <drogon/orm/Result.h>
#include <drogon/orm/Row.h>
#include <drogon/orm/Field.h>
#include <drogon/orm/SqlBinder.h>
#include <drogon/orm/Mapper.h>
#include <trantor/utils/Date.h>
#include <trantor/utils/Logger.h>
#include <json/json.h>
#include <string>
#include <memory>
#include <vector>
#include <tuple>
#include <stdint.h>
#include <iostream>

using namespace drogon::orm;
namespace drogon
{
namespace orm
{
class DbClient;
using DbClientPtr = std::shared_ptr<DbClient>;
}
}
namespace drogon_model
{
namespace v2 
{

class Region
{
  public:
    struct Cols
    {
        static const std::string _id;
        static const std::string _region_code;
        static const std::string _region_name;
        static const std::string _parent_id;
        static const std::string _region_level;
        static const std::string _region_order;
        static const std::string _region_name_en;
        static const std::string _region_shortname_en;
        static const std::string _hx_lng;
        static const std::string _hx_lat;
        static const std::string _bd_lng;
        static const std::string _bd_lat;
        static const std::string _sort;
        static const std::string _is_delete;
    };

    const static int primaryKeyNumber;
    const static std::string tableName;
    const static bool hasPrimaryKey;
    const static std::string primaryKeyName;
    using PrimaryKeyType = uint64_t;
    const PrimaryKeyType &getPrimaryKey() const;

    /**
     * @brief constructor
     * @param r One row of records in the SQL query result.
     * @param indexOffset Set the offset to -1 to access all columns by column names, 
     * otherwise access all columns by offsets.
     * @note If the SQL is not a style of 'select * from table_name ...' (select all 
     * columns by an asterisk), please set the offset to -1.
     */
    explicit Region(const Row &r, const ssize_t indexOffset = 0) noexcept;

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     */
    explicit Region(const Json::Value &pJson) noexcept(false);

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     * @param pMasqueradingVector The aliases of table columns.
     */
    Region(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false);

    Region() = default;
    
    void updateByJson(const Json::Value &pJson) noexcept(false);
    void updateByMasqueradedJson(const Json::Value &pJson,
                                 const std::vector<std::string> &pMasqueradingVector) noexcept(false);
    static bool validateJsonForCreation(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForCreation(const Json::Value &,
                                                const std::vector<std::string> &pMasqueradingVector,
                                                    std::string &err);
    static bool validateJsonForUpdate(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForUpdate(const Json::Value &,
                                          const std::vector<std::string> &pMasqueradingVector,
                                          std::string &err);
    static bool validJsonOfField(size_t index,
                          const std::string &fieldName,
                          const Json::Value &pJson, 
                          std::string &err, 
                          bool isForCreation);

    /**  For column id  */
    ///Get the value of the column id, returns the default value if the column is null
    const uint64_t &getValueOfId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint64_t> &getId() const noexcept;

    ///Set the value of the column id
    void setId(const uint64_t &pId) noexcept;


    /**  For column region_code  */
    ///Get the value of the column region_code, returns the default value if the column is null
    const uint64_t &getValueOfRegionCode() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint64_t> &getRegionCode() const noexcept;

    ///Set the value of the column region_code
    void setRegionCode(const uint64_t &pRegionCode) noexcept;


    /**  For column region_name  */
    ///Get the value of the column region_name, returns the default value if the column is null
    const std::string &getValueOfRegionName() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getRegionName() const noexcept;

    ///Set the value of the column region_name
    void setRegionName(const std::string &pRegionName) noexcept;
    void setRegionName(std::string &&pRegionName) noexcept;


    /**  For column parent_id  */
    ///Get the value of the column parent_id, returns the default value if the column is null
    const double &getValueOfParentId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<double> &getParentId() const noexcept;

    ///Set the value of the column parent_id
    void setParentId(const double &pParentId) noexcept;


    /**  For column region_level  */
    ///Get the value of the column region_level, returns the default value if the column is null
    const double &getValueOfRegionLevel() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<double> &getRegionLevel() const noexcept;

    ///Set the value of the column region_level
    void setRegionLevel(const double &pRegionLevel) noexcept;


    /**  For column region_order  */
    ///Get the value of the column region_order, returns the default value if the column is null
    const double &getValueOfRegionOrder() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<double> &getRegionOrder() const noexcept;

    ///Set the value of the column region_order
    void setRegionOrder(const double &pRegionOrder) noexcept;


    /**  For column region_name_en  */
    ///Get the value of the column region_name_en, returns the default value if the column is null
    const std::string &getValueOfRegionNameEn() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getRegionNameEn() const noexcept;

    ///Set the value of the column region_name_en
    void setRegionNameEn(const std::string &pRegionNameEn) noexcept;
    void setRegionNameEn(std::string &&pRegionNameEn) noexcept;


    /**  For column region_shortname_en  */
    ///Get the value of the column region_shortname_en, returns the default value if the column is null
    const std::string &getValueOfRegionShortnameEn() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getRegionShortnameEn() const noexcept;

    ///Set the value of the column region_shortname_en
    void setRegionShortnameEn(const std::string &pRegionShortnameEn) noexcept;
    void setRegionShortnameEn(std::string &&pRegionShortnameEn) noexcept;


    /**  For column hx_lng  */
    ///Get the value of the column hx_lng, returns the default value if the column is null
    const std::string &getValueOfHxLng() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getHxLng() const noexcept;

    ///Set the value of the column hx_lng
    void setHxLng(const std::string &pHxLng) noexcept;
    void setHxLng(std::string &&pHxLng) noexcept;
    void setHxLngToNull() noexcept;


    /**  For column hx_lat  */
    ///Get the value of the column hx_lat, returns the default value if the column is null
    const std::string &getValueOfHxLat() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getHxLat() const noexcept;

    ///Set the value of the column hx_lat
    void setHxLat(const std::string &pHxLat) noexcept;
    void setHxLat(std::string &&pHxLat) noexcept;
    void setHxLatToNull() noexcept;


    /**  For column bd_lng  */
    ///Get the value of the column bd_lng, returns the default value if the column is null
    const std::string &getValueOfBdLng() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getBdLng() const noexcept;

    ///Set the value of the column bd_lng
    void setBdLng(const std::string &pBdLng) noexcept;
    void setBdLng(std::string &&pBdLng) noexcept;
    void setBdLngToNull() noexcept;


    /**  For column bd_lat  */
    ///Get the value of the column bd_lat, returns the default value if the column is null
    const std::string &getValueOfBdLat() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getBdLat() const noexcept;

    ///Set the value of the column bd_lat
    void setBdLat(const std::string &pBdLat) noexcept;
    void setBdLat(std::string &&pBdLat) noexcept;
    void setBdLatToNull() noexcept;


    /**  For column sort  */
    ///Get the value of the column sort, returns the default value if the column is null
    const uint8_t &getValueOfSort() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint8_t> &getSort() const noexcept;

    ///Set the value of the column sort
    void setSort(const uint8_t &pSort) noexcept;


    /**  For column is_delete  */
    ///Get the value of the column is_delete, returns the default value if the column is null
    const uint8_t &getValueOfIsDelete() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint8_t> &getIsDelete() const noexcept;

    ///Set the value of the column is_delete
    void setIsDelete(const uint8_t &pIsDelete) noexcept;



    static size_t getColumnNumber() noexcept {  return 14;  }
    static const std::string &getColumnName(size_t index) noexcept(false);

    Json::Value toJson() const;
    Json::Value toMasqueradedJson(const std::vector<std::string> &pMasqueradingVector) const;
    /// Relationship interfaces
  private:
    friend Mapper<Region>;
    static const std::vector<std::string> &insertColumns() noexcept;
    void outputArgs(drogon::orm::internal::SqlBinder &binder) const;
    const std::vector<std::string> updateColumns() const;
    void updateArgs(drogon::orm::internal::SqlBinder &binder) const;
    ///For mysql or sqlite3
    void updateId(const uint64_t id);
    std::shared_ptr<uint64_t> id_;
    std::shared_ptr<uint64_t> regionCode_;
    std::shared_ptr<std::string> regionName_;
    std::shared_ptr<double> parentId_;
    std::shared_ptr<double> regionLevel_;
    std::shared_ptr<double> regionOrder_;
    std::shared_ptr<std::string> regionNameEn_;
    std::shared_ptr<std::string> regionShortnameEn_;
    std::shared_ptr<std::string> hxLng_;
    std::shared_ptr<std::string> hxLat_;
    std::shared_ptr<std::string> bdLng_;
    std::shared_ptr<std::string> bdLat_;
    std::shared_ptr<uint8_t> sort_;
    std::shared_ptr<uint8_t> isDelete_;
    struct MetaData
    {
        const std::string colName_;
        const std::string colType_;
        const std::string colDatabaseType_;
        const ssize_t colLength_;
        const bool isAutoVal_;
        const bool isPrimaryKey_;
        const bool notNull_;
    };
    static const std::vector<MetaData> metaData_;
    bool dirtyFlag_[14]={ false };
  public:
    static const std::string &sqlForFindingByPrimaryKey()
    {
        static const std::string sql="select * from " + tableName + " where id = ?";
        return sql;                   
    }

    static const std::string &sqlForDeletingByPrimaryKey()
    {
        static const std::string sql="delete from " + tableName + " where id = ?";
        return sql;                   
    }
    std::string sqlForInserting(bool &needSelection) const
    {
        std::string sql="insert into " + tableName + " (";
        size_t parametersCount = 0;
        needSelection = false;
        if(dirtyFlag_[0])
        {
            sql += "id,";
            ++parametersCount;
        }
        if(dirtyFlag_[1])
        {
            sql += "region_code,";
            ++parametersCount;
        }
        if(dirtyFlag_[2])
        {
            sql += "region_name,";
            ++parametersCount;
        }
        if(dirtyFlag_[3])
        {
            sql += "parent_id,";
            ++parametersCount;
        }
        if(dirtyFlag_[4])
        {
            sql += "region_level,";
            ++parametersCount;
        }
        if(dirtyFlag_[5])
        {
            sql += "region_order,";
            ++parametersCount;
        }
        if(dirtyFlag_[6])
        {
            sql += "region_name_en,";
            ++parametersCount;
        }
        if(dirtyFlag_[7])
        {
            sql += "region_shortname_en,";
            ++parametersCount;
        }
        if(dirtyFlag_[8])
        {
            sql += "hx_lng,";
            ++parametersCount;
        }
        if(dirtyFlag_[9])
        {
            sql += "hx_lat,";
            ++parametersCount;
        }
        if(dirtyFlag_[10])
        {
            sql += "bd_lng,";
            ++parametersCount;
        }
        if(dirtyFlag_[11])
        {
            sql += "bd_lat,";
            ++parametersCount;
        }
        sql += "sort,";
        ++parametersCount;
        if(!dirtyFlag_[12])
        {
            needSelection=true;
        }
        sql += "is_delete,";
        ++parametersCount;
        if(!dirtyFlag_[13])
        {
            needSelection=true;
        }
        if(parametersCount > 0)
        {
            sql[sql.length()-1]=')';
            sql += " values (";
        }
        else
            sql += ") values (";
        
        if(dirtyFlag_[0])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[1])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[2])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[3])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[4])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[5])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[6])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[7])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[8])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[9])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[10])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[11])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[12])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[13])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(parametersCount > 0)
        {
            sql.resize(sql.length() - 1);
        }
        sql.append(1, ')');
        LOG_TRACE << sql;
        return sql;   
    }
};
} // namespace v2
} // namespace drogon_model
