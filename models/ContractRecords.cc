/**
 *
 *  ContractRecords.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "ContractRecords.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::v2;

const std::string ContractRecords::Cols::_id = "id";
const std::string ContractRecords::Cols::_create_time = "create_time";
const std::string ContractRecords::Cols::_update_time = "update_time";
const std::string ContractRecords::Cols::_remark = "remark";
const std::string ContractRecords::Cols::_is_delete = "is_delete";
const std::string ContractRecords::Cols::_content = "content";
const std::string ContractRecords::Cols::_data = "data";
const std::string ContractRecords::Cols::_order_key = "order_key";
const std::string ContractRecords::Cols::_is_show = "is_show";
const std::string ContractRecords::Cols::_contract_type = "contract_type";
const std::string ContractRecords::Cols::_approval_status = "approval_status";
const std::string ContractRecords::Cols::_admin_id = "admin_id";
const std::string ContractRecords::Cols::_supply_contract_pic = "supply_contract_pic";
const std::string ContractRecords::Cols::_buyer_contract_pic = "buyer_contract_pic";
const std::string ContractRecords::Cols::_is_finish = "is_finish";
const std::string ContractRecords::Cols::_shop_id = "shop_id";
const std::string ContractRecords::Cols::_template_id = "template_id";
const std::string ContractRecords::Cols::_auditing_remark = "auditing_remark";
const std::string ContractRecords::Cols::_contract_key = "contract_key";
const std::string ContractRecords::Cols::_is_point_price = "is_point_price";
const std::string ContractRecords::primaryKeyName = "id";
const bool ContractRecords::hasPrimaryKey = true;
const std::string ContractRecords::tableName = "contract_records";

const std::vector<typename ContractRecords::MetaData> ContractRecords::metaData_={
{"id","uint64_t","bigint(20) unsigned",8,1,1,1},
{"create_time","::trantor::Date","datetime",0,0,0,1},
{"update_time","::trantor::Date","datetime",0,0,0,1},
{"remark","std::string","text",0,0,0,0},
{"is_delete","int8_t","tinyint(1)",1,0,0,1},
{"content","std::string","mediumtext",0,0,0,0},
{"data","std::string","text",0,0,0,1},
{"order_key","std::string","varchar(60)",60,0,0,1},
{"is_show","uint8_t","tinyint(1) unsigned",1,0,0,1},
{"contract_type","uint8_t","tinyint(1) unsigned",1,0,0,1},
{"approval_status","uint8_t","tinyint(1) unsigned",1,0,0,1},
{"admin_id","uint64_t","bigint(20) unsigned",8,0,0,1},
{"supply_contract_pic","std::string","longtext",0,0,0,1},
{"buyer_contract_pic","std::string","longtext",0,0,0,1},
{"is_finish","uint8_t","tinyint(1) unsigned",1,0,0,1},
{"shop_id","int64_t","bigint(20)",8,0,0,1},
{"template_id","int64_t","bigint(20)",8,0,0,1},
{"auditing_remark","std::string","text",0,0,0,0},
{"contract_key","std::string","varchar(60)",60,0,0,0},
{"is_point_price","uint8_t","tinyint(1) unsigned",1,0,0,1}
};
const std::string &ContractRecords::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
ContractRecords::ContractRecords(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<uint64_t>(r["id"].as<uint64_t>());
        }
        if(!r["create_time"].isNull())
        {
            auto timeStr = r["create_time"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        if(!r["update_time"].isNull())
        {
            auto timeStr = r["update_time"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        if(!r["remark"].isNull())
        {
            remark_=std::make_shared<std::string>(r["remark"].as<std::string>());
        }
        if(!r["is_delete"].isNull())
        {
            isDelete_=std::make_shared<int8_t>(r["is_delete"].as<int8_t>());
        }
        if(!r["content"].isNull())
        {
            content_=std::make_shared<std::string>(r["content"].as<std::string>());
        }
        if(!r["data"].isNull())
        {
            data_=std::make_shared<std::string>(r["data"].as<std::string>());
        }
        if(!r["order_key"].isNull())
        {
            orderKey_=std::make_shared<std::string>(r["order_key"].as<std::string>());
        }
        if(!r["is_show"].isNull())
        {
            isShow_=std::make_shared<uint8_t>(r["is_show"].as<uint8_t>());
        }
        if(!r["contract_type"].isNull())
        {
            contractType_=std::make_shared<uint8_t>(r["contract_type"].as<uint8_t>());
        }
        if(!r["approval_status"].isNull())
        {
            approvalStatus_=std::make_shared<uint8_t>(r["approval_status"].as<uint8_t>());
        }
        if(!r["admin_id"].isNull())
        {
            adminId_=std::make_shared<uint64_t>(r["admin_id"].as<uint64_t>());
        }
        if(!r["supply_contract_pic"].isNull())
        {
            supplyContractPic_=std::make_shared<std::string>(r["supply_contract_pic"].as<std::string>());
        }
        if(!r["buyer_contract_pic"].isNull())
        {
            buyerContractPic_=std::make_shared<std::string>(r["buyer_contract_pic"].as<std::string>());
        }
        if(!r["is_finish"].isNull())
        {
            isFinish_=std::make_shared<uint8_t>(r["is_finish"].as<uint8_t>());
        }
        if(!r["shop_id"].isNull())
        {
            shopId_=std::make_shared<int64_t>(r["shop_id"].as<int64_t>());
        }
        if(!r["template_id"].isNull())
        {
            templateId_=std::make_shared<int64_t>(r["template_id"].as<int64_t>());
        }
        if(!r["auditing_remark"].isNull())
        {
            auditingRemark_=std::make_shared<std::string>(r["auditing_remark"].as<std::string>());
        }
        if(!r["contract_key"].isNull())
        {
            contractKey_=std::make_shared<std::string>(r["contract_key"].as<std::string>());
        }
        if(!r["is_point_price"].isNull())
        {
            isPointPrice_=std::make_shared<uint8_t>(r["is_point_price"].as<uint8_t>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 20 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            remark_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            isDelete_=std::make_shared<int8_t>(r[index].as<int8_t>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            content_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            data_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            orderKey_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 8;
        if(!r[index].isNull())
        {
            isShow_=std::make_shared<uint8_t>(r[index].as<uint8_t>());
        }
        index = offset + 9;
        if(!r[index].isNull())
        {
            contractType_=std::make_shared<uint8_t>(r[index].as<uint8_t>());
        }
        index = offset + 10;
        if(!r[index].isNull())
        {
            approvalStatus_=std::make_shared<uint8_t>(r[index].as<uint8_t>());
        }
        index = offset + 11;
        if(!r[index].isNull())
        {
            adminId_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 12;
        if(!r[index].isNull())
        {
            supplyContractPic_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 13;
        if(!r[index].isNull())
        {
            buyerContractPic_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 14;
        if(!r[index].isNull())
        {
            isFinish_=std::make_shared<uint8_t>(r[index].as<uint8_t>());
        }
        index = offset + 15;
        if(!r[index].isNull())
        {
            shopId_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 16;
        if(!r[index].isNull())
        {
            templateId_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 17;
        if(!r[index].isNull())
        {
            auditingRemark_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 18;
        if(!r[index].isNull())
        {
            contractKey_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 19;
        if(!r[index].isNull())
        {
            isPointPrice_=std::make_shared<uint8_t>(r[index].as<uint8_t>());
        }
    }

}

ContractRecords::ContractRecords(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 20)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[1]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[2]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            remark_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            isDelete_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[4]].asInt64());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            content_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            data_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            orderKey_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            isShow_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[8]].asUInt64());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            contractType_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[9]].asUInt64());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            approvalStatus_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[10]].asUInt64());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            adminId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[11]].asUInt64());
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            supplyContractPic_=std::make_shared<std::string>(pJson[pMasqueradingVector[12]].asString());
        }
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        dirtyFlag_[13] = true;
        if(!pJson[pMasqueradingVector[13]].isNull())
        {
            buyerContractPic_=std::make_shared<std::string>(pJson[pMasqueradingVector[13]].asString());
        }
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        dirtyFlag_[14] = true;
        if(!pJson[pMasqueradingVector[14]].isNull())
        {
            isFinish_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[14]].asUInt64());
        }
    }
    if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
    {
        dirtyFlag_[15] = true;
        if(!pJson[pMasqueradingVector[15]].isNull())
        {
            shopId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[15]].asInt64());
        }
    }
    if(!pMasqueradingVector[16].empty() && pJson.isMember(pMasqueradingVector[16]))
    {
        dirtyFlag_[16] = true;
        if(!pJson[pMasqueradingVector[16]].isNull())
        {
            templateId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[16]].asInt64());
        }
    }
    if(!pMasqueradingVector[17].empty() && pJson.isMember(pMasqueradingVector[17]))
    {
        dirtyFlag_[17] = true;
        if(!pJson[pMasqueradingVector[17]].isNull())
        {
            auditingRemark_=std::make_shared<std::string>(pJson[pMasqueradingVector[17]].asString());
        }
    }
    if(!pMasqueradingVector[18].empty() && pJson.isMember(pMasqueradingVector[18]))
    {
        dirtyFlag_[18] = true;
        if(!pJson[pMasqueradingVector[18]].isNull())
        {
            contractKey_=std::make_shared<std::string>(pJson[pMasqueradingVector[18]].asString());
        }
    }
    if(!pMasqueradingVector[19].empty() && pJson.isMember(pMasqueradingVector[19]))
    {
        dirtyFlag_[19] = true;
        if(!pJson[pMasqueradingVector[19]].isNull())
        {
            isPointPrice_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[19]].asUInt64());
        }
    }
}

ContractRecords::ContractRecords(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson["id"].asUInt64());
        }
    }
    if(pJson.isMember("create_time"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["create_time"].isNull())
        {
            auto timeStr = pJson["create_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("update_time"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["update_time"].isNull())
        {
            auto timeStr = pJson["update_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("remark"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["remark"].isNull())
        {
            remark_=std::make_shared<std::string>(pJson["remark"].asString());
        }
    }
    if(pJson.isMember("is_delete"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["is_delete"].isNull())
        {
            isDelete_=std::make_shared<int8_t>((int8_t)pJson["is_delete"].asInt64());
        }
    }
    if(pJson.isMember("content"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["content"].isNull())
        {
            content_=std::make_shared<std::string>(pJson["content"].asString());
        }
    }
    if(pJson.isMember("data"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["data"].isNull())
        {
            data_=std::make_shared<std::string>(pJson["data"].asString());
        }
    }
    if(pJson.isMember("order_key"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["order_key"].isNull())
        {
            orderKey_=std::make_shared<std::string>(pJson["order_key"].asString());
        }
    }
    if(pJson.isMember("is_show"))
    {
        dirtyFlag_[8]=true;
        if(!pJson["is_show"].isNull())
        {
            isShow_=std::make_shared<uint8_t>((uint8_t)pJson["is_show"].asUInt64());
        }
    }
    if(pJson.isMember("contract_type"))
    {
        dirtyFlag_[9]=true;
        if(!pJson["contract_type"].isNull())
        {
            contractType_=std::make_shared<uint8_t>((uint8_t)pJson["contract_type"].asUInt64());
        }
    }
    if(pJson.isMember("approval_status"))
    {
        dirtyFlag_[10]=true;
        if(!pJson["approval_status"].isNull())
        {
            approvalStatus_=std::make_shared<uint8_t>((uint8_t)pJson["approval_status"].asUInt64());
        }
    }
    if(pJson.isMember("admin_id"))
    {
        dirtyFlag_[11]=true;
        if(!pJson["admin_id"].isNull())
        {
            adminId_=std::make_shared<uint64_t>((uint64_t)pJson["admin_id"].asUInt64());
        }
    }
    if(pJson.isMember("supply_contract_pic"))
    {
        dirtyFlag_[12]=true;
        if(!pJson["supply_contract_pic"].isNull())
        {
            supplyContractPic_=std::make_shared<std::string>(pJson["supply_contract_pic"].asString());
        }
    }
    if(pJson.isMember("buyer_contract_pic"))
    {
        dirtyFlag_[13]=true;
        if(!pJson["buyer_contract_pic"].isNull())
        {
            buyerContractPic_=std::make_shared<std::string>(pJson["buyer_contract_pic"].asString());
        }
    }
    if(pJson.isMember("is_finish"))
    {
        dirtyFlag_[14]=true;
        if(!pJson["is_finish"].isNull())
        {
            isFinish_=std::make_shared<uint8_t>((uint8_t)pJson["is_finish"].asUInt64());
        }
    }
    if(pJson.isMember("shop_id"))
    {
        dirtyFlag_[15]=true;
        if(!pJson["shop_id"].isNull())
        {
            shopId_=std::make_shared<int64_t>((int64_t)pJson["shop_id"].asInt64());
        }
    }
    if(pJson.isMember("template_id"))
    {
        dirtyFlag_[16]=true;
        if(!pJson["template_id"].isNull())
        {
            templateId_=std::make_shared<int64_t>((int64_t)pJson["template_id"].asInt64());
        }
    }
    if(pJson.isMember("auditing_remark"))
    {
        dirtyFlag_[17]=true;
        if(!pJson["auditing_remark"].isNull())
        {
            auditingRemark_=std::make_shared<std::string>(pJson["auditing_remark"].asString());
        }
    }
    if(pJson.isMember("contract_key"))
    {
        dirtyFlag_[18]=true;
        if(!pJson["contract_key"].isNull())
        {
            contractKey_=std::make_shared<std::string>(pJson["contract_key"].asString());
        }
    }
    if(pJson.isMember("is_point_price"))
    {
        dirtyFlag_[19]=true;
        if(!pJson["is_point_price"].isNull())
        {
            isPointPrice_=std::make_shared<uint8_t>((uint8_t)pJson["is_point_price"].asUInt64());
        }
    }
}

void ContractRecords::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 20)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[1]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[2]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            remark_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            isDelete_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[4]].asInt64());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            content_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            data_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            orderKey_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            isShow_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[8]].asUInt64());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            contractType_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[9]].asUInt64());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            approvalStatus_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[10]].asUInt64());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            adminId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[11]].asUInt64());
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            supplyContractPic_=std::make_shared<std::string>(pJson[pMasqueradingVector[12]].asString());
        }
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        dirtyFlag_[13] = true;
        if(!pJson[pMasqueradingVector[13]].isNull())
        {
            buyerContractPic_=std::make_shared<std::string>(pJson[pMasqueradingVector[13]].asString());
        }
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        dirtyFlag_[14] = true;
        if(!pJson[pMasqueradingVector[14]].isNull())
        {
            isFinish_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[14]].asUInt64());
        }
    }
    if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
    {
        dirtyFlag_[15] = true;
        if(!pJson[pMasqueradingVector[15]].isNull())
        {
            shopId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[15]].asInt64());
        }
    }
    if(!pMasqueradingVector[16].empty() && pJson.isMember(pMasqueradingVector[16]))
    {
        dirtyFlag_[16] = true;
        if(!pJson[pMasqueradingVector[16]].isNull())
        {
            templateId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[16]].asInt64());
        }
    }
    if(!pMasqueradingVector[17].empty() && pJson.isMember(pMasqueradingVector[17]))
    {
        dirtyFlag_[17] = true;
        if(!pJson[pMasqueradingVector[17]].isNull())
        {
            auditingRemark_=std::make_shared<std::string>(pJson[pMasqueradingVector[17]].asString());
        }
    }
    if(!pMasqueradingVector[18].empty() && pJson.isMember(pMasqueradingVector[18]))
    {
        dirtyFlag_[18] = true;
        if(!pJson[pMasqueradingVector[18]].isNull())
        {
            contractKey_=std::make_shared<std::string>(pJson[pMasqueradingVector[18]].asString());
        }
    }
    if(!pMasqueradingVector[19].empty() && pJson.isMember(pMasqueradingVector[19]))
    {
        dirtyFlag_[19] = true;
        if(!pJson[pMasqueradingVector[19]].isNull())
        {
            isPointPrice_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[19]].asUInt64());
        }
    }
}
                                                                    
void ContractRecords::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson["id"].asUInt64());
        }
    }
    if(pJson.isMember("create_time"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["create_time"].isNull())
        {
            auto timeStr = pJson["create_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("update_time"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["update_time"].isNull())
        {
            auto timeStr = pJson["update_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("remark"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["remark"].isNull())
        {
            remark_=std::make_shared<std::string>(pJson["remark"].asString());
        }
    }
    if(pJson.isMember("is_delete"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["is_delete"].isNull())
        {
            isDelete_=std::make_shared<int8_t>((int8_t)pJson["is_delete"].asInt64());
        }
    }
    if(pJson.isMember("content"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["content"].isNull())
        {
            content_=std::make_shared<std::string>(pJson["content"].asString());
        }
    }
    if(pJson.isMember("data"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["data"].isNull())
        {
            data_=std::make_shared<std::string>(pJson["data"].asString());
        }
    }
    if(pJson.isMember("order_key"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["order_key"].isNull())
        {
            orderKey_=std::make_shared<std::string>(pJson["order_key"].asString());
        }
    }
    if(pJson.isMember("is_show"))
    {
        dirtyFlag_[8] = true;
        if(!pJson["is_show"].isNull())
        {
            isShow_=std::make_shared<uint8_t>((uint8_t)pJson["is_show"].asUInt64());
        }
    }
    if(pJson.isMember("contract_type"))
    {
        dirtyFlag_[9] = true;
        if(!pJson["contract_type"].isNull())
        {
            contractType_=std::make_shared<uint8_t>((uint8_t)pJson["contract_type"].asUInt64());
        }
    }
    if(pJson.isMember("approval_status"))
    {
        dirtyFlag_[10] = true;
        if(!pJson["approval_status"].isNull())
        {
            approvalStatus_=std::make_shared<uint8_t>((uint8_t)pJson["approval_status"].asUInt64());
        }
    }
    if(pJson.isMember("admin_id"))
    {
        dirtyFlag_[11] = true;
        if(!pJson["admin_id"].isNull())
        {
            adminId_=std::make_shared<uint64_t>((uint64_t)pJson["admin_id"].asUInt64());
        }
    }
    if(pJson.isMember("supply_contract_pic"))
    {
        dirtyFlag_[12] = true;
        if(!pJson["supply_contract_pic"].isNull())
        {
            supplyContractPic_=std::make_shared<std::string>(pJson["supply_contract_pic"].asString());
        }
    }
    if(pJson.isMember("buyer_contract_pic"))
    {
        dirtyFlag_[13] = true;
        if(!pJson["buyer_contract_pic"].isNull())
        {
            buyerContractPic_=std::make_shared<std::string>(pJson["buyer_contract_pic"].asString());
        }
    }
    if(pJson.isMember("is_finish"))
    {
        dirtyFlag_[14] = true;
        if(!pJson["is_finish"].isNull())
        {
            isFinish_=std::make_shared<uint8_t>((uint8_t)pJson["is_finish"].asUInt64());
        }
    }
    if(pJson.isMember("shop_id"))
    {
        dirtyFlag_[15] = true;
        if(!pJson["shop_id"].isNull())
        {
            shopId_=std::make_shared<int64_t>((int64_t)pJson["shop_id"].asInt64());
        }
    }
    if(pJson.isMember("template_id"))
    {
        dirtyFlag_[16] = true;
        if(!pJson["template_id"].isNull())
        {
            templateId_=std::make_shared<int64_t>((int64_t)pJson["template_id"].asInt64());
        }
    }
    if(pJson.isMember("auditing_remark"))
    {
        dirtyFlag_[17] = true;
        if(!pJson["auditing_remark"].isNull())
        {
            auditingRemark_=std::make_shared<std::string>(pJson["auditing_remark"].asString());
        }
    }
    if(pJson.isMember("contract_key"))
    {
        dirtyFlag_[18] = true;
        if(!pJson["contract_key"].isNull())
        {
            contractKey_=std::make_shared<std::string>(pJson["contract_key"].asString());
        }
    }
    if(pJson.isMember("is_point_price"))
    {
        dirtyFlag_[19] = true;
        if(!pJson["is_point_price"].isNull())
        {
            isPointPrice_=std::make_shared<uint8_t>((uint8_t)pJson["is_point_price"].asUInt64());
        }
    }
}

const uint64_t &ContractRecords::getValueOfId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &ContractRecords::getId() const noexcept
{
    return id_;
}
void ContractRecords::setId(const uint64_t &pId) noexcept
{
    id_ = std::make_shared<uint64_t>(pId);
    dirtyFlag_[0] = true;
}



const typename ContractRecords::PrimaryKeyType & ContractRecords::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const ::trantor::Date &ContractRecords::getValueOfCreateTime() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(createTime_)
        return *createTime_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &ContractRecords::getCreateTime() const noexcept
{
    return createTime_;
}
void ContractRecords::setCreateTime(const ::trantor::Date &pCreateTime) noexcept
{
    createTime_ = std::make_shared<::trantor::Date>(pCreateTime);
    dirtyFlag_[1] = true;
}




const ::trantor::Date &ContractRecords::getValueOfUpdateTime() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(updateTime_)
        return *updateTime_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &ContractRecords::getUpdateTime() const noexcept
{
    return updateTime_;
}
void ContractRecords::setUpdateTime(const ::trantor::Date &pUpdateTime) noexcept
{
    updateTime_ = std::make_shared<::trantor::Date>(pUpdateTime);
    dirtyFlag_[2] = true;
}




const std::string &ContractRecords::getValueOfRemark() const noexcept
{
    const static std::string defaultValue = std::string();
    if(remark_)
        return *remark_;
    return defaultValue;
}
const std::shared_ptr<std::string> &ContractRecords::getRemark() const noexcept
{
    return remark_;
}
void ContractRecords::setRemark(const std::string &pRemark) noexcept
{
    remark_ = std::make_shared<std::string>(pRemark);
    dirtyFlag_[3] = true;
}
void ContractRecords::setRemark(std::string &&pRemark) noexcept
{
    remark_ = std::make_shared<std::string>(std::move(pRemark));
    dirtyFlag_[3] = true;
}


void ContractRecords::setRemarkToNull() noexcept
{
    remark_.reset();
    dirtyFlag_[3] = true;
}


const int8_t &ContractRecords::getValueOfIsDelete() const noexcept
{
    const static int8_t defaultValue = int8_t();
    if(isDelete_)
        return *isDelete_;
    return defaultValue;
}
const std::shared_ptr<int8_t> &ContractRecords::getIsDelete() const noexcept
{
    return isDelete_;
}
void ContractRecords::setIsDelete(const int8_t &pIsDelete) noexcept
{
    isDelete_ = std::make_shared<int8_t>(pIsDelete);
    dirtyFlag_[4] = true;
}




const std::string &ContractRecords::getValueOfContent() const noexcept
{
    const static std::string defaultValue = std::string();
    if(content_)
        return *content_;
    return defaultValue;
}
const std::shared_ptr<std::string> &ContractRecords::getContent() const noexcept
{
    return content_;
}
void ContractRecords::setContent(const std::string &pContent) noexcept
{
    content_ = std::make_shared<std::string>(pContent);
    dirtyFlag_[5] = true;
}
void ContractRecords::setContent(std::string &&pContent) noexcept
{
    content_ = std::make_shared<std::string>(std::move(pContent));
    dirtyFlag_[5] = true;
}


void ContractRecords::setContentToNull() noexcept
{
    content_.reset();
    dirtyFlag_[5] = true;
}


const std::string &ContractRecords::getValueOfData() const noexcept
{
    const static std::string defaultValue = std::string();
    if(data_)
        return *data_;
    return defaultValue;
}
const std::shared_ptr<std::string> &ContractRecords::getData() const noexcept
{
    return data_;
}
void ContractRecords::setData(const std::string &pData) noexcept
{
    data_ = std::make_shared<std::string>(pData);
    dirtyFlag_[6] = true;
}
void ContractRecords::setData(std::string &&pData) noexcept
{
    data_ = std::make_shared<std::string>(std::move(pData));
    dirtyFlag_[6] = true;
}




const std::string &ContractRecords::getValueOfOrderKey() const noexcept
{
    const static std::string defaultValue = std::string();
    if(orderKey_)
        return *orderKey_;
    return defaultValue;
}
const std::shared_ptr<std::string> &ContractRecords::getOrderKey() const noexcept
{
    return orderKey_;
}
void ContractRecords::setOrderKey(const std::string &pOrderKey) noexcept
{
    orderKey_ = std::make_shared<std::string>(pOrderKey);
    dirtyFlag_[7] = true;
}
void ContractRecords::setOrderKey(std::string &&pOrderKey) noexcept
{
    orderKey_ = std::make_shared<std::string>(std::move(pOrderKey));
    dirtyFlag_[7] = true;
}




const uint8_t &ContractRecords::getValueOfIsShow() const noexcept
{
    const static uint8_t defaultValue = uint8_t();
    if(isShow_)
        return *isShow_;
    return defaultValue;
}
const std::shared_ptr<uint8_t> &ContractRecords::getIsShow() const noexcept
{
    return isShow_;
}
void ContractRecords::setIsShow(const uint8_t &pIsShow) noexcept
{
    isShow_ = std::make_shared<uint8_t>(pIsShow);
    dirtyFlag_[8] = true;
}




const uint8_t &ContractRecords::getValueOfContractType() const noexcept
{
    const static uint8_t defaultValue = uint8_t();
    if(contractType_)
        return *contractType_;
    return defaultValue;
}
const std::shared_ptr<uint8_t> &ContractRecords::getContractType() const noexcept
{
    return contractType_;
}
void ContractRecords::setContractType(const uint8_t &pContractType) noexcept
{
    contractType_ = std::make_shared<uint8_t>(pContractType);
    dirtyFlag_[9] = true;
}




const uint8_t &ContractRecords::getValueOfApprovalStatus() const noexcept
{
    const static uint8_t defaultValue = uint8_t();
    if(approvalStatus_)
        return *approvalStatus_;
    return defaultValue;
}
const std::shared_ptr<uint8_t> &ContractRecords::getApprovalStatus() const noexcept
{
    return approvalStatus_;
}
void ContractRecords::setApprovalStatus(const uint8_t &pApprovalStatus) noexcept
{
    approvalStatus_ = std::make_shared<uint8_t>(pApprovalStatus);
    dirtyFlag_[10] = true;
}




const uint64_t &ContractRecords::getValueOfAdminId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(adminId_)
        return *adminId_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &ContractRecords::getAdminId() const noexcept
{
    return adminId_;
}
void ContractRecords::setAdminId(const uint64_t &pAdminId) noexcept
{
    adminId_ = std::make_shared<uint64_t>(pAdminId);
    dirtyFlag_[11] = true;
}




const std::string &ContractRecords::getValueOfSupplyContractPic() const noexcept
{
    const static std::string defaultValue = std::string();
    if(supplyContractPic_)
        return *supplyContractPic_;
    return defaultValue;
}
const std::shared_ptr<std::string> &ContractRecords::getSupplyContractPic() const noexcept
{
    return supplyContractPic_;
}
void ContractRecords::setSupplyContractPic(const std::string &pSupplyContractPic) noexcept
{
    supplyContractPic_ = std::make_shared<std::string>(pSupplyContractPic);
    dirtyFlag_[12] = true;
}
void ContractRecords::setSupplyContractPic(std::string &&pSupplyContractPic) noexcept
{
    supplyContractPic_ = std::make_shared<std::string>(std::move(pSupplyContractPic));
    dirtyFlag_[12] = true;
}




const std::string &ContractRecords::getValueOfBuyerContractPic() const noexcept
{
    const static std::string defaultValue = std::string();
    if(buyerContractPic_)
        return *buyerContractPic_;
    return defaultValue;
}
const std::shared_ptr<std::string> &ContractRecords::getBuyerContractPic() const noexcept
{
    return buyerContractPic_;
}
void ContractRecords::setBuyerContractPic(const std::string &pBuyerContractPic) noexcept
{
    buyerContractPic_ = std::make_shared<std::string>(pBuyerContractPic);
    dirtyFlag_[13] = true;
}
void ContractRecords::setBuyerContractPic(std::string &&pBuyerContractPic) noexcept
{
    buyerContractPic_ = std::make_shared<std::string>(std::move(pBuyerContractPic));
    dirtyFlag_[13] = true;
}




const uint8_t &ContractRecords::getValueOfIsFinish() const noexcept
{
    const static uint8_t defaultValue = uint8_t();
    if(isFinish_)
        return *isFinish_;
    return defaultValue;
}
const std::shared_ptr<uint8_t> &ContractRecords::getIsFinish() const noexcept
{
    return isFinish_;
}
void ContractRecords::setIsFinish(const uint8_t &pIsFinish) noexcept
{
    isFinish_ = std::make_shared<uint8_t>(pIsFinish);
    dirtyFlag_[14] = true;
}




const int64_t &ContractRecords::getValueOfShopId() const noexcept
{
    const static int64_t defaultValue = int64_t();
    if(shopId_)
        return *shopId_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &ContractRecords::getShopId() const noexcept
{
    return shopId_;
}
void ContractRecords::setShopId(const int64_t &pShopId) noexcept
{
    shopId_ = std::make_shared<int64_t>(pShopId);
    dirtyFlag_[15] = true;
}




const int64_t &ContractRecords::getValueOfTemplateId() const noexcept
{
    const static int64_t defaultValue = int64_t();
    if(templateId_)
        return *templateId_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &ContractRecords::getTemplateId() const noexcept
{
    return templateId_;
}
void ContractRecords::setTemplateId(const int64_t &pTemplateId) noexcept
{
    templateId_ = std::make_shared<int64_t>(pTemplateId);
    dirtyFlag_[16] = true;
}




const std::string &ContractRecords::getValueOfAuditingRemark() const noexcept
{
    const static std::string defaultValue = std::string();
    if(auditingRemark_)
        return *auditingRemark_;
    return defaultValue;
}
const std::shared_ptr<std::string> &ContractRecords::getAuditingRemark() const noexcept
{
    return auditingRemark_;
}
void ContractRecords::setAuditingRemark(const std::string &pAuditingRemark) noexcept
{
    auditingRemark_ = std::make_shared<std::string>(pAuditingRemark);
    dirtyFlag_[17] = true;
}
void ContractRecords::setAuditingRemark(std::string &&pAuditingRemark) noexcept
{
    auditingRemark_ = std::make_shared<std::string>(std::move(pAuditingRemark));
    dirtyFlag_[17] = true;
}


void ContractRecords::setAuditingRemarkToNull() noexcept
{
    auditingRemark_.reset();
    dirtyFlag_[17] = true;
}


const std::string &ContractRecords::getValueOfContractKey() const noexcept
{
    const static std::string defaultValue = std::string();
    if(contractKey_)
        return *contractKey_;
    return defaultValue;
}
const std::shared_ptr<std::string> &ContractRecords::getContractKey() const noexcept
{
    return contractKey_;
}
void ContractRecords::setContractKey(const std::string &pContractKey) noexcept
{
    contractKey_ = std::make_shared<std::string>(pContractKey);
    dirtyFlag_[18] = true;
}
void ContractRecords::setContractKey(std::string &&pContractKey) noexcept
{
    contractKey_ = std::make_shared<std::string>(std::move(pContractKey));
    dirtyFlag_[18] = true;
}


void ContractRecords::setContractKeyToNull() noexcept
{
    contractKey_.reset();
    dirtyFlag_[18] = true;
}


const uint8_t &ContractRecords::getValueOfIsPointPrice() const noexcept
{
    const static uint8_t defaultValue = uint8_t();
    if(isPointPrice_)
        return *isPointPrice_;
    return defaultValue;
}
const std::shared_ptr<uint8_t> &ContractRecords::getIsPointPrice() const noexcept
{
    return isPointPrice_;
}
void ContractRecords::setIsPointPrice(const uint8_t &pIsPointPrice) noexcept
{
    isPointPrice_ = std::make_shared<uint8_t>(pIsPointPrice);
    dirtyFlag_[19] = true;
}




void ContractRecords::updateId(const uint64_t id)
{
    id_ = std::make_shared<uint64_t>(id);
}

const std::vector<std::string> &ContractRecords::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "create_time",
        "update_time",
        "remark",
        "is_delete",
        "content",
        "data",
        "order_key",
        "is_show",
        "contract_type",
        "approval_status",
        "admin_id",
        "supply_contract_pic",
        "buyer_contract_pic",
        "is_finish",
        "shop_id",
        "template_id",
        "auditing_remark",
        "contract_key",
        "is_point_price"
    };
    return inCols;
}

void ContractRecords::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getCreateTime())
        {
            binder << getValueOfCreateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getUpdateTime())
        {
            binder << getValueOfUpdateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getRemark())
        {
            binder << getValueOfRemark();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getIsDelete())
        {
            binder << getValueOfIsDelete();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getContent())
        {
            binder << getValueOfContent();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getData())
        {
            binder << getValueOfData();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getOrderKey())
        {
            binder << getValueOfOrderKey();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getIsShow())
        {
            binder << getValueOfIsShow();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getContractType())
        {
            binder << getValueOfContractType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getApprovalStatus())
        {
            binder << getValueOfApprovalStatus();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getAdminId())
        {
            binder << getValueOfAdminId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getSupplyContractPic())
        {
            binder << getValueOfSupplyContractPic();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[13])
    {
        if(getBuyerContractPic())
        {
            binder << getValueOfBuyerContractPic();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[14])
    {
        if(getIsFinish())
        {
            binder << getValueOfIsFinish();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[15])
    {
        if(getShopId())
        {
            binder << getValueOfShopId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[16])
    {
        if(getTemplateId())
        {
            binder << getValueOfTemplateId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[17])
    {
        if(getAuditingRemark())
        {
            binder << getValueOfAuditingRemark();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[18])
    {
        if(getContractKey())
        {
            binder << getValueOfContractKey();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[19])
    {
        if(getIsPointPrice())
        {
            binder << getValueOfIsPointPrice();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> ContractRecords::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    if(dirtyFlag_[8])
    {
        ret.push_back(getColumnName(8));
    }
    if(dirtyFlag_[9])
    {
        ret.push_back(getColumnName(9));
    }
    if(dirtyFlag_[10])
    {
        ret.push_back(getColumnName(10));
    }
    if(dirtyFlag_[11])
    {
        ret.push_back(getColumnName(11));
    }
    if(dirtyFlag_[12])
    {
        ret.push_back(getColumnName(12));
    }
    if(dirtyFlag_[13])
    {
        ret.push_back(getColumnName(13));
    }
    if(dirtyFlag_[14])
    {
        ret.push_back(getColumnName(14));
    }
    if(dirtyFlag_[15])
    {
        ret.push_back(getColumnName(15));
    }
    if(dirtyFlag_[16])
    {
        ret.push_back(getColumnName(16));
    }
    if(dirtyFlag_[17])
    {
        ret.push_back(getColumnName(17));
    }
    if(dirtyFlag_[18])
    {
        ret.push_back(getColumnName(18));
    }
    if(dirtyFlag_[19])
    {
        ret.push_back(getColumnName(19));
    }
    return ret;
}

void ContractRecords::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getCreateTime())
        {
            binder << getValueOfCreateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getUpdateTime())
        {
            binder << getValueOfUpdateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getRemark())
        {
            binder << getValueOfRemark();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getIsDelete())
        {
            binder << getValueOfIsDelete();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getContent())
        {
            binder << getValueOfContent();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getData())
        {
            binder << getValueOfData();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getOrderKey())
        {
            binder << getValueOfOrderKey();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getIsShow())
        {
            binder << getValueOfIsShow();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getContractType())
        {
            binder << getValueOfContractType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getApprovalStatus())
        {
            binder << getValueOfApprovalStatus();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getAdminId())
        {
            binder << getValueOfAdminId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getSupplyContractPic())
        {
            binder << getValueOfSupplyContractPic();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[13])
    {
        if(getBuyerContractPic())
        {
            binder << getValueOfBuyerContractPic();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[14])
    {
        if(getIsFinish())
        {
            binder << getValueOfIsFinish();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[15])
    {
        if(getShopId())
        {
            binder << getValueOfShopId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[16])
    {
        if(getTemplateId())
        {
            binder << getValueOfTemplateId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[17])
    {
        if(getAuditingRemark())
        {
            binder << getValueOfAuditingRemark();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[18])
    {
        if(getContractKey())
        {
            binder << getValueOfContractKey();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[19])
    {
        if(getIsPointPrice())
        {
            binder << getValueOfIsPointPrice();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value ContractRecords::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=(Json::UInt64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getCreateTime())
    {
        ret["create_time"]=getCreateTime()->toDbStringLocal();
    }
    else
    {
        ret["create_time"]=Json::Value();
    }
    if(getUpdateTime())
    {
        ret["update_time"]=getUpdateTime()->toDbStringLocal();
    }
    else
    {
        ret["update_time"]=Json::Value();
    }
    if(getRemark())
    {
        ret["remark"]=getValueOfRemark();
    }
    else
    {
        ret["remark"]=Json::Value();
    }
    if(getIsDelete())
    {
        ret["is_delete"]=getValueOfIsDelete();
    }
    else
    {
        ret["is_delete"]=Json::Value();
    }
    if(getContent())
    {
        ret["content"]=getValueOfContent();
    }
    else
    {
        ret["content"]=Json::Value();
    }
    if(getData())
    {
        ret["data"]=getValueOfData();
    }
    else
    {
        ret["data"]=Json::Value();
    }
    if(getOrderKey())
    {
        ret["order_key"]=getValueOfOrderKey();
    }
    else
    {
        ret["order_key"]=Json::Value();
    }
    if(getIsShow())
    {
        ret["is_show"]=getValueOfIsShow();
    }
    else
    {
        ret["is_show"]=Json::Value();
    }
    if(getContractType())
    {
        ret["contract_type"]=getValueOfContractType();
    }
    else
    {
        ret["contract_type"]=Json::Value();
    }
    if(getApprovalStatus())
    {
        ret["approval_status"]=getValueOfApprovalStatus();
    }
    else
    {
        ret["approval_status"]=Json::Value();
    }
    if(getAdminId())
    {
        ret["admin_id"]=(Json::UInt64)getValueOfAdminId();
    }
    else
    {
        ret["admin_id"]=Json::Value();
    }
    if(getSupplyContractPic())
    {
        ret["supply_contract_pic"]=getValueOfSupplyContractPic();
    }
    else
    {
        ret["supply_contract_pic"]=Json::Value();
    }
    if(getBuyerContractPic())
    {
        ret["buyer_contract_pic"]=getValueOfBuyerContractPic();
    }
    else
    {
        ret["buyer_contract_pic"]=Json::Value();
    }
    if(getIsFinish())
    {
        ret["is_finish"]=getValueOfIsFinish();
    }
    else
    {
        ret["is_finish"]=Json::Value();
    }
    if(getShopId())
    {
        ret["shop_id"]=(Json::Int64)getValueOfShopId();
    }
    else
    {
        ret["shop_id"]=Json::Value();
    }
    if(getTemplateId())
    {
        ret["template_id"]=(Json::Int64)getValueOfTemplateId();
    }
    else
    {
        ret["template_id"]=Json::Value();
    }
    if(getAuditingRemark())
    {
        ret["auditing_remark"]=getValueOfAuditingRemark();
    }
    else
    {
        ret["auditing_remark"]=Json::Value();
    }
    if(getContractKey())
    {
        ret["contract_key"]=getValueOfContractKey();
    }
    else
    {
        ret["contract_key"]=Json::Value();
    }
    if(getIsPointPrice())
    {
        ret["is_point_price"]=getValueOfIsPointPrice();
    }
    else
    {
        ret["is_point_price"]=Json::Value();
    }
    return ret;
}

Json::Value ContractRecords::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 20)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=(Json::UInt64)getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getCreateTime())
            {
                ret[pMasqueradingVector[1]]=getCreateTime()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getUpdateTime())
            {
                ret[pMasqueradingVector[2]]=getUpdateTime()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getRemark())
            {
                ret[pMasqueradingVector[3]]=getValueOfRemark();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getIsDelete())
            {
                ret[pMasqueradingVector[4]]=getValueOfIsDelete();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getContent())
            {
                ret[pMasqueradingVector[5]]=getValueOfContent();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getData())
            {
                ret[pMasqueradingVector[6]]=getValueOfData();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getOrderKey())
            {
                ret[pMasqueradingVector[7]]=getValueOfOrderKey();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[8].empty())
        {
            if(getIsShow())
            {
                ret[pMasqueradingVector[8]]=getValueOfIsShow();
            }
            else
            {
                ret[pMasqueradingVector[8]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[9].empty())
        {
            if(getContractType())
            {
                ret[pMasqueradingVector[9]]=getValueOfContractType();
            }
            else
            {
                ret[pMasqueradingVector[9]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[10].empty())
        {
            if(getApprovalStatus())
            {
                ret[pMasqueradingVector[10]]=getValueOfApprovalStatus();
            }
            else
            {
                ret[pMasqueradingVector[10]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[11].empty())
        {
            if(getAdminId())
            {
                ret[pMasqueradingVector[11]]=(Json::UInt64)getValueOfAdminId();
            }
            else
            {
                ret[pMasqueradingVector[11]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[12].empty())
        {
            if(getSupplyContractPic())
            {
                ret[pMasqueradingVector[12]]=getValueOfSupplyContractPic();
            }
            else
            {
                ret[pMasqueradingVector[12]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[13].empty())
        {
            if(getBuyerContractPic())
            {
                ret[pMasqueradingVector[13]]=getValueOfBuyerContractPic();
            }
            else
            {
                ret[pMasqueradingVector[13]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[14].empty())
        {
            if(getIsFinish())
            {
                ret[pMasqueradingVector[14]]=getValueOfIsFinish();
            }
            else
            {
                ret[pMasqueradingVector[14]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[15].empty())
        {
            if(getShopId())
            {
                ret[pMasqueradingVector[15]]=(Json::Int64)getValueOfShopId();
            }
            else
            {
                ret[pMasqueradingVector[15]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[16].empty())
        {
            if(getTemplateId())
            {
                ret[pMasqueradingVector[16]]=(Json::Int64)getValueOfTemplateId();
            }
            else
            {
                ret[pMasqueradingVector[16]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[17].empty())
        {
            if(getAuditingRemark())
            {
                ret[pMasqueradingVector[17]]=getValueOfAuditingRemark();
            }
            else
            {
                ret[pMasqueradingVector[17]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[18].empty())
        {
            if(getContractKey())
            {
                ret[pMasqueradingVector[18]]=getValueOfContractKey();
            }
            else
            {
                ret[pMasqueradingVector[18]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[19].empty())
        {
            if(getIsPointPrice())
            {
                ret[pMasqueradingVector[19]]=getValueOfIsPointPrice();
            }
            else
            {
                ret[pMasqueradingVector[19]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=(Json::UInt64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getCreateTime())
    {
        ret["create_time"]=getCreateTime()->toDbStringLocal();
    }
    else
    {
        ret["create_time"]=Json::Value();
    }
    if(getUpdateTime())
    {
        ret["update_time"]=getUpdateTime()->toDbStringLocal();
    }
    else
    {
        ret["update_time"]=Json::Value();
    }
    if(getRemark())
    {
        ret["remark"]=getValueOfRemark();
    }
    else
    {
        ret["remark"]=Json::Value();
    }
    if(getIsDelete())
    {
        ret["is_delete"]=getValueOfIsDelete();
    }
    else
    {
        ret["is_delete"]=Json::Value();
    }
    if(getContent())
    {
        ret["content"]=getValueOfContent();
    }
    else
    {
        ret["content"]=Json::Value();
    }
    if(getData())
    {
        ret["data"]=getValueOfData();
    }
    else
    {
        ret["data"]=Json::Value();
    }
    if(getOrderKey())
    {
        ret["order_key"]=getValueOfOrderKey();
    }
    else
    {
        ret["order_key"]=Json::Value();
    }
    if(getIsShow())
    {
        ret["is_show"]=getValueOfIsShow();
    }
    else
    {
        ret["is_show"]=Json::Value();
    }
    if(getContractType())
    {
        ret["contract_type"]=getValueOfContractType();
    }
    else
    {
        ret["contract_type"]=Json::Value();
    }
    if(getApprovalStatus())
    {
        ret["approval_status"]=getValueOfApprovalStatus();
    }
    else
    {
        ret["approval_status"]=Json::Value();
    }
    if(getAdminId())
    {
        ret["admin_id"]=(Json::UInt64)getValueOfAdminId();
    }
    else
    {
        ret["admin_id"]=Json::Value();
    }
    if(getSupplyContractPic())
    {
        ret["supply_contract_pic"]=getValueOfSupplyContractPic();
    }
    else
    {
        ret["supply_contract_pic"]=Json::Value();
    }
    if(getBuyerContractPic())
    {
        ret["buyer_contract_pic"]=getValueOfBuyerContractPic();
    }
    else
    {
        ret["buyer_contract_pic"]=Json::Value();
    }
    if(getIsFinish())
    {
        ret["is_finish"]=getValueOfIsFinish();
    }
    else
    {
        ret["is_finish"]=Json::Value();
    }
    if(getShopId())
    {
        ret["shop_id"]=(Json::Int64)getValueOfShopId();
    }
    else
    {
        ret["shop_id"]=Json::Value();
    }
    if(getTemplateId())
    {
        ret["template_id"]=(Json::Int64)getValueOfTemplateId();
    }
    else
    {
        ret["template_id"]=Json::Value();
    }
    if(getAuditingRemark())
    {
        ret["auditing_remark"]=getValueOfAuditingRemark();
    }
    else
    {
        ret["auditing_remark"]=Json::Value();
    }
    if(getContractKey())
    {
        ret["contract_key"]=getValueOfContractKey();
    }
    else
    {
        ret["contract_key"]=Json::Value();
    }
    if(getIsPointPrice())
    {
        ret["is_point_price"]=getValueOfIsPointPrice();
    }
    else
    {
        ret["is_point_price"]=Json::Value();
    }
    return ret;
}

bool ContractRecords::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("create_time"))
    {
        if(!validJsonOfField(1, "create_time", pJson["create_time"], err, true))
            return false;
    }
    if(pJson.isMember("update_time"))
    {
        if(!validJsonOfField(2, "update_time", pJson["update_time"], err, true))
            return false;
    }
    if(pJson.isMember("remark"))
    {
        if(!validJsonOfField(3, "remark", pJson["remark"], err, true))
            return false;
    }
    if(pJson.isMember("is_delete"))
    {
        if(!validJsonOfField(4, "is_delete", pJson["is_delete"], err, true))
            return false;
    }
    if(pJson.isMember("content"))
    {
        if(!validJsonOfField(5, "content", pJson["content"], err, true))
            return false;
    }
    if(pJson.isMember("data"))
    {
        if(!validJsonOfField(6, "data", pJson["data"], err, true))
            return false;
    }
    else
    {
        err="The data column cannot be null";
        return false;
    }
    if(pJson.isMember("order_key"))
    {
        if(!validJsonOfField(7, "order_key", pJson["order_key"], err, true))
            return false;
    }
    else
    {
        err="The order_key column cannot be null";
        return false;
    }
    if(pJson.isMember("is_show"))
    {
        if(!validJsonOfField(8, "is_show", pJson["is_show"], err, true))
            return false;
    }
    if(pJson.isMember("contract_type"))
    {
        if(!validJsonOfField(9, "contract_type", pJson["contract_type"], err, true))
            return false;
    }
    if(pJson.isMember("approval_status"))
    {
        if(!validJsonOfField(10, "approval_status", pJson["approval_status"], err, true))
            return false;
    }
    if(pJson.isMember("admin_id"))
    {
        if(!validJsonOfField(11, "admin_id", pJson["admin_id"], err, true))
            return false;
    }
    if(pJson.isMember("supply_contract_pic"))
    {
        if(!validJsonOfField(12, "supply_contract_pic", pJson["supply_contract_pic"], err, true))
            return false;
    }
    else
    {
        err="The supply_contract_pic column cannot be null";
        return false;
    }
    if(pJson.isMember("buyer_contract_pic"))
    {
        if(!validJsonOfField(13, "buyer_contract_pic", pJson["buyer_contract_pic"], err, true))
            return false;
    }
    else
    {
        err="The buyer_contract_pic column cannot be null";
        return false;
    }
    if(pJson.isMember("is_finish"))
    {
        if(!validJsonOfField(14, "is_finish", pJson["is_finish"], err, true))
            return false;
    }
    if(pJson.isMember("shop_id"))
    {
        if(!validJsonOfField(15, "shop_id", pJson["shop_id"], err, true))
            return false;
    }
    if(pJson.isMember("template_id"))
    {
        if(!validJsonOfField(16, "template_id", pJson["template_id"], err, true))
            return false;
    }
    if(pJson.isMember("auditing_remark"))
    {
        if(!validJsonOfField(17, "auditing_remark", pJson["auditing_remark"], err, true))
            return false;
    }
    if(pJson.isMember("contract_key"))
    {
        if(!validJsonOfField(18, "contract_key", pJson["contract_key"], err, true))
            return false;
    }
    if(pJson.isMember("is_point_price"))
    {
        if(!validJsonOfField(19, "is_point_price", pJson["is_point_price"], err, true))
            return false;
    }
    return true;
}
bool ContractRecords::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                         const std::vector<std::string> &pMasqueradingVector,
                                                         std::string &err)
{
    if(pMasqueradingVector.size() != 20)
    {
        err = "Bad masquerading vector";
        return false;
    }
    if(!pMasqueradingVector[0].empty())
    {
        if(pJson.isMember(pMasqueradingVector[0]))
        {
            if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[1].empty())
    {
        if(pJson.isMember(pMasqueradingVector[1]))
        {
            if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[2].empty())
    {
        if(pJson.isMember(pMasqueradingVector[2]))
        {
            if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[3].empty())
    {
        if(pJson.isMember(pMasqueradingVector[3]))
        {
            if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[4].empty())
    {
        if(pJson.isMember(pMasqueradingVector[4]))
        {
            if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[5].empty())
    {
        if(pJson.isMember(pMasqueradingVector[5]))
        {
            if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[6].empty())
    {
        if(pJson.isMember(pMasqueradingVector[6]))
        {
            if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                return false;
        }
        else
        {
            err="The " + pMasqueradingVector[6] + " column cannot be null";
            return false;
        }
    }
    if(!pMasqueradingVector[7].empty())
    {
        if(pJson.isMember(pMasqueradingVector[7]))
        {
            if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                return false;
        }
        else
        {
            err="The " + pMasqueradingVector[7] + " column cannot be null";
            return false;
        }
    }
    if(!pMasqueradingVector[8].empty())
    {
        if(pJson.isMember(pMasqueradingVector[8]))
        {
            if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[9].empty())
    {
        if(pJson.isMember(pMasqueradingVector[9]))
        {
            if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[10].empty())
    {
        if(pJson.isMember(pMasqueradingVector[10]))
        {
            if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[11].empty())
    {
        if(pJson.isMember(pMasqueradingVector[11]))
        {
            if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[12].empty())
    {
        if(pJson.isMember(pMasqueradingVector[12]))
        {
            if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, true))
                return false;
        }
        else
        {
            err="The " + pMasqueradingVector[12] + " column cannot be null";
            return false;
        }
    }
    if(!pMasqueradingVector[13].empty())
    {
        if(pJson.isMember(pMasqueradingVector[13]))
        {
            if(!validJsonOfField(13, pMasqueradingVector[13], pJson[pMasqueradingVector[13]], err, true))
                return false;
        }
        else
        {
            err="The " + pMasqueradingVector[13] + " column cannot be null";
            return false;
        }
    }
    if(!pMasqueradingVector[14].empty())
    {
        if(pJson.isMember(pMasqueradingVector[14]))
        {
            if(!validJsonOfField(14, pMasqueradingVector[14], pJson[pMasqueradingVector[14]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[15].empty())
    {
        if(pJson.isMember(pMasqueradingVector[15]))
        {
            if(!validJsonOfField(15, pMasqueradingVector[15], pJson[pMasqueradingVector[15]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[16].empty())
    {
        if(pJson.isMember(pMasqueradingVector[16]))
        {
            if(!validJsonOfField(16, pMasqueradingVector[16], pJson[pMasqueradingVector[16]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[17].empty())
    {
        if(pJson.isMember(pMasqueradingVector[17]))
        {
            if(!validJsonOfField(17, pMasqueradingVector[17], pJson[pMasqueradingVector[17]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[18].empty())
    {
        if(pJson.isMember(pMasqueradingVector[18]))
        {
            if(!validJsonOfField(18, pMasqueradingVector[18], pJson[pMasqueradingVector[18]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[19].empty())
    {
        if(pJson.isMember(pMasqueradingVector[19]))
        {
            if(!validJsonOfField(19, pMasqueradingVector[19], pJson[pMasqueradingVector[19]], err, true))
                return false;
        }
    }
    return true;
}
bool ContractRecords::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("create_time"))
    {
        if(!validJsonOfField(1, "create_time", pJson["create_time"], err, false))
            return false;
    }
    if(pJson.isMember("update_time"))
    {
        if(!validJsonOfField(2, "update_time", pJson["update_time"], err, false))
            return false;
    }
    if(pJson.isMember("remark"))
    {
        if(!validJsonOfField(3, "remark", pJson["remark"], err, false))
            return false;
    }
    if(pJson.isMember("is_delete"))
    {
        if(!validJsonOfField(4, "is_delete", pJson["is_delete"], err, false))
            return false;
    }
    if(pJson.isMember("content"))
    {
        if(!validJsonOfField(5, "content", pJson["content"], err, false))
            return false;
    }
    if(pJson.isMember("data"))
    {
        if(!validJsonOfField(6, "data", pJson["data"], err, false))
            return false;
    }
    if(pJson.isMember("order_key"))
    {
        if(!validJsonOfField(7, "order_key", pJson["order_key"], err, false))
            return false;
    }
    if(pJson.isMember("is_show"))
    {
        if(!validJsonOfField(8, "is_show", pJson["is_show"], err, false))
            return false;
    }
    if(pJson.isMember("contract_type"))
    {
        if(!validJsonOfField(9, "contract_type", pJson["contract_type"], err, false))
            return false;
    }
    if(pJson.isMember("approval_status"))
    {
        if(!validJsonOfField(10, "approval_status", pJson["approval_status"], err, false))
            return false;
    }
    if(pJson.isMember("admin_id"))
    {
        if(!validJsonOfField(11, "admin_id", pJson["admin_id"], err, false))
            return false;
    }
    if(pJson.isMember("supply_contract_pic"))
    {
        if(!validJsonOfField(12, "supply_contract_pic", pJson["supply_contract_pic"], err, false))
            return false;
    }
    if(pJson.isMember("buyer_contract_pic"))
    {
        if(!validJsonOfField(13, "buyer_contract_pic", pJson["buyer_contract_pic"], err, false))
            return false;
    }
    if(pJson.isMember("is_finish"))
    {
        if(!validJsonOfField(14, "is_finish", pJson["is_finish"], err, false))
            return false;
    }
    if(pJson.isMember("shop_id"))
    {
        if(!validJsonOfField(15, "shop_id", pJson["shop_id"], err, false))
            return false;
    }
    if(pJson.isMember("template_id"))
    {
        if(!validJsonOfField(16, "template_id", pJson["template_id"], err, false))
            return false;
    }
    if(pJson.isMember("auditing_remark"))
    {
        if(!validJsonOfField(17, "auditing_remark", pJson["auditing_remark"], err, false))
            return false;
    }
    if(pJson.isMember("contract_key"))
    {
        if(!validJsonOfField(18, "contract_key", pJson["contract_key"], err, false))
            return false;
    }
    if(pJson.isMember("is_point_price"))
    {
        if(!validJsonOfField(19, "is_point_price", pJson["is_point_price"], err, false))
            return false;
    }
    return true;
}
bool ContractRecords::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                       const std::vector<std::string> &pMasqueradingVector,
                                                       std::string &err)
{
    if(pMasqueradingVector.size() != 20)
    {
        err = "Bad masquerading vector";
        return false;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
            return false;
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
            return false;
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
            return false;
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
            return false;
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
            return false;
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
            return false;
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
            return false;
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, false))
            return false;
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, false))
            return false;
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, false))
            return false;
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, false))
            return false;
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, false))
            return false;
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        if(!validJsonOfField(13, pMasqueradingVector[13], pJson[pMasqueradingVector[13]], err, false))
            return false;
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        if(!validJsonOfField(14, pMasqueradingVector[14], pJson[pMasqueradingVector[14]], err, false))
            return false;
    }
    if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
    {
        if(!validJsonOfField(15, pMasqueradingVector[15], pJson[pMasqueradingVector[15]], err, false))
            return false;
    }
    if(!pMasqueradingVector[16].empty() && pJson.isMember(pMasqueradingVector[16]))
    {
        if(!validJsonOfField(16, pMasqueradingVector[16], pJson[pMasqueradingVector[16]], err, false))
            return false;
    }
    if(!pMasqueradingVector[17].empty() && pJson.isMember(pMasqueradingVector[17]))
    {
        if(!validJsonOfField(17, pMasqueradingVector[17], pJson[pMasqueradingVector[17]], err, false))
            return false;
    }
    if(!pMasqueradingVector[18].empty() && pJson.isMember(pMasqueradingVector[18]))
    {
        if(!validJsonOfField(18, pMasqueradingVector[18], pJson[pMasqueradingVector[18]], err, false))
            return false;
    }
    if(!pMasqueradingVector[19].empty() && pJson.isMember(pMasqueradingVector[19]))
    {
        if(!validJsonOfField(19, pMasqueradingVector[19], pJson[pMasqueradingVector[19]], err, false))
            return false;
    }
    return true;
}
bool ContractRecords::validJsonOfField(size_t index,
                                       const std::string &fieldName,
                                       const Json::Value &pJson, 
                                       std::string &err, 
                                       bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }        
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 5:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 6:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 7:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 60)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 60)";
                return false;               
            }

            break;
        case 8:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 9:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 10:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 11:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 12:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 13:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 14:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 15:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 16:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 17:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 18:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 60)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 60)";
                return false;               
            }

            break;
        case 19:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
     
        default:
            err="Internal error in the server";
            return false;
            break;
    }
    return true;
}
