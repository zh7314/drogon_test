/**
 *
 *  User.h
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#pragma once
#include <drogon/orm/Result.h>
#include <drogon/orm/Row.h>
#include <drogon/orm/Field.h>
#include <drogon/orm/SqlBinder.h>
#include <drogon/orm/Mapper.h>
#include <trantor/utils/Date.h>
#include <trantor/utils/Logger.h>
#include <json/json.h>
#include <string>
#include <memory>
#include <vector>
#include <tuple>
#include <stdint.h>
#include <iostream>

using namespace drogon::orm;
namespace drogon
{
namespace orm
{
class DbClient;
using DbClientPtr = std::shared_ptr<DbClient>;
}
}
namespace drogon_model
{
namespace v2 
{

class User
{
  public:
    struct Cols
    {
        static const std::string _id;
        static const std::string _create_time;
        static const std::string _update_time;
        static const std::string _remark;
        static const std::string _source;
        static const std::string _user_type;
        static const std::string _mobile;
        static const std::string _user_login_name;
        static const std::string _user_password;
        static const std::string _real_name;
        static const std::string _user_sex;
        static const std::string _nick_name;
        static const std::string _last_time;
        static const std::string _last_ip;
        static const std::string _user_avatar;
        static const std::string _user_status;
        static const std::string _personality_signature;
        static const std::string _is_delete;
        static const std::string _email;
        static const std::string _session_id;
        static const std::string _token;
        static const std::string _token_time;
        static const std::string _qq;
        static const std::string _service_id;
        static const std::string _telephone;
        static const std::string _admin_id;
        static const std::string _weixin_id;
    };

    const static int primaryKeyNumber;
    const static std::string tableName;
    const static bool hasPrimaryKey;
    const static std::string primaryKeyName;
    using PrimaryKeyType = uint64_t;
    const PrimaryKeyType &getPrimaryKey() const;

    /**
     * @brief constructor
     * @param r One row of records in the SQL query result.
     * @param indexOffset Set the offset to -1 to access all columns by column names, 
     * otherwise access all columns by offsets.
     * @note If the SQL is not a style of 'select * from table_name ...' (select all 
     * columns by an asterisk), please set the offset to -1.
     */
    explicit User(const Row &r, const ssize_t indexOffset = 0) noexcept;

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     */
    explicit User(const Json::Value &pJson) noexcept(false);

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     * @param pMasqueradingVector The aliases of table columns.
     */
    User(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false);

    User() = default;
    
    void updateByJson(const Json::Value &pJson) noexcept(false);
    void updateByMasqueradedJson(const Json::Value &pJson,
                                 const std::vector<std::string> &pMasqueradingVector) noexcept(false);
    static bool validateJsonForCreation(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForCreation(const Json::Value &,
                                                const std::vector<std::string> &pMasqueradingVector,
                                                    std::string &err);
    static bool validateJsonForUpdate(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForUpdate(const Json::Value &,
                                          const std::vector<std::string> &pMasqueradingVector,
                                          std::string &err);
    static bool validJsonOfField(size_t index,
                          const std::string &fieldName,
                          const Json::Value &pJson, 
                          std::string &err, 
                          bool isForCreation);

    /**  For column id  */
    ///Get the value of the column id, returns the default value if the column is null
    const uint64_t &getValueOfId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint64_t> &getId() const noexcept;

    ///Set the value of the column id
    void setId(const uint64_t &pId) noexcept;


    /**  For column create_time  */
    ///Get the value of the column create_time, returns the default value if the column is null
    const ::trantor::Date &getValueOfCreateTime() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getCreateTime() const noexcept;

    ///Set the value of the column create_time
    void setCreateTime(const ::trantor::Date &pCreateTime) noexcept;


    /**  For column update_time  */
    ///Get the value of the column update_time, returns the default value if the column is null
    const ::trantor::Date &getValueOfUpdateTime() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getUpdateTime() const noexcept;

    ///Set the value of the column update_time
    void setUpdateTime(const ::trantor::Date &pUpdateTime) noexcept;


    /**  For column remark  */
    ///Get the value of the column remark, returns the default value if the column is null
    const std::string &getValueOfRemark() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getRemark() const noexcept;

    ///Set the value of the column remark
    void setRemark(const std::string &pRemark) noexcept;
    void setRemark(std::string &&pRemark) noexcept;
    void setRemarkToNull() noexcept;


    /**  For column source  */
    ///Get the value of the column source, returns the default value if the column is null
    const std::string &getValueOfSource() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getSource() const noexcept;

    ///Set the value of the column source
    void setSource(const std::string &pSource) noexcept;
    void setSource(std::string &&pSource) noexcept;
    void setSourceToNull() noexcept;


    /**  For column user_type  */
    ///Get the value of the column user_type, returns the default value if the column is null
    const uint8_t &getValueOfUserType() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint8_t> &getUserType() const noexcept;

    ///Set the value of the column user_type
    void setUserType(const uint8_t &pUserType) noexcept;


    /**  For column mobile  */
    ///Get the value of the column mobile, returns the default value if the column is null
    const std::string &getValueOfMobile() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getMobile() const noexcept;

    ///Set the value of the column mobile
    void setMobile(const std::string &pMobile) noexcept;
    void setMobile(std::string &&pMobile) noexcept;


    /**  For column user_login_name  */
    ///Get the value of the column user_login_name, returns the default value if the column is null
    const std::string &getValueOfUserLoginName() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getUserLoginName() const noexcept;

    ///Set the value of the column user_login_name
    void setUserLoginName(const std::string &pUserLoginName) noexcept;
    void setUserLoginName(std::string &&pUserLoginName) noexcept;


    /**  For column user_password  */
    ///Get the value of the column user_password, returns the default value if the column is null
    const std::string &getValueOfUserPassword() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getUserPassword() const noexcept;

    ///Set the value of the column user_password
    void setUserPassword(const std::string &pUserPassword) noexcept;
    void setUserPassword(std::string &&pUserPassword) noexcept;
    void setUserPasswordToNull() noexcept;


    /**  For column real_name  */
    ///Get the value of the column real_name, returns the default value if the column is null
    const std::string &getValueOfRealName() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getRealName() const noexcept;

    ///Set the value of the column real_name
    void setRealName(const std::string &pRealName) noexcept;
    void setRealName(std::string &&pRealName) noexcept;
    void setRealNameToNull() noexcept;


    /**  For column user_sex  */
    ///Get the value of the column user_sex, returns the default value if the column is null
    const uint8_t &getValueOfUserSex() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint8_t> &getUserSex() const noexcept;

    ///Set the value of the column user_sex
    void setUserSex(const uint8_t &pUserSex) noexcept;


    /**  For column nick_name  */
    ///Get the value of the column nick_name, returns the default value if the column is null
    const std::string &getValueOfNickName() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getNickName() const noexcept;

    ///Set the value of the column nick_name
    void setNickName(const std::string &pNickName) noexcept;
    void setNickName(std::string &&pNickName) noexcept;
    void setNickNameToNull() noexcept;


    /**  For column last_time  */
    ///Get the value of the column last_time, returns the default value if the column is null
    const ::trantor::Date &getValueOfLastTime() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getLastTime() const noexcept;

    ///Set the value of the column last_time
    void setLastTime(const ::trantor::Date &pLastTime) noexcept;
    void setLastTimeToNull() noexcept;


    /**  For column last_ip  */
    ///Get the value of the column last_ip, returns the default value if the column is null
    const std::string &getValueOfLastIp() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getLastIp() const noexcept;

    ///Set the value of the column last_ip
    void setLastIp(const std::string &pLastIp) noexcept;
    void setLastIp(std::string &&pLastIp) noexcept;
    void setLastIpToNull() noexcept;


    /**  For column user_avatar  */
    ///Get the value of the column user_avatar, returns the default value if the column is null
    const std::string &getValueOfUserAvatar() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getUserAvatar() const noexcept;

    ///Set the value of the column user_avatar
    void setUserAvatar(const std::string &pUserAvatar) noexcept;
    void setUserAvatar(std::string &&pUserAvatar) noexcept;
    void setUserAvatarToNull() noexcept;


    /**  For column user_status  */
    ///Get the value of the column user_status, returns the default value if the column is null
    const int8_t &getValueOfUserStatus() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int8_t> &getUserStatus() const noexcept;

    ///Set the value of the column user_status
    void setUserStatus(const int8_t &pUserStatus) noexcept;


    /**  For column personality_signature  */
    ///Get the value of the column personality_signature, returns the default value if the column is null
    const std::string &getValueOfPersonalitySignature() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getPersonalitySignature() const noexcept;

    ///Set the value of the column personality_signature
    void setPersonalitySignature(const std::string &pPersonalitySignature) noexcept;
    void setPersonalitySignature(std::string &&pPersonalitySignature) noexcept;
    void setPersonalitySignatureToNull() noexcept;


    /**  For column is_delete  */
    ///Get the value of the column is_delete, returns the default value if the column is null
    const int8_t &getValueOfIsDelete() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int8_t> &getIsDelete() const noexcept;

    ///Set the value of the column is_delete
    void setIsDelete(const int8_t &pIsDelete) noexcept;


    /**  For column email  */
    ///Get the value of the column email, returns the default value if the column is null
    const std::string &getValueOfEmail() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getEmail() const noexcept;

    ///Set the value of the column email
    void setEmail(const std::string &pEmail) noexcept;
    void setEmail(std::string &&pEmail) noexcept;
    void setEmailToNull() noexcept;


    /**  For column session_id  */
    ///Get the value of the column session_id, returns the default value if the column is null
    const std::string &getValueOfSessionId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getSessionId() const noexcept;

    ///Set the value of the column session_id
    void setSessionId(const std::string &pSessionId) noexcept;
    void setSessionId(std::string &&pSessionId) noexcept;
    void setSessionIdToNull() noexcept;


    /**  For column token  */
    ///Get the value of the column token, returns the default value if the column is null
    const std::string &getValueOfToken() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getToken() const noexcept;

    ///Set the value of the column token
    void setToken(const std::string &pToken) noexcept;
    void setToken(std::string &&pToken) noexcept;
    void setTokenToNull() noexcept;


    /**  For column token_time  */
    ///Get the value of the column token_time, returns the default value if the column is null
    const ::trantor::Date &getValueOfTokenTime() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getTokenTime() const noexcept;

    ///Set the value of the column token_time
    void setTokenTime(const ::trantor::Date &pTokenTime) noexcept;
    void setTokenTimeToNull() noexcept;


    /**  For column qq  */
    ///Get the value of the column qq, returns the default value if the column is null
    const std::string &getValueOfQq() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getQq() const noexcept;

    ///Set the value of the column qq
    void setQq(const std::string &pQq) noexcept;
    void setQq(std::string &&pQq) noexcept;
    void setQqToNull() noexcept;


    /**  For column service_id  */
    ///Get the value of the column service_id, returns the default value if the column is null
    const int64_t &getValueOfServiceId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int64_t> &getServiceId() const noexcept;

    ///Set the value of the column service_id
    void setServiceId(const int64_t &pServiceId) noexcept;


    /**  For column telephone  */
    ///Get the value of the column telephone, returns the default value if the column is null
    const std::string &getValueOfTelephone() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getTelephone() const noexcept;

    ///Set the value of the column telephone
    void setTelephone(const std::string &pTelephone) noexcept;
    void setTelephone(std::string &&pTelephone) noexcept;
    void setTelephoneToNull() noexcept;


    /**  For column admin_id  */
    ///Get the value of the column admin_id, returns the default value if the column is null
    const uint64_t &getValueOfAdminId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint64_t> &getAdminId() const noexcept;

    ///Set the value of the column admin_id
    void setAdminId(const uint64_t &pAdminId) noexcept;


    /**  For column weixin_id  */
    ///Get the value of the column weixin_id, returns the default value if the column is null
    const std::string &getValueOfWeixinId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getWeixinId() const noexcept;

    ///Set the value of the column weixin_id
    void setWeixinId(const std::string &pWeixinId) noexcept;
    void setWeixinId(std::string &&pWeixinId) noexcept;
    void setWeixinIdToNull() noexcept;



    static size_t getColumnNumber() noexcept {  return 27;  }
    static const std::string &getColumnName(size_t index) noexcept(false);

    Json::Value toJson() const;
    Json::Value toMasqueradedJson(const std::vector<std::string> &pMasqueradingVector) const;
    /// Relationship interfaces
  private:
    friend Mapper<User>;
    static const std::vector<std::string> &insertColumns() noexcept;
    void outputArgs(drogon::orm::internal::SqlBinder &binder) const;
    const std::vector<std::string> updateColumns() const;
    void updateArgs(drogon::orm::internal::SqlBinder &binder) const;
    ///For mysql or sqlite3
    void updateId(const uint64_t id);
    std::shared_ptr<uint64_t> id_;
    std::shared_ptr<::trantor::Date> createTime_;
    std::shared_ptr<::trantor::Date> updateTime_;
    std::shared_ptr<std::string> remark_;
    std::shared_ptr<std::string> source_;
    std::shared_ptr<uint8_t> userType_;
    std::shared_ptr<std::string> mobile_;
    std::shared_ptr<std::string> userLoginName_;
    std::shared_ptr<std::string> userPassword_;
    std::shared_ptr<std::string> realName_;
    std::shared_ptr<uint8_t> userSex_;
    std::shared_ptr<std::string> nickName_;
    std::shared_ptr<::trantor::Date> lastTime_;
    std::shared_ptr<std::string> lastIp_;
    std::shared_ptr<std::string> userAvatar_;
    std::shared_ptr<int8_t> userStatus_;
    std::shared_ptr<std::string> personalitySignature_;
    std::shared_ptr<int8_t> isDelete_;
    std::shared_ptr<std::string> email_;
    std::shared_ptr<std::string> sessionId_;
    std::shared_ptr<std::string> token_;
    std::shared_ptr<::trantor::Date> tokenTime_;
    std::shared_ptr<std::string> qq_;
    std::shared_ptr<int64_t> serviceId_;
    std::shared_ptr<std::string> telephone_;
    std::shared_ptr<uint64_t> adminId_;
    std::shared_ptr<std::string> weixinId_;
    struct MetaData
    {
        const std::string colName_;
        const std::string colType_;
        const std::string colDatabaseType_;
        const ssize_t colLength_;
        const bool isAutoVal_;
        const bool isPrimaryKey_;
        const bool notNull_;
    };
    static const std::vector<MetaData> metaData_;
    bool dirtyFlag_[27]={ false };
  public:
    static const std::string &sqlForFindingByPrimaryKey()
    {
        static const std::string sql="select * from " + tableName + " where id = ?";
        return sql;                   
    }

    static const std::string &sqlForDeletingByPrimaryKey()
    {
        static const std::string sql="delete from " + tableName + " where id = ?";
        return sql;                   
    }
    std::string sqlForInserting(bool &needSelection) const
    {
        std::string sql="insert into " + tableName + " (";
        size_t parametersCount = 0;
        needSelection = false;
            sql += "id,";
            ++parametersCount;
        sql += "create_time,";
        ++parametersCount;
        if(!dirtyFlag_[1])
        {
            needSelection=true;
        }
        sql += "update_time,";
        ++parametersCount;
        if(!dirtyFlag_[2])
        {
            needSelection=true;
        }
        if(dirtyFlag_[3])
        {
            sql += "remark,";
            ++parametersCount;
        }
        if(dirtyFlag_[4])
        {
            sql += "source,";
            ++parametersCount;
        }
        sql += "user_type,";
        ++parametersCount;
        if(!dirtyFlag_[5])
        {
            needSelection=true;
        }
        if(dirtyFlag_[6])
        {
            sql += "mobile,";
            ++parametersCount;
        }
        if(dirtyFlag_[7])
        {
            sql += "user_login_name,";
            ++parametersCount;
        }
        if(dirtyFlag_[8])
        {
            sql += "user_password,";
            ++parametersCount;
        }
        if(dirtyFlag_[9])
        {
            sql += "real_name,";
            ++parametersCount;
        }
        sql += "user_sex,";
        ++parametersCount;
        if(!dirtyFlag_[10])
        {
            needSelection=true;
        }
        if(dirtyFlag_[11])
        {
            sql += "nick_name,";
            ++parametersCount;
        }
        sql += "last_time,";
        ++parametersCount;
        if(!dirtyFlag_[12])
        {
            needSelection=true;
        }
        if(dirtyFlag_[13])
        {
            sql += "last_ip,";
            ++parametersCount;
        }
        if(dirtyFlag_[14])
        {
            sql += "user_avatar,";
            ++parametersCount;
        }
        sql += "user_status,";
        ++parametersCount;
        if(!dirtyFlag_[15])
        {
            needSelection=true;
        }
        if(dirtyFlag_[16])
        {
            sql += "personality_signature,";
            ++parametersCount;
        }
        sql += "is_delete,";
        ++parametersCount;
        if(!dirtyFlag_[17])
        {
            needSelection=true;
        }
        if(dirtyFlag_[18])
        {
            sql += "email,";
            ++parametersCount;
        }
        if(dirtyFlag_[19])
        {
            sql += "session_id,";
            ++parametersCount;
        }
        if(dirtyFlag_[20])
        {
            sql += "token,";
            ++parametersCount;
        }
        if(dirtyFlag_[21])
        {
            sql += "token_time,";
            ++parametersCount;
        }
        if(dirtyFlag_[22])
        {
            sql += "qq,";
            ++parametersCount;
        }
        sql += "service_id,";
        ++parametersCount;
        if(!dirtyFlag_[23])
        {
            needSelection=true;
        }
        if(dirtyFlag_[24])
        {
            sql += "telephone,";
            ++parametersCount;
        }
        sql += "admin_id,";
        ++parametersCount;
        if(!dirtyFlag_[25])
        {
            needSelection=true;
        }
        if(dirtyFlag_[26])
        {
            sql += "weixin_id,";
            ++parametersCount;
        }
        needSelection=true;
        if(parametersCount > 0)
        {
            sql[sql.length()-1]=')';
            sql += " values (";
        }
        else
            sql += ") values (";
        
        sql +="default,";
        if(dirtyFlag_[1])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[2])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[3])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[4])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[5])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[6])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[7])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[8])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[9])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[10])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[11])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[12])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[13])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[14])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[15])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[16])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[17])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[18])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[19])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[20])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[21])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[22])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[23])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[24])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[25])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[26])
        {
            sql.append("?,");

        } 
        if(parametersCount > 0)
        {
            sql.resize(sql.length() - 1);
        }
        sql.append(1, ')');
        LOG_TRACE << sql;
        return sql;   
    }
};
} // namespace v2
} // namespace drogon_model
