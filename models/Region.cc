/**
 *
 *  Region.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Region.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::v2;

const std::string Region::Cols::_id = "id";
const std::string Region::Cols::_region_code = "region_code";
const std::string Region::Cols::_region_name = "region_name";
const std::string Region::Cols::_parent_id = "parent_id";
const std::string Region::Cols::_region_level = "region_level";
const std::string Region::Cols::_region_order = "region_order";
const std::string Region::Cols::_region_name_en = "region_name_en";
const std::string Region::Cols::_region_shortname_en = "region_shortname_en";
const std::string Region::Cols::_hx_lng = "hx_lng";
const std::string Region::Cols::_hx_lat = "hx_lat";
const std::string Region::Cols::_bd_lng = "bd_lng";
const std::string Region::Cols::_bd_lat = "bd_lat";
const std::string Region::Cols::_sort = "sort";
const std::string Region::Cols::_is_delete = "is_delete";
const std::string Region::primaryKeyName = "id";
const bool Region::hasPrimaryKey = true;
const std::string Region::tableName = "region";

const std::vector<typename Region::MetaData> Region::metaData_={
{"id","uint64_t","bigint(20) unsigned",8,0,1,1},
{"region_code","uint64_t","bigint(20) unsigned",8,0,0,1},
{"region_name","std::string","varchar(100)",100,0,0,1},
{"parent_id","double","double",8,0,0,1},
{"region_level","double","double",8,0,0,1},
{"region_order","double","double",8,0,0,1},
{"region_name_en","std::string","varchar(100)",100,0,0,1},
{"region_shortname_en","std::string","varchar(10)",10,0,0,1},
{"hx_lng","std::string","varchar(20)",20,0,0,0},
{"hx_lat","std::string","varchar(20)",20,0,0,0},
{"bd_lng","std::string","varchar(20)",20,0,0,0},
{"bd_lat","std::string","varchar(20)",20,0,0,0},
{"sort","uint8_t","tinyint(1) unsigned",1,0,0,1},
{"is_delete","uint8_t","tinyint(1) unsigned",1,0,0,1}
};
const std::string &Region::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Region::Region(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<uint64_t>(r["id"].as<uint64_t>());
        }
        if(!r["region_code"].isNull())
        {
            regionCode_=std::make_shared<uint64_t>(r["region_code"].as<uint64_t>());
        }
        if(!r["region_name"].isNull())
        {
            regionName_=std::make_shared<std::string>(r["region_name"].as<std::string>());
        }
        if(!r["parent_id"].isNull())
        {
            parentId_=std::make_shared<double>(r["parent_id"].as<double>());
        }
        if(!r["region_level"].isNull())
        {
            regionLevel_=std::make_shared<double>(r["region_level"].as<double>());
        }
        if(!r["region_order"].isNull())
        {
            regionOrder_=std::make_shared<double>(r["region_order"].as<double>());
        }
        if(!r["region_name_en"].isNull())
        {
            regionNameEn_=std::make_shared<std::string>(r["region_name_en"].as<std::string>());
        }
        if(!r["region_shortname_en"].isNull())
        {
            regionShortnameEn_=std::make_shared<std::string>(r["region_shortname_en"].as<std::string>());
        }
        if(!r["hx_lng"].isNull())
        {
            hxLng_=std::make_shared<std::string>(r["hx_lng"].as<std::string>());
        }
        if(!r["hx_lat"].isNull())
        {
            hxLat_=std::make_shared<std::string>(r["hx_lat"].as<std::string>());
        }
        if(!r["bd_lng"].isNull())
        {
            bdLng_=std::make_shared<std::string>(r["bd_lng"].as<std::string>());
        }
        if(!r["bd_lat"].isNull())
        {
            bdLat_=std::make_shared<std::string>(r["bd_lat"].as<std::string>());
        }
        if(!r["sort"].isNull())
        {
            sort_=std::make_shared<uint8_t>(r["sort"].as<uint8_t>());
        }
        if(!r["is_delete"].isNull())
        {
            isDelete_=std::make_shared<uint8_t>(r["is_delete"].as<uint8_t>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 14 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            regionCode_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            regionName_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            parentId_=std::make_shared<double>(r[index].as<double>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            regionLevel_=std::make_shared<double>(r[index].as<double>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            regionOrder_=std::make_shared<double>(r[index].as<double>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            regionNameEn_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            regionShortnameEn_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 8;
        if(!r[index].isNull())
        {
            hxLng_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 9;
        if(!r[index].isNull())
        {
            hxLat_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 10;
        if(!r[index].isNull())
        {
            bdLng_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 11;
        if(!r[index].isNull())
        {
            bdLat_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 12;
        if(!r[index].isNull())
        {
            sort_=std::make_shared<uint8_t>(r[index].as<uint8_t>());
        }
        index = offset + 13;
        if(!r[index].isNull())
        {
            isDelete_=std::make_shared<uint8_t>(r[index].as<uint8_t>());
        }
    }

}

Region::Region(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 14)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            regionCode_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[1]].asUInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            regionName_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            parentId_=std::make_shared<double>(pJson[pMasqueradingVector[3]].asDouble());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            regionLevel_=std::make_shared<double>(pJson[pMasqueradingVector[4]].asDouble());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            regionOrder_=std::make_shared<double>(pJson[pMasqueradingVector[5]].asDouble());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            regionNameEn_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            regionShortnameEn_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            hxLng_=std::make_shared<std::string>(pJson[pMasqueradingVector[8]].asString());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            hxLat_=std::make_shared<std::string>(pJson[pMasqueradingVector[9]].asString());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            bdLng_=std::make_shared<std::string>(pJson[pMasqueradingVector[10]].asString());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            bdLat_=std::make_shared<std::string>(pJson[pMasqueradingVector[11]].asString());
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            sort_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[12]].asUInt64());
        }
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        dirtyFlag_[13] = true;
        if(!pJson[pMasqueradingVector[13]].isNull())
        {
            isDelete_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[13]].asUInt64());
        }
    }
}

Region::Region(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson["id"].asUInt64());
        }
    }
    if(pJson.isMember("region_code"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["region_code"].isNull())
        {
            regionCode_=std::make_shared<uint64_t>((uint64_t)pJson["region_code"].asUInt64());
        }
    }
    if(pJson.isMember("region_name"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["region_name"].isNull())
        {
            regionName_=std::make_shared<std::string>(pJson["region_name"].asString());
        }
    }
    if(pJson.isMember("parent_id"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["parent_id"].isNull())
        {
            parentId_=std::make_shared<double>(pJson["parent_id"].asDouble());
        }
    }
    if(pJson.isMember("region_level"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["region_level"].isNull())
        {
            regionLevel_=std::make_shared<double>(pJson["region_level"].asDouble());
        }
    }
    if(pJson.isMember("region_order"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["region_order"].isNull())
        {
            regionOrder_=std::make_shared<double>(pJson["region_order"].asDouble());
        }
    }
    if(pJson.isMember("region_name_en"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["region_name_en"].isNull())
        {
            regionNameEn_=std::make_shared<std::string>(pJson["region_name_en"].asString());
        }
    }
    if(pJson.isMember("region_shortname_en"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["region_shortname_en"].isNull())
        {
            regionShortnameEn_=std::make_shared<std::string>(pJson["region_shortname_en"].asString());
        }
    }
    if(pJson.isMember("hx_lng"))
    {
        dirtyFlag_[8]=true;
        if(!pJson["hx_lng"].isNull())
        {
            hxLng_=std::make_shared<std::string>(pJson["hx_lng"].asString());
        }
    }
    if(pJson.isMember("hx_lat"))
    {
        dirtyFlag_[9]=true;
        if(!pJson["hx_lat"].isNull())
        {
            hxLat_=std::make_shared<std::string>(pJson["hx_lat"].asString());
        }
    }
    if(pJson.isMember("bd_lng"))
    {
        dirtyFlag_[10]=true;
        if(!pJson["bd_lng"].isNull())
        {
            bdLng_=std::make_shared<std::string>(pJson["bd_lng"].asString());
        }
    }
    if(pJson.isMember("bd_lat"))
    {
        dirtyFlag_[11]=true;
        if(!pJson["bd_lat"].isNull())
        {
            bdLat_=std::make_shared<std::string>(pJson["bd_lat"].asString());
        }
    }
    if(pJson.isMember("sort"))
    {
        dirtyFlag_[12]=true;
        if(!pJson["sort"].isNull())
        {
            sort_=std::make_shared<uint8_t>((uint8_t)pJson["sort"].asUInt64());
        }
    }
    if(pJson.isMember("is_delete"))
    {
        dirtyFlag_[13]=true;
        if(!pJson["is_delete"].isNull())
        {
            isDelete_=std::make_shared<uint8_t>((uint8_t)pJson["is_delete"].asUInt64());
        }
    }
}

void Region::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 14)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            regionCode_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[1]].asUInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            regionName_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            parentId_=std::make_shared<double>(pJson[pMasqueradingVector[3]].asDouble());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            regionLevel_=std::make_shared<double>(pJson[pMasqueradingVector[4]].asDouble());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            regionOrder_=std::make_shared<double>(pJson[pMasqueradingVector[5]].asDouble());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            regionNameEn_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            regionShortnameEn_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            hxLng_=std::make_shared<std::string>(pJson[pMasqueradingVector[8]].asString());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            hxLat_=std::make_shared<std::string>(pJson[pMasqueradingVector[9]].asString());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            bdLng_=std::make_shared<std::string>(pJson[pMasqueradingVector[10]].asString());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            bdLat_=std::make_shared<std::string>(pJson[pMasqueradingVector[11]].asString());
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            sort_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[12]].asUInt64());
        }
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        dirtyFlag_[13] = true;
        if(!pJson[pMasqueradingVector[13]].isNull())
        {
            isDelete_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[13]].asUInt64());
        }
    }
}
                                                                    
void Region::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson["id"].asUInt64());
        }
    }
    if(pJson.isMember("region_code"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["region_code"].isNull())
        {
            regionCode_=std::make_shared<uint64_t>((uint64_t)pJson["region_code"].asUInt64());
        }
    }
    if(pJson.isMember("region_name"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["region_name"].isNull())
        {
            regionName_=std::make_shared<std::string>(pJson["region_name"].asString());
        }
    }
    if(pJson.isMember("parent_id"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["parent_id"].isNull())
        {
            parentId_=std::make_shared<double>(pJson["parent_id"].asDouble());
        }
    }
    if(pJson.isMember("region_level"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["region_level"].isNull())
        {
            regionLevel_=std::make_shared<double>(pJson["region_level"].asDouble());
        }
    }
    if(pJson.isMember("region_order"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["region_order"].isNull())
        {
            regionOrder_=std::make_shared<double>(pJson["region_order"].asDouble());
        }
    }
    if(pJson.isMember("region_name_en"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["region_name_en"].isNull())
        {
            regionNameEn_=std::make_shared<std::string>(pJson["region_name_en"].asString());
        }
    }
    if(pJson.isMember("region_shortname_en"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["region_shortname_en"].isNull())
        {
            regionShortnameEn_=std::make_shared<std::string>(pJson["region_shortname_en"].asString());
        }
    }
    if(pJson.isMember("hx_lng"))
    {
        dirtyFlag_[8] = true;
        if(!pJson["hx_lng"].isNull())
        {
            hxLng_=std::make_shared<std::string>(pJson["hx_lng"].asString());
        }
    }
    if(pJson.isMember("hx_lat"))
    {
        dirtyFlag_[9] = true;
        if(!pJson["hx_lat"].isNull())
        {
            hxLat_=std::make_shared<std::string>(pJson["hx_lat"].asString());
        }
    }
    if(pJson.isMember("bd_lng"))
    {
        dirtyFlag_[10] = true;
        if(!pJson["bd_lng"].isNull())
        {
            bdLng_=std::make_shared<std::string>(pJson["bd_lng"].asString());
        }
    }
    if(pJson.isMember("bd_lat"))
    {
        dirtyFlag_[11] = true;
        if(!pJson["bd_lat"].isNull())
        {
            bdLat_=std::make_shared<std::string>(pJson["bd_lat"].asString());
        }
    }
    if(pJson.isMember("sort"))
    {
        dirtyFlag_[12] = true;
        if(!pJson["sort"].isNull())
        {
            sort_=std::make_shared<uint8_t>((uint8_t)pJson["sort"].asUInt64());
        }
    }
    if(pJson.isMember("is_delete"))
    {
        dirtyFlag_[13] = true;
        if(!pJson["is_delete"].isNull())
        {
            isDelete_=std::make_shared<uint8_t>((uint8_t)pJson["is_delete"].asUInt64());
        }
    }
}

const uint64_t &Region::getValueOfId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &Region::getId() const noexcept
{
    return id_;
}
void Region::setId(const uint64_t &pId) noexcept
{
    id_ = std::make_shared<uint64_t>(pId);
    dirtyFlag_[0] = true;
}



const typename Region::PrimaryKeyType & Region::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const uint64_t &Region::getValueOfRegionCode() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(regionCode_)
        return *regionCode_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &Region::getRegionCode() const noexcept
{
    return regionCode_;
}
void Region::setRegionCode(const uint64_t &pRegionCode) noexcept
{
    regionCode_ = std::make_shared<uint64_t>(pRegionCode);
    dirtyFlag_[1] = true;
}




const std::string &Region::getValueOfRegionName() const noexcept
{
    const static std::string defaultValue = std::string();
    if(regionName_)
        return *regionName_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Region::getRegionName() const noexcept
{
    return regionName_;
}
void Region::setRegionName(const std::string &pRegionName) noexcept
{
    regionName_ = std::make_shared<std::string>(pRegionName);
    dirtyFlag_[2] = true;
}
void Region::setRegionName(std::string &&pRegionName) noexcept
{
    regionName_ = std::make_shared<std::string>(std::move(pRegionName));
    dirtyFlag_[2] = true;
}




const double &Region::getValueOfParentId() const noexcept
{
    const static double defaultValue = double();
    if(parentId_)
        return *parentId_;
    return defaultValue;
}
const std::shared_ptr<double> &Region::getParentId() const noexcept
{
    return parentId_;
}
void Region::setParentId(const double &pParentId) noexcept
{
    parentId_ = std::make_shared<double>(pParentId);
    dirtyFlag_[3] = true;
}




const double &Region::getValueOfRegionLevel() const noexcept
{
    const static double defaultValue = double();
    if(regionLevel_)
        return *regionLevel_;
    return defaultValue;
}
const std::shared_ptr<double> &Region::getRegionLevel() const noexcept
{
    return regionLevel_;
}
void Region::setRegionLevel(const double &pRegionLevel) noexcept
{
    regionLevel_ = std::make_shared<double>(pRegionLevel);
    dirtyFlag_[4] = true;
}




const double &Region::getValueOfRegionOrder() const noexcept
{
    const static double defaultValue = double();
    if(regionOrder_)
        return *regionOrder_;
    return defaultValue;
}
const std::shared_ptr<double> &Region::getRegionOrder() const noexcept
{
    return regionOrder_;
}
void Region::setRegionOrder(const double &pRegionOrder) noexcept
{
    regionOrder_ = std::make_shared<double>(pRegionOrder);
    dirtyFlag_[5] = true;
}




const std::string &Region::getValueOfRegionNameEn() const noexcept
{
    const static std::string defaultValue = std::string();
    if(regionNameEn_)
        return *regionNameEn_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Region::getRegionNameEn() const noexcept
{
    return regionNameEn_;
}
void Region::setRegionNameEn(const std::string &pRegionNameEn) noexcept
{
    regionNameEn_ = std::make_shared<std::string>(pRegionNameEn);
    dirtyFlag_[6] = true;
}
void Region::setRegionNameEn(std::string &&pRegionNameEn) noexcept
{
    regionNameEn_ = std::make_shared<std::string>(std::move(pRegionNameEn));
    dirtyFlag_[6] = true;
}




const std::string &Region::getValueOfRegionShortnameEn() const noexcept
{
    const static std::string defaultValue = std::string();
    if(regionShortnameEn_)
        return *regionShortnameEn_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Region::getRegionShortnameEn() const noexcept
{
    return regionShortnameEn_;
}
void Region::setRegionShortnameEn(const std::string &pRegionShortnameEn) noexcept
{
    regionShortnameEn_ = std::make_shared<std::string>(pRegionShortnameEn);
    dirtyFlag_[7] = true;
}
void Region::setRegionShortnameEn(std::string &&pRegionShortnameEn) noexcept
{
    regionShortnameEn_ = std::make_shared<std::string>(std::move(pRegionShortnameEn));
    dirtyFlag_[7] = true;
}




const std::string &Region::getValueOfHxLng() const noexcept
{
    const static std::string defaultValue = std::string();
    if(hxLng_)
        return *hxLng_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Region::getHxLng() const noexcept
{
    return hxLng_;
}
void Region::setHxLng(const std::string &pHxLng) noexcept
{
    hxLng_ = std::make_shared<std::string>(pHxLng);
    dirtyFlag_[8] = true;
}
void Region::setHxLng(std::string &&pHxLng) noexcept
{
    hxLng_ = std::make_shared<std::string>(std::move(pHxLng));
    dirtyFlag_[8] = true;
}


void Region::setHxLngToNull() noexcept
{
    hxLng_.reset();
    dirtyFlag_[8] = true;
}


const std::string &Region::getValueOfHxLat() const noexcept
{
    const static std::string defaultValue = std::string();
    if(hxLat_)
        return *hxLat_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Region::getHxLat() const noexcept
{
    return hxLat_;
}
void Region::setHxLat(const std::string &pHxLat) noexcept
{
    hxLat_ = std::make_shared<std::string>(pHxLat);
    dirtyFlag_[9] = true;
}
void Region::setHxLat(std::string &&pHxLat) noexcept
{
    hxLat_ = std::make_shared<std::string>(std::move(pHxLat));
    dirtyFlag_[9] = true;
}


void Region::setHxLatToNull() noexcept
{
    hxLat_.reset();
    dirtyFlag_[9] = true;
}


const std::string &Region::getValueOfBdLng() const noexcept
{
    const static std::string defaultValue = std::string();
    if(bdLng_)
        return *bdLng_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Region::getBdLng() const noexcept
{
    return bdLng_;
}
void Region::setBdLng(const std::string &pBdLng) noexcept
{
    bdLng_ = std::make_shared<std::string>(pBdLng);
    dirtyFlag_[10] = true;
}
void Region::setBdLng(std::string &&pBdLng) noexcept
{
    bdLng_ = std::make_shared<std::string>(std::move(pBdLng));
    dirtyFlag_[10] = true;
}


void Region::setBdLngToNull() noexcept
{
    bdLng_.reset();
    dirtyFlag_[10] = true;
}


const std::string &Region::getValueOfBdLat() const noexcept
{
    const static std::string defaultValue = std::string();
    if(bdLat_)
        return *bdLat_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Region::getBdLat() const noexcept
{
    return bdLat_;
}
void Region::setBdLat(const std::string &pBdLat) noexcept
{
    bdLat_ = std::make_shared<std::string>(pBdLat);
    dirtyFlag_[11] = true;
}
void Region::setBdLat(std::string &&pBdLat) noexcept
{
    bdLat_ = std::make_shared<std::string>(std::move(pBdLat));
    dirtyFlag_[11] = true;
}


void Region::setBdLatToNull() noexcept
{
    bdLat_.reset();
    dirtyFlag_[11] = true;
}


const uint8_t &Region::getValueOfSort() const noexcept
{
    const static uint8_t defaultValue = uint8_t();
    if(sort_)
        return *sort_;
    return defaultValue;
}
const std::shared_ptr<uint8_t> &Region::getSort() const noexcept
{
    return sort_;
}
void Region::setSort(const uint8_t &pSort) noexcept
{
    sort_ = std::make_shared<uint8_t>(pSort);
    dirtyFlag_[12] = true;
}




const uint8_t &Region::getValueOfIsDelete() const noexcept
{
    const static uint8_t defaultValue = uint8_t();
    if(isDelete_)
        return *isDelete_;
    return defaultValue;
}
const std::shared_ptr<uint8_t> &Region::getIsDelete() const noexcept
{
    return isDelete_;
}
void Region::setIsDelete(const uint8_t &pIsDelete) noexcept
{
    isDelete_ = std::make_shared<uint8_t>(pIsDelete);
    dirtyFlag_[13] = true;
}




void Region::updateId(const uint64_t id)
{
}

const std::vector<std::string> &Region::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "id",
        "region_code",
        "region_name",
        "parent_id",
        "region_level",
        "region_order",
        "region_name_en",
        "region_shortname_en",
        "hx_lng",
        "hx_lat",
        "bd_lng",
        "bd_lat",
        "sort",
        "is_delete"
    };
    return inCols;
}

void Region::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getId())
        {
            binder << getValueOfId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getRegionCode())
        {
            binder << getValueOfRegionCode();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getRegionName())
        {
            binder << getValueOfRegionName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getParentId())
        {
            binder << getValueOfParentId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getRegionLevel())
        {
            binder << getValueOfRegionLevel();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getRegionOrder())
        {
            binder << getValueOfRegionOrder();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getRegionNameEn())
        {
            binder << getValueOfRegionNameEn();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getRegionShortnameEn())
        {
            binder << getValueOfRegionShortnameEn();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getHxLng())
        {
            binder << getValueOfHxLng();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getHxLat())
        {
            binder << getValueOfHxLat();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getBdLng())
        {
            binder << getValueOfBdLng();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getBdLat())
        {
            binder << getValueOfBdLat();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getSort())
        {
            binder << getValueOfSort();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[13])
    {
        if(getIsDelete())
        {
            binder << getValueOfIsDelete();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Region::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[0])
    {
        ret.push_back(getColumnName(0));
    }
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    if(dirtyFlag_[8])
    {
        ret.push_back(getColumnName(8));
    }
    if(dirtyFlag_[9])
    {
        ret.push_back(getColumnName(9));
    }
    if(dirtyFlag_[10])
    {
        ret.push_back(getColumnName(10));
    }
    if(dirtyFlag_[11])
    {
        ret.push_back(getColumnName(11));
    }
    if(dirtyFlag_[12])
    {
        ret.push_back(getColumnName(12));
    }
    if(dirtyFlag_[13])
    {
        ret.push_back(getColumnName(13));
    }
    return ret;
}

void Region::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getId())
        {
            binder << getValueOfId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getRegionCode())
        {
            binder << getValueOfRegionCode();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getRegionName())
        {
            binder << getValueOfRegionName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getParentId())
        {
            binder << getValueOfParentId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getRegionLevel())
        {
            binder << getValueOfRegionLevel();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getRegionOrder())
        {
            binder << getValueOfRegionOrder();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getRegionNameEn())
        {
            binder << getValueOfRegionNameEn();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getRegionShortnameEn())
        {
            binder << getValueOfRegionShortnameEn();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getHxLng())
        {
            binder << getValueOfHxLng();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getHxLat())
        {
            binder << getValueOfHxLat();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getBdLng())
        {
            binder << getValueOfBdLng();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getBdLat())
        {
            binder << getValueOfBdLat();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getSort())
        {
            binder << getValueOfSort();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[13])
    {
        if(getIsDelete())
        {
            binder << getValueOfIsDelete();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Region::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=(Json::UInt64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getRegionCode())
    {
        ret["region_code"]=(Json::UInt64)getValueOfRegionCode();
    }
    else
    {
        ret["region_code"]=Json::Value();
    }
    if(getRegionName())
    {
        ret["region_name"]=getValueOfRegionName();
    }
    else
    {
        ret["region_name"]=Json::Value();
    }
    if(getParentId())
    {
        ret["parent_id"]=getValueOfParentId();
    }
    else
    {
        ret["parent_id"]=Json::Value();
    }
    if(getRegionLevel())
    {
        ret["region_level"]=getValueOfRegionLevel();
    }
    else
    {
        ret["region_level"]=Json::Value();
    }
    if(getRegionOrder())
    {
        ret["region_order"]=getValueOfRegionOrder();
    }
    else
    {
        ret["region_order"]=Json::Value();
    }
    if(getRegionNameEn())
    {
        ret["region_name_en"]=getValueOfRegionNameEn();
    }
    else
    {
        ret["region_name_en"]=Json::Value();
    }
    if(getRegionShortnameEn())
    {
        ret["region_shortname_en"]=getValueOfRegionShortnameEn();
    }
    else
    {
        ret["region_shortname_en"]=Json::Value();
    }
    if(getHxLng())
    {
        ret["hx_lng"]=getValueOfHxLng();
    }
    else
    {
        ret["hx_lng"]=Json::Value();
    }
    if(getHxLat())
    {
        ret["hx_lat"]=getValueOfHxLat();
    }
    else
    {
        ret["hx_lat"]=Json::Value();
    }
    if(getBdLng())
    {
        ret["bd_lng"]=getValueOfBdLng();
    }
    else
    {
        ret["bd_lng"]=Json::Value();
    }
    if(getBdLat())
    {
        ret["bd_lat"]=getValueOfBdLat();
    }
    else
    {
        ret["bd_lat"]=Json::Value();
    }
    if(getSort())
    {
        ret["sort"]=getValueOfSort();
    }
    else
    {
        ret["sort"]=Json::Value();
    }
    if(getIsDelete())
    {
        ret["is_delete"]=getValueOfIsDelete();
    }
    else
    {
        ret["is_delete"]=Json::Value();
    }
    return ret;
}

Json::Value Region::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 14)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=(Json::UInt64)getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getRegionCode())
            {
                ret[pMasqueradingVector[1]]=(Json::UInt64)getValueOfRegionCode();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getRegionName())
            {
                ret[pMasqueradingVector[2]]=getValueOfRegionName();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getParentId())
            {
                ret[pMasqueradingVector[3]]=getValueOfParentId();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getRegionLevel())
            {
                ret[pMasqueradingVector[4]]=getValueOfRegionLevel();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getRegionOrder())
            {
                ret[pMasqueradingVector[5]]=getValueOfRegionOrder();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getRegionNameEn())
            {
                ret[pMasqueradingVector[6]]=getValueOfRegionNameEn();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getRegionShortnameEn())
            {
                ret[pMasqueradingVector[7]]=getValueOfRegionShortnameEn();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[8].empty())
        {
            if(getHxLng())
            {
                ret[pMasqueradingVector[8]]=getValueOfHxLng();
            }
            else
            {
                ret[pMasqueradingVector[8]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[9].empty())
        {
            if(getHxLat())
            {
                ret[pMasqueradingVector[9]]=getValueOfHxLat();
            }
            else
            {
                ret[pMasqueradingVector[9]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[10].empty())
        {
            if(getBdLng())
            {
                ret[pMasqueradingVector[10]]=getValueOfBdLng();
            }
            else
            {
                ret[pMasqueradingVector[10]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[11].empty())
        {
            if(getBdLat())
            {
                ret[pMasqueradingVector[11]]=getValueOfBdLat();
            }
            else
            {
                ret[pMasqueradingVector[11]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[12].empty())
        {
            if(getSort())
            {
                ret[pMasqueradingVector[12]]=getValueOfSort();
            }
            else
            {
                ret[pMasqueradingVector[12]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[13].empty())
        {
            if(getIsDelete())
            {
                ret[pMasqueradingVector[13]]=getValueOfIsDelete();
            }
            else
            {
                ret[pMasqueradingVector[13]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=(Json::UInt64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getRegionCode())
    {
        ret["region_code"]=(Json::UInt64)getValueOfRegionCode();
    }
    else
    {
        ret["region_code"]=Json::Value();
    }
    if(getRegionName())
    {
        ret["region_name"]=getValueOfRegionName();
    }
    else
    {
        ret["region_name"]=Json::Value();
    }
    if(getParentId())
    {
        ret["parent_id"]=getValueOfParentId();
    }
    else
    {
        ret["parent_id"]=Json::Value();
    }
    if(getRegionLevel())
    {
        ret["region_level"]=getValueOfRegionLevel();
    }
    else
    {
        ret["region_level"]=Json::Value();
    }
    if(getRegionOrder())
    {
        ret["region_order"]=getValueOfRegionOrder();
    }
    else
    {
        ret["region_order"]=Json::Value();
    }
    if(getRegionNameEn())
    {
        ret["region_name_en"]=getValueOfRegionNameEn();
    }
    else
    {
        ret["region_name_en"]=Json::Value();
    }
    if(getRegionShortnameEn())
    {
        ret["region_shortname_en"]=getValueOfRegionShortnameEn();
    }
    else
    {
        ret["region_shortname_en"]=Json::Value();
    }
    if(getHxLng())
    {
        ret["hx_lng"]=getValueOfHxLng();
    }
    else
    {
        ret["hx_lng"]=Json::Value();
    }
    if(getHxLat())
    {
        ret["hx_lat"]=getValueOfHxLat();
    }
    else
    {
        ret["hx_lat"]=Json::Value();
    }
    if(getBdLng())
    {
        ret["bd_lng"]=getValueOfBdLng();
    }
    else
    {
        ret["bd_lng"]=Json::Value();
    }
    if(getBdLat())
    {
        ret["bd_lat"]=getValueOfBdLat();
    }
    else
    {
        ret["bd_lat"]=Json::Value();
    }
    if(getSort())
    {
        ret["sort"]=getValueOfSort();
    }
    else
    {
        ret["sort"]=Json::Value();
    }
    if(getIsDelete())
    {
        ret["is_delete"]=getValueOfIsDelete();
    }
    else
    {
        ret["is_delete"]=Json::Value();
    }
    return ret;
}

bool Region::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    else
    {
        err="The id column cannot be null";
        return false;
    }
    if(pJson.isMember("region_code"))
    {
        if(!validJsonOfField(1, "region_code", pJson["region_code"], err, true))
            return false;
    }
    else
    {
        err="The region_code column cannot be null";
        return false;
    }
    if(pJson.isMember("region_name"))
    {
        if(!validJsonOfField(2, "region_name", pJson["region_name"], err, true))
            return false;
    }
    else
    {
        err="The region_name column cannot be null";
        return false;
    }
    if(pJson.isMember("parent_id"))
    {
        if(!validJsonOfField(3, "parent_id", pJson["parent_id"], err, true))
            return false;
    }
    else
    {
        err="The parent_id column cannot be null";
        return false;
    }
    if(pJson.isMember("region_level"))
    {
        if(!validJsonOfField(4, "region_level", pJson["region_level"], err, true))
            return false;
    }
    else
    {
        err="The region_level column cannot be null";
        return false;
    }
    if(pJson.isMember("region_order"))
    {
        if(!validJsonOfField(5, "region_order", pJson["region_order"], err, true))
            return false;
    }
    else
    {
        err="The region_order column cannot be null";
        return false;
    }
    if(pJson.isMember("region_name_en"))
    {
        if(!validJsonOfField(6, "region_name_en", pJson["region_name_en"], err, true))
            return false;
    }
    else
    {
        err="The region_name_en column cannot be null";
        return false;
    }
    if(pJson.isMember("region_shortname_en"))
    {
        if(!validJsonOfField(7, "region_shortname_en", pJson["region_shortname_en"], err, true))
            return false;
    }
    else
    {
        err="The region_shortname_en column cannot be null";
        return false;
    }
    if(pJson.isMember("hx_lng"))
    {
        if(!validJsonOfField(8, "hx_lng", pJson["hx_lng"], err, true))
            return false;
    }
    if(pJson.isMember("hx_lat"))
    {
        if(!validJsonOfField(9, "hx_lat", pJson["hx_lat"], err, true))
            return false;
    }
    if(pJson.isMember("bd_lng"))
    {
        if(!validJsonOfField(10, "bd_lng", pJson["bd_lng"], err, true))
            return false;
    }
    if(pJson.isMember("bd_lat"))
    {
        if(!validJsonOfField(11, "bd_lat", pJson["bd_lat"], err, true))
            return false;
    }
    if(pJson.isMember("sort"))
    {
        if(!validJsonOfField(12, "sort", pJson["sort"], err, true))
            return false;
    }
    if(pJson.isMember("is_delete"))
    {
        if(!validJsonOfField(13, "is_delete", pJson["is_delete"], err, true))
            return false;
    }
    return true;
}
bool Region::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                const std::vector<std::string> &pMasqueradingVector,
                                                std::string &err)
{
    if(pMasqueradingVector.size() != 14)
    {
        err = "Bad masquerading vector";
        return false;
    }
    if(!pMasqueradingVector[0].empty())
    {
        if(pJson.isMember(pMasqueradingVector[0]))
        {
            if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                return false;
        }
        else
        {
            err="The " + pMasqueradingVector[0] + " column cannot be null";
            return false;
        }
    }
    if(!pMasqueradingVector[1].empty())
    {
        if(pJson.isMember(pMasqueradingVector[1]))
        {
            if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                return false;
        }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
    }
    if(!pMasqueradingVector[2].empty())
    {
        if(pJson.isMember(pMasqueradingVector[2]))
        {
            if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                return false;
        }
        else
        {
            err="The " + pMasqueradingVector[2] + " column cannot be null";
            return false;
        }
    }
    if(!pMasqueradingVector[3].empty())
    {
        if(pJson.isMember(pMasqueradingVector[3]))
        {
            if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                return false;
        }
        else
        {
            err="The " + pMasqueradingVector[3] + " column cannot be null";
            return false;
        }
    }
    if(!pMasqueradingVector[4].empty())
    {
        if(pJson.isMember(pMasqueradingVector[4]))
        {
            if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                return false;
        }
        else
        {
            err="The " + pMasqueradingVector[4] + " column cannot be null";
            return false;
        }
    }
    if(!pMasqueradingVector[5].empty())
    {
        if(pJson.isMember(pMasqueradingVector[5]))
        {
            if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                return false;
        }
        else
        {
            err="The " + pMasqueradingVector[5] + " column cannot be null";
            return false;
        }
    }
    if(!pMasqueradingVector[6].empty())
    {
        if(pJson.isMember(pMasqueradingVector[6]))
        {
            if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                return false;
        }
        else
        {
            err="The " + pMasqueradingVector[6] + " column cannot be null";
            return false;
        }
    }
    if(!pMasqueradingVector[7].empty())
    {
        if(pJson.isMember(pMasqueradingVector[7]))
        {
            if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                return false;
        }
        else
        {
            err="The " + pMasqueradingVector[7] + " column cannot be null";
            return false;
        }
    }
    if(!pMasqueradingVector[8].empty())
    {
        if(pJson.isMember(pMasqueradingVector[8]))
        {
            if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[9].empty())
    {
        if(pJson.isMember(pMasqueradingVector[9]))
        {
            if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[10].empty())
    {
        if(pJson.isMember(pMasqueradingVector[10]))
        {
            if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[11].empty())
    {
        if(pJson.isMember(pMasqueradingVector[11]))
        {
            if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[12].empty())
    {
        if(pJson.isMember(pMasqueradingVector[12]))
        {
            if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[13].empty())
    {
        if(pJson.isMember(pMasqueradingVector[13]))
        {
            if(!validJsonOfField(13, pMasqueradingVector[13], pJson[pMasqueradingVector[13]], err, true))
                return false;
        }
    }
    return true;
}
bool Region::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("region_code"))
    {
        if(!validJsonOfField(1, "region_code", pJson["region_code"], err, false))
            return false;
    }
    if(pJson.isMember("region_name"))
    {
        if(!validJsonOfField(2, "region_name", pJson["region_name"], err, false))
            return false;
    }
    if(pJson.isMember("parent_id"))
    {
        if(!validJsonOfField(3, "parent_id", pJson["parent_id"], err, false))
            return false;
    }
    if(pJson.isMember("region_level"))
    {
        if(!validJsonOfField(4, "region_level", pJson["region_level"], err, false))
            return false;
    }
    if(pJson.isMember("region_order"))
    {
        if(!validJsonOfField(5, "region_order", pJson["region_order"], err, false))
            return false;
    }
    if(pJson.isMember("region_name_en"))
    {
        if(!validJsonOfField(6, "region_name_en", pJson["region_name_en"], err, false))
            return false;
    }
    if(pJson.isMember("region_shortname_en"))
    {
        if(!validJsonOfField(7, "region_shortname_en", pJson["region_shortname_en"], err, false))
            return false;
    }
    if(pJson.isMember("hx_lng"))
    {
        if(!validJsonOfField(8, "hx_lng", pJson["hx_lng"], err, false))
            return false;
    }
    if(pJson.isMember("hx_lat"))
    {
        if(!validJsonOfField(9, "hx_lat", pJson["hx_lat"], err, false))
            return false;
    }
    if(pJson.isMember("bd_lng"))
    {
        if(!validJsonOfField(10, "bd_lng", pJson["bd_lng"], err, false))
            return false;
    }
    if(pJson.isMember("bd_lat"))
    {
        if(!validJsonOfField(11, "bd_lat", pJson["bd_lat"], err, false))
            return false;
    }
    if(pJson.isMember("sort"))
    {
        if(!validJsonOfField(12, "sort", pJson["sort"], err, false))
            return false;
    }
    if(pJson.isMember("is_delete"))
    {
        if(!validJsonOfField(13, "is_delete", pJson["is_delete"], err, false))
            return false;
    }
    return true;
}
bool Region::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                              const std::vector<std::string> &pMasqueradingVector,
                                              std::string &err)
{
    if(pMasqueradingVector.size() != 14)
    {
        err = "Bad masquerading vector";
        return false;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
            return false;
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
            return false;
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
            return false;
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
            return false;
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
            return false;
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
            return false;
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
            return false;
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, false))
            return false;
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, false))
            return false;
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, false))
            return false;
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, false))
            return false;
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, false))
            return false;
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        if(!validJsonOfField(13, pMasqueradingVector[13], pJson[pMasqueradingVector[13]], err, false))
            return false;
    }
    return true;
}
bool Region::validJsonOfField(size_t index,
                              const std::string &fieldName,
                              const Json::Value &pJson, 
                              std::string &err, 
                              bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 100)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 100)";
                return false;               
            }

            break;
        case 3:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isNumeric())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isNumeric())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 5:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isNumeric())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 6:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 100)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 100)";
                return false;               
            }

            break;
        case 7:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 10)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 10)";
                return false;               
            }

            break;
        case 8:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 20)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 20)";
                return false;               
            }

            break;
        case 9:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 20)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 20)";
                return false;               
            }

            break;
        case 10:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 20)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 20)";
                return false;               
            }

            break;
        case 11:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 20)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 20)";
                return false;               
            }

            break;
        case 12:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 13:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
     
        default:
            err="Internal error in the server";
            return false;
            break;
    }
    return true;
}
