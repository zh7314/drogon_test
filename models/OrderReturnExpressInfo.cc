/**
 *
 *  OrderReturnExpressInfo.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "OrderReturnExpressInfo.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::v2;

const std::string OrderReturnExpressInfo::Cols::_id = "id";
const std::string OrderReturnExpressInfo::Cols::_express_number = "express_number";
const std::string OrderReturnExpressInfo::Cols::_express_type = "express_type";
const std::string OrderReturnExpressInfo::Cols::_express_name = "express_name";
const std::string OrderReturnExpressInfo::Cols::_express_com = "express_com";
const std::string OrderReturnExpressInfo::Cols::_express_nu = "express_nu";
const std::string OrderReturnExpressInfo::Cols::_express_self = "express_self";
const std::string OrderReturnExpressInfo::Cols::_express_self_number = "express_self_number";
const std::string OrderReturnExpressInfo::Cols::_remark = "remark";
const std::string OrderReturnExpressInfo::Cols::_admin_id = "admin_id";
const std::string OrderReturnExpressInfo::Cols::_user_id = "user_id";
const std::string OrderReturnExpressInfo::Cols::_status = "status";
const std::string OrderReturnExpressInfo::Cols::_is_cancel = "is_cancel";
const std::string OrderReturnExpressInfo::Cols::_shop_id = "shop_id";
const std::string OrderReturnExpressInfo::Cols::_order_return_flag = "order_return_flag";
const std::string OrderReturnExpressInfo::Cols::_update_time = "update_time";
const std::string OrderReturnExpressInfo::Cols::_create_time = "create_time";
const std::string OrderReturnExpressInfo::Cols::_order_return_id = "order_return_id";
const std::string OrderReturnExpressInfo::Cols::_order_return_sku_id = "order_return_sku_id";
const std::string OrderReturnExpressInfo::Cols::_flag_sku_id = "flag_sku_id";
const std::string OrderReturnExpressInfo::primaryKeyName = "id";
const bool OrderReturnExpressInfo::hasPrimaryKey = true;
const std::string OrderReturnExpressInfo::tableName = "order_return_express_info";

const std::vector<typename OrderReturnExpressInfo::MetaData> OrderReturnExpressInfo::metaData_={
{"id","uint64_t","bigint(20) unsigned",8,1,1,1},
{"express_number","std::string","decimal(32,5)",0,0,0,1},
{"express_type","uint8_t","tinyint(1) unsigned",1,0,0,1},
{"express_name","std::string","varchar(20)",20,0,0,0},
{"express_com","std::string","varchar(100)",100,0,0,0},
{"express_nu","std::string","varchar(100)",100,0,0,0},
{"express_self","std::string","text",0,0,0,0},
{"express_self_number","std::string","varchar(32)",32,0,0,0},
{"remark","std::string","varchar(200)",200,0,0,0},
{"admin_id","uint64_t","bigint(20) unsigned",8,0,0,1},
{"user_id","uint64_t","bigint(20) unsigned",8,0,0,1},
{"status","uint8_t","tinyint(1) unsigned",1,0,0,1},
{"is_cancel","uint8_t","tinyint(1) unsigned",1,0,0,1},
{"shop_id","uint64_t","bigint(20) unsigned",8,0,0,1},
{"order_return_flag","int8_t","tinyint(1)",1,0,0,1},
{"update_time","::trantor::Date","datetime",0,0,0,1},
{"create_time","::trantor::Date","datetime",0,0,0,1},
{"order_return_id","uint64_t","bigint(20) unsigned",8,0,0,1},
{"order_return_sku_id","uint64_t","bigint(20) unsigned",8,0,0,1},
{"flag_sku_id","uint64_t","bigint(20) unsigned",8,0,0,1}
};
const std::string &OrderReturnExpressInfo::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
OrderReturnExpressInfo::OrderReturnExpressInfo(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<uint64_t>(r["id"].as<uint64_t>());
        }
        if(!r["express_number"].isNull())
        {
            expressNumber_=std::make_shared<std::string>(r["express_number"].as<std::string>());
        }
        if(!r["express_type"].isNull())
        {
            expressType_=std::make_shared<uint8_t>(r["express_type"].as<uint8_t>());
        }
        if(!r["express_name"].isNull())
        {
            expressName_=std::make_shared<std::string>(r["express_name"].as<std::string>());
        }
        if(!r["express_com"].isNull())
        {
            expressCom_=std::make_shared<std::string>(r["express_com"].as<std::string>());
        }
        if(!r["express_nu"].isNull())
        {
            expressNu_=std::make_shared<std::string>(r["express_nu"].as<std::string>());
        }
        if(!r["express_self"].isNull())
        {
            expressSelf_=std::make_shared<std::string>(r["express_self"].as<std::string>());
        }
        if(!r["express_self_number"].isNull())
        {
            expressSelfNumber_=std::make_shared<std::string>(r["express_self_number"].as<std::string>());
        }
        if(!r["remark"].isNull())
        {
            remark_=std::make_shared<std::string>(r["remark"].as<std::string>());
        }
        if(!r["admin_id"].isNull())
        {
            adminId_=std::make_shared<uint64_t>(r["admin_id"].as<uint64_t>());
        }
        if(!r["user_id"].isNull())
        {
            userId_=std::make_shared<uint64_t>(r["user_id"].as<uint64_t>());
        }
        if(!r["status"].isNull())
        {
            status_=std::make_shared<uint8_t>(r["status"].as<uint8_t>());
        }
        if(!r["is_cancel"].isNull())
        {
            isCancel_=std::make_shared<uint8_t>(r["is_cancel"].as<uint8_t>());
        }
        if(!r["shop_id"].isNull())
        {
            shopId_=std::make_shared<uint64_t>(r["shop_id"].as<uint64_t>());
        }
        if(!r["order_return_flag"].isNull())
        {
            orderReturnFlag_=std::make_shared<int8_t>(r["order_return_flag"].as<int8_t>());
        }
        if(!r["update_time"].isNull())
        {
            auto timeStr = r["update_time"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        if(!r["create_time"].isNull())
        {
            auto timeStr = r["create_time"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        if(!r["order_return_id"].isNull())
        {
            orderReturnId_=std::make_shared<uint64_t>(r["order_return_id"].as<uint64_t>());
        }
        if(!r["order_return_sku_id"].isNull())
        {
            orderReturnSkuId_=std::make_shared<uint64_t>(r["order_return_sku_id"].as<uint64_t>());
        }
        if(!r["flag_sku_id"].isNull())
        {
            flagSkuId_=std::make_shared<uint64_t>(r["flag_sku_id"].as<uint64_t>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 20 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            expressNumber_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            expressType_=std::make_shared<uint8_t>(r[index].as<uint8_t>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            expressName_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            expressCom_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            expressNu_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            expressSelf_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            expressSelfNumber_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 8;
        if(!r[index].isNull())
        {
            remark_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 9;
        if(!r[index].isNull())
        {
            adminId_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 10;
        if(!r[index].isNull())
        {
            userId_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 11;
        if(!r[index].isNull())
        {
            status_=std::make_shared<uint8_t>(r[index].as<uint8_t>());
        }
        index = offset + 12;
        if(!r[index].isNull())
        {
            isCancel_=std::make_shared<uint8_t>(r[index].as<uint8_t>());
        }
        index = offset + 13;
        if(!r[index].isNull())
        {
            shopId_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 14;
        if(!r[index].isNull())
        {
            orderReturnFlag_=std::make_shared<int8_t>(r[index].as<int8_t>());
        }
        index = offset + 15;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        index = offset + 16;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        index = offset + 17;
        if(!r[index].isNull())
        {
            orderReturnId_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 18;
        if(!r[index].isNull())
        {
            orderReturnSkuId_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 19;
        if(!r[index].isNull())
        {
            flagSkuId_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
    }

}

OrderReturnExpressInfo::OrderReturnExpressInfo(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 20)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            expressNumber_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            expressType_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[2]].asUInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            expressName_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            expressCom_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            expressNu_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            expressSelf_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            expressSelfNumber_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            remark_=std::make_shared<std::string>(pJson[pMasqueradingVector[8]].asString());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            adminId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[9]].asUInt64());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            userId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[10]].asUInt64());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            status_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[11]].asUInt64());
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            isCancel_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[12]].asUInt64());
        }
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        dirtyFlag_[13] = true;
        if(!pJson[pMasqueradingVector[13]].isNull())
        {
            shopId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[13]].asUInt64());
        }
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        dirtyFlag_[14] = true;
        if(!pJson[pMasqueradingVector[14]].isNull())
        {
            orderReturnFlag_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[14]].asInt64());
        }
    }
    if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
    {
        dirtyFlag_[15] = true;
        if(!pJson[pMasqueradingVector[15]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[15]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[16].empty() && pJson.isMember(pMasqueradingVector[16]))
    {
        dirtyFlag_[16] = true;
        if(!pJson[pMasqueradingVector[16]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[16]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[17].empty() && pJson.isMember(pMasqueradingVector[17]))
    {
        dirtyFlag_[17] = true;
        if(!pJson[pMasqueradingVector[17]].isNull())
        {
            orderReturnId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[17]].asUInt64());
        }
    }
    if(!pMasqueradingVector[18].empty() && pJson.isMember(pMasqueradingVector[18]))
    {
        dirtyFlag_[18] = true;
        if(!pJson[pMasqueradingVector[18]].isNull())
        {
            orderReturnSkuId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[18]].asUInt64());
        }
    }
    if(!pMasqueradingVector[19].empty() && pJson.isMember(pMasqueradingVector[19]))
    {
        dirtyFlag_[19] = true;
        if(!pJson[pMasqueradingVector[19]].isNull())
        {
            flagSkuId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[19]].asUInt64());
        }
    }
}

OrderReturnExpressInfo::OrderReturnExpressInfo(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson["id"].asUInt64());
        }
    }
    if(pJson.isMember("express_number"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["express_number"].isNull())
        {
            expressNumber_=std::make_shared<std::string>(pJson["express_number"].asString());
        }
    }
    if(pJson.isMember("express_type"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["express_type"].isNull())
        {
            expressType_=std::make_shared<uint8_t>((uint8_t)pJson["express_type"].asUInt64());
        }
    }
    if(pJson.isMember("express_name"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["express_name"].isNull())
        {
            expressName_=std::make_shared<std::string>(pJson["express_name"].asString());
        }
    }
    if(pJson.isMember("express_com"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["express_com"].isNull())
        {
            expressCom_=std::make_shared<std::string>(pJson["express_com"].asString());
        }
    }
    if(pJson.isMember("express_nu"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["express_nu"].isNull())
        {
            expressNu_=std::make_shared<std::string>(pJson["express_nu"].asString());
        }
    }
    if(pJson.isMember("express_self"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["express_self"].isNull())
        {
            expressSelf_=std::make_shared<std::string>(pJson["express_self"].asString());
        }
    }
    if(pJson.isMember("express_self_number"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["express_self_number"].isNull())
        {
            expressSelfNumber_=std::make_shared<std::string>(pJson["express_self_number"].asString());
        }
    }
    if(pJson.isMember("remark"))
    {
        dirtyFlag_[8]=true;
        if(!pJson["remark"].isNull())
        {
            remark_=std::make_shared<std::string>(pJson["remark"].asString());
        }
    }
    if(pJson.isMember("admin_id"))
    {
        dirtyFlag_[9]=true;
        if(!pJson["admin_id"].isNull())
        {
            adminId_=std::make_shared<uint64_t>((uint64_t)pJson["admin_id"].asUInt64());
        }
    }
    if(pJson.isMember("user_id"))
    {
        dirtyFlag_[10]=true;
        if(!pJson["user_id"].isNull())
        {
            userId_=std::make_shared<uint64_t>((uint64_t)pJson["user_id"].asUInt64());
        }
    }
    if(pJson.isMember("status"))
    {
        dirtyFlag_[11]=true;
        if(!pJson["status"].isNull())
        {
            status_=std::make_shared<uint8_t>((uint8_t)pJson["status"].asUInt64());
        }
    }
    if(pJson.isMember("is_cancel"))
    {
        dirtyFlag_[12]=true;
        if(!pJson["is_cancel"].isNull())
        {
            isCancel_=std::make_shared<uint8_t>((uint8_t)pJson["is_cancel"].asUInt64());
        }
    }
    if(pJson.isMember("shop_id"))
    {
        dirtyFlag_[13]=true;
        if(!pJson["shop_id"].isNull())
        {
            shopId_=std::make_shared<uint64_t>((uint64_t)pJson["shop_id"].asUInt64());
        }
    }
    if(pJson.isMember("order_return_flag"))
    {
        dirtyFlag_[14]=true;
        if(!pJson["order_return_flag"].isNull())
        {
            orderReturnFlag_=std::make_shared<int8_t>((int8_t)pJson["order_return_flag"].asInt64());
        }
    }
    if(pJson.isMember("update_time"))
    {
        dirtyFlag_[15]=true;
        if(!pJson["update_time"].isNull())
        {
            auto timeStr = pJson["update_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("create_time"))
    {
        dirtyFlag_[16]=true;
        if(!pJson["create_time"].isNull())
        {
            auto timeStr = pJson["create_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("order_return_id"))
    {
        dirtyFlag_[17]=true;
        if(!pJson["order_return_id"].isNull())
        {
            orderReturnId_=std::make_shared<uint64_t>((uint64_t)pJson["order_return_id"].asUInt64());
        }
    }
    if(pJson.isMember("order_return_sku_id"))
    {
        dirtyFlag_[18]=true;
        if(!pJson["order_return_sku_id"].isNull())
        {
            orderReturnSkuId_=std::make_shared<uint64_t>((uint64_t)pJson["order_return_sku_id"].asUInt64());
        }
    }
    if(pJson.isMember("flag_sku_id"))
    {
        dirtyFlag_[19]=true;
        if(!pJson["flag_sku_id"].isNull())
        {
            flagSkuId_=std::make_shared<uint64_t>((uint64_t)pJson["flag_sku_id"].asUInt64());
        }
    }
}

void OrderReturnExpressInfo::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 20)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            expressNumber_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            expressType_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[2]].asUInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            expressName_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            expressCom_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            expressNu_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            expressSelf_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            expressSelfNumber_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            remark_=std::make_shared<std::string>(pJson[pMasqueradingVector[8]].asString());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            adminId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[9]].asUInt64());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            userId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[10]].asUInt64());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            status_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[11]].asUInt64());
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            isCancel_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[12]].asUInt64());
        }
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        dirtyFlag_[13] = true;
        if(!pJson[pMasqueradingVector[13]].isNull())
        {
            shopId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[13]].asUInt64());
        }
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        dirtyFlag_[14] = true;
        if(!pJson[pMasqueradingVector[14]].isNull())
        {
            orderReturnFlag_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[14]].asInt64());
        }
    }
    if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
    {
        dirtyFlag_[15] = true;
        if(!pJson[pMasqueradingVector[15]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[15]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[16].empty() && pJson.isMember(pMasqueradingVector[16]))
    {
        dirtyFlag_[16] = true;
        if(!pJson[pMasqueradingVector[16]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[16]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[17].empty() && pJson.isMember(pMasqueradingVector[17]))
    {
        dirtyFlag_[17] = true;
        if(!pJson[pMasqueradingVector[17]].isNull())
        {
            orderReturnId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[17]].asUInt64());
        }
    }
    if(!pMasqueradingVector[18].empty() && pJson.isMember(pMasqueradingVector[18]))
    {
        dirtyFlag_[18] = true;
        if(!pJson[pMasqueradingVector[18]].isNull())
        {
            orderReturnSkuId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[18]].asUInt64());
        }
    }
    if(!pMasqueradingVector[19].empty() && pJson.isMember(pMasqueradingVector[19]))
    {
        dirtyFlag_[19] = true;
        if(!pJson[pMasqueradingVector[19]].isNull())
        {
            flagSkuId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[19]].asUInt64());
        }
    }
}
                                                                    
void OrderReturnExpressInfo::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson["id"].asUInt64());
        }
    }
    if(pJson.isMember("express_number"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["express_number"].isNull())
        {
            expressNumber_=std::make_shared<std::string>(pJson["express_number"].asString());
        }
    }
    if(pJson.isMember("express_type"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["express_type"].isNull())
        {
            expressType_=std::make_shared<uint8_t>((uint8_t)pJson["express_type"].asUInt64());
        }
    }
    if(pJson.isMember("express_name"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["express_name"].isNull())
        {
            expressName_=std::make_shared<std::string>(pJson["express_name"].asString());
        }
    }
    if(pJson.isMember("express_com"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["express_com"].isNull())
        {
            expressCom_=std::make_shared<std::string>(pJson["express_com"].asString());
        }
    }
    if(pJson.isMember("express_nu"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["express_nu"].isNull())
        {
            expressNu_=std::make_shared<std::string>(pJson["express_nu"].asString());
        }
    }
    if(pJson.isMember("express_self"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["express_self"].isNull())
        {
            expressSelf_=std::make_shared<std::string>(pJson["express_self"].asString());
        }
    }
    if(pJson.isMember("express_self_number"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["express_self_number"].isNull())
        {
            expressSelfNumber_=std::make_shared<std::string>(pJson["express_self_number"].asString());
        }
    }
    if(pJson.isMember("remark"))
    {
        dirtyFlag_[8] = true;
        if(!pJson["remark"].isNull())
        {
            remark_=std::make_shared<std::string>(pJson["remark"].asString());
        }
    }
    if(pJson.isMember("admin_id"))
    {
        dirtyFlag_[9] = true;
        if(!pJson["admin_id"].isNull())
        {
            adminId_=std::make_shared<uint64_t>((uint64_t)pJson["admin_id"].asUInt64());
        }
    }
    if(pJson.isMember("user_id"))
    {
        dirtyFlag_[10] = true;
        if(!pJson["user_id"].isNull())
        {
            userId_=std::make_shared<uint64_t>((uint64_t)pJson["user_id"].asUInt64());
        }
    }
    if(pJson.isMember("status"))
    {
        dirtyFlag_[11] = true;
        if(!pJson["status"].isNull())
        {
            status_=std::make_shared<uint8_t>((uint8_t)pJson["status"].asUInt64());
        }
    }
    if(pJson.isMember("is_cancel"))
    {
        dirtyFlag_[12] = true;
        if(!pJson["is_cancel"].isNull())
        {
            isCancel_=std::make_shared<uint8_t>((uint8_t)pJson["is_cancel"].asUInt64());
        }
    }
    if(pJson.isMember("shop_id"))
    {
        dirtyFlag_[13] = true;
        if(!pJson["shop_id"].isNull())
        {
            shopId_=std::make_shared<uint64_t>((uint64_t)pJson["shop_id"].asUInt64());
        }
    }
    if(pJson.isMember("order_return_flag"))
    {
        dirtyFlag_[14] = true;
        if(!pJson["order_return_flag"].isNull())
        {
            orderReturnFlag_=std::make_shared<int8_t>((int8_t)pJson["order_return_flag"].asInt64());
        }
    }
    if(pJson.isMember("update_time"))
    {
        dirtyFlag_[15] = true;
        if(!pJson["update_time"].isNull())
        {
            auto timeStr = pJson["update_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("create_time"))
    {
        dirtyFlag_[16] = true;
        if(!pJson["create_time"].isNull())
        {
            auto timeStr = pJson["create_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("order_return_id"))
    {
        dirtyFlag_[17] = true;
        if(!pJson["order_return_id"].isNull())
        {
            orderReturnId_=std::make_shared<uint64_t>((uint64_t)pJson["order_return_id"].asUInt64());
        }
    }
    if(pJson.isMember("order_return_sku_id"))
    {
        dirtyFlag_[18] = true;
        if(!pJson["order_return_sku_id"].isNull())
        {
            orderReturnSkuId_=std::make_shared<uint64_t>((uint64_t)pJson["order_return_sku_id"].asUInt64());
        }
    }
    if(pJson.isMember("flag_sku_id"))
    {
        dirtyFlag_[19] = true;
        if(!pJson["flag_sku_id"].isNull())
        {
            flagSkuId_=std::make_shared<uint64_t>((uint64_t)pJson["flag_sku_id"].asUInt64());
        }
    }
}

const uint64_t &OrderReturnExpressInfo::getValueOfId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &OrderReturnExpressInfo::getId() const noexcept
{
    return id_;
}
void OrderReturnExpressInfo::setId(const uint64_t &pId) noexcept
{
    id_ = std::make_shared<uint64_t>(pId);
    dirtyFlag_[0] = true;
}



const typename OrderReturnExpressInfo::PrimaryKeyType & OrderReturnExpressInfo::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const std::string &OrderReturnExpressInfo::getValueOfExpressNumber() const noexcept
{
    const static std::string defaultValue = std::string();
    if(expressNumber_)
        return *expressNumber_;
    return defaultValue;
}
const std::shared_ptr<std::string> &OrderReturnExpressInfo::getExpressNumber() const noexcept
{
    return expressNumber_;
}
void OrderReturnExpressInfo::setExpressNumber(const std::string &pExpressNumber) noexcept
{
    expressNumber_ = std::make_shared<std::string>(pExpressNumber);
    dirtyFlag_[1] = true;
}
void OrderReturnExpressInfo::setExpressNumber(std::string &&pExpressNumber) noexcept
{
    expressNumber_ = std::make_shared<std::string>(std::move(pExpressNumber));
    dirtyFlag_[1] = true;
}




const uint8_t &OrderReturnExpressInfo::getValueOfExpressType() const noexcept
{
    const static uint8_t defaultValue = uint8_t();
    if(expressType_)
        return *expressType_;
    return defaultValue;
}
const std::shared_ptr<uint8_t> &OrderReturnExpressInfo::getExpressType() const noexcept
{
    return expressType_;
}
void OrderReturnExpressInfo::setExpressType(const uint8_t &pExpressType) noexcept
{
    expressType_ = std::make_shared<uint8_t>(pExpressType);
    dirtyFlag_[2] = true;
}




const std::string &OrderReturnExpressInfo::getValueOfExpressName() const noexcept
{
    const static std::string defaultValue = std::string();
    if(expressName_)
        return *expressName_;
    return defaultValue;
}
const std::shared_ptr<std::string> &OrderReturnExpressInfo::getExpressName() const noexcept
{
    return expressName_;
}
void OrderReturnExpressInfo::setExpressName(const std::string &pExpressName) noexcept
{
    expressName_ = std::make_shared<std::string>(pExpressName);
    dirtyFlag_[3] = true;
}
void OrderReturnExpressInfo::setExpressName(std::string &&pExpressName) noexcept
{
    expressName_ = std::make_shared<std::string>(std::move(pExpressName));
    dirtyFlag_[3] = true;
}


void OrderReturnExpressInfo::setExpressNameToNull() noexcept
{
    expressName_.reset();
    dirtyFlag_[3] = true;
}


const std::string &OrderReturnExpressInfo::getValueOfExpressCom() const noexcept
{
    const static std::string defaultValue = std::string();
    if(expressCom_)
        return *expressCom_;
    return defaultValue;
}
const std::shared_ptr<std::string> &OrderReturnExpressInfo::getExpressCom() const noexcept
{
    return expressCom_;
}
void OrderReturnExpressInfo::setExpressCom(const std::string &pExpressCom) noexcept
{
    expressCom_ = std::make_shared<std::string>(pExpressCom);
    dirtyFlag_[4] = true;
}
void OrderReturnExpressInfo::setExpressCom(std::string &&pExpressCom) noexcept
{
    expressCom_ = std::make_shared<std::string>(std::move(pExpressCom));
    dirtyFlag_[4] = true;
}


void OrderReturnExpressInfo::setExpressComToNull() noexcept
{
    expressCom_.reset();
    dirtyFlag_[4] = true;
}


const std::string &OrderReturnExpressInfo::getValueOfExpressNu() const noexcept
{
    const static std::string defaultValue = std::string();
    if(expressNu_)
        return *expressNu_;
    return defaultValue;
}
const std::shared_ptr<std::string> &OrderReturnExpressInfo::getExpressNu() const noexcept
{
    return expressNu_;
}
void OrderReturnExpressInfo::setExpressNu(const std::string &pExpressNu) noexcept
{
    expressNu_ = std::make_shared<std::string>(pExpressNu);
    dirtyFlag_[5] = true;
}
void OrderReturnExpressInfo::setExpressNu(std::string &&pExpressNu) noexcept
{
    expressNu_ = std::make_shared<std::string>(std::move(pExpressNu));
    dirtyFlag_[5] = true;
}


void OrderReturnExpressInfo::setExpressNuToNull() noexcept
{
    expressNu_.reset();
    dirtyFlag_[5] = true;
}


const std::string &OrderReturnExpressInfo::getValueOfExpressSelf() const noexcept
{
    const static std::string defaultValue = std::string();
    if(expressSelf_)
        return *expressSelf_;
    return defaultValue;
}
const std::shared_ptr<std::string> &OrderReturnExpressInfo::getExpressSelf() const noexcept
{
    return expressSelf_;
}
void OrderReturnExpressInfo::setExpressSelf(const std::string &pExpressSelf) noexcept
{
    expressSelf_ = std::make_shared<std::string>(pExpressSelf);
    dirtyFlag_[6] = true;
}
void OrderReturnExpressInfo::setExpressSelf(std::string &&pExpressSelf) noexcept
{
    expressSelf_ = std::make_shared<std::string>(std::move(pExpressSelf));
    dirtyFlag_[6] = true;
}


void OrderReturnExpressInfo::setExpressSelfToNull() noexcept
{
    expressSelf_.reset();
    dirtyFlag_[6] = true;
}


const std::string &OrderReturnExpressInfo::getValueOfExpressSelfNumber() const noexcept
{
    const static std::string defaultValue = std::string();
    if(expressSelfNumber_)
        return *expressSelfNumber_;
    return defaultValue;
}
const std::shared_ptr<std::string> &OrderReturnExpressInfo::getExpressSelfNumber() const noexcept
{
    return expressSelfNumber_;
}
void OrderReturnExpressInfo::setExpressSelfNumber(const std::string &pExpressSelfNumber) noexcept
{
    expressSelfNumber_ = std::make_shared<std::string>(pExpressSelfNumber);
    dirtyFlag_[7] = true;
}
void OrderReturnExpressInfo::setExpressSelfNumber(std::string &&pExpressSelfNumber) noexcept
{
    expressSelfNumber_ = std::make_shared<std::string>(std::move(pExpressSelfNumber));
    dirtyFlag_[7] = true;
}


void OrderReturnExpressInfo::setExpressSelfNumberToNull() noexcept
{
    expressSelfNumber_.reset();
    dirtyFlag_[7] = true;
}


const std::string &OrderReturnExpressInfo::getValueOfRemark() const noexcept
{
    const static std::string defaultValue = std::string();
    if(remark_)
        return *remark_;
    return defaultValue;
}
const std::shared_ptr<std::string> &OrderReturnExpressInfo::getRemark() const noexcept
{
    return remark_;
}
void OrderReturnExpressInfo::setRemark(const std::string &pRemark) noexcept
{
    remark_ = std::make_shared<std::string>(pRemark);
    dirtyFlag_[8] = true;
}
void OrderReturnExpressInfo::setRemark(std::string &&pRemark) noexcept
{
    remark_ = std::make_shared<std::string>(std::move(pRemark));
    dirtyFlag_[8] = true;
}


void OrderReturnExpressInfo::setRemarkToNull() noexcept
{
    remark_.reset();
    dirtyFlag_[8] = true;
}


const uint64_t &OrderReturnExpressInfo::getValueOfAdminId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(adminId_)
        return *adminId_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &OrderReturnExpressInfo::getAdminId() const noexcept
{
    return adminId_;
}
void OrderReturnExpressInfo::setAdminId(const uint64_t &pAdminId) noexcept
{
    adminId_ = std::make_shared<uint64_t>(pAdminId);
    dirtyFlag_[9] = true;
}




const uint64_t &OrderReturnExpressInfo::getValueOfUserId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(userId_)
        return *userId_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &OrderReturnExpressInfo::getUserId() const noexcept
{
    return userId_;
}
void OrderReturnExpressInfo::setUserId(const uint64_t &pUserId) noexcept
{
    userId_ = std::make_shared<uint64_t>(pUserId);
    dirtyFlag_[10] = true;
}




const uint8_t &OrderReturnExpressInfo::getValueOfStatus() const noexcept
{
    const static uint8_t defaultValue = uint8_t();
    if(status_)
        return *status_;
    return defaultValue;
}
const std::shared_ptr<uint8_t> &OrderReturnExpressInfo::getStatus() const noexcept
{
    return status_;
}
void OrderReturnExpressInfo::setStatus(const uint8_t &pStatus) noexcept
{
    status_ = std::make_shared<uint8_t>(pStatus);
    dirtyFlag_[11] = true;
}




const uint8_t &OrderReturnExpressInfo::getValueOfIsCancel() const noexcept
{
    const static uint8_t defaultValue = uint8_t();
    if(isCancel_)
        return *isCancel_;
    return defaultValue;
}
const std::shared_ptr<uint8_t> &OrderReturnExpressInfo::getIsCancel() const noexcept
{
    return isCancel_;
}
void OrderReturnExpressInfo::setIsCancel(const uint8_t &pIsCancel) noexcept
{
    isCancel_ = std::make_shared<uint8_t>(pIsCancel);
    dirtyFlag_[12] = true;
}




const uint64_t &OrderReturnExpressInfo::getValueOfShopId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(shopId_)
        return *shopId_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &OrderReturnExpressInfo::getShopId() const noexcept
{
    return shopId_;
}
void OrderReturnExpressInfo::setShopId(const uint64_t &pShopId) noexcept
{
    shopId_ = std::make_shared<uint64_t>(pShopId);
    dirtyFlag_[13] = true;
}




const int8_t &OrderReturnExpressInfo::getValueOfOrderReturnFlag() const noexcept
{
    const static int8_t defaultValue = int8_t();
    if(orderReturnFlag_)
        return *orderReturnFlag_;
    return defaultValue;
}
const std::shared_ptr<int8_t> &OrderReturnExpressInfo::getOrderReturnFlag() const noexcept
{
    return orderReturnFlag_;
}
void OrderReturnExpressInfo::setOrderReturnFlag(const int8_t &pOrderReturnFlag) noexcept
{
    orderReturnFlag_ = std::make_shared<int8_t>(pOrderReturnFlag);
    dirtyFlag_[14] = true;
}




const ::trantor::Date &OrderReturnExpressInfo::getValueOfUpdateTime() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(updateTime_)
        return *updateTime_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &OrderReturnExpressInfo::getUpdateTime() const noexcept
{
    return updateTime_;
}
void OrderReturnExpressInfo::setUpdateTime(const ::trantor::Date &pUpdateTime) noexcept
{
    updateTime_ = std::make_shared<::trantor::Date>(pUpdateTime);
    dirtyFlag_[15] = true;
}




const ::trantor::Date &OrderReturnExpressInfo::getValueOfCreateTime() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(createTime_)
        return *createTime_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &OrderReturnExpressInfo::getCreateTime() const noexcept
{
    return createTime_;
}
void OrderReturnExpressInfo::setCreateTime(const ::trantor::Date &pCreateTime) noexcept
{
    createTime_ = std::make_shared<::trantor::Date>(pCreateTime);
    dirtyFlag_[16] = true;
}




const uint64_t &OrderReturnExpressInfo::getValueOfOrderReturnId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(orderReturnId_)
        return *orderReturnId_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &OrderReturnExpressInfo::getOrderReturnId() const noexcept
{
    return orderReturnId_;
}
void OrderReturnExpressInfo::setOrderReturnId(const uint64_t &pOrderReturnId) noexcept
{
    orderReturnId_ = std::make_shared<uint64_t>(pOrderReturnId);
    dirtyFlag_[17] = true;
}




const uint64_t &OrderReturnExpressInfo::getValueOfOrderReturnSkuId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(orderReturnSkuId_)
        return *orderReturnSkuId_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &OrderReturnExpressInfo::getOrderReturnSkuId() const noexcept
{
    return orderReturnSkuId_;
}
void OrderReturnExpressInfo::setOrderReturnSkuId(const uint64_t &pOrderReturnSkuId) noexcept
{
    orderReturnSkuId_ = std::make_shared<uint64_t>(pOrderReturnSkuId);
    dirtyFlag_[18] = true;
}




const uint64_t &OrderReturnExpressInfo::getValueOfFlagSkuId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(flagSkuId_)
        return *flagSkuId_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &OrderReturnExpressInfo::getFlagSkuId() const noexcept
{
    return flagSkuId_;
}
void OrderReturnExpressInfo::setFlagSkuId(const uint64_t &pFlagSkuId) noexcept
{
    flagSkuId_ = std::make_shared<uint64_t>(pFlagSkuId);
    dirtyFlag_[19] = true;
}




void OrderReturnExpressInfo::updateId(const uint64_t id)
{
    id_ = std::make_shared<uint64_t>(id);
}

const std::vector<std::string> &OrderReturnExpressInfo::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "express_number",
        "express_type",
        "express_name",
        "express_com",
        "express_nu",
        "express_self",
        "express_self_number",
        "remark",
        "admin_id",
        "user_id",
        "status",
        "is_cancel",
        "shop_id",
        "order_return_flag",
        "update_time",
        "create_time",
        "order_return_id",
        "order_return_sku_id",
        "flag_sku_id"
    };
    return inCols;
}

void OrderReturnExpressInfo::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getExpressNumber())
        {
            binder << getValueOfExpressNumber();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getExpressType())
        {
            binder << getValueOfExpressType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getExpressName())
        {
            binder << getValueOfExpressName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getExpressCom())
        {
            binder << getValueOfExpressCom();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getExpressNu())
        {
            binder << getValueOfExpressNu();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getExpressSelf())
        {
            binder << getValueOfExpressSelf();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getExpressSelfNumber())
        {
            binder << getValueOfExpressSelfNumber();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getRemark())
        {
            binder << getValueOfRemark();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getAdminId())
        {
            binder << getValueOfAdminId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getUserId())
        {
            binder << getValueOfUserId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getStatus())
        {
            binder << getValueOfStatus();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getIsCancel())
        {
            binder << getValueOfIsCancel();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[13])
    {
        if(getShopId())
        {
            binder << getValueOfShopId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[14])
    {
        if(getOrderReturnFlag())
        {
            binder << getValueOfOrderReturnFlag();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[15])
    {
        if(getUpdateTime())
        {
            binder << getValueOfUpdateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[16])
    {
        if(getCreateTime())
        {
            binder << getValueOfCreateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[17])
    {
        if(getOrderReturnId())
        {
            binder << getValueOfOrderReturnId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[18])
    {
        if(getOrderReturnSkuId())
        {
            binder << getValueOfOrderReturnSkuId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[19])
    {
        if(getFlagSkuId())
        {
            binder << getValueOfFlagSkuId();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> OrderReturnExpressInfo::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    if(dirtyFlag_[8])
    {
        ret.push_back(getColumnName(8));
    }
    if(dirtyFlag_[9])
    {
        ret.push_back(getColumnName(9));
    }
    if(dirtyFlag_[10])
    {
        ret.push_back(getColumnName(10));
    }
    if(dirtyFlag_[11])
    {
        ret.push_back(getColumnName(11));
    }
    if(dirtyFlag_[12])
    {
        ret.push_back(getColumnName(12));
    }
    if(dirtyFlag_[13])
    {
        ret.push_back(getColumnName(13));
    }
    if(dirtyFlag_[14])
    {
        ret.push_back(getColumnName(14));
    }
    if(dirtyFlag_[15])
    {
        ret.push_back(getColumnName(15));
    }
    if(dirtyFlag_[16])
    {
        ret.push_back(getColumnName(16));
    }
    if(dirtyFlag_[17])
    {
        ret.push_back(getColumnName(17));
    }
    if(dirtyFlag_[18])
    {
        ret.push_back(getColumnName(18));
    }
    if(dirtyFlag_[19])
    {
        ret.push_back(getColumnName(19));
    }
    return ret;
}

void OrderReturnExpressInfo::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getExpressNumber())
        {
            binder << getValueOfExpressNumber();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getExpressType())
        {
            binder << getValueOfExpressType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getExpressName())
        {
            binder << getValueOfExpressName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getExpressCom())
        {
            binder << getValueOfExpressCom();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getExpressNu())
        {
            binder << getValueOfExpressNu();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getExpressSelf())
        {
            binder << getValueOfExpressSelf();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getExpressSelfNumber())
        {
            binder << getValueOfExpressSelfNumber();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getRemark())
        {
            binder << getValueOfRemark();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getAdminId())
        {
            binder << getValueOfAdminId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getUserId())
        {
            binder << getValueOfUserId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getStatus())
        {
            binder << getValueOfStatus();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getIsCancel())
        {
            binder << getValueOfIsCancel();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[13])
    {
        if(getShopId())
        {
            binder << getValueOfShopId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[14])
    {
        if(getOrderReturnFlag())
        {
            binder << getValueOfOrderReturnFlag();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[15])
    {
        if(getUpdateTime())
        {
            binder << getValueOfUpdateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[16])
    {
        if(getCreateTime())
        {
            binder << getValueOfCreateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[17])
    {
        if(getOrderReturnId())
        {
            binder << getValueOfOrderReturnId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[18])
    {
        if(getOrderReturnSkuId())
        {
            binder << getValueOfOrderReturnSkuId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[19])
    {
        if(getFlagSkuId())
        {
            binder << getValueOfFlagSkuId();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value OrderReturnExpressInfo::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=(Json::UInt64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getExpressNumber())
    {
        ret["express_number"]=getValueOfExpressNumber();
    }
    else
    {
        ret["express_number"]=Json::Value();
    }
    if(getExpressType())
    {
        ret["express_type"]=getValueOfExpressType();
    }
    else
    {
        ret["express_type"]=Json::Value();
    }
    if(getExpressName())
    {
        ret["express_name"]=getValueOfExpressName();
    }
    else
    {
        ret["express_name"]=Json::Value();
    }
    if(getExpressCom())
    {
        ret["express_com"]=getValueOfExpressCom();
    }
    else
    {
        ret["express_com"]=Json::Value();
    }
    if(getExpressNu())
    {
        ret["express_nu"]=getValueOfExpressNu();
    }
    else
    {
        ret["express_nu"]=Json::Value();
    }
    if(getExpressSelf())
    {
        ret["express_self"]=getValueOfExpressSelf();
    }
    else
    {
        ret["express_self"]=Json::Value();
    }
    if(getExpressSelfNumber())
    {
        ret["express_self_number"]=getValueOfExpressSelfNumber();
    }
    else
    {
        ret["express_self_number"]=Json::Value();
    }
    if(getRemark())
    {
        ret["remark"]=getValueOfRemark();
    }
    else
    {
        ret["remark"]=Json::Value();
    }
    if(getAdminId())
    {
        ret["admin_id"]=(Json::UInt64)getValueOfAdminId();
    }
    else
    {
        ret["admin_id"]=Json::Value();
    }
    if(getUserId())
    {
        ret["user_id"]=(Json::UInt64)getValueOfUserId();
    }
    else
    {
        ret["user_id"]=Json::Value();
    }
    if(getStatus())
    {
        ret["status"]=getValueOfStatus();
    }
    else
    {
        ret["status"]=Json::Value();
    }
    if(getIsCancel())
    {
        ret["is_cancel"]=getValueOfIsCancel();
    }
    else
    {
        ret["is_cancel"]=Json::Value();
    }
    if(getShopId())
    {
        ret["shop_id"]=(Json::UInt64)getValueOfShopId();
    }
    else
    {
        ret["shop_id"]=Json::Value();
    }
    if(getOrderReturnFlag())
    {
        ret["order_return_flag"]=getValueOfOrderReturnFlag();
    }
    else
    {
        ret["order_return_flag"]=Json::Value();
    }
    if(getUpdateTime())
    {
        ret["update_time"]=getUpdateTime()->toDbStringLocal();
    }
    else
    {
        ret["update_time"]=Json::Value();
    }
    if(getCreateTime())
    {
        ret["create_time"]=getCreateTime()->toDbStringLocal();
    }
    else
    {
        ret["create_time"]=Json::Value();
    }
    if(getOrderReturnId())
    {
        ret["order_return_id"]=(Json::UInt64)getValueOfOrderReturnId();
    }
    else
    {
        ret["order_return_id"]=Json::Value();
    }
    if(getOrderReturnSkuId())
    {
        ret["order_return_sku_id"]=(Json::UInt64)getValueOfOrderReturnSkuId();
    }
    else
    {
        ret["order_return_sku_id"]=Json::Value();
    }
    if(getFlagSkuId())
    {
        ret["flag_sku_id"]=(Json::UInt64)getValueOfFlagSkuId();
    }
    else
    {
        ret["flag_sku_id"]=Json::Value();
    }
    return ret;
}

Json::Value OrderReturnExpressInfo::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 20)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=(Json::UInt64)getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getExpressNumber())
            {
                ret[pMasqueradingVector[1]]=getValueOfExpressNumber();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getExpressType())
            {
                ret[pMasqueradingVector[2]]=getValueOfExpressType();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getExpressName())
            {
                ret[pMasqueradingVector[3]]=getValueOfExpressName();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getExpressCom())
            {
                ret[pMasqueradingVector[4]]=getValueOfExpressCom();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getExpressNu())
            {
                ret[pMasqueradingVector[5]]=getValueOfExpressNu();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getExpressSelf())
            {
                ret[pMasqueradingVector[6]]=getValueOfExpressSelf();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getExpressSelfNumber())
            {
                ret[pMasqueradingVector[7]]=getValueOfExpressSelfNumber();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[8].empty())
        {
            if(getRemark())
            {
                ret[pMasqueradingVector[8]]=getValueOfRemark();
            }
            else
            {
                ret[pMasqueradingVector[8]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[9].empty())
        {
            if(getAdminId())
            {
                ret[pMasqueradingVector[9]]=(Json::UInt64)getValueOfAdminId();
            }
            else
            {
                ret[pMasqueradingVector[9]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[10].empty())
        {
            if(getUserId())
            {
                ret[pMasqueradingVector[10]]=(Json::UInt64)getValueOfUserId();
            }
            else
            {
                ret[pMasqueradingVector[10]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[11].empty())
        {
            if(getStatus())
            {
                ret[pMasqueradingVector[11]]=getValueOfStatus();
            }
            else
            {
                ret[pMasqueradingVector[11]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[12].empty())
        {
            if(getIsCancel())
            {
                ret[pMasqueradingVector[12]]=getValueOfIsCancel();
            }
            else
            {
                ret[pMasqueradingVector[12]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[13].empty())
        {
            if(getShopId())
            {
                ret[pMasqueradingVector[13]]=(Json::UInt64)getValueOfShopId();
            }
            else
            {
                ret[pMasqueradingVector[13]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[14].empty())
        {
            if(getOrderReturnFlag())
            {
                ret[pMasqueradingVector[14]]=getValueOfOrderReturnFlag();
            }
            else
            {
                ret[pMasqueradingVector[14]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[15].empty())
        {
            if(getUpdateTime())
            {
                ret[pMasqueradingVector[15]]=getUpdateTime()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[15]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[16].empty())
        {
            if(getCreateTime())
            {
                ret[pMasqueradingVector[16]]=getCreateTime()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[16]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[17].empty())
        {
            if(getOrderReturnId())
            {
                ret[pMasqueradingVector[17]]=(Json::UInt64)getValueOfOrderReturnId();
            }
            else
            {
                ret[pMasqueradingVector[17]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[18].empty())
        {
            if(getOrderReturnSkuId())
            {
                ret[pMasqueradingVector[18]]=(Json::UInt64)getValueOfOrderReturnSkuId();
            }
            else
            {
                ret[pMasqueradingVector[18]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[19].empty())
        {
            if(getFlagSkuId())
            {
                ret[pMasqueradingVector[19]]=(Json::UInt64)getValueOfFlagSkuId();
            }
            else
            {
                ret[pMasqueradingVector[19]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=(Json::UInt64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getExpressNumber())
    {
        ret["express_number"]=getValueOfExpressNumber();
    }
    else
    {
        ret["express_number"]=Json::Value();
    }
    if(getExpressType())
    {
        ret["express_type"]=getValueOfExpressType();
    }
    else
    {
        ret["express_type"]=Json::Value();
    }
    if(getExpressName())
    {
        ret["express_name"]=getValueOfExpressName();
    }
    else
    {
        ret["express_name"]=Json::Value();
    }
    if(getExpressCom())
    {
        ret["express_com"]=getValueOfExpressCom();
    }
    else
    {
        ret["express_com"]=Json::Value();
    }
    if(getExpressNu())
    {
        ret["express_nu"]=getValueOfExpressNu();
    }
    else
    {
        ret["express_nu"]=Json::Value();
    }
    if(getExpressSelf())
    {
        ret["express_self"]=getValueOfExpressSelf();
    }
    else
    {
        ret["express_self"]=Json::Value();
    }
    if(getExpressSelfNumber())
    {
        ret["express_self_number"]=getValueOfExpressSelfNumber();
    }
    else
    {
        ret["express_self_number"]=Json::Value();
    }
    if(getRemark())
    {
        ret["remark"]=getValueOfRemark();
    }
    else
    {
        ret["remark"]=Json::Value();
    }
    if(getAdminId())
    {
        ret["admin_id"]=(Json::UInt64)getValueOfAdminId();
    }
    else
    {
        ret["admin_id"]=Json::Value();
    }
    if(getUserId())
    {
        ret["user_id"]=(Json::UInt64)getValueOfUserId();
    }
    else
    {
        ret["user_id"]=Json::Value();
    }
    if(getStatus())
    {
        ret["status"]=getValueOfStatus();
    }
    else
    {
        ret["status"]=Json::Value();
    }
    if(getIsCancel())
    {
        ret["is_cancel"]=getValueOfIsCancel();
    }
    else
    {
        ret["is_cancel"]=Json::Value();
    }
    if(getShopId())
    {
        ret["shop_id"]=(Json::UInt64)getValueOfShopId();
    }
    else
    {
        ret["shop_id"]=Json::Value();
    }
    if(getOrderReturnFlag())
    {
        ret["order_return_flag"]=getValueOfOrderReturnFlag();
    }
    else
    {
        ret["order_return_flag"]=Json::Value();
    }
    if(getUpdateTime())
    {
        ret["update_time"]=getUpdateTime()->toDbStringLocal();
    }
    else
    {
        ret["update_time"]=Json::Value();
    }
    if(getCreateTime())
    {
        ret["create_time"]=getCreateTime()->toDbStringLocal();
    }
    else
    {
        ret["create_time"]=Json::Value();
    }
    if(getOrderReturnId())
    {
        ret["order_return_id"]=(Json::UInt64)getValueOfOrderReturnId();
    }
    else
    {
        ret["order_return_id"]=Json::Value();
    }
    if(getOrderReturnSkuId())
    {
        ret["order_return_sku_id"]=(Json::UInt64)getValueOfOrderReturnSkuId();
    }
    else
    {
        ret["order_return_sku_id"]=Json::Value();
    }
    if(getFlagSkuId())
    {
        ret["flag_sku_id"]=(Json::UInt64)getValueOfFlagSkuId();
    }
    else
    {
        ret["flag_sku_id"]=Json::Value();
    }
    return ret;
}

bool OrderReturnExpressInfo::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("express_number"))
    {
        if(!validJsonOfField(1, "express_number", pJson["express_number"], err, true))
            return false;
    }
    if(pJson.isMember("express_type"))
    {
        if(!validJsonOfField(2, "express_type", pJson["express_type"], err, true))
            return false;
    }
    if(pJson.isMember("express_name"))
    {
        if(!validJsonOfField(3, "express_name", pJson["express_name"], err, true))
            return false;
    }
    if(pJson.isMember("express_com"))
    {
        if(!validJsonOfField(4, "express_com", pJson["express_com"], err, true))
            return false;
    }
    if(pJson.isMember("express_nu"))
    {
        if(!validJsonOfField(5, "express_nu", pJson["express_nu"], err, true))
            return false;
    }
    if(pJson.isMember("express_self"))
    {
        if(!validJsonOfField(6, "express_self", pJson["express_self"], err, true))
            return false;
    }
    if(pJson.isMember("express_self_number"))
    {
        if(!validJsonOfField(7, "express_self_number", pJson["express_self_number"], err, true))
            return false;
    }
    if(pJson.isMember("remark"))
    {
        if(!validJsonOfField(8, "remark", pJson["remark"], err, true))
            return false;
    }
    if(pJson.isMember("admin_id"))
    {
        if(!validJsonOfField(9, "admin_id", pJson["admin_id"], err, true))
            return false;
    }
    if(pJson.isMember("user_id"))
    {
        if(!validJsonOfField(10, "user_id", pJson["user_id"], err, true))
            return false;
    }
    if(pJson.isMember("status"))
    {
        if(!validJsonOfField(11, "status", pJson["status"], err, true))
            return false;
    }
    if(pJson.isMember("is_cancel"))
    {
        if(!validJsonOfField(12, "is_cancel", pJson["is_cancel"], err, true))
            return false;
    }
    if(pJson.isMember("shop_id"))
    {
        if(!validJsonOfField(13, "shop_id", pJson["shop_id"], err, true))
            return false;
    }
    if(pJson.isMember("order_return_flag"))
    {
        if(!validJsonOfField(14, "order_return_flag", pJson["order_return_flag"], err, true))
            return false;
    }
    if(pJson.isMember("update_time"))
    {
        if(!validJsonOfField(15, "update_time", pJson["update_time"], err, true))
            return false;
    }
    if(pJson.isMember("create_time"))
    {
        if(!validJsonOfField(16, "create_time", pJson["create_time"], err, true))
            return false;
    }
    if(pJson.isMember("order_return_id"))
    {
        if(!validJsonOfField(17, "order_return_id", pJson["order_return_id"], err, true))
            return false;
    }
    if(pJson.isMember("order_return_sku_id"))
    {
        if(!validJsonOfField(18, "order_return_sku_id", pJson["order_return_sku_id"], err, true))
            return false;
    }
    if(pJson.isMember("flag_sku_id"))
    {
        if(!validJsonOfField(19, "flag_sku_id", pJson["flag_sku_id"], err, true))
            return false;
    }
    return true;
}
bool OrderReturnExpressInfo::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                                const std::vector<std::string> &pMasqueradingVector,
                                                                std::string &err)
{
    if(pMasqueradingVector.size() != 20)
    {
        err = "Bad masquerading vector";
        return false;
    }
    if(!pMasqueradingVector[0].empty())
    {
        if(pJson.isMember(pMasqueradingVector[0]))
        {
            if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[1].empty())
    {
        if(pJson.isMember(pMasqueradingVector[1]))
        {
            if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[2].empty())
    {
        if(pJson.isMember(pMasqueradingVector[2]))
        {
            if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[3].empty())
    {
        if(pJson.isMember(pMasqueradingVector[3]))
        {
            if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[4].empty())
    {
        if(pJson.isMember(pMasqueradingVector[4]))
        {
            if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[5].empty())
    {
        if(pJson.isMember(pMasqueradingVector[5]))
        {
            if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[6].empty())
    {
        if(pJson.isMember(pMasqueradingVector[6]))
        {
            if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[7].empty())
    {
        if(pJson.isMember(pMasqueradingVector[7]))
        {
            if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[8].empty())
    {
        if(pJson.isMember(pMasqueradingVector[8]))
        {
            if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[9].empty())
    {
        if(pJson.isMember(pMasqueradingVector[9]))
        {
            if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[10].empty())
    {
        if(pJson.isMember(pMasqueradingVector[10]))
        {
            if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[11].empty())
    {
        if(pJson.isMember(pMasqueradingVector[11]))
        {
            if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[12].empty())
    {
        if(pJson.isMember(pMasqueradingVector[12]))
        {
            if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[13].empty())
    {
        if(pJson.isMember(pMasqueradingVector[13]))
        {
            if(!validJsonOfField(13, pMasqueradingVector[13], pJson[pMasqueradingVector[13]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[14].empty())
    {
        if(pJson.isMember(pMasqueradingVector[14]))
        {
            if(!validJsonOfField(14, pMasqueradingVector[14], pJson[pMasqueradingVector[14]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[15].empty())
    {
        if(pJson.isMember(pMasqueradingVector[15]))
        {
            if(!validJsonOfField(15, pMasqueradingVector[15], pJson[pMasqueradingVector[15]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[16].empty())
    {
        if(pJson.isMember(pMasqueradingVector[16]))
        {
            if(!validJsonOfField(16, pMasqueradingVector[16], pJson[pMasqueradingVector[16]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[17].empty())
    {
        if(pJson.isMember(pMasqueradingVector[17]))
        {
            if(!validJsonOfField(17, pMasqueradingVector[17], pJson[pMasqueradingVector[17]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[18].empty())
    {
        if(pJson.isMember(pMasqueradingVector[18]))
        {
            if(!validJsonOfField(18, pMasqueradingVector[18], pJson[pMasqueradingVector[18]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[19].empty())
    {
        if(pJson.isMember(pMasqueradingVector[19]))
        {
            if(!validJsonOfField(19, pMasqueradingVector[19], pJson[pMasqueradingVector[19]], err, true))
                return false;
        }
    }
    return true;
}
bool OrderReturnExpressInfo::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("express_number"))
    {
        if(!validJsonOfField(1, "express_number", pJson["express_number"], err, false))
            return false;
    }
    if(pJson.isMember("express_type"))
    {
        if(!validJsonOfField(2, "express_type", pJson["express_type"], err, false))
            return false;
    }
    if(pJson.isMember("express_name"))
    {
        if(!validJsonOfField(3, "express_name", pJson["express_name"], err, false))
            return false;
    }
    if(pJson.isMember("express_com"))
    {
        if(!validJsonOfField(4, "express_com", pJson["express_com"], err, false))
            return false;
    }
    if(pJson.isMember("express_nu"))
    {
        if(!validJsonOfField(5, "express_nu", pJson["express_nu"], err, false))
            return false;
    }
    if(pJson.isMember("express_self"))
    {
        if(!validJsonOfField(6, "express_self", pJson["express_self"], err, false))
            return false;
    }
    if(pJson.isMember("express_self_number"))
    {
        if(!validJsonOfField(7, "express_self_number", pJson["express_self_number"], err, false))
            return false;
    }
    if(pJson.isMember("remark"))
    {
        if(!validJsonOfField(8, "remark", pJson["remark"], err, false))
            return false;
    }
    if(pJson.isMember("admin_id"))
    {
        if(!validJsonOfField(9, "admin_id", pJson["admin_id"], err, false))
            return false;
    }
    if(pJson.isMember("user_id"))
    {
        if(!validJsonOfField(10, "user_id", pJson["user_id"], err, false))
            return false;
    }
    if(pJson.isMember("status"))
    {
        if(!validJsonOfField(11, "status", pJson["status"], err, false))
            return false;
    }
    if(pJson.isMember("is_cancel"))
    {
        if(!validJsonOfField(12, "is_cancel", pJson["is_cancel"], err, false))
            return false;
    }
    if(pJson.isMember("shop_id"))
    {
        if(!validJsonOfField(13, "shop_id", pJson["shop_id"], err, false))
            return false;
    }
    if(pJson.isMember("order_return_flag"))
    {
        if(!validJsonOfField(14, "order_return_flag", pJson["order_return_flag"], err, false))
            return false;
    }
    if(pJson.isMember("update_time"))
    {
        if(!validJsonOfField(15, "update_time", pJson["update_time"], err, false))
            return false;
    }
    if(pJson.isMember("create_time"))
    {
        if(!validJsonOfField(16, "create_time", pJson["create_time"], err, false))
            return false;
    }
    if(pJson.isMember("order_return_id"))
    {
        if(!validJsonOfField(17, "order_return_id", pJson["order_return_id"], err, false))
            return false;
    }
    if(pJson.isMember("order_return_sku_id"))
    {
        if(!validJsonOfField(18, "order_return_sku_id", pJson["order_return_sku_id"], err, false))
            return false;
    }
    if(pJson.isMember("flag_sku_id"))
    {
        if(!validJsonOfField(19, "flag_sku_id", pJson["flag_sku_id"], err, false))
            return false;
    }
    return true;
}
bool OrderReturnExpressInfo::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                              const std::vector<std::string> &pMasqueradingVector,
                                                              std::string &err)
{
    if(pMasqueradingVector.size() != 20)
    {
        err = "Bad masquerading vector";
        return false;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
            return false;
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
            return false;
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
            return false;
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
            return false;
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
            return false;
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
            return false;
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
            return false;
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, false))
            return false;
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, false))
            return false;
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, false))
            return false;
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, false))
            return false;
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, false))
            return false;
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        if(!validJsonOfField(13, pMasqueradingVector[13], pJson[pMasqueradingVector[13]], err, false))
            return false;
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        if(!validJsonOfField(14, pMasqueradingVector[14], pJson[pMasqueradingVector[14]], err, false))
            return false;
    }
    if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
    {
        if(!validJsonOfField(15, pMasqueradingVector[15], pJson[pMasqueradingVector[15]], err, false))
            return false;
    }
    if(!pMasqueradingVector[16].empty() && pJson.isMember(pMasqueradingVector[16]))
    {
        if(!validJsonOfField(16, pMasqueradingVector[16], pJson[pMasqueradingVector[16]], err, false))
            return false;
    }
    if(!pMasqueradingVector[17].empty() && pJson.isMember(pMasqueradingVector[17]))
    {
        if(!validJsonOfField(17, pMasqueradingVector[17], pJson[pMasqueradingVector[17]], err, false))
            return false;
    }
    if(!pMasqueradingVector[18].empty() && pJson.isMember(pMasqueradingVector[18]))
    {
        if(!validJsonOfField(18, pMasqueradingVector[18], pJson[pMasqueradingVector[18]], err, false))
            return false;
    }
    if(!pMasqueradingVector[19].empty() && pJson.isMember(pMasqueradingVector[19]))
    {
        if(!validJsonOfField(19, pMasqueradingVector[19], pJson[pMasqueradingVector[19]], err, false))
            return false;
    }
    return true;
}
bool OrderReturnExpressInfo::validJsonOfField(size_t index,
                                              const std::string &fieldName,
                                              const Json::Value &pJson, 
                                              std::string &err, 
                                              bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }        
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 20)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 20)";
                return false;               
            }

            break;
        case 4:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 100)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 100)";
                return false;               
            }

            break;
        case 5:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 100)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 100)";
                return false;               
            }

            break;
        case 6:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 7:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 32)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 32)";
                return false;               
            }

            break;
        case 8:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 200)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 200)";
                return false;               
            }

            break;
        case 9:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 10:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 11:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 12:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 13:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 14:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 15:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 16:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 17:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 18:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 19:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
     
        default:
            err="Internal error in the server";
            return false;
            break;
    }
    return true;
}
