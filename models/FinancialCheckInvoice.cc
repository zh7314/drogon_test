/**
 *
 *  FinancialCheckInvoice.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "FinancialCheckInvoice.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::v2;

const std::string FinancialCheckInvoice::Cols::_id = "id";
const std::string FinancialCheckInvoice::Cols::_invoice_type = "invoice_type";
const std::string FinancialCheckInvoice::Cols::_in_out_storage_id = "in_out_storage_id";
const std::string FinancialCheckInvoice::Cols::_in_out_storage_sku_id = "in_out_storage_sku_id";
const std::string FinancialCheckInvoice::Cols::_shop_id = "shop_id";
const std::string FinancialCheckInvoice::Cols::_admin_id = "admin_id";
const std::string FinancialCheckInvoice::Cols::_create_time = "create_time";
const std::string FinancialCheckInvoice::Cols::_update_time = "update_time";
const std::string FinancialCheckInvoice::Cols::_is_delete = "is_delete";
const std::string FinancialCheckInvoice::Cols::_remark = "remark";
const std::string FinancialCheckInvoice::Cols::_is_check = "is_check";
const std::string FinancialCheckInvoice::Cols::_check_invoice_date = "check_invoice_date";
const std::string FinancialCheckInvoice::Cols::_check_invoice_price = "check_invoice_price";
const std::string FinancialCheckInvoice::Cols::_check_invoice_number = "check_invoice_number";
const std::string FinancialCheckInvoice::Cols::_product_category_id = "product_category_id";
const std::string FinancialCheckInvoice::Cols::_in_out_storage_date = "in_out_storage_date";
const std::string FinancialCheckInvoice::Cols::_company_id = "company_id";
const std::string FinancialCheckInvoice::Cols::_order_key = "order_key";
const std::string FinancialCheckInvoice::Cols::_confirm_check_invoice_date = "confirm_check_invoice_date";
const std::string FinancialCheckInvoice::Cols::_confirm_check_invoice_price = "confirm_check_invoice_price";
const std::string FinancialCheckInvoice::Cols::_confirm_check_invoice_number = "confirm_check_invoice_number";
const std::string FinancialCheckInvoice::Cols::_confirm_status = "confirm_status";
const std::string FinancialCheckInvoice::primaryKeyName = "id";
const bool FinancialCheckInvoice::hasPrimaryKey = true;
const std::string FinancialCheckInvoice::tableName = "financial_check_invoice";

const std::vector<typename FinancialCheckInvoice::MetaData> FinancialCheckInvoice::metaData_={
{"id","int64_t","bigint(20)",8,1,1,1},
{"invoice_type","uint8_t","tinyint(1) unsigned",1,0,0,1},
{"in_out_storage_id","uint64_t","bigint(20) unsigned",8,0,0,1},
{"in_out_storage_sku_id","uint64_t","bigint(20) unsigned",8,0,0,1},
{"shop_id","uint64_t","bigint(20) unsigned",8,0,0,1},
{"admin_id","uint64_t","bigint(20) unsigned",8,0,0,1},
{"create_time","::trantor::Date","datetime",0,0,0,0},
{"update_time","::trantor::Date","datetime",0,0,0,0},
{"is_delete","uint8_t","tinyint(1) unsigned",1,0,0,1},
{"remark","std::string","varchar(50)",50,0,0,0},
{"is_check","uint8_t","tinyint(1) unsigned",1,0,0,1},
{"check_invoice_date","::trantor::Date","date",0,0,0,1},
{"check_invoice_price","std::string","decimal(32,5)",0,0,0,1},
{"check_invoice_number","std::string","decimal(32,5)",0,0,0,1},
{"product_category_id","int64_t","bigint(20)",8,0,0,1},
{"in_out_storage_date","::trantor::Date","date",0,0,0,1},
{"company_id","int64_t","bigint(20)",8,0,0,1},
{"order_key","std::string","varchar(50)",50,0,0,0},
{"confirm_check_invoice_date","::trantor::Date","date",0,0,0,0},
{"confirm_check_invoice_price","std::string","decimal(32,5)",0,0,0,0},
{"confirm_check_invoice_number","std::string","decimal(32,5)",0,0,0,0},
{"confirm_status","uint8_t","tinyint(1) unsigned",1,0,0,1}
};
const std::string &FinancialCheckInvoice::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
FinancialCheckInvoice::FinancialCheckInvoice(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<int64_t>(r["id"].as<int64_t>());
        }
        if(!r["invoice_type"].isNull())
        {
            invoiceType_=std::make_shared<uint8_t>(r["invoice_type"].as<uint8_t>());
        }
        if(!r["in_out_storage_id"].isNull())
        {
            inOutStorageId_=std::make_shared<uint64_t>(r["in_out_storage_id"].as<uint64_t>());
        }
        if(!r["in_out_storage_sku_id"].isNull())
        {
            inOutStorageSkuId_=std::make_shared<uint64_t>(r["in_out_storage_sku_id"].as<uint64_t>());
        }
        if(!r["shop_id"].isNull())
        {
            shopId_=std::make_shared<uint64_t>(r["shop_id"].as<uint64_t>());
        }
        if(!r["admin_id"].isNull())
        {
            adminId_=std::make_shared<uint64_t>(r["admin_id"].as<uint64_t>());
        }
        if(!r["create_time"].isNull())
        {
            auto timeStr = r["create_time"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        if(!r["update_time"].isNull())
        {
            auto timeStr = r["update_time"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        if(!r["is_delete"].isNull())
        {
            isDelete_=std::make_shared<uint8_t>(r["is_delete"].as<uint8_t>());
        }
        if(!r["remark"].isNull())
        {
            remark_=std::make_shared<std::string>(r["remark"].as<std::string>());
        }
        if(!r["is_check"].isNull())
        {
            isCheck_=std::make_shared<uint8_t>(r["is_check"].as<uint8_t>());
        }
        if(!r["check_invoice_date"].isNull())
        {
            auto daysStr = r["check_invoice_date"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            checkInvoiceDate_=std::make_shared<::trantor::Date>(t*1000000);
        }
        if(!r["check_invoice_price"].isNull())
        {
            checkInvoicePrice_=std::make_shared<std::string>(r["check_invoice_price"].as<std::string>());
        }
        if(!r["check_invoice_number"].isNull())
        {
            checkInvoiceNumber_=std::make_shared<std::string>(r["check_invoice_number"].as<std::string>());
        }
        if(!r["product_category_id"].isNull())
        {
            productCategoryId_=std::make_shared<int64_t>(r["product_category_id"].as<int64_t>());
        }
        if(!r["in_out_storage_date"].isNull())
        {
            auto daysStr = r["in_out_storage_date"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            inOutStorageDate_=std::make_shared<::trantor::Date>(t*1000000);
        }
        if(!r["company_id"].isNull())
        {
            companyId_=std::make_shared<int64_t>(r["company_id"].as<int64_t>());
        }
        if(!r["order_key"].isNull())
        {
            orderKey_=std::make_shared<std::string>(r["order_key"].as<std::string>());
        }
        if(!r["confirm_check_invoice_date"].isNull())
        {
            auto daysStr = r["confirm_check_invoice_date"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            confirmCheckInvoiceDate_=std::make_shared<::trantor::Date>(t*1000000);
        }
        if(!r["confirm_check_invoice_price"].isNull())
        {
            confirmCheckInvoicePrice_=std::make_shared<std::string>(r["confirm_check_invoice_price"].as<std::string>());
        }
        if(!r["confirm_check_invoice_number"].isNull())
        {
            confirmCheckInvoiceNumber_=std::make_shared<std::string>(r["confirm_check_invoice_number"].as<std::string>());
        }
        if(!r["confirm_status"].isNull())
        {
            confirmStatus_=std::make_shared<uint8_t>(r["confirm_status"].as<uint8_t>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 22 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            invoiceType_=std::make_shared<uint8_t>(r[index].as<uint8_t>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            inOutStorageId_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            inOutStorageSkuId_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            shopId_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            adminId_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        index = offset + 8;
        if(!r[index].isNull())
        {
            isDelete_=std::make_shared<uint8_t>(r[index].as<uint8_t>());
        }
        index = offset + 9;
        if(!r[index].isNull())
        {
            remark_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 10;
        if(!r[index].isNull())
        {
            isCheck_=std::make_shared<uint8_t>(r[index].as<uint8_t>());
        }
        index = offset + 11;
        if(!r[index].isNull())
        {
            auto daysStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            checkInvoiceDate_=std::make_shared<::trantor::Date>(t*1000000);
        }
        index = offset + 12;
        if(!r[index].isNull())
        {
            checkInvoicePrice_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 13;
        if(!r[index].isNull())
        {
            checkInvoiceNumber_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 14;
        if(!r[index].isNull())
        {
            productCategoryId_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 15;
        if(!r[index].isNull())
        {
            auto daysStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            inOutStorageDate_=std::make_shared<::trantor::Date>(t*1000000);
        }
        index = offset + 16;
        if(!r[index].isNull())
        {
            companyId_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 17;
        if(!r[index].isNull())
        {
            orderKey_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 18;
        if(!r[index].isNull())
        {
            auto daysStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            confirmCheckInvoiceDate_=std::make_shared<::trantor::Date>(t*1000000);
        }
        index = offset + 19;
        if(!r[index].isNull())
        {
            confirmCheckInvoicePrice_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 20;
        if(!r[index].isNull())
        {
            confirmCheckInvoiceNumber_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 21;
        if(!r[index].isNull())
        {
            confirmStatus_=std::make_shared<uint8_t>(r[index].as<uint8_t>());
        }
    }

}

FinancialCheckInvoice::FinancialCheckInvoice(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 22)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            invoiceType_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[1]].asUInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            inOutStorageId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[2]].asUInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            inOutStorageSkuId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[3]].asUInt64());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            shopId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[4]].asUInt64());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            adminId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[5]].asUInt64());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[6]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[7]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            isDelete_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[8]].asUInt64());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            remark_=std::make_shared<std::string>(pJson[pMasqueradingVector[9]].asString());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            isCheck_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[10]].asUInt64());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            auto daysStr = pJson[pMasqueradingVector[11]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            checkInvoiceDate_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            checkInvoicePrice_=std::make_shared<std::string>(pJson[pMasqueradingVector[12]].asString());
        }
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        dirtyFlag_[13] = true;
        if(!pJson[pMasqueradingVector[13]].isNull())
        {
            checkInvoiceNumber_=std::make_shared<std::string>(pJson[pMasqueradingVector[13]].asString());
        }
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        dirtyFlag_[14] = true;
        if(!pJson[pMasqueradingVector[14]].isNull())
        {
            productCategoryId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[14]].asInt64());
        }
    }
    if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
    {
        dirtyFlag_[15] = true;
        if(!pJson[pMasqueradingVector[15]].isNull())
        {
            auto daysStr = pJson[pMasqueradingVector[15]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            inOutStorageDate_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    if(!pMasqueradingVector[16].empty() && pJson.isMember(pMasqueradingVector[16]))
    {
        dirtyFlag_[16] = true;
        if(!pJson[pMasqueradingVector[16]].isNull())
        {
            companyId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[16]].asInt64());
        }
    }
    if(!pMasqueradingVector[17].empty() && pJson.isMember(pMasqueradingVector[17]))
    {
        dirtyFlag_[17] = true;
        if(!pJson[pMasqueradingVector[17]].isNull())
        {
            orderKey_=std::make_shared<std::string>(pJson[pMasqueradingVector[17]].asString());
        }
    }
    if(!pMasqueradingVector[18].empty() && pJson.isMember(pMasqueradingVector[18]))
    {
        dirtyFlag_[18] = true;
        if(!pJson[pMasqueradingVector[18]].isNull())
        {
            auto daysStr = pJson[pMasqueradingVector[18]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            confirmCheckInvoiceDate_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    if(!pMasqueradingVector[19].empty() && pJson.isMember(pMasqueradingVector[19]))
    {
        dirtyFlag_[19] = true;
        if(!pJson[pMasqueradingVector[19]].isNull())
        {
            confirmCheckInvoicePrice_=std::make_shared<std::string>(pJson[pMasqueradingVector[19]].asString());
        }
    }
    if(!pMasqueradingVector[20].empty() && pJson.isMember(pMasqueradingVector[20]))
    {
        dirtyFlag_[20] = true;
        if(!pJson[pMasqueradingVector[20]].isNull())
        {
            confirmCheckInvoiceNumber_=std::make_shared<std::string>(pJson[pMasqueradingVector[20]].asString());
        }
    }
    if(!pMasqueradingVector[21].empty() && pJson.isMember(pMasqueradingVector[21]))
    {
        dirtyFlag_[21] = true;
        if(!pJson[pMasqueradingVector[21]].isNull())
        {
            confirmStatus_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[21]].asUInt64());
        }
    }
}

FinancialCheckInvoice::FinancialCheckInvoice(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int64_t>((int64_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("invoice_type"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["invoice_type"].isNull())
        {
            invoiceType_=std::make_shared<uint8_t>((uint8_t)pJson["invoice_type"].asUInt64());
        }
    }
    if(pJson.isMember("in_out_storage_id"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["in_out_storage_id"].isNull())
        {
            inOutStorageId_=std::make_shared<uint64_t>((uint64_t)pJson["in_out_storage_id"].asUInt64());
        }
    }
    if(pJson.isMember("in_out_storage_sku_id"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["in_out_storage_sku_id"].isNull())
        {
            inOutStorageSkuId_=std::make_shared<uint64_t>((uint64_t)pJson["in_out_storage_sku_id"].asUInt64());
        }
    }
    if(pJson.isMember("shop_id"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["shop_id"].isNull())
        {
            shopId_=std::make_shared<uint64_t>((uint64_t)pJson["shop_id"].asUInt64());
        }
    }
    if(pJson.isMember("admin_id"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["admin_id"].isNull())
        {
            adminId_=std::make_shared<uint64_t>((uint64_t)pJson["admin_id"].asUInt64());
        }
    }
    if(pJson.isMember("create_time"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["create_time"].isNull())
        {
            auto timeStr = pJson["create_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("update_time"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["update_time"].isNull())
        {
            auto timeStr = pJson["update_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("is_delete"))
    {
        dirtyFlag_[8]=true;
        if(!pJson["is_delete"].isNull())
        {
            isDelete_=std::make_shared<uint8_t>((uint8_t)pJson["is_delete"].asUInt64());
        }
    }
    if(pJson.isMember("remark"))
    {
        dirtyFlag_[9]=true;
        if(!pJson["remark"].isNull())
        {
            remark_=std::make_shared<std::string>(pJson["remark"].asString());
        }
    }
    if(pJson.isMember("is_check"))
    {
        dirtyFlag_[10]=true;
        if(!pJson["is_check"].isNull())
        {
            isCheck_=std::make_shared<uint8_t>((uint8_t)pJson["is_check"].asUInt64());
        }
    }
    if(pJson.isMember("check_invoice_date"))
    {
        dirtyFlag_[11]=true;
        if(!pJson["check_invoice_date"].isNull())
        {
            auto daysStr = pJson["check_invoice_date"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            checkInvoiceDate_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    if(pJson.isMember("check_invoice_price"))
    {
        dirtyFlag_[12]=true;
        if(!pJson["check_invoice_price"].isNull())
        {
            checkInvoicePrice_=std::make_shared<std::string>(pJson["check_invoice_price"].asString());
        }
    }
    if(pJson.isMember("check_invoice_number"))
    {
        dirtyFlag_[13]=true;
        if(!pJson["check_invoice_number"].isNull())
        {
            checkInvoiceNumber_=std::make_shared<std::string>(pJson["check_invoice_number"].asString());
        }
    }
    if(pJson.isMember("product_category_id"))
    {
        dirtyFlag_[14]=true;
        if(!pJson["product_category_id"].isNull())
        {
            productCategoryId_=std::make_shared<int64_t>((int64_t)pJson["product_category_id"].asInt64());
        }
    }
    if(pJson.isMember("in_out_storage_date"))
    {
        dirtyFlag_[15]=true;
        if(!pJson["in_out_storage_date"].isNull())
        {
            auto daysStr = pJson["in_out_storage_date"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            inOutStorageDate_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    if(pJson.isMember("company_id"))
    {
        dirtyFlag_[16]=true;
        if(!pJson["company_id"].isNull())
        {
            companyId_=std::make_shared<int64_t>((int64_t)pJson["company_id"].asInt64());
        }
    }
    if(pJson.isMember("order_key"))
    {
        dirtyFlag_[17]=true;
        if(!pJson["order_key"].isNull())
        {
            orderKey_=std::make_shared<std::string>(pJson["order_key"].asString());
        }
    }
    if(pJson.isMember("confirm_check_invoice_date"))
    {
        dirtyFlag_[18]=true;
        if(!pJson["confirm_check_invoice_date"].isNull())
        {
            auto daysStr = pJson["confirm_check_invoice_date"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            confirmCheckInvoiceDate_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    if(pJson.isMember("confirm_check_invoice_price"))
    {
        dirtyFlag_[19]=true;
        if(!pJson["confirm_check_invoice_price"].isNull())
        {
            confirmCheckInvoicePrice_=std::make_shared<std::string>(pJson["confirm_check_invoice_price"].asString());
        }
    }
    if(pJson.isMember("confirm_check_invoice_number"))
    {
        dirtyFlag_[20]=true;
        if(!pJson["confirm_check_invoice_number"].isNull())
        {
            confirmCheckInvoiceNumber_=std::make_shared<std::string>(pJson["confirm_check_invoice_number"].asString());
        }
    }
    if(pJson.isMember("confirm_status"))
    {
        dirtyFlag_[21]=true;
        if(!pJson["confirm_status"].isNull())
        {
            confirmStatus_=std::make_shared<uint8_t>((uint8_t)pJson["confirm_status"].asUInt64());
        }
    }
}

void FinancialCheckInvoice::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 22)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            invoiceType_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[1]].asUInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            inOutStorageId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[2]].asUInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            inOutStorageSkuId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[3]].asUInt64());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            shopId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[4]].asUInt64());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            adminId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[5]].asUInt64());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[6]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[7]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            isDelete_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[8]].asUInt64());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            remark_=std::make_shared<std::string>(pJson[pMasqueradingVector[9]].asString());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            isCheck_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[10]].asUInt64());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            auto daysStr = pJson[pMasqueradingVector[11]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            checkInvoiceDate_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            checkInvoicePrice_=std::make_shared<std::string>(pJson[pMasqueradingVector[12]].asString());
        }
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        dirtyFlag_[13] = true;
        if(!pJson[pMasqueradingVector[13]].isNull())
        {
            checkInvoiceNumber_=std::make_shared<std::string>(pJson[pMasqueradingVector[13]].asString());
        }
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        dirtyFlag_[14] = true;
        if(!pJson[pMasqueradingVector[14]].isNull())
        {
            productCategoryId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[14]].asInt64());
        }
    }
    if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
    {
        dirtyFlag_[15] = true;
        if(!pJson[pMasqueradingVector[15]].isNull())
        {
            auto daysStr = pJson[pMasqueradingVector[15]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            inOutStorageDate_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    if(!pMasqueradingVector[16].empty() && pJson.isMember(pMasqueradingVector[16]))
    {
        dirtyFlag_[16] = true;
        if(!pJson[pMasqueradingVector[16]].isNull())
        {
            companyId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[16]].asInt64());
        }
    }
    if(!pMasqueradingVector[17].empty() && pJson.isMember(pMasqueradingVector[17]))
    {
        dirtyFlag_[17] = true;
        if(!pJson[pMasqueradingVector[17]].isNull())
        {
            orderKey_=std::make_shared<std::string>(pJson[pMasqueradingVector[17]].asString());
        }
    }
    if(!pMasqueradingVector[18].empty() && pJson.isMember(pMasqueradingVector[18]))
    {
        dirtyFlag_[18] = true;
        if(!pJson[pMasqueradingVector[18]].isNull())
        {
            auto daysStr = pJson[pMasqueradingVector[18]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            confirmCheckInvoiceDate_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    if(!pMasqueradingVector[19].empty() && pJson.isMember(pMasqueradingVector[19]))
    {
        dirtyFlag_[19] = true;
        if(!pJson[pMasqueradingVector[19]].isNull())
        {
            confirmCheckInvoicePrice_=std::make_shared<std::string>(pJson[pMasqueradingVector[19]].asString());
        }
    }
    if(!pMasqueradingVector[20].empty() && pJson.isMember(pMasqueradingVector[20]))
    {
        dirtyFlag_[20] = true;
        if(!pJson[pMasqueradingVector[20]].isNull())
        {
            confirmCheckInvoiceNumber_=std::make_shared<std::string>(pJson[pMasqueradingVector[20]].asString());
        }
    }
    if(!pMasqueradingVector[21].empty() && pJson.isMember(pMasqueradingVector[21]))
    {
        dirtyFlag_[21] = true;
        if(!pJson[pMasqueradingVector[21]].isNull())
        {
            confirmStatus_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[21]].asUInt64());
        }
    }
}
                                                                    
void FinancialCheckInvoice::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int64_t>((int64_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("invoice_type"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["invoice_type"].isNull())
        {
            invoiceType_=std::make_shared<uint8_t>((uint8_t)pJson["invoice_type"].asUInt64());
        }
    }
    if(pJson.isMember("in_out_storage_id"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["in_out_storage_id"].isNull())
        {
            inOutStorageId_=std::make_shared<uint64_t>((uint64_t)pJson["in_out_storage_id"].asUInt64());
        }
    }
    if(pJson.isMember("in_out_storage_sku_id"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["in_out_storage_sku_id"].isNull())
        {
            inOutStorageSkuId_=std::make_shared<uint64_t>((uint64_t)pJson["in_out_storage_sku_id"].asUInt64());
        }
    }
    if(pJson.isMember("shop_id"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["shop_id"].isNull())
        {
            shopId_=std::make_shared<uint64_t>((uint64_t)pJson["shop_id"].asUInt64());
        }
    }
    if(pJson.isMember("admin_id"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["admin_id"].isNull())
        {
            adminId_=std::make_shared<uint64_t>((uint64_t)pJson["admin_id"].asUInt64());
        }
    }
    if(pJson.isMember("create_time"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["create_time"].isNull())
        {
            auto timeStr = pJson["create_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("update_time"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["update_time"].isNull())
        {
            auto timeStr = pJson["update_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("is_delete"))
    {
        dirtyFlag_[8] = true;
        if(!pJson["is_delete"].isNull())
        {
            isDelete_=std::make_shared<uint8_t>((uint8_t)pJson["is_delete"].asUInt64());
        }
    }
    if(pJson.isMember("remark"))
    {
        dirtyFlag_[9] = true;
        if(!pJson["remark"].isNull())
        {
            remark_=std::make_shared<std::string>(pJson["remark"].asString());
        }
    }
    if(pJson.isMember("is_check"))
    {
        dirtyFlag_[10] = true;
        if(!pJson["is_check"].isNull())
        {
            isCheck_=std::make_shared<uint8_t>((uint8_t)pJson["is_check"].asUInt64());
        }
    }
    if(pJson.isMember("check_invoice_date"))
    {
        dirtyFlag_[11] = true;
        if(!pJson["check_invoice_date"].isNull())
        {
            auto daysStr = pJson["check_invoice_date"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            checkInvoiceDate_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    if(pJson.isMember("check_invoice_price"))
    {
        dirtyFlag_[12] = true;
        if(!pJson["check_invoice_price"].isNull())
        {
            checkInvoicePrice_=std::make_shared<std::string>(pJson["check_invoice_price"].asString());
        }
    }
    if(pJson.isMember("check_invoice_number"))
    {
        dirtyFlag_[13] = true;
        if(!pJson["check_invoice_number"].isNull())
        {
            checkInvoiceNumber_=std::make_shared<std::string>(pJson["check_invoice_number"].asString());
        }
    }
    if(pJson.isMember("product_category_id"))
    {
        dirtyFlag_[14] = true;
        if(!pJson["product_category_id"].isNull())
        {
            productCategoryId_=std::make_shared<int64_t>((int64_t)pJson["product_category_id"].asInt64());
        }
    }
    if(pJson.isMember("in_out_storage_date"))
    {
        dirtyFlag_[15] = true;
        if(!pJson["in_out_storage_date"].isNull())
        {
            auto daysStr = pJson["in_out_storage_date"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            inOutStorageDate_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    if(pJson.isMember("company_id"))
    {
        dirtyFlag_[16] = true;
        if(!pJson["company_id"].isNull())
        {
            companyId_=std::make_shared<int64_t>((int64_t)pJson["company_id"].asInt64());
        }
    }
    if(pJson.isMember("order_key"))
    {
        dirtyFlag_[17] = true;
        if(!pJson["order_key"].isNull())
        {
            orderKey_=std::make_shared<std::string>(pJson["order_key"].asString());
        }
    }
    if(pJson.isMember("confirm_check_invoice_date"))
    {
        dirtyFlag_[18] = true;
        if(!pJson["confirm_check_invoice_date"].isNull())
        {
            auto daysStr = pJson["confirm_check_invoice_date"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            confirmCheckInvoiceDate_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    if(pJson.isMember("confirm_check_invoice_price"))
    {
        dirtyFlag_[19] = true;
        if(!pJson["confirm_check_invoice_price"].isNull())
        {
            confirmCheckInvoicePrice_=std::make_shared<std::string>(pJson["confirm_check_invoice_price"].asString());
        }
    }
    if(pJson.isMember("confirm_check_invoice_number"))
    {
        dirtyFlag_[20] = true;
        if(!pJson["confirm_check_invoice_number"].isNull())
        {
            confirmCheckInvoiceNumber_=std::make_shared<std::string>(pJson["confirm_check_invoice_number"].asString());
        }
    }
    if(pJson.isMember("confirm_status"))
    {
        dirtyFlag_[21] = true;
        if(!pJson["confirm_status"].isNull())
        {
            confirmStatus_=std::make_shared<uint8_t>((uint8_t)pJson["confirm_status"].asUInt64());
        }
    }
}

const int64_t &FinancialCheckInvoice::getValueOfId() const noexcept
{
    const static int64_t defaultValue = int64_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &FinancialCheckInvoice::getId() const noexcept
{
    return id_;
}
void FinancialCheckInvoice::setId(const int64_t &pId) noexcept
{
    id_ = std::make_shared<int64_t>(pId);
    dirtyFlag_[0] = true;
}



const typename FinancialCheckInvoice::PrimaryKeyType & FinancialCheckInvoice::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const uint8_t &FinancialCheckInvoice::getValueOfInvoiceType() const noexcept
{
    const static uint8_t defaultValue = uint8_t();
    if(invoiceType_)
        return *invoiceType_;
    return defaultValue;
}
const std::shared_ptr<uint8_t> &FinancialCheckInvoice::getInvoiceType() const noexcept
{
    return invoiceType_;
}
void FinancialCheckInvoice::setInvoiceType(const uint8_t &pInvoiceType) noexcept
{
    invoiceType_ = std::make_shared<uint8_t>(pInvoiceType);
    dirtyFlag_[1] = true;
}




const uint64_t &FinancialCheckInvoice::getValueOfInOutStorageId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(inOutStorageId_)
        return *inOutStorageId_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &FinancialCheckInvoice::getInOutStorageId() const noexcept
{
    return inOutStorageId_;
}
void FinancialCheckInvoice::setInOutStorageId(const uint64_t &pInOutStorageId) noexcept
{
    inOutStorageId_ = std::make_shared<uint64_t>(pInOutStorageId);
    dirtyFlag_[2] = true;
}




const uint64_t &FinancialCheckInvoice::getValueOfInOutStorageSkuId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(inOutStorageSkuId_)
        return *inOutStorageSkuId_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &FinancialCheckInvoice::getInOutStorageSkuId() const noexcept
{
    return inOutStorageSkuId_;
}
void FinancialCheckInvoice::setInOutStorageSkuId(const uint64_t &pInOutStorageSkuId) noexcept
{
    inOutStorageSkuId_ = std::make_shared<uint64_t>(pInOutStorageSkuId);
    dirtyFlag_[3] = true;
}




const uint64_t &FinancialCheckInvoice::getValueOfShopId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(shopId_)
        return *shopId_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &FinancialCheckInvoice::getShopId() const noexcept
{
    return shopId_;
}
void FinancialCheckInvoice::setShopId(const uint64_t &pShopId) noexcept
{
    shopId_ = std::make_shared<uint64_t>(pShopId);
    dirtyFlag_[4] = true;
}




const uint64_t &FinancialCheckInvoice::getValueOfAdminId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(adminId_)
        return *adminId_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &FinancialCheckInvoice::getAdminId() const noexcept
{
    return adminId_;
}
void FinancialCheckInvoice::setAdminId(const uint64_t &pAdminId) noexcept
{
    adminId_ = std::make_shared<uint64_t>(pAdminId);
    dirtyFlag_[5] = true;
}




const ::trantor::Date &FinancialCheckInvoice::getValueOfCreateTime() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(createTime_)
        return *createTime_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &FinancialCheckInvoice::getCreateTime() const noexcept
{
    return createTime_;
}
void FinancialCheckInvoice::setCreateTime(const ::trantor::Date &pCreateTime) noexcept
{
    createTime_ = std::make_shared<::trantor::Date>(pCreateTime);
    dirtyFlag_[6] = true;
}


void FinancialCheckInvoice::setCreateTimeToNull() noexcept
{
    createTime_.reset();
    dirtyFlag_[6] = true;
}


const ::trantor::Date &FinancialCheckInvoice::getValueOfUpdateTime() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(updateTime_)
        return *updateTime_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &FinancialCheckInvoice::getUpdateTime() const noexcept
{
    return updateTime_;
}
void FinancialCheckInvoice::setUpdateTime(const ::trantor::Date &pUpdateTime) noexcept
{
    updateTime_ = std::make_shared<::trantor::Date>(pUpdateTime);
    dirtyFlag_[7] = true;
}


void FinancialCheckInvoice::setUpdateTimeToNull() noexcept
{
    updateTime_.reset();
    dirtyFlag_[7] = true;
}


const uint8_t &FinancialCheckInvoice::getValueOfIsDelete() const noexcept
{
    const static uint8_t defaultValue = uint8_t();
    if(isDelete_)
        return *isDelete_;
    return defaultValue;
}
const std::shared_ptr<uint8_t> &FinancialCheckInvoice::getIsDelete() const noexcept
{
    return isDelete_;
}
void FinancialCheckInvoice::setIsDelete(const uint8_t &pIsDelete) noexcept
{
    isDelete_ = std::make_shared<uint8_t>(pIsDelete);
    dirtyFlag_[8] = true;
}




const std::string &FinancialCheckInvoice::getValueOfRemark() const noexcept
{
    const static std::string defaultValue = std::string();
    if(remark_)
        return *remark_;
    return defaultValue;
}
const std::shared_ptr<std::string> &FinancialCheckInvoice::getRemark() const noexcept
{
    return remark_;
}
void FinancialCheckInvoice::setRemark(const std::string &pRemark) noexcept
{
    remark_ = std::make_shared<std::string>(pRemark);
    dirtyFlag_[9] = true;
}
void FinancialCheckInvoice::setRemark(std::string &&pRemark) noexcept
{
    remark_ = std::make_shared<std::string>(std::move(pRemark));
    dirtyFlag_[9] = true;
}


void FinancialCheckInvoice::setRemarkToNull() noexcept
{
    remark_.reset();
    dirtyFlag_[9] = true;
}


const uint8_t &FinancialCheckInvoice::getValueOfIsCheck() const noexcept
{
    const static uint8_t defaultValue = uint8_t();
    if(isCheck_)
        return *isCheck_;
    return defaultValue;
}
const std::shared_ptr<uint8_t> &FinancialCheckInvoice::getIsCheck() const noexcept
{
    return isCheck_;
}
void FinancialCheckInvoice::setIsCheck(const uint8_t &pIsCheck) noexcept
{
    isCheck_ = std::make_shared<uint8_t>(pIsCheck);
    dirtyFlag_[10] = true;
}




const ::trantor::Date &FinancialCheckInvoice::getValueOfCheckInvoiceDate() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(checkInvoiceDate_)
        return *checkInvoiceDate_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &FinancialCheckInvoice::getCheckInvoiceDate() const noexcept
{
    return checkInvoiceDate_;
}
void FinancialCheckInvoice::setCheckInvoiceDate(const ::trantor::Date &pCheckInvoiceDate) noexcept
{
    checkInvoiceDate_ = std::make_shared<::trantor::Date>(pCheckInvoiceDate.roundDay());
    dirtyFlag_[11] = true;
}




const std::string &FinancialCheckInvoice::getValueOfCheckInvoicePrice() const noexcept
{
    const static std::string defaultValue = std::string();
    if(checkInvoicePrice_)
        return *checkInvoicePrice_;
    return defaultValue;
}
const std::shared_ptr<std::string> &FinancialCheckInvoice::getCheckInvoicePrice() const noexcept
{
    return checkInvoicePrice_;
}
void FinancialCheckInvoice::setCheckInvoicePrice(const std::string &pCheckInvoicePrice) noexcept
{
    checkInvoicePrice_ = std::make_shared<std::string>(pCheckInvoicePrice);
    dirtyFlag_[12] = true;
}
void FinancialCheckInvoice::setCheckInvoicePrice(std::string &&pCheckInvoicePrice) noexcept
{
    checkInvoicePrice_ = std::make_shared<std::string>(std::move(pCheckInvoicePrice));
    dirtyFlag_[12] = true;
}




const std::string &FinancialCheckInvoice::getValueOfCheckInvoiceNumber() const noexcept
{
    const static std::string defaultValue = std::string();
    if(checkInvoiceNumber_)
        return *checkInvoiceNumber_;
    return defaultValue;
}
const std::shared_ptr<std::string> &FinancialCheckInvoice::getCheckInvoiceNumber() const noexcept
{
    return checkInvoiceNumber_;
}
void FinancialCheckInvoice::setCheckInvoiceNumber(const std::string &pCheckInvoiceNumber) noexcept
{
    checkInvoiceNumber_ = std::make_shared<std::string>(pCheckInvoiceNumber);
    dirtyFlag_[13] = true;
}
void FinancialCheckInvoice::setCheckInvoiceNumber(std::string &&pCheckInvoiceNumber) noexcept
{
    checkInvoiceNumber_ = std::make_shared<std::string>(std::move(pCheckInvoiceNumber));
    dirtyFlag_[13] = true;
}




const int64_t &FinancialCheckInvoice::getValueOfProductCategoryId() const noexcept
{
    const static int64_t defaultValue = int64_t();
    if(productCategoryId_)
        return *productCategoryId_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &FinancialCheckInvoice::getProductCategoryId() const noexcept
{
    return productCategoryId_;
}
void FinancialCheckInvoice::setProductCategoryId(const int64_t &pProductCategoryId) noexcept
{
    productCategoryId_ = std::make_shared<int64_t>(pProductCategoryId);
    dirtyFlag_[14] = true;
}




const ::trantor::Date &FinancialCheckInvoice::getValueOfInOutStorageDate() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(inOutStorageDate_)
        return *inOutStorageDate_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &FinancialCheckInvoice::getInOutStorageDate() const noexcept
{
    return inOutStorageDate_;
}
void FinancialCheckInvoice::setInOutStorageDate(const ::trantor::Date &pInOutStorageDate) noexcept
{
    inOutStorageDate_ = std::make_shared<::trantor::Date>(pInOutStorageDate.roundDay());
    dirtyFlag_[15] = true;
}




const int64_t &FinancialCheckInvoice::getValueOfCompanyId() const noexcept
{
    const static int64_t defaultValue = int64_t();
    if(companyId_)
        return *companyId_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &FinancialCheckInvoice::getCompanyId() const noexcept
{
    return companyId_;
}
void FinancialCheckInvoice::setCompanyId(const int64_t &pCompanyId) noexcept
{
    companyId_ = std::make_shared<int64_t>(pCompanyId);
    dirtyFlag_[16] = true;
}




const std::string &FinancialCheckInvoice::getValueOfOrderKey() const noexcept
{
    const static std::string defaultValue = std::string();
    if(orderKey_)
        return *orderKey_;
    return defaultValue;
}
const std::shared_ptr<std::string> &FinancialCheckInvoice::getOrderKey() const noexcept
{
    return orderKey_;
}
void FinancialCheckInvoice::setOrderKey(const std::string &pOrderKey) noexcept
{
    orderKey_ = std::make_shared<std::string>(pOrderKey);
    dirtyFlag_[17] = true;
}
void FinancialCheckInvoice::setOrderKey(std::string &&pOrderKey) noexcept
{
    orderKey_ = std::make_shared<std::string>(std::move(pOrderKey));
    dirtyFlag_[17] = true;
}


void FinancialCheckInvoice::setOrderKeyToNull() noexcept
{
    orderKey_.reset();
    dirtyFlag_[17] = true;
}


const ::trantor::Date &FinancialCheckInvoice::getValueOfConfirmCheckInvoiceDate() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(confirmCheckInvoiceDate_)
        return *confirmCheckInvoiceDate_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &FinancialCheckInvoice::getConfirmCheckInvoiceDate() const noexcept
{
    return confirmCheckInvoiceDate_;
}
void FinancialCheckInvoice::setConfirmCheckInvoiceDate(const ::trantor::Date &pConfirmCheckInvoiceDate) noexcept
{
    confirmCheckInvoiceDate_ = std::make_shared<::trantor::Date>(pConfirmCheckInvoiceDate.roundDay());
    dirtyFlag_[18] = true;
}


void FinancialCheckInvoice::setConfirmCheckInvoiceDateToNull() noexcept
{
    confirmCheckInvoiceDate_.reset();
    dirtyFlag_[18] = true;
}


const std::string &FinancialCheckInvoice::getValueOfConfirmCheckInvoicePrice() const noexcept
{
    const static std::string defaultValue = std::string();
    if(confirmCheckInvoicePrice_)
        return *confirmCheckInvoicePrice_;
    return defaultValue;
}
const std::shared_ptr<std::string> &FinancialCheckInvoice::getConfirmCheckInvoicePrice() const noexcept
{
    return confirmCheckInvoicePrice_;
}
void FinancialCheckInvoice::setConfirmCheckInvoicePrice(const std::string &pConfirmCheckInvoicePrice) noexcept
{
    confirmCheckInvoicePrice_ = std::make_shared<std::string>(pConfirmCheckInvoicePrice);
    dirtyFlag_[19] = true;
}
void FinancialCheckInvoice::setConfirmCheckInvoicePrice(std::string &&pConfirmCheckInvoicePrice) noexcept
{
    confirmCheckInvoicePrice_ = std::make_shared<std::string>(std::move(pConfirmCheckInvoicePrice));
    dirtyFlag_[19] = true;
}


void FinancialCheckInvoice::setConfirmCheckInvoicePriceToNull() noexcept
{
    confirmCheckInvoicePrice_.reset();
    dirtyFlag_[19] = true;
}


const std::string &FinancialCheckInvoice::getValueOfConfirmCheckInvoiceNumber() const noexcept
{
    const static std::string defaultValue = std::string();
    if(confirmCheckInvoiceNumber_)
        return *confirmCheckInvoiceNumber_;
    return defaultValue;
}
const std::shared_ptr<std::string> &FinancialCheckInvoice::getConfirmCheckInvoiceNumber() const noexcept
{
    return confirmCheckInvoiceNumber_;
}
void FinancialCheckInvoice::setConfirmCheckInvoiceNumber(const std::string &pConfirmCheckInvoiceNumber) noexcept
{
    confirmCheckInvoiceNumber_ = std::make_shared<std::string>(pConfirmCheckInvoiceNumber);
    dirtyFlag_[20] = true;
}
void FinancialCheckInvoice::setConfirmCheckInvoiceNumber(std::string &&pConfirmCheckInvoiceNumber) noexcept
{
    confirmCheckInvoiceNumber_ = std::make_shared<std::string>(std::move(pConfirmCheckInvoiceNumber));
    dirtyFlag_[20] = true;
}


void FinancialCheckInvoice::setConfirmCheckInvoiceNumberToNull() noexcept
{
    confirmCheckInvoiceNumber_.reset();
    dirtyFlag_[20] = true;
}


const uint8_t &FinancialCheckInvoice::getValueOfConfirmStatus() const noexcept
{
    const static uint8_t defaultValue = uint8_t();
    if(confirmStatus_)
        return *confirmStatus_;
    return defaultValue;
}
const std::shared_ptr<uint8_t> &FinancialCheckInvoice::getConfirmStatus() const noexcept
{
    return confirmStatus_;
}
void FinancialCheckInvoice::setConfirmStatus(const uint8_t &pConfirmStatus) noexcept
{
    confirmStatus_ = std::make_shared<uint8_t>(pConfirmStatus);
    dirtyFlag_[21] = true;
}




void FinancialCheckInvoice::updateId(const uint64_t id)
{
    id_ = std::make_shared<int64_t>(static_cast<int64_t>(id));
}

const std::vector<std::string> &FinancialCheckInvoice::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "invoice_type",
        "in_out_storage_id",
        "in_out_storage_sku_id",
        "shop_id",
        "admin_id",
        "create_time",
        "update_time",
        "is_delete",
        "remark",
        "is_check",
        "check_invoice_date",
        "check_invoice_price",
        "check_invoice_number",
        "product_category_id",
        "in_out_storage_date",
        "company_id",
        "order_key",
        "confirm_check_invoice_date",
        "confirm_check_invoice_price",
        "confirm_check_invoice_number",
        "confirm_status"
    };
    return inCols;
}

void FinancialCheckInvoice::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getInvoiceType())
        {
            binder << getValueOfInvoiceType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getInOutStorageId())
        {
            binder << getValueOfInOutStorageId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getInOutStorageSkuId())
        {
            binder << getValueOfInOutStorageSkuId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getShopId())
        {
            binder << getValueOfShopId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getAdminId())
        {
            binder << getValueOfAdminId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getCreateTime())
        {
            binder << getValueOfCreateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getUpdateTime())
        {
            binder << getValueOfUpdateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getIsDelete())
        {
            binder << getValueOfIsDelete();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getRemark())
        {
            binder << getValueOfRemark();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getIsCheck())
        {
            binder << getValueOfIsCheck();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getCheckInvoiceDate())
        {
            binder << getValueOfCheckInvoiceDate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getCheckInvoicePrice())
        {
            binder << getValueOfCheckInvoicePrice();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[13])
    {
        if(getCheckInvoiceNumber())
        {
            binder << getValueOfCheckInvoiceNumber();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[14])
    {
        if(getProductCategoryId())
        {
            binder << getValueOfProductCategoryId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[15])
    {
        if(getInOutStorageDate())
        {
            binder << getValueOfInOutStorageDate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[16])
    {
        if(getCompanyId())
        {
            binder << getValueOfCompanyId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[17])
    {
        if(getOrderKey())
        {
            binder << getValueOfOrderKey();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[18])
    {
        if(getConfirmCheckInvoiceDate())
        {
            binder << getValueOfConfirmCheckInvoiceDate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[19])
    {
        if(getConfirmCheckInvoicePrice())
        {
            binder << getValueOfConfirmCheckInvoicePrice();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[20])
    {
        if(getConfirmCheckInvoiceNumber())
        {
            binder << getValueOfConfirmCheckInvoiceNumber();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[21])
    {
        if(getConfirmStatus())
        {
            binder << getValueOfConfirmStatus();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> FinancialCheckInvoice::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    if(dirtyFlag_[8])
    {
        ret.push_back(getColumnName(8));
    }
    if(dirtyFlag_[9])
    {
        ret.push_back(getColumnName(9));
    }
    if(dirtyFlag_[10])
    {
        ret.push_back(getColumnName(10));
    }
    if(dirtyFlag_[11])
    {
        ret.push_back(getColumnName(11));
    }
    if(dirtyFlag_[12])
    {
        ret.push_back(getColumnName(12));
    }
    if(dirtyFlag_[13])
    {
        ret.push_back(getColumnName(13));
    }
    if(dirtyFlag_[14])
    {
        ret.push_back(getColumnName(14));
    }
    if(dirtyFlag_[15])
    {
        ret.push_back(getColumnName(15));
    }
    if(dirtyFlag_[16])
    {
        ret.push_back(getColumnName(16));
    }
    if(dirtyFlag_[17])
    {
        ret.push_back(getColumnName(17));
    }
    if(dirtyFlag_[18])
    {
        ret.push_back(getColumnName(18));
    }
    if(dirtyFlag_[19])
    {
        ret.push_back(getColumnName(19));
    }
    if(dirtyFlag_[20])
    {
        ret.push_back(getColumnName(20));
    }
    if(dirtyFlag_[21])
    {
        ret.push_back(getColumnName(21));
    }
    return ret;
}

void FinancialCheckInvoice::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getInvoiceType())
        {
            binder << getValueOfInvoiceType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getInOutStorageId())
        {
            binder << getValueOfInOutStorageId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getInOutStorageSkuId())
        {
            binder << getValueOfInOutStorageSkuId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getShopId())
        {
            binder << getValueOfShopId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getAdminId())
        {
            binder << getValueOfAdminId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getCreateTime())
        {
            binder << getValueOfCreateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getUpdateTime())
        {
            binder << getValueOfUpdateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getIsDelete())
        {
            binder << getValueOfIsDelete();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getRemark())
        {
            binder << getValueOfRemark();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getIsCheck())
        {
            binder << getValueOfIsCheck();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getCheckInvoiceDate())
        {
            binder << getValueOfCheckInvoiceDate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getCheckInvoicePrice())
        {
            binder << getValueOfCheckInvoicePrice();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[13])
    {
        if(getCheckInvoiceNumber())
        {
            binder << getValueOfCheckInvoiceNumber();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[14])
    {
        if(getProductCategoryId())
        {
            binder << getValueOfProductCategoryId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[15])
    {
        if(getInOutStorageDate())
        {
            binder << getValueOfInOutStorageDate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[16])
    {
        if(getCompanyId())
        {
            binder << getValueOfCompanyId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[17])
    {
        if(getOrderKey())
        {
            binder << getValueOfOrderKey();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[18])
    {
        if(getConfirmCheckInvoiceDate())
        {
            binder << getValueOfConfirmCheckInvoiceDate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[19])
    {
        if(getConfirmCheckInvoicePrice())
        {
            binder << getValueOfConfirmCheckInvoicePrice();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[20])
    {
        if(getConfirmCheckInvoiceNumber())
        {
            binder << getValueOfConfirmCheckInvoiceNumber();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[21])
    {
        if(getConfirmStatus())
        {
            binder << getValueOfConfirmStatus();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value FinancialCheckInvoice::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=(Json::Int64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getInvoiceType())
    {
        ret["invoice_type"]=getValueOfInvoiceType();
    }
    else
    {
        ret["invoice_type"]=Json::Value();
    }
    if(getInOutStorageId())
    {
        ret["in_out_storage_id"]=(Json::UInt64)getValueOfInOutStorageId();
    }
    else
    {
        ret["in_out_storage_id"]=Json::Value();
    }
    if(getInOutStorageSkuId())
    {
        ret["in_out_storage_sku_id"]=(Json::UInt64)getValueOfInOutStorageSkuId();
    }
    else
    {
        ret["in_out_storage_sku_id"]=Json::Value();
    }
    if(getShopId())
    {
        ret["shop_id"]=(Json::UInt64)getValueOfShopId();
    }
    else
    {
        ret["shop_id"]=Json::Value();
    }
    if(getAdminId())
    {
        ret["admin_id"]=(Json::UInt64)getValueOfAdminId();
    }
    else
    {
        ret["admin_id"]=Json::Value();
    }
    if(getCreateTime())
    {
        ret["create_time"]=getCreateTime()->toDbStringLocal();
    }
    else
    {
        ret["create_time"]=Json::Value();
    }
    if(getUpdateTime())
    {
        ret["update_time"]=getUpdateTime()->toDbStringLocal();
    }
    else
    {
        ret["update_time"]=Json::Value();
    }
    if(getIsDelete())
    {
        ret["is_delete"]=getValueOfIsDelete();
    }
    else
    {
        ret["is_delete"]=Json::Value();
    }
    if(getRemark())
    {
        ret["remark"]=getValueOfRemark();
    }
    else
    {
        ret["remark"]=Json::Value();
    }
    if(getIsCheck())
    {
        ret["is_check"]=getValueOfIsCheck();
    }
    else
    {
        ret["is_check"]=Json::Value();
    }
    if(getCheckInvoiceDate())
    {
        ret["check_invoice_date"]=getCheckInvoiceDate()->toDbStringLocal();
    }
    else
    {
        ret["check_invoice_date"]=Json::Value();
    }
    if(getCheckInvoicePrice())
    {
        ret["check_invoice_price"]=getValueOfCheckInvoicePrice();
    }
    else
    {
        ret["check_invoice_price"]=Json::Value();
    }
    if(getCheckInvoiceNumber())
    {
        ret["check_invoice_number"]=getValueOfCheckInvoiceNumber();
    }
    else
    {
        ret["check_invoice_number"]=Json::Value();
    }
    if(getProductCategoryId())
    {
        ret["product_category_id"]=(Json::Int64)getValueOfProductCategoryId();
    }
    else
    {
        ret["product_category_id"]=Json::Value();
    }
    if(getInOutStorageDate())
    {
        ret["in_out_storage_date"]=getInOutStorageDate()->toDbStringLocal();
    }
    else
    {
        ret["in_out_storage_date"]=Json::Value();
    }
    if(getCompanyId())
    {
        ret["company_id"]=(Json::Int64)getValueOfCompanyId();
    }
    else
    {
        ret["company_id"]=Json::Value();
    }
    if(getOrderKey())
    {
        ret["order_key"]=getValueOfOrderKey();
    }
    else
    {
        ret["order_key"]=Json::Value();
    }
    if(getConfirmCheckInvoiceDate())
    {
        ret["confirm_check_invoice_date"]=getConfirmCheckInvoiceDate()->toDbStringLocal();
    }
    else
    {
        ret["confirm_check_invoice_date"]=Json::Value();
    }
    if(getConfirmCheckInvoicePrice())
    {
        ret["confirm_check_invoice_price"]=getValueOfConfirmCheckInvoicePrice();
    }
    else
    {
        ret["confirm_check_invoice_price"]=Json::Value();
    }
    if(getConfirmCheckInvoiceNumber())
    {
        ret["confirm_check_invoice_number"]=getValueOfConfirmCheckInvoiceNumber();
    }
    else
    {
        ret["confirm_check_invoice_number"]=Json::Value();
    }
    if(getConfirmStatus())
    {
        ret["confirm_status"]=getValueOfConfirmStatus();
    }
    else
    {
        ret["confirm_status"]=Json::Value();
    }
    return ret;
}

Json::Value FinancialCheckInvoice::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 22)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=(Json::Int64)getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getInvoiceType())
            {
                ret[pMasqueradingVector[1]]=getValueOfInvoiceType();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getInOutStorageId())
            {
                ret[pMasqueradingVector[2]]=(Json::UInt64)getValueOfInOutStorageId();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getInOutStorageSkuId())
            {
                ret[pMasqueradingVector[3]]=(Json::UInt64)getValueOfInOutStorageSkuId();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getShopId())
            {
                ret[pMasqueradingVector[4]]=(Json::UInt64)getValueOfShopId();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getAdminId())
            {
                ret[pMasqueradingVector[5]]=(Json::UInt64)getValueOfAdminId();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getCreateTime())
            {
                ret[pMasqueradingVector[6]]=getCreateTime()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getUpdateTime())
            {
                ret[pMasqueradingVector[7]]=getUpdateTime()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[8].empty())
        {
            if(getIsDelete())
            {
                ret[pMasqueradingVector[8]]=getValueOfIsDelete();
            }
            else
            {
                ret[pMasqueradingVector[8]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[9].empty())
        {
            if(getRemark())
            {
                ret[pMasqueradingVector[9]]=getValueOfRemark();
            }
            else
            {
                ret[pMasqueradingVector[9]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[10].empty())
        {
            if(getIsCheck())
            {
                ret[pMasqueradingVector[10]]=getValueOfIsCheck();
            }
            else
            {
                ret[pMasqueradingVector[10]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[11].empty())
        {
            if(getCheckInvoiceDate())
            {
                ret[pMasqueradingVector[11]]=getCheckInvoiceDate()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[11]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[12].empty())
        {
            if(getCheckInvoicePrice())
            {
                ret[pMasqueradingVector[12]]=getValueOfCheckInvoicePrice();
            }
            else
            {
                ret[pMasqueradingVector[12]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[13].empty())
        {
            if(getCheckInvoiceNumber())
            {
                ret[pMasqueradingVector[13]]=getValueOfCheckInvoiceNumber();
            }
            else
            {
                ret[pMasqueradingVector[13]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[14].empty())
        {
            if(getProductCategoryId())
            {
                ret[pMasqueradingVector[14]]=(Json::Int64)getValueOfProductCategoryId();
            }
            else
            {
                ret[pMasqueradingVector[14]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[15].empty())
        {
            if(getInOutStorageDate())
            {
                ret[pMasqueradingVector[15]]=getInOutStorageDate()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[15]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[16].empty())
        {
            if(getCompanyId())
            {
                ret[pMasqueradingVector[16]]=(Json::Int64)getValueOfCompanyId();
            }
            else
            {
                ret[pMasqueradingVector[16]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[17].empty())
        {
            if(getOrderKey())
            {
                ret[pMasqueradingVector[17]]=getValueOfOrderKey();
            }
            else
            {
                ret[pMasqueradingVector[17]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[18].empty())
        {
            if(getConfirmCheckInvoiceDate())
            {
                ret[pMasqueradingVector[18]]=getConfirmCheckInvoiceDate()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[18]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[19].empty())
        {
            if(getConfirmCheckInvoicePrice())
            {
                ret[pMasqueradingVector[19]]=getValueOfConfirmCheckInvoicePrice();
            }
            else
            {
                ret[pMasqueradingVector[19]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[20].empty())
        {
            if(getConfirmCheckInvoiceNumber())
            {
                ret[pMasqueradingVector[20]]=getValueOfConfirmCheckInvoiceNumber();
            }
            else
            {
                ret[pMasqueradingVector[20]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[21].empty())
        {
            if(getConfirmStatus())
            {
                ret[pMasqueradingVector[21]]=getValueOfConfirmStatus();
            }
            else
            {
                ret[pMasqueradingVector[21]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=(Json::Int64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getInvoiceType())
    {
        ret["invoice_type"]=getValueOfInvoiceType();
    }
    else
    {
        ret["invoice_type"]=Json::Value();
    }
    if(getInOutStorageId())
    {
        ret["in_out_storage_id"]=(Json::UInt64)getValueOfInOutStorageId();
    }
    else
    {
        ret["in_out_storage_id"]=Json::Value();
    }
    if(getInOutStorageSkuId())
    {
        ret["in_out_storage_sku_id"]=(Json::UInt64)getValueOfInOutStorageSkuId();
    }
    else
    {
        ret["in_out_storage_sku_id"]=Json::Value();
    }
    if(getShopId())
    {
        ret["shop_id"]=(Json::UInt64)getValueOfShopId();
    }
    else
    {
        ret["shop_id"]=Json::Value();
    }
    if(getAdminId())
    {
        ret["admin_id"]=(Json::UInt64)getValueOfAdminId();
    }
    else
    {
        ret["admin_id"]=Json::Value();
    }
    if(getCreateTime())
    {
        ret["create_time"]=getCreateTime()->toDbStringLocal();
    }
    else
    {
        ret["create_time"]=Json::Value();
    }
    if(getUpdateTime())
    {
        ret["update_time"]=getUpdateTime()->toDbStringLocal();
    }
    else
    {
        ret["update_time"]=Json::Value();
    }
    if(getIsDelete())
    {
        ret["is_delete"]=getValueOfIsDelete();
    }
    else
    {
        ret["is_delete"]=Json::Value();
    }
    if(getRemark())
    {
        ret["remark"]=getValueOfRemark();
    }
    else
    {
        ret["remark"]=Json::Value();
    }
    if(getIsCheck())
    {
        ret["is_check"]=getValueOfIsCheck();
    }
    else
    {
        ret["is_check"]=Json::Value();
    }
    if(getCheckInvoiceDate())
    {
        ret["check_invoice_date"]=getCheckInvoiceDate()->toDbStringLocal();
    }
    else
    {
        ret["check_invoice_date"]=Json::Value();
    }
    if(getCheckInvoicePrice())
    {
        ret["check_invoice_price"]=getValueOfCheckInvoicePrice();
    }
    else
    {
        ret["check_invoice_price"]=Json::Value();
    }
    if(getCheckInvoiceNumber())
    {
        ret["check_invoice_number"]=getValueOfCheckInvoiceNumber();
    }
    else
    {
        ret["check_invoice_number"]=Json::Value();
    }
    if(getProductCategoryId())
    {
        ret["product_category_id"]=(Json::Int64)getValueOfProductCategoryId();
    }
    else
    {
        ret["product_category_id"]=Json::Value();
    }
    if(getInOutStorageDate())
    {
        ret["in_out_storage_date"]=getInOutStorageDate()->toDbStringLocal();
    }
    else
    {
        ret["in_out_storage_date"]=Json::Value();
    }
    if(getCompanyId())
    {
        ret["company_id"]=(Json::Int64)getValueOfCompanyId();
    }
    else
    {
        ret["company_id"]=Json::Value();
    }
    if(getOrderKey())
    {
        ret["order_key"]=getValueOfOrderKey();
    }
    else
    {
        ret["order_key"]=Json::Value();
    }
    if(getConfirmCheckInvoiceDate())
    {
        ret["confirm_check_invoice_date"]=getConfirmCheckInvoiceDate()->toDbStringLocal();
    }
    else
    {
        ret["confirm_check_invoice_date"]=Json::Value();
    }
    if(getConfirmCheckInvoicePrice())
    {
        ret["confirm_check_invoice_price"]=getValueOfConfirmCheckInvoicePrice();
    }
    else
    {
        ret["confirm_check_invoice_price"]=Json::Value();
    }
    if(getConfirmCheckInvoiceNumber())
    {
        ret["confirm_check_invoice_number"]=getValueOfConfirmCheckInvoiceNumber();
    }
    else
    {
        ret["confirm_check_invoice_number"]=Json::Value();
    }
    if(getConfirmStatus())
    {
        ret["confirm_status"]=getValueOfConfirmStatus();
    }
    else
    {
        ret["confirm_status"]=Json::Value();
    }
    return ret;
}

bool FinancialCheckInvoice::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("invoice_type"))
    {
        if(!validJsonOfField(1, "invoice_type", pJson["invoice_type"], err, true))
            return false;
    }
    if(pJson.isMember("in_out_storage_id"))
    {
        if(!validJsonOfField(2, "in_out_storage_id", pJson["in_out_storage_id"], err, true))
            return false;
    }
    if(pJson.isMember("in_out_storage_sku_id"))
    {
        if(!validJsonOfField(3, "in_out_storage_sku_id", pJson["in_out_storage_sku_id"], err, true))
            return false;
    }
    if(pJson.isMember("shop_id"))
    {
        if(!validJsonOfField(4, "shop_id", pJson["shop_id"], err, true))
            return false;
    }
    if(pJson.isMember("admin_id"))
    {
        if(!validJsonOfField(5, "admin_id", pJson["admin_id"], err, true))
            return false;
    }
    if(pJson.isMember("create_time"))
    {
        if(!validJsonOfField(6, "create_time", pJson["create_time"], err, true))
            return false;
    }
    if(pJson.isMember("update_time"))
    {
        if(!validJsonOfField(7, "update_time", pJson["update_time"], err, true))
            return false;
    }
    if(pJson.isMember("is_delete"))
    {
        if(!validJsonOfField(8, "is_delete", pJson["is_delete"], err, true))
            return false;
    }
    if(pJson.isMember("remark"))
    {
        if(!validJsonOfField(9, "remark", pJson["remark"], err, true))
            return false;
    }
    if(pJson.isMember("is_check"))
    {
        if(!validJsonOfField(10, "is_check", pJson["is_check"], err, true))
            return false;
    }
    if(pJson.isMember("check_invoice_date"))
    {
        if(!validJsonOfField(11, "check_invoice_date", pJson["check_invoice_date"], err, true))
            return false;
    }
    if(pJson.isMember("check_invoice_price"))
    {
        if(!validJsonOfField(12, "check_invoice_price", pJson["check_invoice_price"], err, true))
            return false;
    }
    if(pJson.isMember("check_invoice_number"))
    {
        if(!validJsonOfField(13, "check_invoice_number", pJson["check_invoice_number"], err, true))
            return false;
    }
    if(pJson.isMember("product_category_id"))
    {
        if(!validJsonOfField(14, "product_category_id", pJson["product_category_id"], err, true))
            return false;
    }
    if(pJson.isMember("in_out_storage_date"))
    {
        if(!validJsonOfField(15, "in_out_storage_date", pJson["in_out_storage_date"], err, true))
            return false;
    }
    if(pJson.isMember("company_id"))
    {
        if(!validJsonOfField(16, "company_id", pJson["company_id"], err, true))
            return false;
    }
    if(pJson.isMember("order_key"))
    {
        if(!validJsonOfField(17, "order_key", pJson["order_key"], err, true))
            return false;
    }
    if(pJson.isMember("confirm_check_invoice_date"))
    {
        if(!validJsonOfField(18, "confirm_check_invoice_date", pJson["confirm_check_invoice_date"], err, true))
            return false;
    }
    if(pJson.isMember("confirm_check_invoice_price"))
    {
        if(!validJsonOfField(19, "confirm_check_invoice_price", pJson["confirm_check_invoice_price"], err, true))
            return false;
    }
    if(pJson.isMember("confirm_check_invoice_number"))
    {
        if(!validJsonOfField(20, "confirm_check_invoice_number", pJson["confirm_check_invoice_number"], err, true))
            return false;
    }
    if(pJson.isMember("confirm_status"))
    {
        if(!validJsonOfField(21, "confirm_status", pJson["confirm_status"], err, true))
            return false;
    }
    return true;
}
bool FinancialCheckInvoice::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                               const std::vector<std::string> &pMasqueradingVector,
                                                               std::string &err)
{
    if(pMasqueradingVector.size() != 22)
    {
        err = "Bad masquerading vector";
        return false;
    }
    if(!pMasqueradingVector[0].empty())
    {
        if(pJson.isMember(pMasqueradingVector[0]))
        {
            if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[1].empty())
    {
        if(pJson.isMember(pMasqueradingVector[1]))
        {
            if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[2].empty())
    {
        if(pJson.isMember(pMasqueradingVector[2]))
        {
            if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[3].empty())
    {
        if(pJson.isMember(pMasqueradingVector[3]))
        {
            if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[4].empty())
    {
        if(pJson.isMember(pMasqueradingVector[4]))
        {
            if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[5].empty())
    {
        if(pJson.isMember(pMasqueradingVector[5]))
        {
            if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[6].empty())
    {
        if(pJson.isMember(pMasqueradingVector[6]))
        {
            if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[7].empty())
    {
        if(pJson.isMember(pMasqueradingVector[7]))
        {
            if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[8].empty())
    {
        if(pJson.isMember(pMasqueradingVector[8]))
        {
            if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[9].empty())
    {
        if(pJson.isMember(pMasqueradingVector[9]))
        {
            if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[10].empty())
    {
        if(pJson.isMember(pMasqueradingVector[10]))
        {
            if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[11].empty())
    {
        if(pJson.isMember(pMasqueradingVector[11]))
        {
            if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[12].empty())
    {
        if(pJson.isMember(pMasqueradingVector[12]))
        {
            if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[13].empty())
    {
        if(pJson.isMember(pMasqueradingVector[13]))
        {
            if(!validJsonOfField(13, pMasqueradingVector[13], pJson[pMasqueradingVector[13]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[14].empty())
    {
        if(pJson.isMember(pMasqueradingVector[14]))
        {
            if(!validJsonOfField(14, pMasqueradingVector[14], pJson[pMasqueradingVector[14]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[15].empty())
    {
        if(pJson.isMember(pMasqueradingVector[15]))
        {
            if(!validJsonOfField(15, pMasqueradingVector[15], pJson[pMasqueradingVector[15]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[16].empty())
    {
        if(pJson.isMember(pMasqueradingVector[16]))
        {
            if(!validJsonOfField(16, pMasqueradingVector[16], pJson[pMasqueradingVector[16]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[17].empty())
    {
        if(pJson.isMember(pMasqueradingVector[17]))
        {
            if(!validJsonOfField(17, pMasqueradingVector[17], pJson[pMasqueradingVector[17]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[18].empty())
    {
        if(pJson.isMember(pMasqueradingVector[18]))
        {
            if(!validJsonOfField(18, pMasqueradingVector[18], pJson[pMasqueradingVector[18]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[19].empty())
    {
        if(pJson.isMember(pMasqueradingVector[19]))
        {
            if(!validJsonOfField(19, pMasqueradingVector[19], pJson[pMasqueradingVector[19]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[20].empty())
    {
        if(pJson.isMember(pMasqueradingVector[20]))
        {
            if(!validJsonOfField(20, pMasqueradingVector[20], pJson[pMasqueradingVector[20]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[21].empty())
    {
        if(pJson.isMember(pMasqueradingVector[21]))
        {
            if(!validJsonOfField(21, pMasqueradingVector[21], pJson[pMasqueradingVector[21]], err, true))
                return false;
        }
    }
    return true;
}
bool FinancialCheckInvoice::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("invoice_type"))
    {
        if(!validJsonOfField(1, "invoice_type", pJson["invoice_type"], err, false))
            return false;
    }
    if(pJson.isMember("in_out_storage_id"))
    {
        if(!validJsonOfField(2, "in_out_storage_id", pJson["in_out_storage_id"], err, false))
            return false;
    }
    if(pJson.isMember("in_out_storage_sku_id"))
    {
        if(!validJsonOfField(3, "in_out_storage_sku_id", pJson["in_out_storage_sku_id"], err, false))
            return false;
    }
    if(pJson.isMember("shop_id"))
    {
        if(!validJsonOfField(4, "shop_id", pJson["shop_id"], err, false))
            return false;
    }
    if(pJson.isMember("admin_id"))
    {
        if(!validJsonOfField(5, "admin_id", pJson["admin_id"], err, false))
            return false;
    }
    if(pJson.isMember("create_time"))
    {
        if(!validJsonOfField(6, "create_time", pJson["create_time"], err, false))
            return false;
    }
    if(pJson.isMember("update_time"))
    {
        if(!validJsonOfField(7, "update_time", pJson["update_time"], err, false))
            return false;
    }
    if(pJson.isMember("is_delete"))
    {
        if(!validJsonOfField(8, "is_delete", pJson["is_delete"], err, false))
            return false;
    }
    if(pJson.isMember("remark"))
    {
        if(!validJsonOfField(9, "remark", pJson["remark"], err, false))
            return false;
    }
    if(pJson.isMember("is_check"))
    {
        if(!validJsonOfField(10, "is_check", pJson["is_check"], err, false))
            return false;
    }
    if(pJson.isMember("check_invoice_date"))
    {
        if(!validJsonOfField(11, "check_invoice_date", pJson["check_invoice_date"], err, false))
            return false;
    }
    if(pJson.isMember("check_invoice_price"))
    {
        if(!validJsonOfField(12, "check_invoice_price", pJson["check_invoice_price"], err, false))
            return false;
    }
    if(pJson.isMember("check_invoice_number"))
    {
        if(!validJsonOfField(13, "check_invoice_number", pJson["check_invoice_number"], err, false))
            return false;
    }
    if(pJson.isMember("product_category_id"))
    {
        if(!validJsonOfField(14, "product_category_id", pJson["product_category_id"], err, false))
            return false;
    }
    if(pJson.isMember("in_out_storage_date"))
    {
        if(!validJsonOfField(15, "in_out_storage_date", pJson["in_out_storage_date"], err, false))
            return false;
    }
    if(pJson.isMember("company_id"))
    {
        if(!validJsonOfField(16, "company_id", pJson["company_id"], err, false))
            return false;
    }
    if(pJson.isMember("order_key"))
    {
        if(!validJsonOfField(17, "order_key", pJson["order_key"], err, false))
            return false;
    }
    if(pJson.isMember("confirm_check_invoice_date"))
    {
        if(!validJsonOfField(18, "confirm_check_invoice_date", pJson["confirm_check_invoice_date"], err, false))
            return false;
    }
    if(pJson.isMember("confirm_check_invoice_price"))
    {
        if(!validJsonOfField(19, "confirm_check_invoice_price", pJson["confirm_check_invoice_price"], err, false))
            return false;
    }
    if(pJson.isMember("confirm_check_invoice_number"))
    {
        if(!validJsonOfField(20, "confirm_check_invoice_number", pJson["confirm_check_invoice_number"], err, false))
            return false;
    }
    if(pJson.isMember("confirm_status"))
    {
        if(!validJsonOfField(21, "confirm_status", pJson["confirm_status"], err, false))
            return false;
    }
    return true;
}
bool FinancialCheckInvoice::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                             const std::vector<std::string> &pMasqueradingVector,
                                                             std::string &err)
{
    if(pMasqueradingVector.size() != 22)
    {
        err = "Bad masquerading vector";
        return false;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
            return false;
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
            return false;
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
            return false;
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
            return false;
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
            return false;
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
            return false;
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
            return false;
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, false))
            return false;
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, false))
            return false;
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, false))
            return false;
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, false))
            return false;
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, false))
            return false;
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        if(!validJsonOfField(13, pMasqueradingVector[13], pJson[pMasqueradingVector[13]], err, false))
            return false;
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        if(!validJsonOfField(14, pMasqueradingVector[14], pJson[pMasqueradingVector[14]], err, false))
            return false;
    }
    if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
    {
        if(!validJsonOfField(15, pMasqueradingVector[15], pJson[pMasqueradingVector[15]], err, false))
            return false;
    }
    if(!pMasqueradingVector[16].empty() && pJson.isMember(pMasqueradingVector[16]))
    {
        if(!validJsonOfField(16, pMasqueradingVector[16], pJson[pMasqueradingVector[16]], err, false))
            return false;
    }
    if(!pMasqueradingVector[17].empty() && pJson.isMember(pMasqueradingVector[17]))
    {
        if(!validJsonOfField(17, pMasqueradingVector[17], pJson[pMasqueradingVector[17]], err, false))
            return false;
    }
    if(!pMasqueradingVector[18].empty() && pJson.isMember(pMasqueradingVector[18]))
    {
        if(!validJsonOfField(18, pMasqueradingVector[18], pJson[pMasqueradingVector[18]], err, false))
            return false;
    }
    if(!pMasqueradingVector[19].empty() && pJson.isMember(pMasqueradingVector[19]))
    {
        if(!validJsonOfField(19, pMasqueradingVector[19], pJson[pMasqueradingVector[19]], err, false))
            return false;
    }
    if(!pMasqueradingVector[20].empty() && pJson.isMember(pMasqueradingVector[20]))
    {
        if(!validJsonOfField(20, pMasqueradingVector[20], pJson[pMasqueradingVector[20]], err, false))
            return false;
    }
    if(!pMasqueradingVector[21].empty() && pJson.isMember(pMasqueradingVector[21]))
    {
        if(!validJsonOfField(21, pMasqueradingVector[21], pJson[pMasqueradingVector[21]], err, false))
            return false;
    }
    return true;
}
bool FinancialCheckInvoice::validJsonOfField(size_t index,
                                             const std::string &fieldName,
                                             const Json::Value &pJson, 
                                             std::string &err, 
                                             bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }        
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 5:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 6:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 7:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 8:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 9:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 50)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 50)";
                return false;               
            }

            break;
        case 10:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 11:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 12:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 13:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 14:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 15:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 16:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 17:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 50)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 50)";
                return false;               
            }

            break;
        case 18:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 19:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 20:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 21:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
     
        default:
            err="Internal error in the server";
            return false;
            break;
    }
    return true;
}
