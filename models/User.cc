/**
 *
 *  User.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "User.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::v2;

const std::string User::Cols::_id = "id";
const std::string User::Cols::_create_time = "create_time";
const std::string User::Cols::_update_time = "update_time";
const std::string User::Cols::_remark = "remark";
const std::string User::Cols::_source = "source";
const std::string User::Cols::_user_type = "user_type";
const std::string User::Cols::_mobile = "mobile";
const std::string User::Cols::_user_login_name = "user_login_name";
const std::string User::Cols::_user_password = "user_password";
const std::string User::Cols::_real_name = "real_name";
const std::string User::Cols::_user_sex = "user_sex";
const std::string User::Cols::_nick_name = "nick_name";
const std::string User::Cols::_last_time = "last_time";
const std::string User::Cols::_last_ip = "last_ip";
const std::string User::Cols::_user_avatar = "user_avatar";
const std::string User::Cols::_user_status = "user_status";
const std::string User::Cols::_personality_signature = "personality_signature";
const std::string User::Cols::_is_delete = "is_delete";
const std::string User::Cols::_email = "email";
const std::string User::Cols::_session_id = "session_id";
const std::string User::Cols::_token = "token";
const std::string User::Cols::_token_time = "token_time";
const std::string User::Cols::_qq = "qq";
const std::string User::Cols::_service_id = "service_id";
const std::string User::Cols::_telephone = "telephone";
const std::string User::Cols::_admin_id = "admin_id";
const std::string User::Cols::_weixin_id = "weixin_id";
const std::string User::primaryKeyName = "id";
const bool User::hasPrimaryKey = true;
const std::string User::tableName = "user";

const std::vector<typename User::MetaData> User::metaData_={
{"id","uint64_t","bigint(20) unsigned",8,1,1,1},
{"create_time","::trantor::Date","datetime",0,0,0,1},
{"update_time","::trantor::Date","datetime",0,0,0,1},
{"remark","std::string","varchar(200)",200,0,0,0},
{"source","std::string","varchar(20)",20,0,0,0},
{"user_type","uint8_t","tinyint(1) unsigned",1,0,0,1},
{"mobile","std::string","varchar(11)",11,0,0,1},
{"user_login_name","std::string","varchar(20)",20,0,0,1},
{"user_password","std::string","varchar(32)",32,0,0,0},
{"real_name","std::string","varchar(20)",20,0,0,0},
{"user_sex","uint8_t","tinyint(1) unsigned",1,0,0,1},
{"nick_name","std::string","varchar(10)",10,0,0,0},
{"last_time","::trantor::Date","datetime",0,0,0,0},
{"last_ip","std::string","varchar(15)",15,0,0,0},
{"user_avatar","std::string","varchar(100)",100,0,0,0},
{"user_status","int8_t","tinyint(1)",1,0,0,1},
{"personality_signature","std::string","varchar(50)",50,0,0,0},
{"is_delete","int8_t","tinyint(1)",1,0,0,1},
{"email","std::string","varchar(30)",30,0,0,0},
{"session_id","std::string","varchar(50)",50,0,0,0},
{"token","std::string","varchar(32)",32,0,0,0},
{"token_time","::trantor::Date","datetime",0,0,0,0},
{"qq","std::string","varchar(20)",20,0,0,0},
{"service_id","int64_t","bigint(20)",8,0,0,1},
{"telephone","std::string","varchar(30)",30,0,0,0},
{"admin_id","uint64_t","bigint(20) unsigned",8,0,0,1},
{"weixin_id","std::string","varchar(100)",100,0,0,0}
};
const std::string &User::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
User::User(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<uint64_t>(r["id"].as<uint64_t>());
        }
        if(!r["create_time"].isNull())
        {
            auto timeStr = r["create_time"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        if(!r["update_time"].isNull())
        {
            auto timeStr = r["update_time"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        if(!r["remark"].isNull())
        {
            remark_=std::make_shared<std::string>(r["remark"].as<std::string>());
        }
        if(!r["source"].isNull())
        {
            source_=std::make_shared<std::string>(r["source"].as<std::string>());
        }
        if(!r["user_type"].isNull())
        {
            userType_=std::make_shared<uint8_t>(r["user_type"].as<uint8_t>());
        }
        if(!r["mobile"].isNull())
        {
            mobile_=std::make_shared<std::string>(r["mobile"].as<std::string>());
        }
        if(!r["user_login_name"].isNull())
        {
            userLoginName_=std::make_shared<std::string>(r["user_login_name"].as<std::string>());
        }
        if(!r["user_password"].isNull())
        {
            userPassword_=std::make_shared<std::string>(r["user_password"].as<std::string>());
        }
        if(!r["real_name"].isNull())
        {
            realName_=std::make_shared<std::string>(r["real_name"].as<std::string>());
        }
        if(!r["user_sex"].isNull())
        {
            userSex_=std::make_shared<uint8_t>(r["user_sex"].as<uint8_t>());
        }
        if(!r["nick_name"].isNull())
        {
            nickName_=std::make_shared<std::string>(r["nick_name"].as<std::string>());
        }
        if(!r["last_time"].isNull())
        {
            auto timeStr = r["last_time"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            lastTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        if(!r["last_ip"].isNull())
        {
            lastIp_=std::make_shared<std::string>(r["last_ip"].as<std::string>());
        }
        if(!r["user_avatar"].isNull())
        {
            userAvatar_=std::make_shared<std::string>(r["user_avatar"].as<std::string>());
        }
        if(!r["user_status"].isNull())
        {
            userStatus_=std::make_shared<int8_t>(r["user_status"].as<int8_t>());
        }
        if(!r["personality_signature"].isNull())
        {
            personalitySignature_=std::make_shared<std::string>(r["personality_signature"].as<std::string>());
        }
        if(!r["is_delete"].isNull())
        {
            isDelete_=std::make_shared<int8_t>(r["is_delete"].as<int8_t>());
        }
        if(!r["email"].isNull())
        {
            email_=std::make_shared<std::string>(r["email"].as<std::string>());
        }
        if(!r["session_id"].isNull())
        {
            sessionId_=std::make_shared<std::string>(r["session_id"].as<std::string>());
        }
        if(!r["token"].isNull())
        {
            token_=std::make_shared<std::string>(r["token"].as<std::string>());
        }
        if(!r["token_time"].isNull())
        {
            auto timeStr = r["token_time"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            tokenTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        if(!r["qq"].isNull())
        {
            qq_=std::make_shared<std::string>(r["qq"].as<std::string>());
        }
        if(!r["service_id"].isNull())
        {
            serviceId_=std::make_shared<int64_t>(r["service_id"].as<int64_t>());
        }
        if(!r["telephone"].isNull())
        {
            telephone_=std::make_shared<std::string>(r["telephone"].as<std::string>());
        }
        if(!r["admin_id"].isNull())
        {
            adminId_=std::make_shared<uint64_t>(r["admin_id"].as<uint64_t>());
        }
        if(!r["weixin_id"].isNull())
        {
            weixinId_=std::make_shared<std::string>(r["weixin_id"].as<std::string>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 27 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            remark_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            source_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            userType_=std::make_shared<uint8_t>(r[index].as<uint8_t>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            mobile_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            userLoginName_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 8;
        if(!r[index].isNull())
        {
            userPassword_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 9;
        if(!r[index].isNull())
        {
            realName_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 10;
        if(!r[index].isNull())
        {
            userSex_=std::make_shared<uint8_t>(r[index].as<uint8_t>());
        }
        index = offset + 11;
        if(!r[index].isNull())
        {
            nickName_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 12;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            lastTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        index = offset + 13;
        if(!r[index].isNull())
        {
            lastIp_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 14;
        if(!r[index].isNull())
        {
            userAvatar_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 15;
        if(!r[index].isNull())
        {
            userStatus_=std::make_shared<int8_t>(r[index].as<int8_t>());
        }
        index = offset + 16;
        if(!r[index].isNull())
        {
            personalitySignature_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 17;
        if(!r[index].isNull())
        {
            isDelete_=std::make_shared<int8_t>(r[index].as<int8_t>());
        }
        index = offset + 18;
        if(!r[index].isNull())
        {
            email_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 19;
        if(!r[index].isNull())
        {
            sessionId_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 20;
        if(!r[index].isNull())
        {
            token_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 21;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            tokenTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        index = offset + 22;
        if(!r[index].isNull())
        {
            qq_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 23;
        if(!r[index].isNull())
        {
            serviceId_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 24;
        if(!r[index].isNull())
        {
            telephone_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 25;
        if(!r[index].isNull())
        {
            adminId_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 26;
        if(!r[index].isNull())
        {
            weixinId_=std::make_shared<std::string>(r[index].as<std::string>());
        }
    }

}

User::User(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 27)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[1]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[2]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            remark_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            source_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            userType_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[5]].asUInt64());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            mobile_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            userLoginName_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            userPassword_=std::make_shared<std::string>(pJson[pMasqueradingVector[8]].asString());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            realName_=std::make_shared<std::string>(pJson[pMasqueradingVector[9]].asString());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            userSex_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[10]].asUInt64());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            nickName_=std::make_shared<std::string>(pJson[pMasqueradingVector[11]].asString());
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[12]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            lastTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        dirtyFlag_[13] = true;
        if(!pJson[pMasqueradingVector[13]].isNull())
        {
            lastIp_=std::make_shared<std::string>(pJson[pMasqueradingVector[13]].asString());
        }
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        dirtyFlag_[14] = true;
        if(!pJson[pMasqueradingVector[14]].isNull())
        {
            userAvatar_=std::make_shared<std::string>(pJson[pMasqueradingVector[14]].asString());
        }
    }
    if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
    {
        dirtyFlag_[15] = true;
        if(!pJson[pMasqueradingVector[15]].isNull())
        {
            userStatus_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[15]].asInt64());
        }
    }
    if(!pMasqueradingVector[16].empty() && pJson.isMember(pMasqueradingVector[16]))
    {
        dirtyFlag_[16] = true;
        if(!pJson[pMasqueradingVector[16]].isNull())
        {
            personalitySignature_=std::make_shared<std::string>(pJson[pMasqueradingVector[16]].asString());
        }
    }
    if(!pMasqueradingVector[17].empty() && pJson.isMember(pMasqueradingVector[17]))
    {
        dirtyFlag_[17] = true;
        if(!pJson[pMasqueradingVector[17]].isNull())
        {
            isDelete_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[17]].asInt64());
        }
    }
    if(!pMasqueradingVector[18].empty() && pJson.isMember(pMasqueradingVector[18]))
    {
        dirtyFlag_[18] = true;
        if(!pJson[pMasqueradingVector[18]].isNull())
        {
            email_=std::make_shared<std::string>(pJson[pMasqueradingVector[18]].asString());
        }
    }
    if(!pMasqueradingVector[19].empty() && pJson.isMember(pMasqueradingVector[19]))
    {
        dirtyFlag_[19] = true;
        if(!pJson[pMasqueradingVector[19]].isNull())
        {
            sessionId_=std::make_shared<std::string>(pJson[pMasqueradingVector[19]].asString());
        }
    }
    if(!pMasqueradingVector[20].empty() && pJson.isMember(pMasqueradingVector[20]))
    {
        dirtyFlag_[20] = true;
        if(!pJson[pMasqueradingVector[20]].isNull())
        {
            token_=std::make_shared<std::string>(pJson[pMasqueradingVector[20]].asString());
        }
    }
    if(!pMasqueradingVector[21].empty() && pJson.isMember(pMasqueradingVector[21]))
    {
        dirtyFlag_[21] = true;
        if(!pJson[pMasqueradingVector[21]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[21]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            tokenTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[22].empty() && pJson.isMember(pMasqueradingVector[22]))
    {
        dirtyFlag_[22] = true;
        if(!pJson[pMasqueradingVector[22]].isNull())
        {
            qq_=std::make_shared<std::string>(pJson[pMasqueradingVector[22]].asString());
        }
    }
    if(!pMasqueradingVector[23].empty() && pJson.isMember(pMasqueradingVector[23]))
    {
        dirtyFlag_[23] = true;
        if(!pJson[pMasqueradingVector[23]].isNull())
        {
            serviceId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[23]].asInt64());
        }
    }
    if(!pMasqueradingVector[24].empty() && pJson.isMember(pMasqueradingVector[24]))
    {
        dirtyFlag_[24] = true;
        if(!pJson[pMasqueradingVector[24]].isNull())
        {
            telephone_=std::make_shared<std::string>(pJson[pMasqueradingVector[24]].asString());
        }
    }
    if(!pMasqueradingVector[25].empty() && pJson.isMember(pMasqueradingVector[25]))
    {
        dirtyFlag_[25] = true;
        if(!pJson[pMasqueradingVector[25]].isNull())
        {
            adminId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[25]].asUInt64());
        }
    }
    if(!pMasqueradingVector[26].empty() && pJson.isMember(pMasqueradingVector[26]))
    {
        dirtyFlag_[26] = true;
        if(!pJson[pMasqueradingVector[26]].isNull())
        {
            weixinId_=std::make_shared<std::string>(pJson[pMasqueradingVector[26]].asString());
        }
    }
}

User::User(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson["id"].asUInt64());
        }
    }
    if(pJson.isMember("create_time"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["create_time"].isNull())
        {
            auto timeStr = pJson["create_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("update_time"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["update_time"].isNull())
        {
            auto timeStr = pJson["update_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("remark"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["remark"].isNull())
        {
            remark_=std::make_shared<std::string>(pJson["remark"].asString());
        }
    }
    if(pJson.isMember("source"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["source"].isNull())
        {
            source_=std::make_shared<std::string>(pJson["source"].asString());
        }
    }
    if(pJson.isMember("user_type"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["user_type"].isNull())
        {
            userType_=std::make_shared<uint8_t>((uint8_t)pJson["user_type"].asUInt64());
        }
    }
    if(pJson.isMember("mobile"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["mobile"].isNull())
        {
            mobile_=std::make_shared<std::string>(pJson["mobile"].asString());
        }
    }
    if(pJson.isMember("user_login_name"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["user_login_name"].isNull())
        {
            userLoginName_=std::make_shared<std::string>(pJson["user_login_name"].asString());
        }
    }
    if(pJson.isMember("user_password"))
    {
        dirtyFlag_[8]=true;
        if(!pJson["user_password"].isNull())
        {
            userPassword_=std::make_shared<std::string>(pJson["user_password"].asString());
        }
    }
    if(pJson.isMember("real_name"))
    {
        dirtyFlag_[9]=true;
        if(!pJson["real_name"].isNull())
        {
            realName_=std::make_shared<std::string>(pJson["real_name"].asString());
        }
    }
    if(pJson.isMember("user_sex"))
    {
        dirtyFlag_[10]=true;
        if(!pJson["user_sex"].isNull())
        {
            userSex_=std::make_shared<uint8_t>((uint8_t)pJson["user_sex"].asUInt64());
        }
    }
    if(pJson.isMember("nick_name"))
    {
        dirtyFlag_[11]=true;
        if(!pJson["nick_name"].isNull())
        {
            nickName_=std::make_shared<std::string>(pJson["nick_name"].asString());
        }
    }
    if(pJson.isMember("last_time"))
    {
        dirtyFlag_[12]=true;
        if(!pJson["last_time"].isNull())
        {
            auto timeStr = pJson["last_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            lastTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("last_ip"))
    {
        dirtyFlag_[13]=true;
        if(!pJson["last_ip"].isNull())
        {
            lastIp_=std::make_shared<std::string>(pJson["last_ip"].asString());
        }
    }
    if(pJson.isMember("user_avatar"))
    {
        dirtyFlag_[14]=true;
        if(!pJson["user_avatar"].isNull())
        {
            userAvatar_=std::make_shared<std::string>(pJson["user_avatar"].asString());
        }
    }
    if(pJson.isMember("user_status"))
    {
        dirtyFlag_[15]=true;
        if(!pJson["user_status"].isNull())
        {
            userStatus_=std::make_shared<int8_t>((int8_t)pJson["user_status"].asInt64());
        }
    }
    if(pJson.isMember("personality_signature"))
    {
        dirtyFlag_[16]=true;
        if(!pJson["personality_signature"].isNull())
        {
            personalitySignature_=std::make_shared<std::string>(pJson["personality_signature"].asString());
        }
    }
    if(pJson.isMember("is_delete"))
    {
        dirtyFlag_[17]=true;
        if(!pJson["is_delete"].isNull())
        {
            isDelete_=std::make_shared<int8_t>((int8_t)pJson["is_delete"].asInt64());
        }
    }
    if(pJson.isMember("email"))
    {
        dirtyFlag_[18]=true;
        if(!pJson["email"].isNull())
        {
            email_=std::make_shared<std::string>(pJson["email"].asString());
        }
    }
    if(pJson.isMember("session_id"))
    {
        dirtyFlag_[19]=true;
        if(!pJson["session_id"].isNull())
        {
            sessionId_=std::make_shared<std::string>(pJson["session_id"].asString());
        }
    }
    if(pJson.isMember("token"))
    {
        dirtyFlag_[20]=true;
        if(!pJson["token"].isNull())
        {
            token_=std::make_shared<std::string>(pJson["token"].asString());
        }
    }
    if(pJson.isMember("token_time"))
    {
        dirtyFlag_[21]=true;
        if(!pJson["token_time"].isNull())
        {
            auto timeStr = pJson["token_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            tokenTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("qq"))
    {
        dirtyFlag_[22]=true;
        if(!pJson["qq"].isNull())
        {
            qq_=std::make_shared<std::string>(pJson["qq"].asString());
        }
    }
    if(pJson.isMember("service_id"))
    {
        dirtyFlag_[23]=true;
        if(!pJson["service_id"].isNull())
        {
            serviceId_=std::make_shared<int64_t>((int64_t)pJson["service_id"].asInt64());
        }
    }
    if(pJson.isMember("telephone"))
    {
        dirtyFlag_[24]=true;
        if(!pJson["telephone"].isNull())
        {
            telephone_=std::make_shared<std::string>(pJson["telephone"].asString());
        }
    }
    if(pJson.isMember("admin_id"))
    {
        dirtyFlag_[25]=true;
        if(!pJson["admin_id"].isNull())
        {
            adminId_=std::make_shared<uint64_t>((uint64_t)pJson["admin_id"].asUInt64());
        }
    }
    if(pJson.isMember("weixin_id"))
    {
        dirtyFlag_[26]=true;
        if(!pJson["weixin_id"].isNull())
        {
            weixinId_=std::make_shared<std::string>(pJson["weixin_id"].asString());
        }
    }
}

void User::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 27)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[1]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[2]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            remark_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            source_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            userType_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[5]].asUInt64());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            mobile_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            userLoginName_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            userPassword_=std::make_shared<std::string>(pJson[pMasqueradingVector[8]].asString());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            realName_=std::make_shared<std::string>(pJson[pMasqueradingVector[9]].asString());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            userSex_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[10]].asUInt64());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            nickName_=std::make_shared<std::string>(pJson[pMasqueradingVector[11]].asString());
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[12]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            lastTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        dirtyFlag_[13] = true;
        if(!pJson[pMasqueradingVector[13]].isNull())
        {
            lastIp_=std::make_shared<std::string>(pJson[pMasqueradingVector[13]].asString());
        }
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        dirtyFlag_[14] = true;
        if(!pJson[pMasqueradingVector[14]].isNull())
        {
            userAvatar_=std::make_shared<std::string>(pJson[pMasqueradingVector[14]].asString());
        }
    }
    if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
    {
        dirtyFlag_[15] = true;
        if(!pJson[pMasqueradingVector[15]].isNull())
        {
            userStatus_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[15]].asInt64());
        }
    }
    if(!pMasqueradingVector[16].empty() && pJson.isMember(pMasqueradingVector[16]))
    {
        dirtyFlag_[16] = true;
        if(!pJson[pMasqueradingVector[16]].isNull())
        {
            personalitySignature_=std::make_shared<std::string>(pJson[pMasqueradingVector[16]].asString());
        }
    }
    if(!pMasqueradingVector[17].empty() && pJson.isMember(pMasqueradingVector[17]))
    {
        dirtyFlag_[17] = true;
        if(!pJson[pMasqueradingVector[17]].isNull())
        {
            isDelete_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[17]].asInt64());
        }
    }
    if(!pMasqueradingVector[18].empty() && pJson.isMember(pMasqueradingVector[18]))
    {
        dirtyFlag_[18] = true;
        if(!pJson[pMasqueradingVector[18]].isNull())
        {
            email_=std::make_shared<std::string>(pJson[pMasqueradingVector[18]].asString());
        }
    }
    if(!pMasqueradingVector[19].empty() && pJson.isMember(pMasqueradingVector[19]))
    {
        dirtyFlag_[19] = true;
        if(!pJson[pMasqueradingVector[19]].isNull())
        {
            sessionId_=std::make_shared<std::string>(pJson[pMasqueradingVector[19]].asString());
        }
    }
    if(!pMasqueradingVector[20].empty() && pJson.isMember(pMasqueradingVector[20]))
    {
        dirtyFlag_[20] = true;
        if(!pJson[pMasqueradingVector[20]].isNull())
        {
            token_=std::make_shared<std::string>(pJson[pMasqueradingVector[20]].asString());
        }
    }
    if(!pMasqueradingVector[21].empty() && pJson.isMember(pMasqueradingVector[21]))
    {
        dirtyFlag_[21] = true;
        if(!pJson[pMasqueradingVector[21]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[21]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            tokenTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[22].empty() && pJson.isMember(pMasqueradingVector[22]))
    {
        dirtyFlag_[22] = true;
        if(!pJson[pMasqueradingVector[22]].isNull())
        {
            qq_=std::make_shared<std::string>(pJson[pMasqueradingVector[22]].asString());
        }
    }
    if(!pMasqueradingVector[23].empty() && pJson.isMember(pMasqueradingVector[23]))
    {
        dirtyFlag_[23] = true;
        if(!pJson[pMasqueradingVector[23]].isNull())
        {
            serviceId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[23]].asInt64());
        }
    }
    if(!pMasqueradingVector[24].empty() && pJson.isMember(pMasqueradingVector[24]))
    {
        dirtyFlag_[24] = true;
        if(!pJson[pMasqueradingVector[24]].isNull())
        {
            telephone_=std::make_shared<std::string>(pJson[pMasqueradingVector[24]].asString());
        }
    }
    if(!pMasqueradingVector[25].empty() && pJson.isMember(pMasqueradingVector[25]))
    {
        dirtyFlag_[25] = true;
        if(!pJson[pMasqueradingVector[25]].isNull())
        {
            adminId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[25]].asUInt64());
        }
    }
    if(!pMasqueradingVector[26].empty() && pJson.isMember(pMasqueradingVector[26]))
    {
        dirtyFlag_[26] = true;
        if(!pJson[pMasqueradingVector[26]].isNull())
        {
            weixinId_=std::make_shared<std::string>(pJson[pMasqueradingVector[26]].asString());
        }
    }
}
                                                                    
void User::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson["id"].asUInt64());
        }
    }
    if(pJson.isMember("create_time"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["create_time"].isNull())
        {
            auto timeStr = pJson["create_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("update_time"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["update_time"].isNull())
        {
            auto timeStr = pJson["update_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("remark"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["remark"].isNull())
        {
            remark_=std::make_shared<std::string>(pJson["remark"].asString());
        }
    }
    if(pJson.isMember("source"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["source"].isNull())
        {
            source_=std::make_shared<std::string>(pJson["source"].asString());
        }
    }
    if(pJson.isMember("user_type"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["user_type"].isNull())
        {
            userType_=std::make_shared<uint8_t>((uint8_t)pJson["user_type"].asUInt64());
        }
    }
    if(pJson.isMember("mobile"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["mobile"].isNull())
        {
            mobile_=std::make_shared<std::string>(pJson["mobile"].asString());
        }
    }
    if(pJson.isMember("user_login_name"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["user_login_name"].isNull())
        {
            userLoginName_=std::make_shared<std::string>(pJson["user_login_name"].asString());
        }
    }
    if(pJson.isMember("user_password"))
    {
        dirtyFlag_[8] = true;
        if(!pJson["user_password"].isNull())
        {
            userPassword_=std::make_shared<std::string>(pJson["user_password"].asString());
        }
    }
    if(pJson.isMember("real_name"))
    {
        dirtyFlag_[9] = true;
        if(!pJson["real_name"].isNull())
        {
            realName_=std::make_shared<std::string>(pJson["real_name"].asString());
        }
    }
    if(pJson.isMember("user_sex"))
    {
        dirtyFlag_[10] = true;
        if(!pJson["user_sex"].isNull())
        {
            userSex_=std::make_shared<uint8_t>((uint8_t)pJson["user_sex"].asUInt64());
        }
    }
    if(pJson.isMember("nick_name"))
    {
        dirtyFlag_[11] = true;
        if(!pJson["nick_name"].isNull())
        {
            nickName_=std::make_shared<std::string>(pJson["nick_name"].asString());
        }
    }
    if(pJson.isMember("last_time"))
    {
        dirtyFlag_[12] = true;
        if(!pJson["last_time"].isNull())
        {
            auto timeStr = pJson["last_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            lastTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("last_ip"))
    {
        dirtyFlag_[13] = true;
        if(!pJson["last_ip"].isNull())
        {
            lastIp_=std::make_shared<std::string>(pJson["last_ip"].asString());
        }
    }
    if(pJson.isMember("user_avatar"))
    {
        dirtyFlag_[14] = true;
        if(!pJson["user_avatar"].isNull())
        {
            userAvatar_=std::make_shared<std::string>(pJson["user_avatar"].asString());
        }
    }
    if(pJson.isMember("user_status"))
    {
        dirtyFlag_[15] = true;
        if(!pJson["user_status"].isNull())
        {
            userStatus_=std::make_shared<int8_t>((int8_t)pJson["user_status"].asInt64());
        }
    }
    if(pJson.isMember("personality_signature"))
    {
        dirtyFlag_[16] = true;
        if(!pJson["personality_signature"].isNull())
        {
            personalitySignature_=std::make_shared<std::string>(pJson["personality_signature"].asString());
        }
    }
    if(pJson.isMember("is_delete"))
    {
        dirtyFlag_[17] = true;
        if(!pJson["is_delete"].isNull())
        {
            isDelete_=std::make_shared<int8_t>((int8_t)pJson["is_delete"].asInt64());
        }
    }
    if(pJson.isMember("email"))
    {
        dirtyFlag_[18] = true;
        if(!pJson["email"].isNull())
        {
            email_=std::make_shared<std::string>(pJson["email"].asString());
        }
    }
    if(pJson.isMember("session_id"))
    {
        dirtyFlag_[19] = true;
        if(!pJson["session_id"].isNull())
        {
            sessionId_=std::make_shared<std::string>(pJson["session_id"].asString());
        }
    }
    if(pJson.isMember("token"))
    {
        dirtyFlag_[20] = true;
        if(!pJson["token"].isNull())
        {
            token_=std::make_shared<std::string>(pJson["token"].asString());
        }
    }
    if(pJson.isMember("token_time"))
    {
        dirtyFlag_[21] = true;
        if(!pJson["token_time"].isNull())
        {
            auto timeStr = pJson["token_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            tokenTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("qq"))
    {
        dirtyFlag_[22] = true;
        if(!pJson["qq"].isNull())
        {
            qq_=std::make_shared<std::string>(pJson["qq"].asString());
        }
    }
    if(pJson.isMember("service_id"))
    {
        dirtyFlag_[23] = true;
        if(!pJson["service_id"].isNull())
        {
            serviceId_=std::make_shared<int64_t>((int64_t)pJson["service_id"].asInt64());
        }
    }
    if(pJson.isMember("telephone"))
    {
        dirtyFlag_[24] = true;
        if(!pJson["telephone"].isNull())
        {
            telephone_=std::make_shared<std::string>(pJson["telephone"].asString());
        }
    }
    if(pJson.isMember("admin_id"))
    {
        dirtyFlag_[25] = true;
        if(!pJson["admin_id"].isNull())
        {
            adminId_=std::make_shared<uint64_t>((uint64_t)pJson["admin_id"].asUInt64());
        }
    }
    if(pJson.isMember("weixin_id"))
    {
        dirtyFlag_[26] = true;
        if(!pJson["weixin_id"].isNull())
        {
            weixinId_=std::make_shared<std::string>(pJson["weixin_id"].asString());
        }
    }
}

const uint64_t &User::getValueOfId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &User::getId() const noexcept
{
    return id_;
}
void User::setId(const uint64_t &pId) noexcept
{
    id_ = std::make_shared<uint64_t>(pId);
    dirtyFlag_[0] = true;
}



const typename User::PrimaryKeyType & User::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const ::trantor::Date &User::getValueOfCreateTime() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(createTime_)
        return *createTime_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &User::getCreateTime() const noexcept
{
    return createTime_;
}
void User::setCreateTime(const ::trantor::Date &pCreateTime) noexcept
{
    createTime_ = std::make_shared<::trantor::Date>(pCreateTime);
    dirtyFlag_[1] = true;
}




const ::trantor::Date &User::getValueOfUpdateTime() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(updateTime_)
        return *updateTime_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &User::getUpdateTime() const noexcept
{
    return updateTime_;
}
void User::setUpdateTime(const ::trantor::Date &pUpdateTime) noexcept
{
    updateTime_ = std::make_shared<::trantor::Date>(pUpdateTime);
    dirtyFlag_[2] = true;
}




const std::string &User::getValueOfRemark() const noexcept
{
    const static std::string defaultValue = std::string();
    if(remark_)
        return *remark_;
    return defaultValue;
}
const std::shared_ptr<std::string> &User::getRemark() const noexcept
{
    return remark_;
}
void User::setRemark(const std::string &pRemark) noexcept
{
    remark_ = std::make_shared<std::string>(pRemark);
    dirtyFlag_[3] = true;
}
void User::setRemark(std::string &&pRemark) noexcept
{
    remark_ = std::make_shared<std::string>(std::move(pRemark));
    dirtyFlag_[3] = true;
}


void User::setRemarkToNull() noexcept
{
    remark_.reset();
    dirtyFlag_[3] = true;
}


const std::string &User::getValueOfSource() const noexcept
{
    const static std::string defaultValue = std::string();
    if(source_)
        return *source_;
    return defaultValue;
}
const std::shared_ptr<std::string> &User::getSource() const noexcept
{
    return source_;
}
void User::setSource(const std::string &pSource) noexcept
{
    source_ = std::make_shared<std::string>(pSource);
    dirtyFlag_[4] = true;
}
void User::setSource(std::string &&pSource) noexcept
{
    source_ = std::make_shared<std::string>(std::move(pSource));
    dirtyFlag_[4] = true;
}


void User::setSourceToNull() noexcept
{
    source_.reset();
    dirtyFlag_[4] = true;
}


const uint8_t &User::getValueOfUserType() const noexcept
{
    const static uint8_t defaultValue = uint8_t();
    if(userType_)
        return *userType_;
    return defaultValue;
}
const std::shared_ptr<uint8_t> &User::getUserType() const noexcept
{
    return userType_;
}
void User::setUserType(const uint8_t &pUserType) noexcept
{
    userType_ = std::make_shared<uint8_t>(pUserType);
    dirtyFlag_[5] = true;
}




const std::string &User::getValueOfMobile() const noexcept
{
    const static std::string defaultValue = std::string();
    if(mobile_)
        return *mobile_;
    return defaultValue;
}
const std::shared_ptr<std::string> &User::getMobile() const noexcept
{
    return mobile_;
}
void User::setMobile(const std::string &pMobile) noexcept
{
    mobile_ = std::make_shared<std::string>(pMobile);
    dirtyFlag_[6] = true;
}
void User::setMobile(std::string &&pMobile) noexcept
{
    mobile_ = std::make_shared<std::string>(std::move(pMobile));
    dirtyFlag_[6] = true;
}




const std::string &User::getValueOfUserLoginName() const noexcept
{
    const static std::string defaultValue = std::string();
    if(userLoginName_)
        return *userLoginName_;
    return defaultValue;
}
const std::shared_ptr<std::string> &User::getUserLoginName() const noexcept
{
    return userLoginName_;
}
void User::setUserLoginName(const std::string &pUserLoginName) noexcept
{
    userLoginName_ = std::make_shared<std::string>(pUserLoginName);
    dirtyFlag_[7] = true;
}
void User::setUserLoginName(std::string &&pUserLoginName) noexcept
{
    userLoginName_ = std::make_shared<std::string>(std::move(pUserLoginName));
    dirtyFlag_[7] = true;
}




const std::string &User::getValueOfUserPassword() const noexcept
{
    const static std::string defaultValue = std::string();
    if(userPassword_)
        return *userPassword_;
    return defaultValue;
}
const std::shared_ptr<std::string> &User::getUserPassword() const noexcept
{
    return userPassword_;
}
void User::setUserPassword(const std::string &pUserPassword) noexcept
{
    userPassword_ = std::make_shared<std::string>(pUserPassword);
    dirtyFlag_[8] = true;
}
void User::setUserPassword(std::string &&pUserPassword) noexcept
{
    userPassword_ = std::make_shared<std::string>(std::move(pUserPassword));
    dirtyFlag_[8] = true;
}


void User::setUserPasswordToNull() noexcept
{
    userPassword_.reset();
    dirtyFlag_[8] = true;
}


const std::string &User::getValueOfRealName() const noexcept
{
    const static std::string defaultValue = std::string();
    if(realName_)
        return *realName_;
    return defaultValue;
}
const std::shared_ptr<std::string> &User::getRealName() const noexcept
{
    return realName_;
}
void User::setRealName(const std::string &pRealName) noexcept
{
    realName_ = std::make_shared<std::string>(pRealName);
    dirtyFlag_[9] = true;
}
void User::setRealName(std::string &&pRealName) noexcept
{
    realName_ = std::make_shared<std::string>(std::move(pRealName));
    dirtyFlag_[9] = true;
}


void User::setRealNameToNull() noexcept
{
    realName_.reset();
    dirtyFlag_[9] = true;
}


const uint8_t &User::getValueOfUserSex() const noexcept
{
    const static uint8_t defaultValue = uint8_t();
    if(userSex_)
        return *userSex_;
    return defaultValue;
}
const std::shared_ptr<uint8_t> &User::getUserSex() const noexcept
{
    return userSex_;
}
void User::setUserSex(const uint8_t &pUserSex) noexcept
{
    userSex_ = std::make_shared<uint8_t>(pUserSex);
    dirtyFlag_[10] = true;
}




const std::string &User::getValueOfNickName() const noexcept
{
    const static std::string defaultValue = std::string();
    if(nickName_)
        return *nickName_;
    return defaultValue;
}
const std::shared_ptr<std::string> &User::getNickName() const noexcept
{
    return nickName_;
}
void User::setNickName(const std::string &pNickName) noexcept
{
    nickName_ = std::make_shared<std::string>(pNickName);
    dirtyFlag_[11] = true;
}
void User::setNickName(std::string &&pNickName) noexcept
{
    nickName_ = std::make_shared<std::string>(std::move(pNickName));
    dirtyFlag_[11] = true;
}


void User::setNickNameToNull() noexcept
{
    nickName_.reset();
    dirtyFlag_[11] = true;
}


const ::trantor::Date &User::getValueOfLastTime() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(lastTime_)
        return *lastTime_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &User::getLastTime() const noexcept
{
    return lastTime_;
}
void User::setLastTime(const ::trantor::Date &pLastTime) noexcept
{
    lastTime_ = std::make_shared<::trantor::Date>(pLastTime);
    dirtyFlag_[12] = true;
}


void User::setLastTimeToNull() noexcept
{
    lastTime_.reset();
    dirtyFlag_[12] = true;
}


const std::string &User::getValueOfLastIp() const noexcept
{
    const static std::string defaultValue = std::string();
    if(lastIp_)
        return *lastIp_;
    return defaultValue;
}
const std::shared_ptr<std::string> &User::getLastIp() const noexcept
{
    return lastIp_;
}
void User::setLastIp(const std::string &pLastIp) noexcept
{
    lastIp_ = std::make_shared<std::string>(pLastIp);
    dirtyFlag_[13] = true;
}
void User::setLastIp(std::string &&pLastIp) noexcept
{
    lastIp_ = std::make_shared<std::string>(std::move(pLastIp));
    dirtyFlag_[13] = true;
}


void User::setLastIpToNull() noexcept
{
    lastIp_.reset();
    dirtyFlag_[13] = true;
}


const std::string &User::getValueOfUserAvatar() const noexcept
{
    const static std::string defaultValue = std::string();
    if(userAvatar_)
        return *userAvatar_;
    return defaultValue;
}
const std::shared_ptr<std::string> &User::getUserAvatar() const noexcept
{
    return userAvatar_;
}
void User::setUserAvatar(const std::string &pUserAvatar) noexcept
{
    userAvatar_ = std::make_shared<std::string>(pUserAvatar);
    dirtyFlag_[14] = true;
}
void User::setUserAvatar(std::string &&pUserAvatar) noexcept
{
    userAvatar_ = std::make_shared<std::string>(std::move(pUserAvatar));
    dirtyFlag_[14] = true;
}


void User::setUserAvatarToNull() noexcept
{
    userAvatar_.reset();
    dirtyFlag_[14] = true;
}


const int8_t &User::getValueOfUserStatus() const noexcept
{
    const static int8_t defaultValue = int8_t();
    if(userStatus_)
        return *userStatus_;
    return defaultValue;
}
const std::shared_ptr<int8_t> &User::getUserStatus() const noexcept
{
    return userStatus_;
}
void User::setUserStatus(const int8_t &pUserStatus) noexcept
{
    userStatus_ = std::make_shared<int8_t>(pUserStatus);
    dirtyFlag_[15] = true;
}




const std::string &User::getValueOfPersonalitySignature() const noexcept
{
    const static std::string defaultValue = std::string();
    if(personalitySignature_)
        return *personalitySignature_;
    return defaultValue;
}
const std::shared_ptr<std::string> &User::getPersonalitySignature() const noexcept
{
    return personalitySignature_;
}
void User::setPersonalitySignature(const std::string &pPersonalitySignature) noexcept
{
    personalitySignature_ = std::make_shared<std::string>(pPersonalitySignature);
    dirtyFlag_[16] = true;
}
void User::setPersonalitySignature(std::string &&pPersonalitySignature) noexcept
{
    personalitySignature_ = std::make_shared<std::string>(std::move(pPersonalitySignature));
    dirtyFlag_[16] = true;
}


void User::setPersonalitySignatureToNull() noexcept
{
    personalitySignature_.reset();
    dirtyFlag_[16] = true;
}


const int8_t &User::getValueOfIsDelete() const noexcept
{
    const static int8_t defaultValue = int8_t();
    if(isDelete_)
        return *isDelete_;
    return defaultValue;
}
const std::shared_ptr<int8_t> &User::getIsDelete() const noexcept
{
    return isDelete_;
}
void User::setIsDelete(const int8_t &pIsDelete) noexcept
{
    isDelete_ = std::make_shared<int8_t>(pIsDelete);
    dirtyFlag_[17] = true;
}




const std::string &User::getValueOfEmail() const noexcept
{
    const static std::string defaultValue = std::string();
    if(email_)
        return *email_;
    return defaultValue;
}
const std::shared_ptr<std::string> &User::getEmail() const noexcept
{
    return email_;
}
void User::setEmail(const std::string &pEmail) noexcept
{
    email_ = std::make_shared<std::string>(pEmail);
    dirtyFlag_[18] = true;
}
void User::setEmail(std::string &&pEmail) noexcept
{
    email_ = std::make_shared<std::string>(std::move(pEmail));
    dirtyFlag_[18] = true;
}


void User::setEmailToNull() noexcept
{
    email_.reset();
    dirtyFlag_[18] = true;
}


const std::string &User::getValueOfSessionId() const noexcept
{
    const static std::string defaultValue = std::string();
    if(sessionId_)
        return *sessionId_;
    return defaultValue;
}
const std::shared_ptr<std::string> &User::getSessionId() const noexcept
{
    return sessionId_;
}
void User::setSessionId(const std::string &pSessionId) noexcept
{
    sessionId_ = std::make_shared<std::string>(pSessionId);
    dirtyFlag_[19] = true;
}
void User::setSessionId(std::string &&pSessionId) noexcept
{
    sessionId_ = std::make_shared<std::string>(std::move(pSessionId));
    dirtyFlag_[19] = true;
}


void User::setSessionIdToNull() noexcept
{
    sessionId_.reset();
    dirtyFlag_[19] = true;
}


const std::string &User::getValueOfToken() const noexcept
{
    const static std::string defaultValue = std::string();
    if(token_)
        return *token_;
    return defaultValue;
}
const std::shared_ptr<std::string> &User::getToken() const noexcept
{
    return token_;
}
void User::setToken(const std::string &pToken) noexcept
{
    token_ = std::make_shared<std::string>(pToken);
    dirtyFlag_[20] = true;
}
void User::setToken(std::string &&pToken) noexcept
{
    token_ = std::make_shared<std::string>(std::move(pToken));
    dirtyFlag_[20] = true;
}


void User::setTokenToNull() noexcept
{
    token_.reset();
    dirtyFlag_[20] = true;
}


const ::trantor::Date &User::getValueOfTokenTime() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(tokenTime_)
        return *tokenTime_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &User::getTokenTime() const noexcept
{
    return tokenTime_;
}
void User::setTokenTime(const ::trantor::Date &pTokenTime) noexcept
{
    tokenTime_ = std::make_shared<::trantor::Date>(pTokenTime);
    dirtyFlag_[21] = true;
}


void User::setTokenTimeToNull() noexcept
{
    tokenTime_.reset();
    dirtyFlag_[21] = true;
}


const std::string &User::getValueOfQq() const noexcept
{
    const static std::string defaultValue = std::string();
    if(qq_)
        return *qq_;
    return defaultValue;
}
const std::shared_ptr<std::string> &User::getQq() const noexcept
{
    return qq_;
}
void User::setQq(const std::string &pQq) noexcept
{
    qq_ = std::make_shared<std::string>(pQq);
    dirtyFlag_[22] = true;
}
void User::setQq(std::string &&pQq) noexcept
{
    qq_ = std::make_shared<std::string>(std::move(pQq));
    dirtyFlag_[22] = true;
}


void User::setQqToNull() noexcept
{
    qq_.reset();
    dirtyFlag_[22] = true;
}


const int64_t &User::getValueOfServiceId() const noexcept
{
    const static int64_t defaultValue = int64_t();
    if(serviceId_)
        return *serviceId_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &User::getServiceId() const noexcept
{
    return serviceId_;
}
void User::setServiceId(const int64_t &pServiceId) noexcept
{
    serviceId_ = std::make_shared<int64_t>(pServiceId);
    dirtyFlag_[23] = true;
}




const std::string &User::getValueOfTelephone() const noexcept
{
    const static std::string defaultValue = std::string();
    if(telephone_)
        return *telephone_;
    return defaultValue;
}
const std::shared_ptr<std::string> &User::getTelephone() const noexcept
{
    return telephone_;
}
void User::setTelephone(const std::string &pTelephone) noexcept
{
    telephone_ = std::make_shared<std::string>(pTelephone);
    dirtyFlag_[24] = true;
}
void User::setTelephone(std::string &&pTelephone) noexcept
{
    telephone_ = std::make_shared<std::string>(std::move(pTelephone));
    dirtyFlag_[24] = true;
}


void User::setTelephoneToNull() noexcept
{
    telephone_.reset();
    dirtyFlag_[24] = true;
}


const uint64_t &User::getValueOfAdminId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(adminId_)
        return *adminId_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &User::getAdminId() const noexcept
{
    return adminId_;
}
void User::setAdminId(const uint64_t &pAdminId) noexcept
{
    adminId_ = std::make_shared<uint64_t>(pAdminId);
    dirtyFlag_[25] = true;
}




const std::string &User::getValueOfWeixinId() const noexcept
{
    const static std::string defaultValue = std::string();
    if(weixinId_)
        return *weixinId_;
    return defaultValue;
}
const std::shared_ptr<std::string> &User::getWeixinId() const noexcept
{
    return weixinId_;
}
void User::setWeixinId(const std::string &pWeixinId) noexcept
{
    weixinId_ = std::make_shared<std::string>(pWeixinId);
    dirtyFlag_[26] = true;
}
void User::setWeixinId(std::string &&pWeixinId) noexcept
{
    weixinId_ = std::make_shared<std::string>(std::move(pWeixinId));
    dirtyFlag_[26] = true;
}


void User::setWeixinIdToNull() noexcept
{
    weixinId_.reset();
    dirtyFlag_[26] = true;
}


void User::updateId(const uint64_t id)
{
    id_ = std::make_shared<uint64_t>(id);
}

const std::vector<std::string> &User::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "create_time",
        "update_time",
        "remark",
        "source",
        "user_type",
        "mobile",
        "user_login_name",
        "user_password",
        "real_name",
        "user_sex",
        "nick_name",
        "last_time",
        "last_ip",
        "user_avatar",
        "user_status",
        "personality_signature",
        "is_delete",
        "email",
        "session_id",
        "token",
        "token_time",
        "qq",
        "service_id",
        "telephone",
        "admin_id",
        "weixin_id"
    };
    return inCols;
}

void User::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getCreateTime())
        {
            binder << getValueOfCreateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getUpdateTime())
        {
            binder << getValueOfUpdateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getRemark())
        {
            binder << getValueOfRemark();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getSource())
        {
            binder << getValueOfSource();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getUserType())
        {
            binder << getValueOfUserType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getMobile())
        {
            binder << getValueOfMobile();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getUserLoginName())
        {
            binder << getValueOfUserLoginName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getUserPassword())
        {
            binder << getValueOfUserPassword();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getRealName())
        {
            binder << getValueOfRealName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getUserSex())
        {
            binder << getValueOfUserSex();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getNickName())
        {
            binder << getValueOfNickName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getLastTime())
        {
            binder << getValueOfLastTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[13])
    {
        if(getLastIp())
        {
            binder << getValueOfLastIp();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[14])
    {
        if(getUserAvatar())
        {
            binder << getValueOfUserAvatar();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[15])
    {
        if(getUserStatus())
        {
            binder << getValueOfUserStatus();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[16])
    {
        if(getPersonalitySignature())
        {
            binder << getValueOfPersonalitySignature();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[17])
    {
        if(getIsDelete())
        {
            binder << getValueOfIsDelete();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[18])
    {
        if(getEmail())
        {
            binder << getValueOfEmail();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[19])
    {
        if(getSessionId())
        {
            binder << getValueOfSessionId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[20])
    {
        if(getToken())
        {
            binder << getValueOfToken();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[21])
    {
        if(getTokenTime())
        {
            binder << getValueOfTokenTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[22])
    {
        if(getQq())
        {
            binder << getValueOfQq();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[23])
    {
        if(getServiceId())
        {
            binder << getValueOfServiceId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[24])
    {
        if(getTelephone())
        {
            binder << getValueOfTelephone();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[25])
    {
        if(getAdminId())
        {
            binder << getValueOfAdminId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[26])
    {
        if(getWeixinId())
        {
            binder << getValueOfWeixinId();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> User::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    if(dirtyFlag_[8])
    {
        ret.push_back(getColumnName(8));
    }
    if(dirtyFlag_[9])
    {
        ret.push_back(getColumnName(9));
    }
    if(dirtyFlag_[10])
    {
        ret.push_back(getColumnName(10));
    }
    if(dirtyFlag_[11])
    {
        ret.push_back(getColumnName(11));
    }
    if(dirtyFlag_[12])
    {
        ret.push_back(getColumnName(12));
    }
    if(dirtyFlag_[13])
    {
        ret.push_back(getColumnName(13));
    }
    if(dirtyFlag_[14])
    {
        ret.push_back(getColumnName(14));
    }
    if(dirtyFlag_[15])
    {
        ret.push_back(getColumnName(15));
    }
    if(dirtyFlag_[16])
    {
        ret.push_back(getColumnName(16));
    }
    if(dirtyFlag_[17])
    {
        ret.push_back(getColumnName(17));
    }
    if(dirtyFlag_[18])
    {
        ret.push_back(getColumnName(18));
    }
    if(dirtyFlag_[19])
    {
        ret.push_back(getColumnName(19));
    }
    if(dirtyFlag_[20])
    {
        ret.push_back(getColumnName(20));
    }
    if(dirtyFlag_[21])
    {
        ret.push_back(getColumnName(21));
    }
    if(dirtyFlag_[22])
    {
        ret.push_back(getColumnName(22));
    }
    if(dirtyFlag_[23])
    {
        ret.push_back(getColumnName(23));
    }
    if(dirtyFlag_[24])
    {
        ret.push_back(getColumnName(24));
    }
    if(dirtyFlag_[25])
    {
        ret.push_back(getColumnName(25));
    }
    if(dirtyFlag_[26])
    {
        ret.push_back(getColumnName(26));
    }
    return ret;
}

void User::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getCreateTime())
        {
            binder << getValueOfCreateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getUpdateTime())
        {
            binder << getValueOfUpdateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getRemark())
        {
            binder << getValueOfRemark();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getSource())
        {
            binder << getValueOfSource();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getUserType())
        {
            binder << getValueOfUserType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getMobile())
        {
            binder << getValueOfMobile();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getUserLoginName())
        {
            binder << getValueOfUserLoginName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getUserPassword())
        {
            binder << getValueOfUserPassword();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getRealName())
        {
            binder << getValueOfRealName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getUserSex())
        {
            binder << getValueOfUserSex();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getNickName())
        {
            binder << getValueOfNickName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getLastTime())
        {
            binder << getValueOfLastTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[13])
    {
        if(getLastIp())
        {
            binder << getValueOfLastIp();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[14])
    {
        if(getUserAvatar())
        {
            binder << getValueOfUserAvatar();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[15])
    {
        if(getUserStatus())
        {
            binder << getValueOfUserStatus();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[16])
    {
        if(getPersonalitySignature())
        {
            binder << getValueOfPersonalitySignature();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[17])
    {
        if(getIsDelete())
        {
            binder << getValueOfIsDelete();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[18])
    {
        if(getEmail())
        {
            binder << getValueOfEmail();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[19])
    {
        if(getSessionId())
        {
            binder << getValueOfSessionId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[20])
    {
        if(getToken())
        {
            binder << getValueOfToken();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[21])
    {
        if(getTokenTime())
        {
            binder << getValueOfTokenTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[22])
    {
        if(getQq())
        {
            binder << getValueOfQq();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[23])
    {
        if(getServiceId())
        {
            binder << getValueOfServiceId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[24])
    {
        if(getTelephone())
        {
            binder << getValueOfTelephone();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[25])
    {
        if(getAdminId())
        {
            binder << getValueOfAdminId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[26])
    {
        if(getWeixinId())
        {
            binder << getValueOfWeixinId();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value User::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=(Json::UInt64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getCreateTime())
    {
        ret["create_time"]=getCreateTime()->toDbStringLocal();
    }
    else
    {
        ret["create_time"]=Json::Value();
    }
    if(getUpdateTime())
    {
        ret["update_time"]=getUpdateTime()->toDbStringLocal();
    }
    else
    {
        ret["update_time"]=Json::Value();
    }
    if(getRemark())
    {
        ret["remark"]=getValueOfRemark();
    }
    else
    {
        ret["remark"]=Json::Value();
    }
    if(getSource())
    {
        ret["source"]=getValueOfSource();
    }
    else
    {
        ret["source"]=Json::Value();
    }
    if(getUserType())
    {
        ret["user_type"]=getValueOfUserType();
    }
    else
    {
        ret["user_type"]=Json::Value();
    }
    if(getMobile())
    {
        ret["mobile"]=getValueOfMobile();
    }
    else
    {
        ret["mobile"]=Json::Value();
    }
    if(getUserLoginName())
    {
        ret["user_login_name"]=getValueOfUserLoginName();
    }
    else
    {
        ret["user_login_name"]=Json::Value();
    }
    if(getUserPassword())
    {
        ret["user_password"]=getValueOfUserPassword();
    }
    else
    {
        ret["user_password"]=Json::Value();
    }
    if(getRealName())
    {
        ret["real_name"]=getValueOfRealName();
    }
    else
    {
        ret["real_name"]=Json::Value();
    }
    if(getUserSex())
    {
        ret["user_sex"]=getValueOfUserSex();
    }
    else
    {
        ret["user_sex"]=Json::Value();
    }
    if(getNickName())
    {
        ret["nick_name"]=getValueOfNickName();
    }
    else
    {
        ret["nick_name"]=Json::Value();
    }
    if(getLastTime())
    {
        ret["last_time"]=getLastTime()->toDbStringLocal();
    }
    else
    {
        ret["last_time"]=Json::Value();
    }
    if(getLastIp())
    {
        ret["last_ip"]=getValueOfLastIp();
    }
    else
    {
        ret["last_ip"]=Json::Value();
    }
    if(getUserAvatar())
    {
        ret["user_avatar"]=getValueOfUserAvatar();
    }
    else
    {
        ret["user_avatar"]=Json::Value();
    }
    if(getUserStatus())
    {
        ret["user_status"]=getValueOfUserStatus();
    }
    else
    {
        ret["user_status"]=Json::Value();
    }
    if(getPersonalitySignature())
    {
        ret["personality_signature"]=getValueOfPersonalitySignature();
    }
    else
    {
        ret["personality_signature"]=Json::Value();
    }
    if(getIsDelete())
    {
        ret["is_delete"]=getValueOfIsDelete();
    }
    else
    {
        ret["is_delete"]=Json::Value();
    }
    if(getEmail())
    {
        ret["email"]=getValueOfEmail();
    }
    else
    {
        ret["email"]=Json::Value();
    }
    if(getSessionId())
    {
        ret["session_id"]=getValueOfSessionId();
    }
    else
    {
        ret["session_id"]=Json::Value();
    }
    if(getToken())
    {
        ret["token"]=getValueOfToken();
    }
    else
    {
        ret["token"]=Json::Value();
    }
    if(getTokenTime())
    {
        ret["token_time"]=getTokenTime()->toDbStringLocal();
    }
    else
    {
        ret["token_time"]=Json::Value();
    }
    if(getQq())
    {
        ret["qq"]=getValueOfQq();
    }
    else
    {
        ret["qq"]=Json::Value();
    }
    if(getServiceId())
    {
        ret["service_id"]=(Json::Int64)getValueOfServiceId();
    }
    else
    {
        ret["service_id"]=Json::Value();
    }
    if(getTelephone())
    {
        ret["telephone"]=getValueOfTelephone();
    }
    else
    {
        ret["telephone"]=Json::Value();
    }
    if(getAdminId())
    {
        ret["admin_id"]=(Json::UInt64)getValueOfAdminId();
    }
    else
    {
        ret["admin_id"]=Json::Value();
    }
    if(getWeixinId())
    {
        ret["weixin_id"]=getValueOfWeixinId();
    }
    else
    {
        ret["weixin_id"]=Json::Value();
    }
    return ret;
}

Json::Value User::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 27)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=(Json::UInt64)getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getCreateTime())
            {
                ret[pMasqueradingVector[1]]=getCreateTime()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getUpdateTime())
            {
                ret[pMasqueradingVector[2]]=getUpdateTime()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getRemark())
            {
                ret[pMasqueradingVector[3]]=getValueOfRemark();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getSource())
            {
                ret[pMasqueradingVector[4]]=getValueOfSource();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getUserType())
            {
                ret[pMasqueradingVector[5]]=getValueOfUserType();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getMobile())
            {
                ret[pMasqueradingVector[6]]=getValueOfMobile();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getUserLoginName())
            {
                ret[pMasqueradingVector[7]]=getValueOfUserLoginName();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[8].empty())
        {
            if(getUserPassword())
            {
                ret[pMasqueradingVector[8]]=getValueOfUserPassword();
            }
            else
            {
                ret[pMasqueradingVector[8]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[9].empty())
        {
            if(getRealName())
            {
                ret[pMasqueradingVector[9]]=getValueOfRealName();
            }
            else
            {
                ret[pMasqueradingVector[9]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[10].empty())
        {
            if(getUserSex())
            {
                ret[pMasqueradingVector[10]]=getValueOfUserSex();
            }
            else
            {
                ret[pMasqueradingVector[10]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[11].empty())
        {
            if(getNickName())
            {
                ret[pMasqueradingVector[11]]=getValueOfNickName();
            }
            else
            {
                ret[pMasqueradingVector[11]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[12].empty())
        {
            if(getLastTime())
            {
                ret[pMasqueradingVector[12]]=getLastTime()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[12]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[13].empty())
        {
            if(getLastIp())
            {
                ret[pMasqueradingVector[13]]=getValueOfLastIp();
            }
            else
            {
                ret[pMasqueradingVector[13]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[14].empty())
        {
            if(getUserAvatar())
            {
                ret[pMasqueradingVector[14]]=getValueOfUserAvatar();
            }
            else
            {
                ret[pMasqueradingVector[14]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[15].empty())
        {
            if(getUserStatus())
            {
                ret[pMasqueradingVector[15]]=getValueOfUserStatus();
            }
            else
            {
                ret[pMasqueradingVector[15]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[16].empty())
        {
            if(getPersonalitySignature())
            {
                ret[pMasqueradingVector[16]]=getValueOfPersonalitySignature();
            }
            else
            {
                ret[pMasqueradingVector[16]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[17].empty())
        {
            if(getIsDelete())
            {
                ret[pMasqueradingVector[17]]=getValueOfIsDelete();
            }
            else
            {
                ret[pMasqueradingVector[17]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[18].empty())
        {
            if(getEmail())
            {
                ret[pMasqueradingVector[18]]=getValueOfEmail();
            }
            else
            {
                ret[pMasqueradingVector[18]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[19].empty())
        {
            if(getSessionId())
            {
                ret[pMasqueradingVector[19]]=getValueOfSessionId();
            }
            else
            {
                ret[pMasqueradingVector[19]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[20].empty())
        {
            if(getToken())
            {
                ret[pMasqueradingVector[20]]=getValueOfToken();
            }
            else
            {
                ret[pMasqueradingVector[20]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[21].empty())
        {
            if(getTokenTime())
            {
                ret[pMasqueradingVector[21]]=getTokenTime()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[21]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[22].empty())
        {
            if(getQq())
            {
                ret[pMasqueradingVector[22]]=getValueOfQq();
            }
            else
            {
                ret[pMasqueradingVector[22]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[23].empty())
        {
            if(getServiceId())
            {
                ret[pMasqueradingVector[23]]=(Json::Int64)getValueOfServiceId();
            }
            else
            {
                ret[pMasqueradingVector[23]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[24].empty())
        {
            if(getTelephone())
            {
                ret[pMasqueradingVector[24]]=getValueOfTelephone();
            }
            else
            {
                ret[pMasqueradingVector[24]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[25].empty())
        {
            if(getAdminId())
            {
                ret[pMasqueradingVector[25]]=(Json::UInt64)getValueOfAdminId();
            }
            else
            {
                ret[pMasqueradingVector[25]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[26].empty())
        {
            if(getWeixinId())
            {
                ret[pMasqueradingVector[26]]=getValueOfWeixinId();
            }
            else
            {
                ret[pMasqueradingVector[26]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=(Json::UInt64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getCreateTime())
    {
        ret["create_time"]=getCreateTime()->toDbStringLocal();
    }
    else
    {
        ret["create_time"]=Json::Value();
    }
    if(getUpdateTime())
    {
        ret["update_time"]=getUpdateTime()->toDbStringLocal();
    }
    else
    {
        ret["update_time"]=Json::Value();
    }
    if(getRemark())
    {
        ret["remark"]=getValueOfRemark();
    }
    else
    {
        ret["remark"]=Json::Value();
    }
    if(getSource())
    {
        ret["source"]=getValueOfSource();
    }
    else
    {
        ret["source"]=Json::Value();
    }
    if(getUserType())
    {
        ret["user_type"]=getValueOfUserType();
    }
    else
    {
        ret["user_type"]=Json::Value();
    }
    if(getMobile())
    {
        ret["mobile"]=getValueOfMobile();
    }
    else
    {
        ret["mobile"]=Json::Value();
    }
    if(getUserLoginName())
    {
        ret["user_login_name"]=getValueOfUserLoginName();
    }
    else
    {
        ret["user_login_name"]=Json::Value();
    }
    if(getUserPassword())
    {
        ret["user_password"]=getValueOfUserPassword();
    }
    else
    {
        ret["user_password"]=Json::Value();
    }
    if(getRealName())
    {
        ret["real_name"]=getValueOfRealName();
    }
    else
    {
        ret["real_name"]=Json::Value();
    }
    if(getUserSex())
    {
        ret["user_sex"]=getValueOfUserSex();
    }
    else
    {
        ret["user_sex"]=Json::Value();
    }
    if(getNickName())
    {
        ret["nick_name"]=getValueOfNickName();
    }
    else
    {
        ret["nick_name"]=Json::Value();
    }
    if(getLastTime())
    {
        ret["last_time"]=getLastTime()->toDbStringLocal();
    }
    else
    {
        ret["last_time"]=Json::Value();
    }
    if(getLastIp())
    {
        ret["last_ip"]=getValueOfLastIp();
    }
    else
    {
        ret["last_ip"]=Json::Value();
    }
    if(getUserAvatar())
    {
        ret["user_avatar"]=getValueOfUserAvatar();
    }
    else
    {
        ret["user_avatar"]=Json::Value();
    }
    if(getUserStatus())
    {
        ret["user_status"]=getValueOfUserStatus();
    }
    else
    {
        ret["user_status"]=Json::Value();
    }
    if(getPersonalitySignature())
    {
        ret["personality_signature"]=getValueOfPersonalitySignature();
    }
    else
    {
        ret["personality_signature"]=Json::Value();
    }
    if(getIsDelete())
    {
        ret["is_delete"]=getValueOfIsDelete();
    }
    else
    {
        ret["is_delete"]=Json::Value();
    }
    if(getEmail())
    {
        ret["email"]=getValueOfEmail();
    }
    else
    {
        ret["email"]=Json::Value();
    }
    if(getSessionId())
    {
        ret["session_id"]=getValueOfSessionId();
    }
    else
    {
        ret["session_id"]=Json::Value();
    }
    if(getToken())
    {
        ret["token"]=getValueOfToken();
    }
    else
    {
        ret["token"]=Json::Value();
    }
    if(getTokenTime())
    {
        ret["token_time"]=getTokenTime()->toDbStringLocal();
    }
    else
    {
        ret["token_time"]=Json::Value();
    }
    if(getQq())
    {
        ret["qq"]=getValueOfQq();
    }
    else
    {
        ret["qq"]=Json::Value();
    }
    if(getServiceId())
    {
        ret["service_id"]=(Json::Int64)getValueOfServiceId();
    }
    else
    {
        ret["service_id"]=Json::Value();
    }
    if(getTelephone())
    {
        ret["telephone"]=getValueOfTelephone();
    }
    else
    {
        ret["telephone"]=Json::Value();
    }
    if(getAdminId())
    {
        ret["admin_id"]=(Json::UInt64)getValueOfAdminId();
    }
    else
    {
        ret["admin_id"]=Json::Value();
    }
    if(getWeixinId())
    {
        ret["weixin_id"]=getValueOfWeixinId();
    }
    else
    {
        ret["weixin_id"]=Json::Value();
    }
    return ret;
}

bool User::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("create_time"))
    {
        if(!validJsonOfField(1, "create_time", pJson["create_time"], err, true))
            return false;
    }
    if(pJson.isMember("update_time"))
    {
        if(!validJsonOfField(2, "update_time", pJson["update_time"], err, true))
            return false;
    }
    if(pJson.isMember("remark"))
    {
        if(!validJsonOfField(3, "remark", pJson["remark"], err, true))
            return false;
    }
    if(pJson.isMember("source"))
    {
        if(!validJsonOfField(4, "source", pJson["source"], err, true))
            return false;
    }
    if(pJson.isMember("user_type"))
    {
        if(!validJsonOfField(5, "user_type", pJson["user_type"], err, true))
            return false;
    }
    if(pJson.isMember("mobile"))
    {
        if(!validJsonOfField(6, "mobile", pJson["mobile"], err, true))
            return false;
    }
    else
    {
        err="The mobile column cannot be null";
        return false;
    }
    if(pJson.isMember("user_login_name"))
    {
        if(!validJsonOfField(7, "user_login_name", pJson["user_login_name"], err, true))
            return false;
    }
    else
    {
        err="The user_login_name column cannot be null";
        return false;
    }
    if(pJson.isMember("user_password"))
    {
        if(!validJsonOfField(8, "user_password", pJson["user_password"], err, true))
            return false;
    }
    if(pJson.isMember("real_name"))
    {
        if(!validJsonOfField(9, "real_name", pJson["real_name"], err, true))
            return false;
    }
    if(pJson.isMember("user_sex"))
    {
        if(!validJsonOfField(10, "user_sex", pJson["user_sex"], err, true))
            return false;
    }
    if(pJson.isMember("nick_name"))
    {
        if(!validJsonOfField(11, "nick_name", pJson["nick_name"], err, true))
            return false;
    }
    if(pJson.isMember("last_time"))
    {
        if(!validJsonOfField(12, "last_time", pJson["last_time"], err, true))
            return false;
    }
    if(pJson.isMember("last_ip"))
    {
        if(!validJsonOfField(13, "last_ip", pJson["last_ip"], err, true))
            return false;
    }
    if(pJson.isMember("user_avatar"))
    {
        if(!validJsonOfField(14, "user_avatar", pJson["user_avatar"], err, true))
            return false;
    }
    if(pJson.isMember("user_status"))
    {
        if(!validJsonOfField(15, "user_status", pJson["user_status"], err, true))
            return false;
    }
    if(pJson.isMember("personality_signature"))
    {
        if(!validJsonOfField(16, "personality_signature", pJson["personality_signature"], err, true))
            return false;
    }
    if(pJson.isMember("is_delete"))
    {
        if(!validJsonOfField(17, "is_delete", pJson["is_delete"], err, true))
            return false;
    }
    if(pJson.isMember("email"))
    {
        if(!validJsonOfField(18, "email", pJson["email"], err, true))
            return false;
    }
    if(pJson.isMember("session_id"))
    {
        if(!validJsonOfField(19, "session_id", pJson["session_id"], err, true))
            return false;
    }
    if(pJson.isMember("token"))
    {
        if(!validJsonOfField(20, "token", pJson["token"], err, true))
            return false;
    }
    if(pJson.isMember("token_time"))
    {
        if(!validJsonOfField(21, "token_time", pJson["token_time"], err, true))
            return false;
    }
    if(pJson.isMember("qq"))
    {
        if(!validJsonOfField(22, "qq", pJson["qq"], err, true))
            return false;
    }
    if(pJson.isMember("service_id"))
    {
        if(!validJsonOfField(23, "service_id", pJson["service_id"], err, true))
            return false;
    }
    if(pJson.isMember("telephone"))
    {
        if(!validJsonOfField(24, "telephone", pJson["telephone"], err, true))
            return false;
    }
    if(pJson.isMember("admin_id"))
    {
        if(!validJsonOfField(25, "admin_id", pJson["admin_id"], err, true))
            return false;
    }
    if(pJson.isMember("weixin_id"))
    {
        if(!validJsonOfField(26, "weixin_id", pJson["weixin_id"], err, true))
            return false;
    }
    return true;
}
bool User::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                              const std::vector<std::string> &pMasqueradingVector,
                                              std::string &err)
{
    if(pMasqueradingVector.size() != 27)
    {
        err = "Bad masquerading vector";
        return false;
    }
    if(!pMasqueradingVector[0].empty())
    {
        if(pJson.isMember(pMasqueradingVector[0]))
        {
            if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[1].empty())
    {
        if(pJson.isMember(pMasqueradingVector[1]))
        {
            if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[2].empty())
    {
        if(pJson.isMember(pMasqueradingVector[2]))
        {
            if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[3].empty())
    {
        if(pJson.isMember(pMasqueradingVector[3]))
        {
            if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[4].empty())
    {
        if(pJson.isMember(pMasqueradingVector[4]))
        {
            if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[5].empty())
    {
        if(pJson.isMember(pMasqueradingVector[5]))
        {
            if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[6].empty())
    {
        if(pJson.isMember(pMasqueradingVector[6]))
        {
            if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                return false;
        }
        else
        {
            err="The " + pMasqueradingVector[6] + " column cannot be null";
            return false;
        }
    }
    if(!pMasqueradingVector[7].empty())
    {
        if(pJson.isMember(pMasqueradingVector[7]))
        {
            if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                return false;
        }
        else
        {
            err="The " + pMasqueradingVector[7] + " column cannot be null";
            return false;
        }
    }
    if(!pMasqueradingVector[8].empty())
    {
        if(pJson.isMember(pMasqueradingVector[8]))
        {
            if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[9].empty())
    {
        if(pJson.isMember(pMasqueradingVector[9]))
        {
            if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[10].empty())
    {
        if(pJson.isMember(pMasqueradingVector[10]))
        {
            if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[11].empty())
    {
        if(pJson.isMember(pMasqueradingVector[11]))
        {
            if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[12].empty())
    {
        if(pJson.isMember(pMasqueradingVector[12]))
        {
            if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[13].empty())
    {
        if(pJson.isMember(pMasqueradingVector[13]))
        {
            if(!validJsonOfField(13, pMasqueradingVector[13], pJson[pMasqueradingVector[13]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[14].empty())
    {
        if(pJson.isMember(pMasqueradingVector[14]))
        {
            if(!validJsonOfField(14, pMasqueradingVector[14], pJson[pMasqueradingVector[14]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[15].empty())
    {
        if(pJson.isMember(pMasqueradingVector[15]))
        {
            if(!validJsonOfField(15, pMasqueradingVector[15], pJson[pMasqueradingVector[15]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[16].empty())
    {
        if(pJson.isMember(pMasqueradingVector[16]))
        {
            if(!validJsonOfField(16, pMasqueradingVector[16], pJson[pMasqueradingVector[16]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[17].empty())
    {
        if(pJson.isMember(pMasqueradingVector[17]))
        {
            if(!validJsonOfField(17, pMasqueradingVector[17], pJson[pMasqueradingVector[17]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[18].empty())
    {
        if(pJson.isMember(pMasqueradingVector[18]))
        {
            if(!validJsonOfField(18, pMasqueradingVector[18], pJson[pMasqueradingVector[18]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[19].empty())
    {
        if(pJson.isMember(pMasqueradingVector[19]))
        {
            if(!validJsonOfField(19, pMasqueradingVector[19], pJson[pMasqueradingVector[19]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[20].empty())
    {
        if(pJson.isMember(pMasqueradingVector[20]))
        {
            if(!validJsonOfField(20, pMasqueradingVector[20], pJson[pMasqueradingVector[20]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[21].empty())
    {
        if(pJson.isMember(pMasqueradingVector[21]))
        {
            if(!validJsonOfField(21, pMasqueradingVector[21], pJson[pMasqueradingVector[21]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[22].empty())
    {
        if(pJson.isMember(pMasqueradingVector[22]))
        {
            if(!validJsonOfField(22, pMasqueradingVector[22], pJson[pMasqueradingVector[22]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[23].empty())
    {
        if(pJson.isMember(pMasqueradingVector[23]))
        {
            if(!validJsonOfField(23, pMasqueradingVector[23], pJson[pMasqueradingVector[23]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[24].empty())
    {
        if(pJson.isMember(pMasqueradingVector[24]))
        {
            if(!validJsonOfField(24, pMasqueradingVector[24], pJson[pMasqueradingVector[24]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[25].empty())
    {
        if(pJson.isMember(pMasqueradingVector[25]))
        {
            if(!validJsonOfField(25, pMasqueradingVector[25], pJson[pMasqueradingVector[25]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[26].empty())
    {
        if(pJson.isMember(pMasqueradingVector[26]))
        {
            if(!validJsonOfField(26, pMasqueradingVector[26], pJson[pMasqueradingVector[26]], err, true))
                return false;
        }
    }
    return true;
}
bool User::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("create_time"))
    {
        if(!validJsonOfField(1, "create_time", pJson["create_time"], err, false))
            return false;
    }
    if(pJson.isMember("update_time"))
    {
        if(!validJsonOfField(2, "update_time", pJson["update_time"], err, false))
            return false;
    }
    if(pJson.isMember("remark"))
    {
        if(!validJsonOfField(3, "remark", pJson["remark"], err, false))
            return false;
    }
    if(pJson.isMember("source"))
    {
        if(!validJsonOfField(4, "source", pJson["source"], err, false))
            return false;
    }
    if(pJson.isMember("user_type"))
    {
        if(!validJsonOfField(5, "user_type", pJson["user_type"], err, false))
            return false;
    }
    if(pJson.isMember("mobile"))
    {
        if(!validJsonOfField(6, "mobile", pJson["mobile"], err, false))
            return false;
    }
    if(pJson.isMember("user_login_name"))
    {
        if(!validJsonOfField(7, "user_login_name", pJson["user_login_name"], err, false))
            return false;
    }
    if(pJson.isMember("user_password"))
    {
        if(!validJsonOfField(8, "user_password", pJson["user_password"], err, false))
            return false;
    }
    if(pJson.isMember("real_name"))
    {
        if(!validJsonOfField(9, "real_name", pJson["real_name"], err, false))
            return false;
    }
    if(pJson.isMember("user_sex"))
    {
        if(!validJsonOfField(10, "user_sex", pJson["user_sex"], err, false))
            return false;
    }
    if(pJson.isMember("nick_name"))
    {
        if(!validJsonOfField(11, "nick_name", pJson["nick_name"], err, false))
            return false;
    }
    if(pJson.isMember("last_time"))
    {
        if(!validJsonOfField(12, "last_time", pJson["last_time"], err, false))
            return false;
    }
    if(pJson.isMember("last_ip"))
    {
        if(!validJsonOfField(13, "last_ip", pJson["last_ip"], err, false))
            return false;
    }
    if(pJson.isMember("user_avatar"))
    {
        if(!validJsonOfField(14, "user_avatar", pJson["user_avatar"], err, false))
            return false;
    }
    if(pJson.isMember("user_status"))
    {
        if(!validJsonOfField(15, "user_status", pJson["user_status"], err, false))
            return false;
    }
    if(pJson.isMember("personality_signature"))
    {
        if(!validJsonOfField(16, "personality_signature", pJson["personality_signature"], err, false))
            return false;
    }
    if(pJson.isMember("is_delete"))
    {
        if(!validJsonOfField(17, "is_delete", pJson["is_delete"], err, false))
            return false;
    }
    if(pJson.isMember("email"))
    {
        if(!validJsonOfField(18, "email", pJson["email"], err, false))
            return false;
    }
    if(pJson.isMember("session_id"))
    {
        if(!validJsonOfField(19, "session_id", pJson["session_id"], err, false))
            return false;
    }
    if(pJson.isMember("token"))
    {
        if(!validJsonOfField(20, "token", pJson["token"], err, false))
            return false;
    }
    if(pJson.isMember("token_time"))
    {
        if(!validJsonOfField(21, "token_time", pJson["token_time"], err, false))
            return false;
    }
    if(pJson.isMember("qq"))
    {
        if(!validJsonOfField(22, "qq", pJson["qq"], err, false))
            return false;
    }
    if(pJson.isMember("service_id"))
    {
        if(!validJsonOfField(23, "service_id", pJson["service_id"], err, false))
            return false;
    }
    if(pJson.isMember("telephone"))
    {
        if(!validJsonOfField(24, "telephone", pJson["telephone"], err, false))
            return false;
    }
    if(pJson.isMember("admin_id"))
    {
        if(!validJsonOfField(25, "admin_id", pJson["admin_id"], err, false))
            return false;
    }
    if(pJson.isMember("weixin_id"))
    {
        if(!validJsonOfField(26, "weixin_id", pJson["weixin_id"], err, false))
            return false;
    }
    return true;
}
bool User::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector,
                                            std::string &err)
{
    if(pMasqueradingVector.size() != 27)
    {
        err = "Bad masquerading vector";
        return false;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
            return false;
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
            return false;
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
            return false;
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
            return false;
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
            return false;
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
            return false;
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
            return false;
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, false))
            return false;
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, false))
            return false;
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, false))
            return false;
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, false))
            return false;
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, false))
            return false;
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        if(!validJsonOfField(13, pMasqueradingVector[13], pJson[pMasqueradingVector[13]], err, false))
            return false;
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        if(!validJsonOfField(14, pMasqueradingVector[14], pJson[pMasqueradingVector[14]], err, false))
            return false;
    }
    if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
    {
        if(!validJsonOfField(15, pMasqueradingVector[15], pJson[pMasqueradingVector[15]], err, false))
            return false;
    }
    if(!pMasqueradingVector[16].empty() && pJson.isMember(pMasqueradingVector[16]))
    {
        if(!validJsonOfField(16, pMasqueradingVector[16], pJson[pMasqueradingVector[16]], err, false))
            return false;
    }
    if(!pMasqueradingVector[17].empty() && pJson.isMember(pMasqueradingVector[17]))
    {
        if(!validJsonOfField(17, pMasqueradingVector[17], pJson[pMasqueradingVector[17]], err, false))
            return false;
    }
    if(!pMasqueradingVector[18].empty() && pJson.isMember(pMasqueradingVector[18]))
    {
        if(!validJsonOfField(18, pMasqueradingVector[18], pJson[pMasqueradingVector[18]], err, false))
            return false;
    }
    if(!pMasqueradingVector[19].empty() && pJson.isMember(pMasqueradingVector[19]))
    {
        if(!validJsonOfField(19, pMasqueradingVector[19], pJson[pMasqueradingVector[19]], err, false))
            return false;
    }
    if(!pMasqueradingVector[20].empty() && pJson.isMember(pMasqueradingVector[20]))
    {
        if(!validJsonOfField(20, pMasqueradingVector[20], pJson[pMasqueradingVector[20]], err, false))
            return false;
    }
    if(!pMasqueradingVector[21].empty() && pJson.isMember(pMasqueradingVector[21]))
    {
        if(!validJsonOfField(21, pMasqueradingVector[21], pJson[pMasqueradingVector[21]], err, false))
            return false;
    }
    if(!pMasqueradingVector[22].empty() && pJson.isMember(pMasqueradingVector[22]))
    {
        if(!validJsonOfField(22, pMasqueradingVector[22], pJson[pMasqueradingVector[22]], err, false))
            return false;
    }
    if(!pMasqueradingVector[23].empty() && pJson.isMember(pMasqueradingVector[23]))
    {
        if(!validJsonOfField(23, pMasqueradingVector[23], pJson[pMasqueradingVector[23]], err, false))
            return false;
    }
    if(!pMasqueradingVector[24].empty() && pJson.isMember(pMasqueradingVector[24]))
    {
        if(!validJsonOfField(24, pMasqueradingVector[24], pJson[pMasqueradingVector[24]], err, false))
            return false;
    }
    if(!pMasqueradingVector[25].empty() && pJson.isMember(pMasqueradingVector[25]))
    {
        if(!validJsonOfField(25, pMasqueradingVector[25], pJson[pMasqueradingVector[25]], err, false))
            return false;
    }
    if(!pMasqueradingVector[26].empty() && pJson.isMember(pMasqueradingVector[26]))
    {
        if(!validJsonOfField(26, pMasqueradingVector[26], pJson[pMasqueradingVector[26]], err, false))
            return false;
    }
    return true;
}
bool User::validJsonOfField(size_t index,
                            const std::string &fieldName,
                            const Json::Value &pJson, 
                            std::string &err, 
                            bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }        
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 200)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 200)";
                return false;               
            }

            break;
        case 4:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 20)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 20)";
                return false;               
            }

            break;
        case 5:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 6:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 11)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 11)";
                return false;               
            }

            break;
        case 7:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 20)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 20)";
                return false;               
            }

            break;
        case 8:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 32)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 32)";
                return false;               
            }

            break;
        case 9:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 20)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 20)";
                return false;               
            }

            break;
        case 10:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 11:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 10)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 10)";
                return false;               
            }

            break;
        case 12:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 13:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 15)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 15)";
                return false;               
            }

            break;
        case 14:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 100)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 100)";
                return false;               
            }

            break;
        case 15:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 16:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 50)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 50)";
                return false;               
            }

            break;
        case 17:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 18:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 30)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 30)";
                return false;               
            }

            break;
        case 19:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 50)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 50)";
                return false;               
            }

            break;
        case 20:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 32)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 32)";
                return false;               
            }

            break;
        case 21:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 22:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 20)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 20)";
                return false;               
            }

            break;
        case 23:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 24:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 30)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 30)";
                return false;               
            }

            break;
        case 25:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 26:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 100)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 100)";
                return false;               
            }

            break;
     
        default:
            err="Internal error in the server";
            return false;
            break;
    }
    return true;
}
