/**
 *
 *  PurchaseInStorage.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "PurchaseInStorage.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::v2;

const std::string PurchaseInStorage::Cols::_id = "id";
const std::string PurchaseInStorage::Cols::_shop_id = "shop_id";
const std::string PurchaseInStorage::Cols::_in_storage_key = "in_storage_key";
const std::string PurchaseInStorage::Cols::_purchase_order_id = "purchase_order_id";
const std::string PurchaseInStorage::Cols::_storage_date = "storage_date";
const std::string PurchaseInStorage::Cols::_admin_id = "admin_id";
const std::string PurchaseInStorage::Cols::_storage_status = "storage_status";
const std::string PurchaseInStorage::Cols::_auditing_admin_id = "auditing_admin_id";
const std::string PurchaseInStorage::Cols::_storage_image = "storage_image";
const std::string PurchaseInStorage::Cols::_create_time = "create_time";
const std::string PurchaseInStorage::Cols::_update_time = "update_time";
const std::string PurchaseInStorage::Cols::_is_delete = "is_delete";
const std::string PurchaseInStorage::Cols::_audit_remark = "audit_remark";
const std::string PurchaseInStorage::Cols::_purchase_order_key = "purchase_order_key";
const std::string PurchaseInStorage::primaryKeyName = "id";
const bool PurchaseInStorage::hasPrimaryKey = true;
const std::string PurchaseInStorage::tableName = "purchase_in_storage";

const std::vector<typename PurchaseInStorage::MetaData> PurchaseInStorage::metaData_={
{"id","uint64_t","bigint(20) unsigned",8,1,1,1},
{"shop_id","uint64_t","bigint(20) unsigned",8,0,0,1},
{"in_storage_key","std::string","varchar(45)",45,0,0,1},
{"purchase_order_id","uint64_t","bigint(20) unsigned",8,0,0,1},
{"storage_date","::trantor::Date","date",0,0,0,1},
{"admin_id","uint64_t","bigint(20) unsigned",8,0,0,1},
{"storage_status","int8_t","tinyint(10)",1,0,0,1},
{"auditing_admin_id","int64_t","bigint(20)",8,0,0,0},
{"storage_image","std::string","text",0,0,0,0},
{"create_time","::trantor::Date","datetime",0,0,0,0},
{"update_time","::trantor::Date","datetime",0,0,0,0},
{"is_delete","int8_t","tinyint(10)",1,0,0,1},
{"audit_remark","std::string","text",0,0,0,0},
{"purchase_order_key","std::string","varchar(20)",20,0,0,0}
};
const std::string &PurchaseInStorage::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
PurchaseInStorage::PurchaseInStorage(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<uint64_t>(r["id"].as<uint64_t>());
        }
        if(!r["shop_id"].isNull())
        {
            shopId_=std::make_shared<uint64_t>(r["shop_id"].as<uint64_t>());
        }
        if(!r["in_storage_key"].isNull())
        {
            inStorageKey_=std::make_shared<std::string>(r["in_storage_key"].as<std::string>());
        }
        if(!r["purchase_order_id"].isNull())
        {
            purchaseOrderId_=std::make_shared<uint64_t>(r["purchase_order_id"].as<uint64_t>());
        }
        if(!r["storage_date"].isNull())
        {
            auto daysStr = r["storage_date"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            storageDate_=std::make_shared<::trantor::Date>(t*1000000);
        }
        if(!r["admin_id"].isNull())
        {
            adminId_=std::make_shared<uint64_t>(r["admin_id"].as<uint64_t>());
        }
        if(!r["storage_status"].isNull())
        {
            storageStatus_=std::make_shared<int8_t>(r["storage_status"].as<int8_t>());
        }
        if(!r["auditing_admin_id"].isNull())
        {
            auditingAdminId_=std::make_shared<int64_t>(r["auditing_admin_id"].as<int64_t>());
        }
        if(!r["storage_image"].isNull())
        {
            storageImage_=std::make_shared<std::string>(r["storage_image"].as<std::string>());
        }
        if(!r["create_time"].isNull())
        {
            auto timeStr = r["create_time"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        if(!r["update_time"].isNull())
        {
            auto timeStr = r["update_time"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        if(!r["is_delete"].isNull())
        {
            isDelete_=std::make_shared<int8_t>(r["is_delete"].as<int8_t>());
        }
        if(!r["audit_remark"].isNull())
        {
            auditRemark_=std::make_shared<std::string>(r["audit_remark"].as<std::string>());
        }
        if(!r["purchase_order_key"].isNull())
        {
            purchaseOrderKey_=std::make_shared<std::string>(r["purchase_order_key"].as<std::string>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 14 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            shopId_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            inStorageKey_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            purchaseOrderId_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            auto daysStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            storageDate_=std::make_shared<::trantor::Date>(t*1000000);
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            adminId_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            storageStatus_=std::make_shared<int8_t>(r[index].as<int8_t>());
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            auditingAdminId_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 8;
        if(!r[index].isNull())
        {
            storageImage_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 9;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        index = offset + 10;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        index = offset + 11;
        if(!r[index].isNull())
        {
            isDelete_=std::make_shared<int8_t>(r[index].as<int8_t>());
        }
        index = offset + 12;
        if(!r[index].isNull())
        {
            auditRemark_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 13;
        if(!r[index].isNull())
        {
            purchaseOrderKey_=std::make_shared<std::string>(r[index].as<std::string>());
        }
    }

}

PurchaseInStorage::PurchaseInStorage(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 14)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            shopId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[1]].asUInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            inStorageKey_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            purchaseOrderId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[3]].asUInt64());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            auto daysStr = pJson[pMasqueradingVector[4]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            storageDate_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            adminId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[5]].asUInt64());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            storageStatus_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[6]].asInt64());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            auditingAdminId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[7]].asInt64());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            storageImage_=std::make_shared<std::string>(pJson[pMasqueradingVector[8]].asString());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[9]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[10]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            isDelete_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[11]].asInt64());
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            auditRemark_=std::make_shared<std::string>(pJson[pMasqueradingVector[12]].asString());
        }
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        dirtyFlag_[13] = true;
        if(!pJson[pMasqueradingVector[13]].isNull())
        {
            purchaseOrderKey_=std::make_shared<std::string>(pJson[pMasqueradingVector[13]].asString());
        }
    }
}

PurchaseInStorage::PurchaseInStorage(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson["id"].asUInt64());
        }
    }
    if(pJson.isMember("shop_id"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["shop_id"].isNull())
        {
            shopId_=std::make_shared<uint64_t>((uint64_t)pJson["shop_id"].asUInt64());
        }
    }
    if(pJson.isMember("in_storage_key"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["in_storage_key"].isNull())
        {
            inStorageKey_=std::make_shared<std::string>(pJson["in_storage_key"].asString());
        }
    }
    if(pJson.isMember("purchase_order_id"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["purchase_order_id"].isNull())
        {
            purchaseOrderId_=std::make_shared<uint64_t>((uint64_t)pJson["purchase_order_id"].asUInt64());
        }
    }
    if(pJson.isMember("storage_date"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["storage_date"].isNull())
        {
            auto daysStr = pJson["storage_date"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            storageDate_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    if(pJson.isMember("admin_id"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["admin_id"].isNull())
        {
            adminId_=std::make_shared<uint64_t>((uint64_t)pJson["admin_id"].asUInt64());
        }
    }
    if(pJson.isMember("storage_status"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["storage_status"].isNull())
        {
            storageStatus_=std::make_shared<int8_t>((int8_t)pJson["storage_status"].asInt64());
        }
    }
    if(pJson.isMember("auditing_admin_id"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["auditing_admin_id"].isNull())
        {
            auditingAdminId_=std::make_shared<int64_t>((int64_t)pJson["auditing_admin_id"].asInt64());
        }
    }
    if(pJson.isMember("storage_image"))
    {
        dirtyFlag_[8]=true;
        if(!pJson["storage_image"].isNull())
        {
            storageImage_=std::make_shared<std::string>(pJson["storage_image"].asString());
        }
    }
    if(pJson.isMember("create_time"))
    {
        dirtyFlag_[9]=true;
        if(!pJson["create_time"].isNull())
        {
            auto timeStr = pJson["create_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("update_time"))
    {
        dirtyFlag_[10]=true;
        if(!pJson["update_time"].isNull())
        {
            auto timeStr = pJson["update_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("is_delete"))
    {
        dirtyFlag_[11]=true;
        if(!pJson["is_delete"].isNull())
        {
            isDelete_=std::make_shared<int8_t>((int8_t)pJson["is_delete"].asInt64());
        }
    }
    if(pJson.isMember("audit_remark"))
    {
        dirtyFlag_[12]=true;
        if(!pJson["audit_remark"].isNull())
        {
            auditRemark_=std::make_shared<std::string>(pJson["audit_remark"].asString());
        }
    }
    if(pJson.isMember("purchase_order_key"))
    {
        dirtyFlag_[13]=true;
        if(!pJson["purchase_order_key"].isNull())
        {
            purchaseOrderKey_=std::make_shared<std::string>(pJson["purchase_order_key"].asString());
        }
    }
}

void PurchaseInStorage::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 14)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            shopId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[1]].asUInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            inStorageKey_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            purchaseOrderId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[3]].asUInt64());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            auto daysStr = pJson[pMasqueradingVector[4]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            storageDate_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            adminId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[5]].asUInt64());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            storageStatus_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[6]].asInt64());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            auditingAdminId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[7]].asInt64());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            storageImage_=std::make_shared<std::string>(pJson[pMasqueradingVector[8]].asString());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[9]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[10]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            isDelete_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[11]].asInt64());
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            auditRemark_=std::make_shared<std::string>(pJson[pMasqueradingVector[12]].asString());
        }
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        dirtyFlag_[13] = true;
        if(!pJson[pMasqueradingVector[13]].isNull())
        {
            purchaseOrderKey_=std::make_shared<std::string>(pJson[pMasqueradingVector[13]].asString());
        }
    }
}
                                                                    
void PurchaseInStorage::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson["id"].asUInt64());
        }
    }
    if(pJson.isMember("shop_id"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["shop_id"].isNull())
        {
            shopId_=std::make_shared<uint64_t>((uint64_t)pJson["shop_id"].asUInt64());
        }
    }
    if(pJson.isMember("in_storage_key"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["in_storage_key"].isNull())
        {
            inStorageKey_=std::make_shared<std::string>(pJson["in_storage_key"].asString());
        }
    }
    if(pJson.isMember("purchase_order_id"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["purchase_order_id"].isNull())
        {
            purchaseOrderId_=std::make_shared<uint64_t>((uint64_t)pJson["purchase_order_id"].asUInt64());
        }
    }
    if(pJson.isMember("storage_date"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["storage_date"].isNull())
        {
            auto daysStr = pJson["storage_date"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            storageDate_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    if(pJson.isMember("admin_id"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["admin_id"].isNull())
        {
            adminId_=std::make_shared<uint64_t>((uint64_t)pJson["admin_id"].asUInt64());
        }
    }
    if(pJson.isMember("storage_status"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["storage_status"].isNull())
        {
            storageStatus_=std::make_shared<int8_t>((int8_t)pJson["storage_status"].asInt64());
        }
    }
    if(pJson.isMember("auditing_admin_id"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["auditing_admin_id"].isNull())
        {
            auditingAdminId_=std::make_shared<int64_t>((int64_t)pJson["auditing_admin_id"].asInt64());
        }
    }
    if(pJson.isMember("storage_image"))
    {
        dirtyFlag_[8] = true;
        if(!pJson["storage_image"].isNull())
        {
            storageImage_=std::make_shared<std::string>(pJson["storage_image"].asString());
        }
    }
    if(pJson.isMember("create_time"))
    {
        dirtyFlag_[9] = true;
        if(!pJson["create_time"].isNull())
        {
            auto timeStr = pJson["create_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("update_time"))
    {
        dirtyFlag_[10] = true;
        if(!pJson["update_time"].isNull())
        {
            auto timeStr = pJson["update_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("is_delete"))
    {
        dirtyFlag_[11] = true;
        if(!pJson["is_delete"].isNull())
        {
            isDelete_=std::make_shared<int8_t>((int8_t)pJson["is_delete"].asInt64());
        }
    }
    if(pJson.isMember("audit_remark"))
    {
        dirtyFlag_[12] = true;
        if(!pJson["audit_remark"].isNull())
        {
            auditRemark_=std::make_shared<std::string>(pJson["audit_remark"].asString());
        }
    }
    if(pJson.isMember("purchase_order_key"))
    {
        dirtyFlag_[13] = true;
        if(!pJson["purchase_order_key"].isNull())
        {
            purchaseOrderKey_=std::make_shared<std::string>(pJson["purchase_order_key"].asString());
        }
    }
}

const uint64_t &PurchaseInStorage::getValueOfId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &PurchaseInStorage::getId() const noexcept
{
    return id_;
}
void PurchaseInStorage::setId(const uint64_t &pId) noexcept
{
    id_ = std::make_shared<uint64_t>(pId);
    dirtyFlag_[0] = true;
}



const typename PurchaseInStorage::PrimaryKeyType & PurchaseInStorage::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const uint64_t &PurchaseInStorage::getValueOfShopId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(shopId_)
        return *shopId_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &PurchaseInStorage::getShopId() const noexcept
{
    return shopId_;
}
void PurchaseInStorage::setShopId(const uint64_t &pShopId) noexcept
{
    shopId_ = std::make_shared<uint64_t>(pShopId);
    dirtyFlag_[1] = true;
}




const std::string &PurchaseInStorage::getValueOfInStorageKey() const noexcept
{
    const static std::string defaultValue = std::string();
    if(inStorageKey_)
        return *inStorageKey_;
    return defaultValue;
}
const std::shared_ptr<std::string> &PurchaseInStorage::getInStorageKey() const noexcept
{
    return inStorageKey_;
}
void PurchaseInStorage::setInStorageKey(const std::string &pInStorageKey) noexcept
{
    inStorageKey_ = std::make_shared<std::string>(pInStorageKey);
    dirtyFlag_[2] = true;
}
void PurchaseInStorage::setInStorageKey(std::string &&pInStorageKey) noexcept
{
    inStorageKey_ = std::make_shared<std::string>(std::move(pInStorageKey));
    dirtyFlag_[2] = true;
}




const uint64_t &PurchaseInStorage::getValueOfPurchaseOrderId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(purchaseOrderId_)
        return *purchaseOrderId_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &PurchaseInStorage::getPurchaseOrderId() const noexcept
{
    return purchaseOrderId_;
}
void PurchaseInStorage::setPurchaseOrderId(const uint64_t &pPurchaseOrderId) noexcept
{
    purchaseOrderId_ = std::make_shared<uint64_t>(pPurchaseOrderId);
    dirtyFlag_[3] = true;
}




const ::trantor::Date &PurchaseInStorage::getValueOfStorageDate() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(storageDate_)
        return *storageDate_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &PurchaseInStorage::getStorageDate() const noexcept
{
    return storageDate_;
}
void PurchaseInStorage::setStorageDate(const ::trantor::Date &pStorageDate) noexcept
{
    storageDate_ = std::make_shared<::trantor::Date>(pStorageDate.roundDay());
    dirtyFlag_[4] = true;
}




const uint64_t &PurchaseInStorage::getValueOfAdminId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(adminId_)
        return *adminId_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &PurchaseInStorage::getAdminId() const noexcept
{
    return adminId_;
}
void PurchaseInStorage::setAdminId(const uint64_t &pAdminId) noexcept
{
    adminId_ = std::make_shared<uint64_t>(pAdminId);
    dirtyFlag_[5] = true;
}




const int8_t &PurchaseInStorage::getValueOfStorageStatus() const noexcept
{
    const static int8_t defaultValue = int8_t();
    if(storageStatus_)
        return *storageStatus_;
    return defaultValue;
}
const std::shared_ptr<int8_t> &PurchaseInStorage::getStorageStatus() const noexcept
{
    return storageStatus_;
}
void PurchaseInStorage::setStorageStatus(const int8_t &pStorageStatus) noexcept
{
    storageStatus_ = std::make_shared<int8_t>(pStorageStatus);
    dirtyFlag_[6] = true;
}




const int64_t &PurchaseInStorage::getValueOfAuditingAdminId() const noexcept
{
    const static int64_t defaultValue = int64_t();
    if(auditingAdminId_)
        return *auditingAdminId_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &PurchaseInStorage::getAuditingAdminId() const noexcept
{
    return auditingAdminId_;
}
void PurchaseInStorage::setAuditingAdminId(const int64_t &pAuditingAdminId) noexcept
{
    auditingAdminId_ = std::make_shared<int64_t>(pAuditingAdminId);
    dirtyFlag_[7] = true;
}


void PurchaseInStorage::setAuditingAdminIdToNull() noexcept
{
    auditingAdminId_.reset();
    dirtyFlag_[7] = true;
}


const std::string &PurchaseInStorage::getValueOfStorageImage() const noexcept
{
    const static std::string defaultValue = std::string();
    if(storageImage_)
        return *storageImage_;
    return defaultValue;
}
const std::shared_ptr<std::string> &PurchaseInStorage::getStorageImage() const noexcept
{
    return storageImage_;
}
void PurchaseInStorage::setStorageImage(const std::string &pStorageImage) noexcept
{
    storageImage_ = std::make_shared<std::string>(pStorageImage);
    dirtyFlag_[8] = true;
}
void PurchaseInStorage::setStorageImage(std::string &&pStorageImage) noexcept
{
    storageImage_ = std::make_shared<std::string>(std::move(pStorageImage));
    dirtyFlag_[8] = true;
}


void PurchaseInStorage::setStorageImageToNull() noexcept
{
    storageImage_.reset();
    dirtyFlag_[8] = true;
}


const ::trantor::Date &PurchaseInStorage::getValueOfCreateTime() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(createTime_)
        return *createTime_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &PurchaseInStorage::getCreateTime() const noexcept
{
    return createTime_;
}
void PurchaseInStorage::setCreateTime(const ::trantor::Date &pCreateTime) noexcept
{
    createTime_ = std::make_shared<::trantor::Date>(pCreateTime);
    dirtyFlag_[9] = true;
}


void PurchaseInStorage::setCreateTimeToNull() noexcept
{
    createTime_.reset();
    dirtyFlag_[9] = true;
}


const ::trantor::Date &PurchaseInStorage::getValueOfUpdateTime() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(updateTime_)
        return *updateTime_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &PurchaseInStorage::getUpdateTime() const noexcept
{
    return updateTime_;
}
void PurchaseInStorage::setUpdateTime(const ::trantor::Date &pUpdateTime) noexcept
{
    updateTime_ = std::make_shared<::trantor::Date>(pUpdateTime);
    dirtyFlag_[10] = true;
}


void PurchaseInStorage::setUpdateTimeToNull() noexcept
{
    updateTime_.reset();
    dirtyFlag_[10] = true;
}


const int8_t &PurchaseInStorage::getValueOfIsDelete() const noexcept
{
    const static int8_t defaultValue = int8_t();
    if(isDelete_)
        return *isDelete_;
    return defaultValue;
}
const std::shared_ptr<int8_t> &PurchaseInStorage::getIsDelete() const noexcept
{
    return isDelete_;
}
void PurchaseInStorage::setIsDelete(const int8_t &pIsDelete) noexcept
{
    isDelete_ = std::make_shared<int8_t>(pIsDelete);
    dirtyFlag_[11] = true;
}




const std::string &PurchaseInStorage::getValueOfAuditRemark() const noexcept
{
    const static std::string defaultValue = std::string();
    if(auditRemark_)
        return *auditRemark_;
    return defaultValue;
}
const std::shared_ptr<std::string> &PurchaseInStorage::getAuditRemark() const noexcept
{
    return auditRemark_;
}
void PurchaseInStorage::setAuditRemark(const std::string &pAuditRemark) noexcept
{
    auditRemark_ = std::make_shared<std::string>(pAuditRemark);
    dirtyFlag_[12] = true;
}
void PurchaseInStorage::setAuditRemark(std::string &&pAuditRemark) noexcept
{
    auditRemark_ = std::make_shared<std::string>(std::move(pAuditRemark));
    dirtyFlag_[12] = true;
}


void PurchaseInStorage::setAuditRemarkToNull() noexcept
{
    auditRemark_.reset();
    dirtyFlag_[12] = true;
}


const std::string &PurchaseInStorage::getValueOfPurchaseOrderKey() const noexcept
{
    const static std::string defaultValue = std::string();
    if(purchaseOrderKey_)
        return *purchaseOrderKey_;
    return defaultValue;
}
const std::shared_ptr<std::string> &PurchaseInStorage::getPurchaseOrderKey() const noexcept
{
    return purchaseOrderKey_;
}
void PurchaseInStorage::setPurchaseOrderKey(const std::string &pPurchaseOrderKey) noexcept
{
    purchaseOrderKey_ = std::make_shared<std::string>(pPurchaseOrderKey);
    dirtyFlag_[13] = true;
}
void PurchaseInStorage::setPurchaseOrderKey(std::string &&pPurchaseOrderKey) noexcept
{
    purchaseOrderKey_ = std::make_shared<std::string>(std::move(pPurchaseOrderKey));
    dirtyFlag_[13] = true;
}


void PurchaseInStorage::setPurchaseOrderKeyToNull() noexcept
{
    purchaseOrderKey_.reset();
    dirtyFlag_[13] = true;
}


void PurchaseInStorage::updateId(const uint64_t id)
{
    id_ = std::make_shared<uint64_t>(id);
}

const std::vector<std::string> &PurchaseInStorage::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "shop_id",
        "in_storage_key",
        "purchase_order_id",
        "storage_date",
        "admin_id",
        "storage_status",
        "auditing_admin_id",
        "storage_image",
        "create_time",
        "update_time",
        "is_delete",
        "audit_remark",
        "purchase_order_key"
    };
    return inCols;
}

void PurchaseInStorage::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getShopId())
        {
            binder << getValueOfShopId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getInStorageKey())
        {
            binder << getValueOfInStorageKey();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getPurchaseOrderId())
        {
            binder << getValueOfPurchaseOrderId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getStorageDate())
        {
            binder << getValueOfStorageDate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getAdminId())
        {
            binder << getValueOfAdminId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getStorageStatus())
        {
            binder << getValueOfStorageStatus();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getAuditingAdminId())
        {
            binder << getValueOfAuditingAdminId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getStorageImage())
        {
            binder << getValueOfStorageImage();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getCreateTime())
        {
            binder << getValueOfCreateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getUpdateTime())
        {
            binder << getValueOfUpdateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getIsDelete())
        {
            binder << getValueOfIsDelete();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getAuditRemark())
        {
            binder << getValueOfAuditRemark();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[13])
    {
        if(getPurchaseOrderKey())
        {
            binder << getValueOfPurchaseOrderKey();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> PurchaseInStorage::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    if(dirtyFlag_[8])
    {
        ret.push_back(getColumnName(8));
    }
    if(dirtyFlag_[9])
    {
        ret.push_back(getColumnName(9));
    }
    if(dirtyFlag_[10])
    {
        ret.push_back(getColumnName(10));
    }
    if(dirtyFlag_[11])
    {
        ret.push_back(getColumnName(11));
    }
    if(dirtyFlag_[12])
    {
        ret.push_back(getColumnName(12));
    }
    if(dirtyFlag_[13])
    {
        ret.push_back(getColumnName(13));
    }
    return ret;
}

void PurchaseInStorage::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getShopId())
        {
            binder << getValueOfShopId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getInStorageKey())
        {
            binder << getValueOfInStorageKey();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getPurchaseOrderId())
        {
            binder << getValueOfPurchaseOrderId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getStorageDate())
        {
            binder << getValueOfStorageDate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getAdminId())
        {
            binder << getValueOfAdminId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getStorageStatus())
        {
            binder << getValueOfStorageStatus();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getAuditingAdminId())
        {
            binder << getValueOfAuditingAdminId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getStorageImage())
        {
            binder << getValueOfStorageImage();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getCreateTime())
        {
            binder << getValueOfCreateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getUpdateTime())
        {
            binder << getValueOfUpdateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getIsDelete())
        {
            binder << getValueOfIsDelete();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getAuditRemark())
        {
            binder << getValueOfAuditRemark();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[13])
    {
        if(getPurchaseOrderKey())
        {
            binder << getValueOfPurchaseOrderKey();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value PurchaseInStorage::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=(Json::UInt64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getShopId())
    {
        ret["shop_id"]=(Json::UInt64)getValueOfShopId();
    }
    else
    {
        ret["shop_id"]=Json::Value();
    }
    if(getInStorageKey())
    {
        ret["in_storage_key"]=getValueOfInStorageKey();
    }
    else
    {
        ret["in_storage_key"]=Json::Value();
    }
    if(getPurchaseOrderId())
    {
        ret["purchase_order_id"]=(Json::UInt64)getValueOfPurchaseOrderId();
    }
    else
    {
        ret["purchase_order_id"]=Json::Value();
    }
    if(getStorageDate())
    {
        ret["storage_date"]=getStorageDate()->toDbStringLocal();
    }
    else
    {
        ret["storage_date"]=Json::Value();
    }
    if(getAdminId())
    {
        ret["admin_id"]=(Json::UInt64)getValueOfAdminId();
    }
    else
    {
        ret["admin_id"]=Json::Value();
    }
    if(getStorageStatus())
    {
        ret["storage_status"]=getValueOfStorageStatus();
    }
    else
    {
        ret["storage_status"]=Json::Value();
    }
    if(getAuditingAdminId())
    {
        ret["auditing_admin_id"]=(Json::Int64)getValueOfAuditingAdminId();
    }
    else
    {
        ret["auditing_admin_id"]=Json::Value();
    }
    if(getStorageImage())
    {
        ret["storage_image"]=getValueOfStorageImage();
    }
    else
    {
        ret["storage_image"]=Json::Value();
    }
    if(getCreateTime())
    {
        ret["create_time"]=getCreateTime()->toDbStringLocal();
    }
    else
    {
        ret["create_time"]=Json::Value();
    }
    if(getUpdateTime())
    {
        ret["update_time"]=getUpdateTime()->toDbStringLocal();
    }
    else
    {
        ret["update_time"]=Json::Value();
    }
    if(getIsDelete())
    {
        ret["is_delete"]=getValueOfIsDelete();
    }
    else
    {
        ret["is_delete"]=Json::Value();
    }
    if(getAuditRemark())
    {
        ret["audit_remark"]=getValueOfAuditRemark();
    }
    else
    {
        ret["audit_remark"]=Json::Value();
    }
    if(getPurchaseOrderKey())
    {
        ret["purchase_order_key"]=getValueOfPurchaseOrderKey();
    }
    else
    {
        ret["purchase_order_key"]=Json::Value();
    }
    return ret;
}

Json::Value PurchaseInStorage::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 14)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=(Json::UInt64)getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getShopId())
            {
                ret[pMasqueradingVector[1]]=(Json::UInt64)getValueOfShopId();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getInStorageKey())
            {
                ret[pMasqueradingVector[2]]=getValueOfInStorageKey();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getPurchaseOrderId())
            {
                ret[pMasqueradingVector[3]]=(Json::UInt64)getValueOfPurchaseOrderId();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getStorageDate())
            {
                ret[pMasqueradingVector[4]]=getStorageDate()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getAdminId())
            {
                ret[pMasqueradingVector[5]]=(Json::UInt64)getValueOfAdminId();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getStorageStatus())
            {
                ret[pMasqueradingVector[6]]=getValueOfStorageStatus();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getAuditingAdminId())
            {
                ret[pMasqueradingVector[7]]=(Json::Int64)getValueOfAuditingAdminId();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[8].empty())
        {
            if(getStorageImage())
            {
                ret[pMasqueradingVector[8]]=getValueOfStorageImage();
            }
            else
            {
                ret[pMasqueradingVector[8]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[9].empty())
        {
            if(getCreateTime())
            {
                ret[pMasqueradingVector[9]]=getCreateTime()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[9]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[10].empty())
        {
            if(getUpdateTime())
            {
                ret[pMasqueradingVector[10]]=getUpdateTime()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[10]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[11].empty())
        {
            if(getIsDelete())
            {
                ret[pMasqueradingVector[11]]=getValueOfIsDelete();
            }
            else
            {
                ret[pMasqueradingVector[11]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[12].empty())
        {
            if(getAuditRemark())
            {
                ret[pMasqueradingVector[12]]=getValueOfAuditRemark();
            }
            else
            {
                ret[pMasqueradingVector[12]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[13].empty())
        {
            if(getPurchaseOrderKey())
            {
                ret[pMasqueradingVector[13]]=getValueOfPurchaseOrderKey();
            }
            else
            {
                ret[pMasqueradingVector[13]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=(Json::UInt64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getShopId())
    {
        ret["shop_id"]=(Json::UInt64)getValueOfShopId();
    }
    else
    {
        ret["shop_id"]=Json::Value();
    }
    if(getInStorageKey())
    {
        ret["in_storage_key"]=getValueOfInStorageKey();
    }
    else
    {
        ret["in_storage_key"]=Json::Value();
    }
    if(getPurchaseOrderId())
    {
        ret["purchase_order_id"]=(Json::UInt64)getValueOfPurchaseOrderId();
    }
    else
    {
        ret["purchase_order_id"]=Json::Value();
    }
    if(getStorageDate())
    {
        ret["storage_date"]=getStorageDate()->toDbStringLocal();
    }
    else
    {
        ret["storage_date"]=Json::Value();
    }
    if(getAdminId())
    {
        ret["admin_id"]=(Json::UInt64)getValueOfAdminId();
    }
    else
    {
        ret["admin_id"]=Json::Value();
    }
    if(getStorageStatus())
    {
        ret["storage_status"]=getValueOfStorageStatus();
    }
    else
    {
        ret["storage_status"]=Json::Value();
    }
    if(getAuditingAdminId())
    {
        ret["auditing_admin_id"]=(Json::Int64)getValueOfAuditingAdminId();
    }
    else
    {
        ret["auditing_admin_id"]=Json::Value();
    }
    if(getStorageImage())
    {
        ret["storage_image"]=getValueOfStorageImage();
    }
    else
    {
        ret["storage_image"]=Json::Value();
    }
    if(getCreateTime())
    {
        ret["create_time"]=getCreateTime()->toDbStringLocal();
    }
    else
    {
        ret["create_time"]=Json::Value();
    }
    if(getUpdateTime())
    {
        ret["update_time"]=getUpdateTime()->toDbStringLocal();
    }
    else
    {
        ret["update_time"]=Json::Value();
    }
    if(getIsDelete())
    {
        ret["is_delete"]=getValueOfIsDelete();
    }
    else
    {
        ret["is_delete"]=Json::Value();
    }
    if(getAuditRemark())
    {
        ret["audit_remark"]=getValueOfAuditRemark();
    }
    else
    {
        ret["audit_remark"]=Json::Value();
    }
    if(getPurchaseOrderKey())
    {
        ret["purchase_order_key"]=getValueOfPurchaseOrderKey();
    }
    else
    {
        ret["purchase_order_key"]=Json::Value();
    }
    return ret;
}

bool PurchaseInStorage::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("shop_id"))
    {
        if(!validJsonOfField(1, "shop_id", pJson["shop_id"], err, true))
            return false;
    }
    if(pJson.isMember("in_storage_key"))
    {
        if(!validJsonOfField(2, "in_storage_key", pJson["in_storage_key"], err, true))
            return false;
    }
    else
    {
        err="The in_storage_key column cannot be null";
        return false;
    }
    if(pJson.isMember("purchase_order_id"))
    {
        if(!validJsonOfField(3, "purchase_order_id", pJson["purchase_order_id"], err, true))
            return false;
    }
    if(pJson.isMember("storage_date"))
    {
        if(!validJsonOfField(4, "storage_date", pJson["storage_date"], err, true))
            return false;
    }
    else
    {
        err="The storage_date column cannot be null";
        return false;
    }
    if(pJson.isMember("admin_id"))
    {
        if(!validJsonOfField(5, "admin_id", pJson["admin_id"], err, true))
            return false;
    }
    if(pJson.isMember("storage_status"))
    {
        if(!validJsonOfField(6, "storage_status", pJson["storage_status"], err, true))
            return false;
    }
    if(pJson.isMember("auditing_admin_id"))
    {
        if(!validJsonOfField(7, "auditing_admin_id", pJson["auditing_admin_id"], err, true))
            return false;
    }
    if(pJson.isMember("storage_image"))
    {
        if(!validJsonOfField(8, "storage_image", pJson["storage_image"], err, true))
            return false;
    }
    if(pJson.isMember("create_time"))
    {
        if(!validJsonOfField(9, "create_time", pJson["create_time"], err, true))
            return false;
    }
    if(pJson.isMember("update_time"))
    {
        if(!validJsonOfField(10, "update_time", pJson["update_time"], err, true))
            return false;
    }
    if(pJson.isMember("is_delete"))
    {
        if(!validJsonOfField(11, "is_delete", pJson["is_delete"], err, true))
            return false;
    }
    if(pJson.isMember("audit_remark"))
    {
        if(!validJsonOfField(12, "audit_remark", pJson["audit_remark"], err, true))
            return false;
    }
    if(pJson.isMember("purchase_order_key"))
    {
        if(!validJsonOfField(13, "purchase_order_key", pJson["purchase_order_key"], err, true))
            return false;
    }
    return true;
}
bool PurchaseInStorage::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                           const std::vector<std::string> &pMasqueradingVector,
                                                           std::string &err)
{
    if(pMasqueradingVector.size() != 14)
    {
        err = "Bad masquerading vector";
        return false;
    }
    if(!pMasqueradingVector[0].empty())
    {
        if(pJson.isMember(pMasqueradingVector[0]))
        {
            if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[1].empty())
    {
        if(pJson.isMember(pMasqueradingVector[1]))
        {
            if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[2].empty())
    {
        if(pJson.isMember(pMasqueradingVector[2]))
        {
            if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                return false;
        }
        else
        {
            err="The " + pMasqueradingVector[2] + " column cannot be null";
            return false;
        }
    }
    if(!pMasqueradingVector[3].empty())
    {
        if(pJson.isMember(pMasqueradingVector[3]))
        {
            if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[4].empty())
    {
        if(pJson.isMember(pMasqueradingVector[4]))
        {
            if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                return false;
        }
        else
        {
            err="The " + pMasqueradingVector[4] + " column cannot be null";
            return false;
        }
    }
    if(!pMasqueradingVector[5].empty())
    {
        if(pJson.isMember(pMasqueradingVector[5]))
        {
            if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[6].empty())
    {
        if(pJson.isMember(pMasqueradingVector[6]))
        {
            if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[7].empty())
    {
        if(pJson.isMember(pMasqueradingVector[7]))
        {
            if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[8].empty())
    {
        if(pJson.isMember(pMasqueradingVector[8]))
        {
            if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[9].empty())
    {
        if(pJson.isMember(pMasqueradingVector[9]))
        {
            if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[10].empty())
    {
        if(pJson.isMember(pMasqueradingVector[10]))
        {
            if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[11].empty())
    {
        if(pJson.isMember(pMasqueradingVector[11]))
        {
            if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[12].empty())
    {
        if(pJson.isMember(pMasqueradingVector[12]))
        {
            if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[13].empty())
    {
        if(pJson.isMember(pMasqueradingVector[13]))
        {
            if(!validJsonOfField(13, pMasqueradingVector[13], pJson[pMasqueradingVector[13]], err, true))
                return false;
        }
    }
    return true;
}
bool PurchaseInStorage::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("shop_id"))
    {
        if(!validJsonOfField(1, "shop_id", pJson["shop_id"], err, false))
            return false;
    }
    if(pJson.isMember("in_storage_key"))
    {
        if(!validJsonOfField(2, "in_storage_key", pJson["in_storage_key"], err, false))
            return false;
    }
    if(pJson.isMember("purchase_order_id"))
    {
        if(!validJsonOfField(3, "purchase_order_id", pJson["purchase_order_id"], err, false))
            return false;
    }
    if(pJson.isMember("storage_date"))
    {
        if(!validJsonOfField(4, "storage_date", pJson["storage_date"], err, false))
            return false;
    }
    if(pJson.isMember("admin_id"))
    {
        if(!validJsonOfField(5, "admin_id", pJson["admin_id"], err, false))
            return false;
    }
    if(pJson.isMember("storage_status"))
    {
        if(!validJsonOfField(6, "storage_status", pJson["storage_status"], err, false))
            return false;
    }
    if(pJson.isMember("auditing_admin_id"))
    {
        if(!validJsonOfField(7, "auditing_admin_id", pJson["auditing_admin_id"], err, false))
            return false;
    }
    if(pJson.isMember("storage_image"))
    {
        if(!validJsonOfField(8, "storage_image", pJson["storage_image"], err, false))
            return false;
    }
    if(pJson.isMember("create_time"))
    {
        if(!validJsonOfField(9, "create_time", pJson["create_time"], err, false))
            return false;
    }
    if(pJson.isMember("update_time"))
    {
        if(!validJsonOfField(10, "update_time", pJson["update_time"], err, false))
            return false;
    }
    if(pJson.isMember("is_delete"))
    {
        if(!validJsonOfField(11, "is_delete", pJson["is_delete"], err, false))
            return false;
    }
    if(pJson.isMember("audit_remark"))
    {
        if(!validJsonOfField(12, "audit_remark", pJson["audit_remark"], err, false))
            return false;
    }
    if(pJson.isMember("purchase_order_key"))
    {
        if(!validJsonOfField(13, "purchase_order_key", pJson["purchase_order_key"], err, false))
            return false;
    }
    return true;
}
bool PurchaseInStorage::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                         const std::vector<std::string> &pMasqueradingVector,
                                                         std::string &err)
{
    if(pMasqueradingVector.size() != 14)
    {
        err = "Bad masquerading vector";
        return false;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
            return false;
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
            return false;
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
            return false;
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
            return false;
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
            return false;
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
            return false;
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
            return false;
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, false))
            return false;
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, false))
            return false;
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, false))
            return false;
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, false))
            return false;
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, false))
            return false;
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        if(!validJsonOfField(13, pMasqueradingVector[13], pJson[pMasqueradingVector[13]], err, false))
            return false;
    }
    return true;
}
bool PurchaseInStorage::validJsonOfField(size_t index,
                                         const std::string &fieldName,
                                         const Json::Value &pJson, 
                                         std::string &err, 
                                         bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }        
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 45)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 45)";
                return false;               
            }

            break;
        case 3:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 5:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 6:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 7:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 8:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 9:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 10:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 11:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 12:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 13:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 20)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 20)";
                return false;               
            }

            break;
     
        default:
            err="Internal error in the server";
            return false;
            break;
    }
    return true;
}
