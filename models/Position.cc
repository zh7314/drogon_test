/**
 *
 *  Position.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Position.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::v2;

const std::string Position::Cols::_id = "id";
const std::string Position::Cols::_shop_id = "shop_id";
const std::string Position::Cols::_product_category_id = "product_category_id";
const std::string Position::Cols::_company_name = "company_name";
const std::string Position::Cols::_order_type = "order_type";
const std::string Position::Cols::_data_time = "data_time";
const std::string Position::Cols::_point_price_contract = "point_price_contract";
const std::string Position::Cols::_futures_point_price_number = "futures_point_price_number";
const std::string Position::Cols::_create_time = "create_time";
const std::string Position::Cols::_update_time = "update_time";
const std::string Position::Cols::_price = "price";
const std::string Position::Cols::_basis = "basis";
const std::string Position::Cols::_sts_price = "sts_price";
const std::string Position::Cols::_process_cost = "process_cost";
const std::string Position::Cols::_contract_price = "contract_price";
const std::string Position::Cols::_delivery_period = "delivery_period";
const std::string Position::Cols::_contract_no = "contract_no";
const std::string Position::Cols::_remark = "remark";
const std::string Position::Cols::_confirm = "confirm";
const std::string Position::Cols::_admin_id = "admin_id";
const std::string Position::Cols::_is_delete = "is_delete";
const std::string Position::primaryKeyName = "id";
const bool Position::hasPrimaryKey = true;
const std::string Position::tableName = "position";

const std::vector<typename Position::MetaData> Position::metaData_={
{"id","uint64_t","bigint(20) unsigned",8,1,1,1},
{"shop_id","int64_t","bigint(20)",8,0,0,1},
{"product_category_id","int64_t","bigint(20)",8,0,0,1},
{"company_name","std::string","varchar(200)",200,0,0,1},
{"order_type","uint8_t","tinyint(1) unsigned",1,0,0,1},
{"data_time","::trantor::Date","date",0,0,0,1},
{"point_price_contract","std::string","varchar(20)",20,0,0,0},
{"futures_point_price_number","std::string","decimal(32,5)",0,0,0,1},
{"create_time","::trantor::Date","datetime",0,0,0,1},
{"update_time","::trantor::Date","datetime",0,0,0,1},
{"price","std::string","decimal(32,5)",0,0,0,1},
{"basis","std::string","decimal(32,5)",0,0,0,1},
{"sts_price","std::string","decimal(32,5)",0,0,0,1},
{"process_cost","std::string","decimal(32,5)",0,0,0,1},
{"contract_price","std::string","decimal(32,5)",0,0,0,1},
{"delivery_period","std::string","varchar(50)",50,0,0,0},
{"contract_no","std::string","varchar(50)",50,0,0,0},
{"remark","std::string","varchar(200)",200,0,0,0},
{"confirm","uint8_t","tinyint(1) unsigned",1,0,0,1},
{"admin_id","int64_t","bigint(20)",8,0,0,1},
{"is_delete","int8_t","tinyint(1)",1,0,0,1}
};
const std::string &Position::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Position::Position(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<uint64_t>(r["id"].as<uint64_t>());
        }
        if(!r["shop_id"].isNull())
        {
            shopId_=std::make_shared<int64_t>(r["shop_id"].as<int64_t>());
        }
        if(!r["product_category_id"].isNull())
        {
            productCategoryId_=std::make_shared<int64_t>(r["product_category_id"].as<int64_t>());
        }
        if(!r["company_name"].isNull())
        {
            companyName_=std::make_shared<std::string>(r["company_name"].as<std::string>());
        }
        if(!r["order_type"].isNull())
        {
            orderType_=std::make_shared<uint8_t>(r["order_type"].as<uint8_t>());
        }
        if(!r["data_time"].isNull())
        {
            auto daysStr = r["data_time"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            dataTime_=std::make_shared<::trantor::Date>(t*1000000);
        }
        if(!r["point_price_contract"].isNull())
        {
            pointPriceContract_=std::make_shared<std::string>(r["point_price_contract"].as<std::string>());
        }
        if(!r["futures_point_price_number"].isNull())
        {
            futuresPointPriceNumber_=std::make_shared<std::string>(r["futures_point_price_number"].as<std::string>());
        }
        if(!r["create_time"].isNull())
        {
            auto timeStr = r["create_time"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        if(!r["update_time"].isNull())
        {
            auto timeStr = r["update_time"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        if(!r["price"].isNull())
        {
            price_=std::make_shared<std::string>(r["price"].as<std::string>());
        }
        if(!r["basis"].isNull())
        {
            basis_=std::make_shared<std::string>(r["basis"].as<std::string>());
        }
        if(!r["sts_price"].isNull())
        {
            stsPrice_=std::make_shared<std::string>(r["sts_price"].as<std::string>());
        }
        if(!r["process_cost"].isNull())
        {
            processCost_=std::make_shared<std::string>(r["process_cost"].as<std::string>());
        }
        if(!r["contract_price"].isNull())
        {
            contractPrice_=std::make_shared<std::string>(r["contract_price"].as<std::string>());
        }
        if(!r["delivery_period"].isNull())
        {
            deliveryPeriod_=std::make_shared<std::string>(r["delivery_period"].as<std::string>());
        }
        if(!r["contract_no"].isNull())
        {
            contractNo_=std::make_shared<std::string>(r["contract_no"].as<std::string>());
        }
        if(!r["remark"].isNull())
        {
            remark_=std::make_shared<std::string>(r["remark"].as<std::string>());
        }
        if(!r["confirm"].isNull())
        {
            confirm_=std::make_shared<uint8_t>(r["confirm"].as<uint8_t>());
        }
        if(!r["admin_id"].isNull())
        {
            adminId_=std::make_shared<int64_t>(r["admin_id"].as<int64_t>());
        }
        if(!r["is_delete"].isNull())
        {
            isDelete_=std::make_shared<int8_t>(r["is_delete"].as<int8_t>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 21 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            shopId_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            productCategoryId_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            companyName_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            orderType_=std::make_shared<uint8_t>(r[index].as<uint8_t>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            auto daysStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            dataTime_=std::make_shared<::trantor::Date>(t*1000000);
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            pointPriceContract_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            futuresPointPriceNumber_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 8;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        index = offset + 9;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        index = offset + 10;
        if(!r[index].isNull())
        {
            price_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 11;
        if(!r[index].isNull())
        {
            basis_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 12;
        if(!r[index].isNull())
        {
            stsPrice_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 13;
        if(!r[index].isNull())
        {
            processCost_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 14;
        if(!r[index].isNull())
        {
            contractPrice_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 15;
        if(!r[index].isNull())
        {
            deliveryPeriod_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 16;
        if(!r[index].isNull())
        {
            contractNo_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 17;
        if(!r[index].isNull())
        {
            remark_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 18;
        if(!r[index].isNull())
        {
            confirm_=std::make_shared<uint8_t>(r[index].as<uint8_t>());
        }
        index = offset + 19;
        if(!r[index].isNull())
        {
            adminId_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 20;
        if(!r[index].isNull())
        {
            isDelete_=std::make_shared<int8_t>(r[index].as<int8_t>());
        }
    }

}

Position::Position(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 21)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            shopId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[1]].asInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            productCategoryId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[2]].asInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            companyName_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            orderType_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[4]].asUInt64());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            auto daysStr = pJson[pMasqueradingVector[5]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            dataTime_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            pointPriceContract_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            futuresPointPriceNumber_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[8]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[9]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            price_=std::make_shared<std::string>(pJson[pMasqueradingVector[10]].asString());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            basis_=std::make_shared<std::string>(pJson[pMasqueradingVector[11]].asString());
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            stsPrice_=std::make_shared<std::string>(pJson[pMasqueradingVector[12]].asString());
        }
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        dirtyFlag_[13] = true;
        if(!pJson[pMasqueradingVector[13]].isNull())
        {
            processCost_=std::make_shared<std::string>(pJson[pMasqueradingVector[13]].asString());
        }
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        dirtyFlag_[14] = true;
        if(!pJson[pMasqueradingVector[14]].isNull())
        {
            contractPrice_=std::make_shared<std::string>(pJson[pMasqueradingVector[14]].asString());
        }
    }
    if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
    {
        dirtyFlag_[15] = true;
        if(!pJson[pMasqueradingVector[15]].isNull())
        {
            deliveryPeriod_=std::make_shared<std::string>(pJson[pMasqueradingVector[15]].asString());
        }
    }
    if(!pMasqueradingVector[16].empty() && pJson.isMember(pMasqueradingVector[16]))
    {
        dirtyFlag_[16] = true;
        if(!pJson[pMasqueradingVector[16]].isNull())
        {
            contractNo_=std::make_shared<std::string>(pJson[pMasqueradingVector[16]].asString());
        }
    }
    if(!pMasqueradingVector[17].empty() && pJson.isMember(pMasqueradingVector[17]))
    {
        dirtyFlag_[17] = true;
        if(!pJson[pMasqueradingVector[17]].isNull())
        {
            remark_=std::make_shared<std::string>(pJson[pMasqueradingVector[17]].asString());
        }
    }
    if(!pMasqueradingVector[18].empty() && pJson.isMember(pMasqueradingVector[18]))
    {
        dirtyFlag_[18] = true;
        if(!pJson[pMasqueradingVector[18]].isNull())
        {
            confirm_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[18]].asUInt64());
        }
    }
    if(!pMasqueradingVector[19].empty() && pJson.isMember(pMasqueradingVector[19]))
    {
        dirtyFlag_[19] = true;
        if(!pJson[pMasqueradingVector[19]].isNull())
        {
            adminId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[19]].asInt64());
        }
    }
    if(!pMasqueradingVector[20].empty() && pJson.isMember(pMasqueradingVector[20]))
    {
        dirtyFlag_[20] = true;
        if(!pJson[pMasqueradingVector[20]].isNull())
        {
            isDelete_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[20]].asInt64());
        }
    }
}

Position::Position(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson["id"].asUInt64());
        }
    }
    if(pJson.isMember("shop_id"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["shop_id"].isNull())
        {
            shopId_=std::make_shared<int64_t>((int64_t)pJson["shop_id"].asInt64());
        }
    }
    if(pJson.isMember("product_category_id"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["product_category_id"].isNull())
        {
            productCategoryId_=std::make_shared<int64_t>((int64_t)pJson["product_category_id"].asInt64());
        }
    }
    if(pJson.isMember("company_name"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["company_name"].isNull())
        {
            companyName_=std::make_shared<std::string>(pJson["company_name"].asString());
        }
    }
    if(pJson.isMember("order_type"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["order_type"].isNull())
        {
            orderType_=std::make_shared<uint8_t>((uint8_t)pJson["order_type"].asUInt64());
        }
    }
    if(pJson.isMember("data_time"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["data_time"].isNull())
        {
            auto daysStr = pJson["data_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            dataTime_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    if(pJson.isMember("point_price_contract"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["point_price_contract"].isNull())
        {
            pointPriceContract_=std::make_shared<std::string>(pJson["point_price_contract"].asString());
        }
    }
    if(pJson.isMember("futures_point_price_number"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["futures_point_price_number"].isNull())
        {
            futuresPointPriceNumber_=std::make_shared<std::string>(pJson["futures_point_price_number"].asString());
        }
    }
    if(pJson.isMember("create_time"))
    {
        dirtyFlag_[8]=true;
        if(!pJson["create_time"].isNull())
        {
            auto timeStr = pJson["create_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("update_time"))
    {
        dirtyFlag_[9]=true;
        if(!pJson["update_time"].isNull())
        {
            auto timeStr = pJson["update_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("price"))
    {
        dirtyFlag_[10]=true;
        if(!pJson["price"].isNull())
        {
            price_=std::make_shared<std::string>(pJson["price"].asString());
        }
    }
    if(pJson.isMember("basis"))
    {
        dirtyFlag_[11]=true;
        if(!pJson["basis"].isNull())
        {
            basis_=std::make_shared<std::string>(pJson["basis"].asString());
        }
    }
    if(pJson.isMember("sts_price"))
    {
        dirtyFlag_[12]=true;
        if(!pJson["sts_price"].isNull())
        {
            stsPrice_=std::make_shared<std::string>(pJson["sts_price"].asString());
        }
    }
    if(pJson.isMember("process_cost"))
    {
        dirtyFlag_[13]=true;
        if(!pJson["process_cost"].isNull())
        {
            processCost_=std::make_shared<std::string>(pJson["process_cost"].asString());
        }
    }
    if(pJson.isMember("contract_price"))
    {
        dirtyFlag_[14]=true;
        if(!pJson["contract_price"].isNull())
        {
            contractPrice_=std::make_shared<std::string>(pJson["contract_price"].asString());
        }
    }
    if(pJson.isMember("delivery_period"))
    {
        dirtyFlag_[15]=true;
        if(!pJson["delivery_period"].isNull())
        {
            deliveryPeriod_=std::make_shared<std::string>(pJson["delivery_period"].asString());
        }
    }
    if(pJson.isMember("contract_no"))
    {
        dirtyFlag_[16]=true;
        if(!pJson["contract_no"].isNull())
        {
            contractNo_=std::make_shared<std::string>(pJson["contract_no"].asString());
        }
    }
    if(pJson.isMember("remark"))
    {
        dirtyFlag_[17]=true;
        if(!pJson["remark"].isNull())
        {
            remark_=std::make_shared<std::string>(pJson["remark"].asString());
        }
    }
    if(pJson.isMember("confirm"))
    {
        dirtyFlag_[18]=true;
        if(!pJson["confirm"].isNull())
        {
            confirm_=std::make_shared<uint8_t>((uint8_t)pJson["confirm"].asUInt64());
        }
    }
    if(pJson.isMember("admin_id"))
    {
        dirtyFlag_[19]=true;
        if(!pJson["admin_id"].isNull())
        {
            adminId_=std::make_shared<int64_t>((int64_t)pJson["admin_id"].asInt64());
        }
    }
    if(pJson.isMember("is_delete"))
    {
        dirtyFlag_[20]=true;
        if(!pJson["is_delete"].isNull())
        {
            isDelete_=std::make_shared<int8_t>((int8_t)pJson["is_delete"].asInt64());
        }
    }
}

void Position::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 21)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            shopId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[1]].asInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            productCategoryId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[2]].asInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            companyName_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            orderType_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[4]].asUInt64());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            auto daysStr = pJson[pMasqueradingVector[5]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            dataTime_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            pointPriceContract_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            futuresPointPriceNumber_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[8]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[9]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            price_=std::make_shared<std::string>(pJson[pMasqueradingVector[10]].asString());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            basis_=std::make_shared<std::string>(pJson[pMasqueradingVector[11]].asString());
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            stsPrice_=std::make_shared<std::string>(pJson[pMasqueradingVector[12]].asString());
        }
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        dirtyFlag_[13] = true;
        if(!pJson[pMasqueradingVector[13]].isNull())
        {
            processCost_=std::make_shared<std::string>(pJson[pMasqueradingVector[13]].asString());
        }
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        dirtyFlag_[14] = true;
        if(!pJson[pMasqueradingVector[14]].isNull())
        {
            contractPrice_=std::make_shared<std::string>(pJson[pMasqueradingVector[14]].asString());
        }
    }
    if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
    {
        dirtyFlag_[15] = true;
        if(!pJson[pMasqueradingVector[15]].isNull())
        {
            deliveryPeriod_=std::make_shared<std::string>(pJson[pMasqueradingVector[15]].asString());
        }
    }
    if(!pMasqueradingVector[16].empty() && pJson.isMember(pMasqueradingVector[16]))
    {
        dirtyFlag_[16] = true;
        if(!pJson[pMasqueradingVector[16]].isNull())
        {
            contractNo_=std::make_shared<std::string>(pJson[pMasqueradingVector[16]].asString());
        }
    }
    if(!pMasqueradingVector[17].empty() && pJson.isMember(pMasqueradingVector[17]))
    {
        dirtyFlag_[17] = true;
        if(!pJson[pMasqueradingVector[17]].isNull())
        {
            remark_=std::make_shared<std::string>(pJson[pMasqueradingVector[17]].asString());
        }
    }
    if(!pMasqueradingVector[18].empty() && pJson.isMember(pMasqueradingVector[18]))
    {
        dirtyFlag_[18] = true;
        if(!pJson[pMasqueradingVector[18]].isNull())
        {
            confirm_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[18]].asUInt64());
        }
    }
    if(!pMasqueradingVector[19].empty() && pJson.isMember(pMasqueradingVector[19]))
    {
        dirtyFlag_[19] = true;
        if(!pJson[pMasqueradingVector[19]].isNull())
        {
            adminId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[19]].asInt64());
        }
    }
    if(!pMasqueradingVector[20].empty() && pJson.isMember(pMasqueradingVector[20]))
    {
        dirtyFlag_[20] = true;
        if(!pJson[pMasqueradingVector[20]].isNull())
        {
            isDelete_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[20]].asInt64());
        }
    }
}
                                                                    
void Position::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson["id"].asUInt64());
        }
    }
    if(pJson.isMember("shop_id"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["shop_id"].isNull())
        {
            shopId_=std::make_shared<int64_t>((int64_t)pJson["shop_id"].asInt64());
        }
    }
    if(pJson.isMember("product_category_id"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["product_category_id"].isNull())
        {
            productCategoryId_=std::make_shared<int64_t>((int64_t)pJson["product_category_id"].asInt64());
        }
    }
    if(pJson.isMember("company_name"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["company_name"].isNull())
        {
            companyName_=std::make_shared<std::string>(pJson["company_name"].asString());
        }
    }
    if(pJson.isMember("order_type"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["order_type"].isNull())
        {
            orderType_=std::make_shared<uint8_t>((uint8_t)pJson["order_type"].asUInt64());
        }
    }
    if(pJson.isMember("data_time"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["data_time"].isNull())
        {
            auto daysStr = pJson["data_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            dataTime_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    if(pJson.isMember("point_price_contract"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["point_price_contract"].isNull())
        {
            pointPriceContract_=std::make_shared<std::string>(pJson["point_price_contract"].asString());
        }
    }
    if(pJson.isMember("futures_point_price_number"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["futures_point_price_number"].isNull())
        {
            futuresPointPriceNumber_=std::make_shared<std::string>(pJson["futures_point_price_number"].asString());
        }
    }
    if(pJson.isMember("create_time"))
    {
        dirtyFlag_[8] = true;
        if(!pJson["create_time"].isNull())
        {
            auto timeStr = pJson["create_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("update_time"))
    {
        dirtyFlag_[9] = true;
        if(!pJson["update_time"].isNull())
        {
            auto timeStr = pJson["update_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("price"))
    {
        dirtyFlag_[10] = true;
        if(!pJson["price"].isNull())
        {
            price_=std::make_shared<std::string>(pJson["price"].asString());
        }
    }
    if(pJson.isMember("basis"))
    {
        dirtyFlag_[11] = true;
        if(!pJson["basis"].isNull())
        {
            basis_=std::make_shared<std::string>(pJson["basis"].asString());
        }
    }
    if(pJson.isMember("sts_price"))
    {
        dirtyFlag_[12] = true;
        if(!pJson["sts_price"].isNull())
        {
            stsPrice_=std::make_shared<std::string>(pJson["sts_price"].asString());
        }
    }
    if(pJson.isMember("process_cost"))
    {
        dirtyFlag_[13] = true;
        if(!pJson["process_cost"].isNull())
        {
            processCost_=std::make_shared<std::string>(pJson["process_cost"].asString());
        }
    }
    if(pJson.isMember("contract_price"))
    {
        dirtyFlag_[14] = true;
        if(!pJson["contract_price"].isNull())
        {
            contractPrice_=std::make_shared<std::string>(pJson["contract_price"].asString());
        }
    }
    if(pJson.isMember("delivery_period"))
    {
        dirtyFlag_[15] = true;
        if(!pJson["delivery_period"].isNull())
        {
            deliveryPeriod_=std::make_shared<std::string>(pJson["delivery_period"].asString());
        }
    }
    if(pJson.isMember("contract_no"))
    {
        dirtyFlag_[16] = true;
        if(!pJson["contract_no"].isNull())
        {
            contractNo_=std::make_shared<std::string>(pJson["contract_no"].asString());
        }
    }
    if(pJson.isMember("remark"))
    {
        dirtyFlag_[17] = true;
        if(!pJson["remark"].isNull())
        {
            remark_=std::make_shared<std::string>(pJson["remark"].asString());
        }
    }
    if(pJson.isMember("confirm"))
    {
        dirtyFlag_[18] = true;
        if(!pJson["confirm"].isNull())
        {
            confirm_=std::make_shared<uint8_t>((uint8_t)pJson["confirm"].asUInt64());
        }
    }
    if(pJson.isMember("admin_id"))
    {
        dirtyFlag_[19] = true;
        if(!pJson["admin_id"].isNull())
        {
            adminId_=std::make_shared<int64_t>((int64_t)pJson["admin_id"].asInt64());
        }
    }
    if(pJson.isMember("is_delete"))
    {
        dirtyFlag_[20] = true;
        if(!pJson["is_delete"].isNull())
        {
            isDelete_=std::make_shared<int8_t>((int8_t)pJson["is_delete"].asInt64());
        }
    }
}

const uint64_t &Position::getValueOfId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &Position::getId() const noexcept
{
    return id_;
}
void Position::setId(const uint64_t &pId) noexcept
{
    id_ = std::make_shared<uint64_t>(pId);
    dirtyFlag_[0] = true;
}



const typename Position::PrimaryKeyType & Position::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const int64_t &Position::getValueOfShopId() const noexcept
{
    const static int64_t defaultValue = int64_t();
    if(shopId_)
        return *shopId_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &Position::getShopId() const noexcept
{
    return shopId_;
}
void Position::setShopId(const int64_t &pShopId) noexcept
{
    shopId_ = std::make_shared<int64_t>(pShopId);
    dirtyFlag_[1] = true;
}




const int64_t &Position::getValueOfProductCategoryId() const noexcept
{
    const static int64_t defaultValue = int64_t();
    if(productCategoryId_)
        return *productCategoryId_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &Position::getProductCategoryId() const noexcept
{
    return productCategoryId_;
}
void Position::setProductCategoryId(const int64_t &pProductCategoryId) noexcept
{
    productCategoryId_ = std::make_shared<int64_t>(pProductCategoryId);
    dirtyFlag_[2] = true;
}




const std::string &Position::getValueOfCompanyName() const noexcept
{
    const static std::string defaultValue = std::string();
    if(companyName_)
        return *companyName_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Position::getCompanyName() const noexcept
{
    return companyName_;
}
void Position::setCompanyName(const std::string &pCompanyName) noexcept
{
    companyName_ = std::make_shared<std::string>(pCompanyName);
    dirtyFlag_[3] = true;
}
void Position::setCompanyName(std::string &&pCompanyName) noexcept
{
    companyName_ = std::make_shared<std::string>(std::move(pCompanyName));
    dirtyFlag_[3] = true;
}




const uint8_t &Position::getValueOfOrderType() const noexcept
{
    const static uint8_t defaultValue = uint8_t();
    if(orderType_)
        return *orderType_;
    return defaultValue;
}
const std::shared_ptr<uint8_t> &Position::getOrderType() const noexcept
{
    return orderType_;
}
void Position::setOrderType(const uint8_t &pOrderType) noexcept
{
    orderType_ = std::make_shared<uint8_t>(pOrderType);
    dirtyFlag_[4] = true;
}




const ::trantor::Date &Position::getValueOfDataTime() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(dataTime_)
        return *dataTime_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Position::getDataTime() const noexcept
{
    return dataTime_;
}
void Position::setDataTime(const ::trantor::Date &pDataTime) noexcept
{
    dataTime_ = std::make_shared<::trantor::Date>(pDataTime.roundDay());
    dirtyFlag_[5] = true;
}




const std::string &Position::getValueOfPointPriceContract() const noexcept
{
    const static std::string defaultValue = std::string();
    if(pointPriceContract_)
        return *pointPriceContract_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Position::getPointPriceContract() const noexcept
{
    return pointPriceContract_;
}
void Position::setPointPriceContract(const std::string &pPointPriceContract) noexcept
{
    pointPriceContract_ = std::make_shared<std::string>(pPointPriceContract);
    dirtyFlag_[6] = true;
}
void Position::setPointPriceContract(std::string &&pPointPriceContract) noexcept
{
    pointPriceContract_ = std::make_shared<std::string>(std::move(pPointPriceContract));
    dirtyFlag_[6] = true;
}


void Position::setPointPriceContractToNull() noexcept
{
    pointPriceContract_.reset();
    dirtyFlag_[6] = true;
}


const std::string &Position::getValueOfFuturesPointPriceNumber() const noexcept
{
    const static std::string defaultValue = std::string();
    if(futuresPointPriceNumber_)
        return *futuresPointPriceNumber_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Position::getFuturesPointPriceNumber() const noexcept
{
    return futuresPointPriceNumber_;
}
void Position::setFuturesPointPriceNumber(const std::string &pFuturesPointPriceNumber) noexcept
{
    futuresPointPriceNumber_ = std::make_shared<std::string>(pFuturesPointPriceNumber);
    dirtyFlag_[7] = true;
}
void Position::setFuturesPointPriceNumber(std::string &&pFuturesPointPriceNumber) noexcept
{
    futuresPointPriceNumber_ = std::make_shared<std::string>(std::move(pFuturesPointPriceNumber));
    dirtyFlag_[7] = true;
}




const ::trantor::Date &Position::getValueOfCreateTime() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(createTime_)
        return *createTime_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Position::getCreateTime() const noexcept
{
    return createTime_;
}
void Position::setCreateTime(const ::trantor::Date &pCreateTime) noexcept
{
    createTime_ = std::make_shared<::trantor::Date>(pCreateTime);
    dirtyFlag_[8] = true;
}




const ::trantor::Date &Position::getValueOfUpdateTime() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(updateTime_)
        return *updateTime_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Position::getUpdateTime() const noexcept
{
    return updateTime_;
}
void Position::setUpdateTime(const ::trantor::Date &pUpdateTime) noexcept
{
    updateTime_ = std::make_shared<::trantor::Date>(pUpdateTime);
    dirtyFlag_[9] = true;
}




const std::string &Position::getValueOfPrice() const noexcept
{
    const static std::string defaultValue = std::string();
    if(price_)
        return *price_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Position::getPrice() const noexcept
{
    return price_;
}
void Position::setPrice(const std::string &pPrice) noexcept
{
    price_ = std::make_shared<std::string>(pPrice);
    dirtyFlag_[10] = true;
}
void Position::setPrice(std::string &&pPrice) noexcept
{
    price_ = std::make_shared<std::string>(std::move(pPrice));
    dirtyFlag_[10] = true;
}




const std::string &Position::getValueOfBasis() const noexcept
{
    const static std::string defaultValue = std::string();
    if(basis_)
        return *basis_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Position::getBasis() const noexcept
{
    return basis_;
}
void Position::setBasis(const std::string &pBasis) noexcept
{
    basis_ = std::make_shared<std::string>(pBasis);
    dirtyFlag_[11] = true;
}
void Position::setBasis(std::string &&pBasis) noexcept
{
    basis_ = std::make_shared<std::string>(std::move(pBasis));
    dirtyFlag_[11] = true;
}




const std::string &Position::getValueOfStsPrice() const noexcept
{
    const static std::string defaultValue = std::string();
    if(stsPrice_)
        return *stsPrice_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Position::getStsPrice() const noexcept
{
    return stsPrice_;
}
void Position::setStsPrice(const std::string &pStsPrice) noexcept
{
    stsPrice_ = std::make_shared<std::string>(pStsPrice);
    dirtyFlag_[12] = true;
}
void Position::setStsPrice(std::string &&pStsPrice) noexcept
{
    stsPrice_ = std::make_shared<std::string>(std::move(pStsPrice));
    dirtyFlag_[12] = true;
}




const std::string &Position::getValueOfProcessCost() const noexcept
{
    const static std::string defaultValue = std::string();
    if(processCost_)
        return *processCost_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Position::getProcessCost() const noexcept
{
    return processCost_;
}
void Position::setProcessCost(const std::string &pProcessCost) noexcept
{
    processCost_ = std::make_shared<std::string>(pProcessCost);
    dirtyFlag_[13] = true;
}
void Position::setProcessCost(std::string &&pProcessCost) noexcept
{
    processCost_ = std::make_shared<std::string>(std::move(pProcessCost));
    dirtyFlag_[13] = true;
}




const std::string &Position::getValueOfContractPrice() const noexcept
{
    const static std::string defaultValue = std::string();
    if(contractPrice_)
        return *contractPrice_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Position::getContractPrice() const noexcept
{
    return contractPrice_;
}
void Position::setContractPrice(const std::string &pContractPrice) noexcept
{
    contractPrice_ = std::make_shared<std::string>(pContractPrice);
    dirtyFlag_[14] = true;
}
void Position::setContractPrice(std::string &&pContractPrice) noexcept
{
    contractPrice_ = std::make_shared<std::string>(std::move(pContractPrice));
    dirtyFlag_[14] = true;
}




const std::string &Position::getValueOfDeliveryPeriod() const noexcept
{
    const static std::string defaultValue = std::string();
    if(deliveryPeriod_)
        return *deliveryPeriod_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Position::getDeliveryPeriod() const noexcept
{
    return deliveryPeriod_;
}
void Position::setDeliveryPeriod(const std::string &pDeliveryPeriod) noexcept
{
    deliveryPeriod_ = std::make_shared<std::string>(pDeliveryPeriod);
    dirtyFlag_[15] = true;
}
void Position::setDeliveryPeriod(std::string &&pDeliveryPeriod) noexcept
{
    deliveryPeriod_ = std::make_shared<std::string>(std::move(pDeliveryPeriod));
    dirtyFlag_[15] = true;
}


void Position::setDeliveryPeriodToNull() noexcept
{
    deliveryPeriod_.reset();
    dirtyFlag_[15] = true;
}


const std::string &Position::getValueOfContractNo() const noexcept
{
    const static std::string defaultValue = std::string();
    if(contractNo_)
        return *contractNo_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Position::getContractNo() const noexcept
{
    return contractNo_;
}
void Position::setContractNo(const std::string &pContractNo) noexcept
{
    contractNo_ = std::make_shared<std::string>(pContractNo);
    dirtyFlag_[16] = true;
}
void Position::setContractNo(std::string &&pContractNo) noexcept
{
    contractNo_ = std::make_shared<std::string>(std::move(pContractNo));
    dirtyFlag_[16] = true;
}


void Position::setContractNoToNull() noexcept
{
    contractNo_.reset();
    dirtyFlag_[16] = true;
}


const std::string &Position::getValueOfRemark() const noexcept
{
    const static std::string defaultValue = std::string();
    if(remark_)
        return *remark_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Position::getRemark() const noexcept
{
    return remark_;
}
void Position::setRemark(const std::string &pRemark) noexcept
{
    remark_ = std::make_shared<std::string>(pRemark);
    dirtyFlag_[17] = true;
}
void Position::setRemark(std::string &&pRemark) noexcept
{
    remark_ = std::make_shared<std::string>(std::move(pRemark));
    dirtyFlag_[17] = true;
}


void Position::setRemarkToNull() noexcept
{
    remark_.reset();
    dirtyFlag_[17] = true;
}


const uint8_t &Position::getValueOfConfirm() const noexcept
{
    const static uint8_t defaultValue = uint8_t();
    if(confirm_)
        return *confirm_;
    return defaultValue;
}
const std::shared_ptr<uint8_t> &Position::getConfirm() const noexcept
{
    return confirm_;
}
void Position::setConfirm(const uint8_t &pConfirm) noexcept
{
    confirm_ = std::make_shared<uint8_t>(pConfirm);
    dirtyFlag_[18] = true;
}




const int64_t &Position::getValueOfAdminId() const noexcept
{
    const static int64_t defaultValue = int64_t();
    if(adminId_)
        return *adminId_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &Position::getAdminId() const noexcept
{
    return adminId_;
}
void Position::setAdminId(const int64_t &pAdminId) noexcept
{
    adminId_ = std::make_shared<int64_t>(pAdminId);
    dirtyFlag_[19] = true;
}




const int8_t &Position::getValueOfIsDelete() const noexcept
{
    const static int8_t defaultValue = int8_t();
    if(isDelete_)
        return *isDelete_;
    return defaultValue;
}
const std::shared_ptr<int8_t> &Position::getIsDelete() const noexcept
{
    return isDelete_;
}
void Position::setIsDelete(const int8_t &pIsDelete) noexcept
{
    isDelete_ = std::make_shared<int8_t>(pIsDelete);
    dirtyFlag_[20] = true;
}




void Position::updateId(const uint64_t id)
{
    id_ = std::make_shared<uint64_t>(id);
}

const std::vector<std::string> &Position::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "shop_id",
        "product_category_id",
        "company_name",
        "order_type",
        "data_time",
        "point_price_contract",
        "futures_point_price_number",
        "create_time",
        "update_time",
        "price",
        "basis",
        "sts_price",
        "process_cost",
        "contract_price",
        "delivery_period",
        "contract_no",
        "remark",
        "confirm",
        "admin_id",
        "is_delete"
    };
    return inCols;
}

void Position::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getShopId())
        {
            binder << getValueOfShopId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getProductCategoryId())
        {
            binder << getValueOfProductCategoryId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getCompanyName())
        {
            binder << getValueOfCompanyName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getOrderType())
        {
            binder << getValueOfOrderType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getDataTime())
        {
            binder << getValueOfDataTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getPointPriceContract())
        {
            binder << getValueOfPointPriceContract();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getFuturesPointPriceNumber())
        {
            binder << getValueOfFuturesPointPriceNumber();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getCreateTime())
        {
            binder << getValueOfCreateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getUpdateTime())
        {
            binder << getValueOfUpdateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getPrice())
        {
            binder << getValueOfPrice();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getBasis())
        {
            binder << getValueOfBasis();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getStsPrice())
        {
            binder << getValueOfStsPrice();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[13])
    {
        if(getProcessCost())
        {
            binder << getValueOfProcessCost();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[14])
    {
        if(getContractPrice())
        {
            binder << getValueOfContractPrice();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[15])
    {
        if(getDeliveryPeriod())
        {
            binder << getValueOfDeliveryPeriod();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[16])
    {
        if(getContractNo())
        {
            binder << getValueOfContractNo();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[17])
    {
        if(getRemark())
        {
            binder << getValueOfRemark();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[18])
    {
        if(getConfirm())
        {
            binder << getValueOfConfirm();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[19])
    {
        if(getAdminId())
        {
            binder << getValueOfAdminId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[20])
    {
        if(getIsDelete())
        {
            binder << getValueOfIsDelete();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Position::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    if(dirtyFlag_[8])
    {
        ret.push_back(getColumnName(8));
    }
    if(dirtyFlag_[9])
    {
        ret.push_back(getColumnName(9));
    }
    if(dirtyFlag_[10])
    {
        ret.push_back(getColumnName(10));
    }
    if(dirtyFlag_[11])
    {
        ret.push_back(getColumnName(11));
    }
    if(dirtyFlag_[12])
    {
        ret.push_back(getColumnName(12));
    }
    if(dirtyFlag_[13])
    {
        ret.push_back(getColumnName(13));
    }
    if(dirtyFlag_[14])
    {
        ret.push_back(getColumnName(14));
    }
    if(dirtyFlag_[15])
    {
        ret.push_back(getColumnName(15));
    }
    if(dirtyFlag_[16])
    {
        ret.push_back(getColumnName(16));
    }
    if(dirtyFlag_[17])
    {
        ret.push_back(getColumnName(17));
    }
    if(dirtyFlag_[18])
    {
        ret.push_back(getColumnName(18));
    }
    if(dirtyFlag_[19])
    {
        ret.push_back(getColumnName(19));
    }
    if(dirtyFlag_[20])
    {
        ret.push_back(getColumnName(20));
    }
    return ret;
}

void Position::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getShopId())
        {
            binder << getValueOfShopId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getProductCategoryId())
        {
            binder << getValueOfProductCategoryId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getCompanyName())
        {
            binder << getValueOfCompanyName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getOrderType())
        {
            binder << getValueOfOrderType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getDataTime())
        {
            binder << getValueOfDataTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getPointPriceContract())
        {
            binder << getValueOfPointPriceContract();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getFuturesPointPriceNumber())
        {
            binder << getValueOfFuturesPointPriceNumber();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getCreateTime())
        {
            binder << getValueOfCreateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getUpdateTime())
        {
            binder << getValueOfUpdateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getPrice())
        {
            binder << getValueOfPrice();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getBasis())
        {
            binder << getValueOfBasis();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getStsPrice())
        {
            binder << getValueOfStsPrice();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[13])
    {
        if(getProcessCost())
        {
            binder << getValueOfProcessCost();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[14])
    {
        if(getContractPrice())
        {
            binder << getValueOfContractPrice();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[15])
    {
        if(getDeliveryPeriod())
        {
            binder << getValueOfDeliveryPeriod();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[16])
    {
        if(getContractNo())
        {
            binder << getValueOfContractNo();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[17])
    {
        if(getRemark())
        {
            binder << getValueOfRemark();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[18])
    {
        if(getConfirm())
        {
            binder << getValueOfConfirm();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[19])
    {
        if(getAdminId())
        {
            binder << getValueOfAdminId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[20])
    {
        if(getIsDelete())
        {
            binder << getValueOfIsDelete();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Position::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=(Json::UInt64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getShopId())
    {
        ret["shop_id"]=(Json::Int64)getValueOfShopId();
    }
    else
    {
        ret["shop_id"]=Json::Value();
    }
    if(getProductCategoryId())
    {
        ret["product_category_id"]=(Json::Int64)getValueOfProductCategoryId();
    }
    else
    {
        ret["product_category_id"]=Json::Value();
    }
    if(getCompanyName())
    {
        ret["company_name"]=getValueOfCompanyName();
    }
    else
    {
        ret["company_name"]=Json::Value();
    }
    if(getOrderType())
    {
        ret["order_type"]=getValueOfOrderType();
    }
    else
    {
        ret["order_type"]=Json::Value();
    }
    if(getDataTime())
    {
        ret["data_time"]=getDataTime()->toDbStringLocal();
    }
    else
    {
        ret["data_time"]=Json::Value();
    }
    if(getPointPriceContract())
    {
        ret["point_price_contract"]=getValueOfPointPriceContract();
    }
    else
    {
        ret["point_price_contract"]=Json::Value();
    }
    if(getFuturesPointPriceNumber())
    {
        ret["futures_point_price_number"]=getValueOfFuturesPointPriceNumber();
    }
    else
    {
        ret["futures_point_price_number"]=Json::Value();
    }
    if(getCreateTime())
    {
        ret["create_time"]=getCreateTime()->toDbStringLocal();
    }
    else
    {
        ret["create_time"]=Json::Value();
    }
    if(getUpdateTime())
    {
        ret["update_time"]=getUpdateTime()->toDbStringLocal();
    }
    else
    {
        ret["update_time"]=Json::Value();
    }
    if(getPrice())
    {
        ret["price"]=getValueOfPrice();
    }
    else
    {
        ret["price"]=Json::Value();
    }
    if(getBasis())
    {
        ret["basis"]=getValueOfBasis();
    }
    else
    {
        ret["basis"]=Json::Value();
    }
    if(getStsPrice())
    {
        ret["sts_price"]=getValueOfStsPrice();
    }
    else
    {
        ret["sts_price"]=Json::Value();
    }
    if(getProcessCost())
    {
        ret["process_cost"]=getValueOfProcessCost();
    }
    else
    {
        ret["process_cost"]=Json::Value();
    }
    if(getContractPrice())
    {
        ret["contract_price"]=getValueOfContractPrice();
    }
    else
    {
        ret["contract_price"]=Json::Value();
    }
    if(getDeliveryPeriod())
    {
        ret["delivery_period"]=getValueOfDeliveryPeriod();
    }
    else
    {
        ret["delivery_period"]=Json::Value();
    }
    if(getContractNo())
    {
        ret["contract_no"]=getValueOfContractNo();
    }
    else
    {
        ret["contract_no"]=Json::Value();
    }
    if(getRemark())
    {
        ret["remark"]=getValueOfRemark();
    }
    else
    {
        ret["remark"]=Json::Value();
    }
    if(getConfirm())
    {
        ret["confirm"]=getValueOfConfirm();
    }
    else
    {
        ret["confirm"]=Json::Value();
    }
    if(getAdminId())
    {
        ret["admin_id"]=(Json::Int64)getValueOfAdminId();
    }
    else
    {
        ret["admin_id"]=Json::Value();
    }
    if(getIsDelete())
    {
        ret["is_delete"]=getValueOfIsDelete();
    }
    else
    {
        ret["is_delete"]=Json::Value();
    }
    return ret;
}

Json::Value Position::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 21)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=(Json::UInt64)getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getShopId())
            {
                ret[pMasqueradingVector[1]]=(Json::Int64)getValueOfShopId();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getProductCategoryId())
            {
                ret[pMasqueradingVector[2]]=(Json::Int64)getValueOfProductCategoryId();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getCompanyName())
            {
                ret[pMasqueradingVector[3]]=getValueOfCompanyName();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getOrderType())
            {
                ret[pMasqueradingVector[4]]=getValueOfOrderType();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getDataTime())
            {
                ret[pMasqueradingVector[5]]=getDataTime()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getPointPriceContract())
            {
                ret[pMasqueradingVector[6]]=getValueOfPointPriceContract();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getFuturesPointPriceNumber())
            {
                ret[pMasqueradingVector[7]]=getValueOfFuturesPointPriceNumber();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[8].empty())
        {
            if(getCreateTime())
            {
                ret[pMasqueradingVector[8]]=getCreateTime()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[8]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[9].empty())
        {
            if(getUpdateTime())
            {
                ret[pMasqueradingVector[9]]=getUpdateTime()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[9]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[10].empty())
        {
            if(getPrice())
            {
                ret[pMasqueradingVector[10]]=getValueOfPrice();
            }
            else
            {
                ret[pMasqueradingVector[10]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[11].empty())
        {
            if(getBasis())
            {
                ret[pMasqueradingVector[11]]=getValueOfBasis();
            }
            else
            {
                ret[pMasqueradingVector[11]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[12].empty())
        {
            if(getStsPrice())
            {
                ret[pMasqueradingVector[12]]=getValueOfStsPrice();
            }
            else
            {
                ret[pMasqueradingVector[12]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[13].empty())
        {
            if(getProcessCost())
            {
                ret[pMasqueradingVector[13]]=getValueOfProcessCost();
            }
            else
            {
                ret[pMasqueradingVector[13]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[14].empty())
        {
            if(getContractPrice())
            {
                ret[pMasqueradingVector[14]]=getValueOfContractPrice();
            }
            else
            {
                ret[pMasqueradingVector[14]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[15].empty())
        {
            if(getDeliveryPeriod())
            {
                ret[pMasqueradingVector[15]]=getValueOfDeliveryPeriod();
            }
            else
            {
                ret[pMasqueradingVector[15]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[16].empty())
        {
            if(getContractNo())
            {
                ret[pMasqueradingVector[16]]=getValueOfContractNo();
            }
            else
            {
                ret[pMasqueradingVector[16]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[17].empty())
        {
            if(getRemark())
            {
                ret[pMasqueradingVector[17]]=getValueOfRemark();
            }
            else
            {
                ret[pMasqueradingVector[17]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[18].empty())
        {
            if(getConfirm())
            {
                ret[pMasqueradingVector[18]]=getValueOfConfirm();
            }
            else
            {
                ret[pMasqueradingVector[18]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[19].empty())
        {
            if(getAdminId())
            {
                ret[pMasqueradingVector[19]]=(Json::Int64)getValueOfAdminId();
            }
            else
            {
                ret[pMasqueradingVector[19]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[20].empty())
        {
            if(getIsDelete())
            {
                ret[pMasqueradingVector[20]]=getValueOfIsDelete();
            }
            else
            {
                ret[pMasqueradingVector[20]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=(Json::UInt64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getShopId())
    {
        ret["shop_id"]=(Json::Int64)getValueOfShopId();
    }
    else
    {
        ret["shop_id"]=Json::Value();
    }
    if(getProductCategoryId())
    {
        ret["product_category_id"]=(Json::Int64)getValueOfProductCategoryId();
    }
    else
    {
        ret["product_category_id"]=Json::Value();
    }
    if(getCompanyName())
    {
        ret["company_name"]=getValueOfCompanyName();
    }
    else
    {
        ret["company_name"]=Json::Value();
    }
    if(getOrderType())
    {
        ret["order_type"]=getValueOfOrderType();
    }
    else
    {
        ret["order_type"]=Json::Value();
    }
    if(getDataTime())
    {
        ret["data_time"]=getDataTime()->toDbStringLocal();
    }
    else
    {
        ret["data_time"]=Json::Value();
    }
    if(getPointPriceContract())
    {
        ret["point_price_contract"]=getValueOfPointPriceContract();
    }
    else
    {
        ret["point_price_contract"]=Json::Value();
    }
    if(getFuturesPointPriceNumber())
    {
        ret["futures_point_price_number"]=getValueOfFuturesPointPriceNumber();
    }
    else
    {
        ret["futures_point_price_number"]=Json::Value();
    }
    if(getCreateTime())
    {
        ret["create_time"]=getCreateTime()->toDbStringLocal();
    }
    else
    {
        ret["create_time"]=Json::Value();
    }
    if(getUpdateTime())
    {
        ret["update_time"]=getUpdateTime()->toDbStringLocal();
    }
    else
    {
        ret["update_time"]=Json::Value();
    }
    if(getPrice())
    {
        ret["price"]=getValueOfPrice();
    }
    else
    {
        ret["price"]=Json::Value();
    }
    if(getBasis())
    {
        ret["basis"]=getValueOfBasis();
    }
    else
    {
        ret["basis"]=Json::Value();
    }
    if(getStsPrice())
    {
        ret["sts_price"]=getValueOfStsPrice();
    }
    else
    {
        ret["sts_price"]=Json::Value();
    }
    if(getProcessCost())
    {
        ret["process_cost"]=getValueOfProcessCost();
    }
    else
    {
        ret["process_cost"]=Json::Value();
    }
    if(getContractPrice())
    {
        ret["contract_price"]=getValueOfContractPrice();
    }
    else
    {
        ret["contract_price"]=Json::Value();
    }
    if(getDeliveryPeriod())
    {
        ret["delivery_period"]=getValueOfDeliveryPeriod();
    }
    else
    {
        ret["delivery_period"]=Json::Value();
    }
    if(getContractNo())
    {
        ret["contract_no"]=getValueOfContractNo();
    }
    else
    {
        ret["contract_no"]=Json::Value();
    }
    if(getRemark())
    {
        ret["remark"]=getValueOfRemark();
    }
    else
    {
        ret["remark"]=Json::Value();
    }
    if(getConfirm())
    {
        ret["confirm"]=getValueOfConfirm();
    }
    else
    {
        ret["confirm"]=Json::Value();
    }
    if(getAdminId())
    {
        ret["admin_id"]=(Json::Int64)getValueOfAdminId();
    }
    else
    {
        ret["admin_id"]=Json::Value();
    }
    if(getIsDelete())
    {
        ret["is_delete"]=getValueOfIsDelete();
    }
    else
    {
        ret["is_delete"]=Json::Value();
    }
    return ret;
}

bool Position::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("shop_id"))
    {
        if(!validJsonOfField(1, "shop_id", pJson["shop_id"], err, true))
            return false;
    }
    else
    {
        err="The shop_id column cannot be null";
        return false;
    }
    if(pJson.isMember("product_category_id"))
    {
        if(!validJsonOfField(2, "product_category_id", pJson["product_category_id"], err, true))
            return false;
    }
    if(pJson.isMember("company_name"))
    {
        if(!validJsonOfField(3, "company_name", pJson["company_name"], err, true))
            return false;
    }
    else
    {
        err="The company_name column cannot be null";
        return false;
    }
    if(pJson.isMember("order_type"))
    {
        if(!validJsonOfField(4, "order_type", pJson["order_type"], err, true))
            return false;
    }
    if(pJson.isMember("data_time"))
    {
        if(!validJsonOfField(5, "data_time", pJson["data_time"], err, true))
            return false;
    }
    if(pJson.isMember("point_price_contract"))
    {
        if(!validJsonOfField(6, "point_price_contract", pJson["point_price_contract"], err, true))
            return false;
    }
    if(pJson.isMember("futures_point_price_number"))
    {
        if(!validJsonOfField(7, "futures_point_price_number", pJson["futures_point_price_number"], err, true))
            return false;
    }
    if(pJson.isMember("create_time"))
    {
        if(!validJsonOfField(8, "create_time", pJson["create_time"], err, true))
            return false;
    }
    if(pJson.isMember("update_time"))
    {
        if(!validJsonOfField(9, "update_time", pJson["update_time"], err, true))
            return false;
    }
    if(pJson.isMember("price"))
    {
        if(!validJsonOfField(10, "price", pJson["price"], err, true))
            return false;
    }
    if(pJson.isMember("basis"))
    {
        if(!validJsonOfField(11, "basis", pJson["basis"], err, true))
            return false;
    }
    if(pJson.isMember("sts_price"))
    {
        if(!validJsonOfField(12, "sts_price", pJson["sts_price"], err, true))
            return false;
    }
    if(pJson.isMember("process_cost"))
    {
        if(!validJsonOfField(13, "process_cost", pJson["process_cost"], err, true))
            return false;
    }
    if(pJson.isMember("contract_price"))
    {
        if(!validJsonOfField(14, "contract_price", pJson["contract_price"], err, true))
            return false;
    }
    if(pJson.isMember("delivery_period"))
    {
        if(!validJsonOfField(15, "delivery_period", pJson["delivery_period"], err, true))
            return false;
    }
    if(pJson.isMember("contract_no"))
    {
        if(!validJsonOfField(16, "contract_no", pJson["contract_no"], err, true))
            return false;
    }
    if(pJson.isMember("remark"))
    {
        if(!validJsonOfField(17, "remark", pJson["remark"], err, true))
            return false;
    }
    if(pJson.isMember("confirm"))
    {
        if(!validJsonOfField(18, "confirm", pJson["confirm"], err, true))
            return false;
    }
    if(pJson.isMember("admin_id"))
    {
        if(!validJsonOfField(19, "admin_id", pJson["admin_id"], err, true))
            return false;
    }
    if(pJson.isMember("is_delete"))
    {
        if(!validJsonOfField(20, "is_delete", pJson["is_delete"], err, true))
            return false;
    }
    return true;
}
bool Position::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                  const std::vector<std::string> &pMasqueradingVector,
                                                  std::string &err)
{
    if(pMasqueradingVector.size() != 21)
    {
        err = "Bad masquerading vector";
        return false;
    }
    if(!pMasqueradingVector[0].empty())
    {
        if(pJson.isMember(pMasqueradingVector[0]))
        {
            if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[1].empty())
    {
        if(pJson.isMember(pMasqueradingVector[1]))
        {
            if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                return false;
        }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
    }
    if(!pMasqueradingVector[2].empty())
    {
        if(pJson.isMember(pMasqueradingVector[2]))
        {
            if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[3].empty())
    {
        if(pJson.isMember(pMasqueradingVector[3]))
        {
            if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                return false;
        }
        else
        {
            err="The " + pMasqueradingVector[3] + " column cannot be null";
            return false;
        }
    }
    if(!pMasqueradingVector[4].empty())
    {
        if(pJson.isMember(pMasqueradingVector[4]))
        {
            if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[5].empty())
    {
        if(pJson.isMember(pMasqueradingVector[5]))
        {
            if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[6].empty())
    {
        if(pJson.isMember(pMasqueradingVector[6]))
        {
            if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[7].empty())
    {
        if(pJson.isMember(pMasqueradingVector[7]))
        {
            if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[8].empty())
    {
        if(pJson.isMember(pMasqueradingVector[8]))
        {
            if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[9].empty())
    {
        if(pJson.isMember(pMasqueradingVector[9]))
        {
            if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[10].empty())
    {
        if(pJson.isMember(pMasqueradingVector[10]))
        {
            if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[11].empty())
    {
        if(pJson.isMember(pMasqueradingVector[11]))
        {
            if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[12].empty())
    {
        if(pJson.isMember(pMasqueradingVector[12]))
        {
            if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[13].empty())
    {
        if(pJson.isMember(pMasqueradingVector[13]))
        {
            if(!validJsonOfField(13, pMasqueradingVector[13], pJson[pMasqueradingVector[13]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[14].empty())
    {
        if(pJson.isMember(pMasqueradingVector[14]))
        {
            if(!validJsonOfField(14, pMasqueradingVector[14], pJson[pMasqueradingVector[14]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[15].empty())
    {
        if(pJson.isMember(pMasqueradingVector[15]))
        {
            if(!validJsonOfField(15, pMasqueradingVector[15], pJson[pMasqueradingVector[15]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[16].empty())
    {
        if(pJson.isMember(pMasqueradingVector[16]))
        {
            if(!validJsonOfField(16, pMasqueradingVector[16], pJson[pMasqueradingVector[16]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[17].empty())
    {
        if(pJson.isMember(pMasqueradingVector[17]))
        {
            if(!validJsonOfField(17, pMasqueradingVector[17], pJson[pMasqueradingVector[17]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[18].empty())
    {
        if(pJson.isMember(pMasqueradingVector[18]))
        {
            if(!validJsonOfField(18, pMasqueradingVector[18], pJson[pMasqueradingVector[18]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[19].empty())
    {
        if(pJson.isMember(pMasqueradingVector[19]))
        {
            if(!validJsonOfField(19, pMasqueradingVector[19], pJson[pMasqueradingVector[19]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[20].empty())
    {
        if(pJson.isMember(pMasqueradingVector[20]))
        {
            if(!validJsonOfField(20, pMasqueradingVector[20], pJson[pMasqueradingVector[20]], err, true))
                return false;
        }
    }
    return true;
}
bool Position::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("shop_id"))
    {
        if(!validJsonOfField(1, "shop_id", pJson["shop_id"], err, false))
            return false;
    }
    if(pJson.isMember("product_category_id"))
    {
        if(!validJsonOfField(2, "product_category_id", pJson["product_category_id"], err, false))
            return false;
    }
    if(pJson.isMember("company_name"))
    {
        if(!validJsonOfField(3, "company_name", pJson["company_name"], err, false))
            return false;
    }
    if(pJson.isMember("order_type"))
    {
        if(!validJsonOfField(4, "order_type", pJson["order_type"], err, false))
            return false;
    }
    if(pJson.isMember("data_time"))
    {
        if(!validJsonOfField(5, "data_time", pJson["data_time"], err, false))
            return false;
    }
    if(pJson.isMember("point_price_contract"))
    {
        if(!validJsonOfField(6, "point_price_contract", pJson["point_price_contract"], err, false))
            return false;
    }
    if(pJson.isMember("futures_point_price_number"))
    {
        if(!validJsonOfField(7, "futures_point_price_number", pJson["futures_point_price_number"], err, false))
            return false;
    }
    if(pJson.isMember("create_time"))
    {
        if(!validJsonOfField(8, "create_time", pJson["create_time"], err, false))
            return false;
    }
    if(pJson.isMember("update_time"))
    {
        if(!validJsonOfField(9, "update_time", pJson["update_time"], err, false))
            return false;
    }
    if(pJson.isMember("price"))
    {
        if(!validJsonOfField(10, "price", pJson["price"], err, false))
            return false;
    }
    if(pJson.isMember("basis"))
    {
        if(!validJsonOfField(11, "basis", pJson["basis"], err, false))
            return false;
    }
    if(pJson.isMember("sts_price"))
    {
        if(!validJsonOfField(12, "sts_price", pJson["sts_price"], err, false))
            return false;
    }
    if(pJson.isMember("process_cost"))
    {
        if(!validJsonOfField(13, "process_cost", pJson["process_cost"], err, false))
            return false;
    }
    if(pJson.isMember("contract_price"))
    {
        if(!validJsonOfField(14, "contract_price", pJson["contract_price"], err, false))
            return false;
    }
    if(pJson.isMember("delivery_period"))
    {
        if(!validJsonOfField(15, "delivery_period", pJson["delivery_period"], err, false))
            return false;
    }
    if(pJson.isMember("contract_no"))
    {
        if(!validJsonOfField(16, "contract_no", pJson["contract_no"], err, false))
            return false;
    }
    if(pJson.isMember("remark"))
    {
        if(!validJsonOfField(17, "remark", pJson["remark"], err, false))
            return false;
    }
    if(pJson.isMember("confirm"))
    {
        if(!validJsonOfField(18, "confirm", pJson["confirm"], err, false))
            return false;
    }
    if(pJson.isMember("admin_id"))
    {
        if(!validJsonOfField(19, "admin_id", pJson["admin_id"], err, false))
            return false;
    }
    if(pJson.isMember("is_delete"))
    {
        if(!validJsonOfField(20, "is_delete", pJson["is_delete"], err, false))
            return false;
    }
    return true;
}
bool Position::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                const std::vector<std::string> &pMasqueradingVector,
                                                std::string &err)
{
    if(pMasqueradingVector.size() != 21)
    {
        err = "Bad masquerading vector";
        return false;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
            return false;
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
            return false;
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
            return false;
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
            return false;
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
            return false;
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
            return false;
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
            return false;
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, false))
            return false;
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, false))
            return false;
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, false))
            return false;
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, false))
            return false;
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, false))
            return false;
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        if(!validJsonOfField(13, pMasqueradingVector[13], pJson[pMasqueradingVector[13]], err, false))
            return false;
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        if(!validJsonOfField(14, pMasqueradingVector[14], pJson[pMasqueradingVector[14]], err, false))
            return false;
    }
    if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
    {
        if(!validJsonOfField(15, pMasqueradingVector[15], pJson[pMasqueradingVector[15]], err, false))
            return false;
    }
    if(!pMasqueradingVector[16].empty() && pJson.isMember(pMasqueradingVector[16]))
    {
        if(!validJsonOfField(16, pMasqueradingVector[16], pJson[pMasqueradingVector[16]], err, false))
            return false;
    }
    if(!pMasqueradingVector[17].empty() && pJson.isMember(pMasqueradingVector[17]))
    {
        if(!validJsonOfField(17, pMasqueradingVector[17], pJson[pMasqueradingVector[17]], err, false))
            return false;
    }
    if(!pMasqueradingVector[18].empty() && pJson.isMember(pMasqueradingVector[18]))
    {
        if(!validJsonOfField(18, pMasqueradingVector[18], pJson[pMasqueradingVector[18]], err, false))
            return false;
    }
    if(!pMasqueradingVector[19].empty() && pJson.isMember(pMasqueradingVector[19]))
    {
        if(!validJsonOfField(19, pMasqueradingVector[19], pJson[pMasqueradingVector[19]], err, false))
            return false;
    }
    if(!pMasqueradingVector[20].empty() && pJson.isMember(pMasqueradingVector[20]))
    {
        if(!validJsonOfField(20, pMasqueradingVector[20], pJson[pMasqueradingVector[20]], err, false))
            return false;
    }
    return true;
}
bool Position::validJsonOfField(size_t index,
                                const std::string &fieldName,
                                const Json::Value &pJson, 
                                std::string &err, 
                                bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }        
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 200)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 200)";
                return false;               
            }

            break;
        case 4:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 5:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 6:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 20)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 20)";
                return false;               
            }

            break;
        case 7:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 8:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 9:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 10:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 11:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 12:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 13:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 14:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 15:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 50)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 50)";
                return false;               
            }

            break;
        case 16:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 50)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 50)";
                return false;               
            }

            break;
        case 17:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 200)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 200)";
                return false;               
            }

            break;
        case 18:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 19:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 20:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
     
        default:
            err="Internal error in the server";
            return false;
            break;
    }
    return true;
}
