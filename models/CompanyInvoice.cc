/**
 *
 *  CompanyInvoice.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "CompanyInvoice.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::v2;

const std::string CompanyInvoice::Cols::_id = "id";
const std::string CompanyInvoice::Cols::_company_name = "company_name";
const std::string CompanyInvoice::Cols::_company_tax_number = "company_tax_number";
const std::string CompanyInvoice::Cols::_company_billing_phone = "company_billing_phone";
const std::string CompanyInvoice::Cols::_company_billing_address = "company_billing_address";
const std::string CompanyInvoice::Cols::_company_opening_bank = "company_opening_bank";
const std::string CompanyInvoice::Cols::_company_bank_account = "company_bank_account";
const std::string CompanyInvoice::Cols::_company_mail_address = "company_mail_address";
const std::string CompanyInvoice::Cols::_amount = "amount";
const std::string CompanyInvoice::Cols::_num = "num";
const std::string CompanyInvoice::Cols::_invoice_pic = "invoice_pic";
const std::string CompanyInvoice::Cols::_company_id = "company_id";
const std::string CompanyInvoice::Cols::_status = "status";
const std::string CompanyInvoice::Cols::_create_time = "create_time";
const std::string CompanyInvoice::Cols::_update_time = "update_time";
const std::string CompanyInvoice::Cols::_user_id = "user_id";
const std::string CompanyInvoice::Cols::_admin_id = "admin_id";
const std::string CompanyInvoice::Cols::_remark = "remark";
const std::string CompanyInvoice::Cols::_express_name = "express_name";
const std::string CompanyInvoice::Cols::_express_com = "express_com";
const std::string CompanyInvoice::Cols::_express_nu = "express_nu";
const std::string CompanyInvoice::Cols::_express_admin_id = "express_admin_id";
const std::string CompanyInvoice::Cols::_shop_id = "shop_id";
const std::string CompanyInvoice::Cols::_is_delete = "is_delete";
const std::string CompanyInvoice::Cols::_express_type = "express_type";
const std::string CompanyInvoice::primaryKeyName = "id";
const bool CompanyInvoice::hasPrimaryKey = true;
const std::string CompanyInvoice::tableName = "company_invoice";

const std::vector<typename CompanyInvoice::MetaData> CompanyInvoice::metaData_={
{"id","uint64_t","bigint(20) unsigned",8,1,1,1},
{"company_name","std::string","varchar(120)",120,0,0,1},
{"company_tax_number","std::string","varchar(120)",120,0,0,1},
{"company_billing_phone","std::string","varchar(120)",120,0,0,1},
{"company_billing_address","std::string","varchar(255)",255,0,0,1},
{"company_opening_bank","std::string","varchar(120)",120,0,0,1},
{"company_bank_account","std::string","varchar(120)",120,0,0,1},
{"company_mail_address","std::string","varchar(255)",255,0,0,1},
{"amount","std::string","decimal(32,2)",0,0,0,1},
{"num","std::string","decimal(32,5)",0,0,0,1},
{"invoice_pic","std::string","text",0,0,0,0},
{"company_id","uint64_t","bigint(20) unsigned",8,0,0,1},
{"status","uint8_t","tinyint(1) unsigned",1,0,0,1},
{"create_time","::trantor::Date","datetime",0,0,0,1},
{"update_time","::trantor::Date","datetime",0,0,0,1},
{"user_id","int64_t","bigint(20)",8,0,0,1},
{"admin_id","int64_t","bigint(20)",8,0,0,1},
{"remark","std::string","varchar(255)",255,0,0,0},
{"express_name","std::string","varchar(60)",60,0,0,0},
{"express_com","std::string","varchar(100)",100,0,0,0},
{"express_nu","std::string","varchar(100)",100,0,0,0},
{"express_admin_id","int64_t","bigint(20)",8,0,0,1},
{"shop_id","int64_t","bigint(20)",8,0,0,1},
{"is_delete","int8_t","tinyint(1)",1,0,0,1},
{"express_type","int8_t","tinyint(1)",1,0,0,1}
};
const std::string &CompanyInvoice::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
CompanyInvoice::CompanyInvoice(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<uint64_t>(r["id"].as<uint64_t>());
        }
        if(!r["company_name"].isNull())
        {
            companyName_=std::make_shared<std::string>(r["company_name"].as<std::string>());
        }
        if(!r["company_tax_number"].isNull())
        {
            companyTaxNumber_=std::make_shared<std::string>(r["company_tax_number"].as<std::string>());
        }
        if(!r["company_billing_phone"].isNull())
        {
            companyBillingPhone_=std::make_shared<std::string>(r["company_billing_phone"].as<std::string>());
        }
        if(!r["company_billing_address"].isNull())
        {
            companyBillingAddress_=std::make_shared<std::string>(r["company_billing_address"].as<std::string>());
        }
        if(!r["company_opening_bank"].isNull())
        {
            companyOpeningBank_=std::make_shared<std::string>(r["company_opening_bank"].as<std::string>());
        }
        if(!r["company_bank_account"].isNull())
        {
            companyBankAccount_=std::make_shared<std::string>(r["company_bank_account"].as<std::string>());
        }
        if(!r["company_mail_address"].isNull())
        {
            companyMailAddress_=std::make_shared<std::string>(r["company_mail_address"].as<std::string>());
        }
        if(!r["amount"].isNull())
        {
            amount_=std::make_shared<std::string>(r["amount"].as<std::string>());
        }
        if(!r["num"].isNull())
        {
            num_=std::make_shared<std::string>(r["num"].as<std::string>());
        }
        if(!r["invoice_pic"].isNull())
        {
            invoicePic_=std::make_shared<std::string>(r["invoice_pic"].as<std::string>());
        }
        if(!r["company_id"].isNull())
        {
            companyId_=std::make_shared<uint64_t>(r["company_id"].as<uint64_t>());
        }
        if(!r["status"].isNull())
        {
            status_=std::make_shared<uint8_t>(r["status"].as<uint8_t>());
        }
        if(!r["create_time"].isNull())
        {
            auto timeStr = r["create_time"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        if(!r["update_time"].isNull())
        {
            auto timeStr = r["update_time"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        if(!r["user_id"].isNull())
        {
            userId_=std::make_shared<int64_t>(r["user_id"].as<int64_t>());
        }
        if(!r["admin_id"].isNull())
        {
            adminId_=std::make_shared<int64_t>(r["admin_id"].as<int64_t>());
        }
        if(!r["remark"].isNull())
        {
            remark_=std::make_shared<std::string>(r["remark"].as<std::string>());
        }
        if(!r["express_name"].isNull())
        {
            expressName_=std::make_shared<std::string>(r["express_name"].as<std::string>());
        }
        if(!r["express_com"].isNull())
        {
            expressCom_=std::make_shared<std::string>(r["express_com"].as<std::string>());
        }
        if(!r["express_nu"].isNull())
        {
            expressNu_=std::make_shared<std::string>(r["express_nu"].as<std::string>());
        }
        if(!r["express_admin_id"].isNull())
        {
            expressAdminId_=std::make_shared<int64_t>(r["express_admin_id"].as<int64_t>());
        }
        if(!r["shop_id"].isNull())
        {
            shopId_=std::make_shared<int64_t>(r["shop_id"].as<int64_t>());
        }
        if(!r["is_delete"].isNull())
        {
            isDelete_=std::make_shared<int8_t>(r["is_delete"].as<int8_t>());
        }
        if(!r["express_type"].isNull())
        {
            expressType_=std::make_shared<int8_t>(r["express_type"].as<int8_t>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 25 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            companyName_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            companyTaxNumber_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            companyBillingPhone_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            companyBillingAddress_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            companyOpeningBank_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            companyBankAccount_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            companyMailAddress_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 8;
        if(!r[index].isNull())
        {
            amount_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 9;
        if(!r[index].isNull())
        {
            num_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 10;
        if(!r[index].isNull())
        {
            invoicePic_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 11;
        if(!r[index].isNull())
        {
            companyId_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 12;
        if(!r[index].isNull())
        {
            status_=std::make_shared<uint8_t>(r[index].as<uint8_t>());
        }
        index = offset + 13;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        index = offset + 14;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        index = offset + 15;
        if(!r[index].isNull())
        {
            userId_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 16;
        if(!r[index].isNull())
        {
            adminId_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 17;
        if(!r[index].isNull())
        {
            remark_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 18;
        if(!r[index].isNull())
        {
            expressName_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 19;
        if(!r[index].isNull())
        {
            expressCom_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 20;
        if(!r[index].isNull())
        {
            expressNu_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 21;
        if(!r[index].isNull())
        {
            expressAdminId_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 22;
        if(!r[index].isNull())
        {
            shopId_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 23;
        if(!r[index].isNull())
        {
            isDelete_=std::make_shared<int8_t>(r[index].as<int8_t>());
        }
        index = offset + 24;
        if(!r[index].isNull())
        {
            expressType_=std::make_shared<int8_t>(r[index].as<int8_t>());
        }
    }

}

CompanyInvoice::CompanyInvoice(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 25)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            companyName_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            companyTaxNumber_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            companyBillingPhone_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            companyBillingAddress_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            companyOpeningBank_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            companyBankAccount_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            companyMailAddress_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            amount_=std::make_shared<std::string>(pJson[pMasqueradingVector[8]].asString());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            num_=std::make_shared<std::string>(pJson[pMasqueradingVector[9]].asString());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            invoicePic_=std::make_shared<std::string>(pJson[pMasqueradingVector[10]].asString());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            companyId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[11]].asUInt64());
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            status_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[12]].asUInt64());
        }
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        dirtyFlag_[13] = true;
        if(!pJson[pMasqueradingVector[13]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[13]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        dirtyFlag_[14] = true;
        if(!pJson[pMasqueradingVector[14]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[14]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
    {
        dirtyFlag_[15] = true;
        if(!pJson[pMasqueradingVector[15]].isNull())
        {
            userId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[15]].asInt64());
        }
    }
    if(!pMasqueradingVector[16].empty() && pJson.isMember(pMasqueradingVector[16]))
    {
        dirtyFlag_[16] = true;
        if(!pJson[pMasqueradingVector[16]].isNull())
        {
            adminId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[16]].asInt64());
        }
    }
    if(!pMasqueradingVector[17].empty() && pJson.isMember(pMasqueradingVector[17]))
    {
        dirtyFlag_[17] = true;
        if(!pJson[pMasqueradingVector[17]].isNull())
        {
            remark_=std::make_shared<std::string>(pJson[pMasqueradingVector[17]].asString());
        }
    }
    if(!pMasqueradingVector[18].empty() && pJson.isMember(pMasqueradingVector[18]))
    {
        dirtyFlag_[18] = true;
        if(!pJson[pMasqueradingVector[18]].isNull())
        {
            expressName_=std::make_shared<std::string>(pJson[pMasqueradingVector[18]].asString());
        }
    }
    if(!pMasqueradingVector[19].empty() && pJson.isMember(pMasqueradingVector[19]))
    {
        dirtyFlag_[19] = true;
        if(!pJson[pMasqueradingVector[19]].isNull())
        {
            expressCom_=std::make_shared<std::string>(pJson[pMasqueradingVector[19]].asString());
        }
    }
    if(!pMasqueradingVector[20].empty() && pJson.isMember(pMasqueradingVector[20]))
    {
        dirtyFlag_[20] = true;
        if(!pJson[pMasqueradingVector[20]].isNull())
        {
            expressNu_=std::make_shared<std::string>(pJson[pMasqueradingVector[20]].asString());
        }
    }
    if(!pMasqueradingVector[21].empty() && pJson.isMember(pMasqueradingVector[21]))
    {
        dirtyFlag_[21] = true;
        if(!pJson[pMasqueradingVector[21]].isNull())
        {
            expressAdminId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[21]].asInt64());
        }
    }
    if(!pMasqueradingVector[22].empty() && pJson.isMember(pMasqueradingVector[22]))
    {
        dirtyFlag_[22] = true;
        if(!pJson[pMasqueradingVector[22]].isNull())
        {
            shopId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[22]].asInt64());
        }
    }
    if(!pMasqueradingVector[23].empty() && pJson.isMember(pMasqueradingVector[23]))
    {
        dirtyFlag_[23] = true;
        if(!pJson[pMasqueradingVector[23]].isNull())
        {
            isDelete_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[23]].asInt64());
        }
    }
    if(!pMasqueradingVector[24].empty() && pJson.isMember(pMasqueradingVector[24]))
    {
        dirtyFlag_[24] = true;
        if(!pJson[pMasqueradingVector[24]].isNull())
        {
            expressType_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[24]].asInt64());
        }
    }
}

CompanyInvoice::CompanyInvoice(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson["id"].asUInt64());
        }
    }
    if(pJson.isMember("company_name"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["company_name"].isNull())
        {
            companyName_=std::make_shared<std::string>(pJson["company_name"].asString());
        }
    }
    if(pJson.isMember("company_tax_number"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["company_tax_number"].isNull())
        {
            companyTaxNumber_=std::make_shared<std::string>(pJson["company_tax_number"].asString());
        }
    }
    if(pJson.isMember("company_billing_phone"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["company_billing_phone"].isNull())
        {
            companyBillingPhone_=std::make_shared<std::string>(pJson["company_billing_phone"].asString());
        }
    }
    if(pJson.isMember("company_billing_address"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["company_billing_address"].isNull())
        {
            companyBillingAddress_=std::make_shared<std::string>(pJson["company_billing_address"].asString());
        }
    }
    if(pJson.isMember("company_opening_bank"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["company_opening_bank"].isNull())
        {
            companyOpeningBank_=std::make_shared<std::string>(pJson["company_opening_bank"].asString());
        }
    }
    if(pJson.isMember("company_bank_account"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["company_bank_account"].isNull())
        {
            companyBankAccount_=std::make_shared<std::string>(pJson["company_bank_account"].asString());
        }
    }
    if(pJson.isMember("company_mail_address"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["company_mail_address"].isNull())
        {
            companyMailAddress_=std::make_shared<std::string>(pJson["company_mail_address"].asString());
        }
    }
    if(pJson.isMember("amount"))
    {
        dirtyFlag_[8]=true;
        if(!pJson["amount"].isNull())
        {
            amount_=std::make_shared<std::string>(pJson["amount"].asString());
        }
    }
    if(pJson.isMember("num"))
    {
        dirtyFlag_[9]=true;
        if(!pJson["num"].isNull())
        {
            num_=std::make_shared<std::string>(pJson["num"].asString());
        }
    }
    if(pJson.isMember("invoice_pic"))
    {
        dirtyFlag_[10]=true;
        if(!pJson["invoice_pic"].isNull())
        {
            invoicePic_=std::make_shared<std::string>(pJson["invoice_pic"].asString());
        }
    }
    if(pJson.isMember("company_id"))
    {
        dirtyFlag_[11]=true;
        if(!pJson["company_id"].isNull())
        {
            companyId_=std::make_shared<uint64_t>((uint64_t)pJson["company_id"].asUInt64());
        }
    }
    if(pJson.isMember("status"))
    {
        dirtyFlag_[12]=true;
        if(!pJson["status"].isNull())
        {
            status_=std::make_shared<uint8_t>((uint8_t)pJson["status"].asUInt64());
        }
    }
    if(pJson.isMember("create_time"))
    {
        dirtyFlag_[13]=true;
        if(!pJson["create_time"].isNull())
        {
            auto timeStr = pJson["create_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("update_time"))
    {
        dirtyFlag_[14]=true;
        if(!pJson["update_time"].isNull())
        {
            auto timeStr = pJson["update_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("user_id"))
    {
        dirtyFlag_[15]=true;
        if(!pJson["user_id"].isNull())
        {
            userId_=std::make_shared<int64_t>((int64_t)pJson["user_id"].asInt64());
        }
    }
    if(pJson.isMember("admin_id"))
    {
        dirtyFlag_[16]=true;
        if(!pJson["admin_id"].isNull())
        {
            adminId_=std::make_shared<int64_t>((int64_t)pJson["admin_id"].asInt64());
        }
    }
    if(pJson.isMember("remark"))
    {
        dirtyFlag_[17]=true;
        if(!pJson["remark"].isNull())
        {
            remark_=std::make_shared<std::string>(pJson["remark"].asString());
        }
    }
    if(pJson.isMember("express_name"))
    {
        dirtyFlag_[18]=true;
        if(!pJson["express_name"].isNull())
        {
            expressName_=std::make_shared<std::string>(pJson["express_name"].asString());
        }
    }
    if(pJson.isMember("express_com"))
    {
        dirtyFlag_[19]=true;
        if(!pJson["express_com"].isNull())
        {
            expressCom_=std::make_shared<std::string>(pJson["express_com"].asString());
        }
    }
    if(pJson.isMember("express_nu"))
    {
        dirtyFlag_[20]=true;
        if(!pJson["express_nu"].isNull())
        {
            expressNu_=std::make_shared<std::string>(pJson["express_nu"].asString());
        }
    }
    if(pJson.isMember("express_admin_id"))
    {
        dirtyFlag_[21]=true;
        if(!pJson["express_admin_id"].isNull())
        {
            expressAdminId_=std::make_shared<int64_t>((int64_t)pJson["express_admin_id"].asInt64());
        }
    }
    if(pJson.isMember("shop_id"))
    {
        dirtyFlag_[22]=true;
        if(!pJson["shop_id"].isNull())
        {
            shopId_=std::make_shared<int64_t>((int64_t)pJson["shop_id"].asInt64());
        }
    }
    if(pJson.isMember("is_delete"))
    {
        dirtyFlag_[23]=true;
        if(!pJson["is_delete"].isNull())
        {
            isDelete_=std::make_shared<int8_t>((int8_t)pJson["is_delete"].asInt64());
        }
    }
    if(pJson.isMember("express_type"))
    {
        dirtyFlag_[24]=true;
        if(!pJson["express_type"].isNull())
        {
            expressType_=std::make_shared<int8_t>((int8_t)pJson["express_type"].asInt64());
        }
    }
}

void CompanyInvoice::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 25)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            companyName_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            companyTaxNumber_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            companyBillingPhone_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            companyBillingAddress_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            companyOpeningBank_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            companyBankAccount_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            companyMailAddress_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            amount_=std::make_shared<std::string>(pJson[pMasqueradingVector[8]].asString());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            num_=std::make_shared<std::string>(pJson[pMasqueradingVector[9]].asString());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            invoicePic_=std::make_shared<std::string>(pJson[pMasqueradingVector[10]].asString());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            companyId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[11]].asUInt64());
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            status_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[12]].asUInt64());
        }
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        dirtyFlag_[13] = true;
        if(!pJson[pMasqueradingVector[13]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[13]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        dirtyFlag_[14] = true;
        if(!pJson[pMasqueradingVector[14]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[14]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
    {
        dirtyFlag_[15] = true;
        if(!pJson[pMasqueradingVector[15]].isNull())
        {
            userId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[15]].asInt64());
        }
    }
    if(!pMasqueradingVector[16].empty() && pJson.isMember(pMasqueradingVector[16]))
    {
        dirtyFlag_[16] = true;
        if(!pJson[pMasqueradingVector[16]].isNull())
        {
            adminId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[16]].asInt64());
        }
    }
    if(!pMasqueradingVector[17].empty() && pJson.isMember(pMasqueradingVector[17]))
    {
        dirtyFlag_[17] = true;
        if(!pJson[pMasqueradingVector[17]].isNull())
        {
            remark_=std::make_shared<std::string>(pJson[pMasqueradingVector[17]].asString());
        }
    }
    if(!pMasqueradingVector[18].empty() && pJson.isMember(pMasqueradingVector[18]))
    {
        dirtyFlag_[18] = true;
        if(!pJson[pMasqueradingVector[18]].isNull())
        {
            expressName_=std::make_shared<std::string>(pJson[pMasqueradingVector[18]].asString());
        }
    }
    if(!pMasqueradingVector[19].empty() && pJson.isMember(pMasqueradingVector[19]))
    {
        dirtyFlag_[19] = true;
        if(!pJson[pMasqueradingVector[19]].isNull())
        {
            expressCom_=std::make_shared<std::string>(pJson[pMasqueradingVector[19]].asString());
        }
    }
    if(!pMasqueradingVector[20].empty() && pJson.isMember(pMasqueradingVector[20]))
    {
        dirtyFlag_[20] = true;
        if(!pJson[pMasqueradingVector[20]].isNull())
        {
            expressNu_=std::make_shared<std::string>(pJson[pMasqueradingVector[20]].asString());
        }
    }
    if(!pMasqueradingVector[21].empty() && pJson.isMember(pMasqueradingVector[21]))
    {
        dirtyFlag_[21] = true;
        if(!pJson[pMasqueradingVector[21]].isNull())
        {
            expressAdminId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[21]].asInt64());
        }
    }
    if(!pMasqueradingVector[22].empty() && pJson.isMember(pMasqueradingVector[22]))
    {
        dirtyFlag_[22] = true;
        if(!pJson[pMasqueradingVector[22]].isNull())
        {
            shopId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[22]].asInt64());
        }
    }
    if(!pMasqueradingVector[23].empty() && pJson.isMember(pMasqueradingVector[23]))
    {
        dirtyFlag_[23] = true;
        if(!pJson[pMasqueradingVector[23]].isNull())
        {
            isDelete_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[23]].asInt64());
        }
    }
    if(!pMasqueradingVector[24].empty() && pJson.isMember(pMasqueradingVector[24]))
    {
        dirtyFlag_[24] = true;
        if(!pJson[pMasqueradingVector[24]].isNull())
        {
            expressType_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[24]].asInt64());
        }
    }
}
                                                                    
void CompanyInvoice::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson["id"].asUInt64());
        }
    }
    if(pJson.isMember("company_name"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["company_name"].isNull())
        {
            companyName_=std::make_shared<std::string>(pJson["company_name"].asString());
        }
    }
    if(pJson.isMember("company_tax_number"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["company_tax_number"].isNull())
        {
            companyTaxNumber_=std::make_shared<std::string>(pJson["company_tax_number"].asString());
        }
    }
    if(pJson.isMember("company_billing_phone"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["company_billing_phone"].isNull())
        {
            companyBillingPhone_=std::make_shared<std::string>(pJson["company_billing_phone"].asString());
        }
    }
    if(pJson.isMember("company_billing_address"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["company_billing_address"].isNull())
        {
            companyBillingAddress_=std::make_shared<std::string>(pJson["company_billing_address"].asString());
        }
    }
    if(pJson.isMember("company_opening_bank"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["company_opening_bank"].isNull())
        {
            companyOpeningBank_=std::make_shared<std::string>(pJson["company_opening_bank"].asString());
        }
    }
    if(pJson.isMember("company_bank_account"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["company_bank_account"].isNull())
        {
            companyBankAccount_=std::make_shared<std::string>(pJson["company_bank_account"].asString());
        }
    }
    if(pJson.isMember("company_mail_address"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["company_mail_address"].isNull())
        {
            companyMailAddress_=std::make_shared<std::string>(pJson["company_mail_address"].asString());
        }
    }
    if(pJson.isMember("amount"))
    {
        dirtyFlag_[8] = true;
        if(!pJson["amount"].isNull())
        {
            amount_=std::make_shared<std::string>(pJson["amount"].asString());
        }
    }
    if(pJson.isMember("num"))
    {
        dirtyFlag_[9] = true;
        if(!pJson["num"].isNull())
        {
            num_=std::make_shared<std::string>(pJson["num"].asString());
        }
    }
    if(pJson.isMember("invoice_pic"))
    {
        dirtyFlag_[10] = true;
        if(!pJson["invoice_pic"].isNull())
        {
            invoicePic_=std::make_shared<std::string>(pJson["invoice_pic"].asString());
        }
    }
    if(pJson.isMember("company_id"))
    {
        dirtyFlag_[11] = true;
        if(!pJson["company_id"].isNull())
        {
            companyId_=std::make_shared<uint64_t>((uint64_t)pJson["company_id"].asUInt64());
        }
    }
    if(pJson.isMember("status"))
    {
        dirtyFlag_[12] = true;
        if(!pJson["status"].isNull())
        {
            status_=std::make_shared<uint8_t>((uint8_t)pJson["status"].asUInt64());
        }
    }
    if(pJson.isMember("create_time"))
    {
        dirtyFlag_[13] = true;
        if(!pJson["create_time"].isNull())
        {
            auto timeStr = pJson["create_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("update_time"))
    {
        dirtyFlag_[14] = true;
        if(!pJson["update_time"].isNull())
        {
            auto timeStr = pJson["update_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("user_id"))
    {
        dirtyFlag_[15] = true;
        if(!pJson["user_id"].isNull())
        {
            userId_=std::make_shared<int64_t>((int64_t)pJson["user_id"].asInt64());
        }
    }
    if(pJson.isMember("admin_id"))
    {
        dirtyFlag_[16] = true;
        if(!pJson["admin_id"].isNull())
        {
            adminId_=std::make_shared<int64_t>((int64_t)pJson["admin_id"].asInt64());
        }
    }
    if(pJson.isMember("remark"))
    {
        dirtyFlag_[17] = true;
        if(!pJson["remark"].isNull())
        {
            remark_=std::make_shared<std::string>(pJson["remark"].asString());
        }
    }
    if(pJson.isMember("express_name"))
    {
        dirtyFlag_[18] = true;
        if(!pJson["express_name"].isNull())
        {
            expressName_=std::make_shared<std::string>(pJson["express_name"].asString());
        }
    }
    if(pJson.isMember("express_com"))
    {
        dirtyFlag_[19] = true;
        if(!pJson["express_com"].isNull())
        {
            expressCom_=std::make_shared<std::string>(pJson["express_com"].asString());
        }
    }
    if(pJson.isMember("express_nu"))
    {
        dirtyFlag_[20] = true;
        if(!pJson["express_nu"].isNull())
        {
            expressNu_=std::make_shared<std::string>(pJson["express_nu"].asString());
        }
    }
    if(pJson.isMember("express_admin_id"))
    {
        dirtyFlag_[21] = true;
        if(!pJson["express_admin_id"].isNull())
        {
            expressAdminId_=std::make_shared<int64_t>((int64_t)pJson["express_admin_id"].asInt64());
        }
    }
    if(pJson.isMember("shop_id"))
    {
        dirtyFlag_[22] = true;
        if(!pJson["shop_id"].isNull())
        {
            shopId_=std::make_shared<int64_t>((int64_t)pJson["shop_id"].asInt64());
        }
    }
    if(pJson.isMember("is_delete"))
    {
        dirtyFlag_[23] = true;
        if(!pJson["is_delete"].isNull())
        {
            isDelete_=std::make_shared<int8_t>((int8_t)pJson["is_delete"].asInt64());
        }
    }
    if(pJson.isMember("express_type"))
    {
        dirtyFlag_[24] = true;
        if(!pJson["express_type"].isNull())
        {
            expressType_=std::make_shared<int8_t>((int8_t)pJson["express_type"].asInt64());
        }
    }
}

const uint64_t &CompanyInvoice::getValueOfId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &CompanyInvoice::getId() const noexcept
{
    return id_;
}
void CompanyInvoice::setId(const uint64_t &pId) noexcept
{
    id_ = std::make_shared<uint64_t>(pId);
    dirtyFlag_[0] = true;
}



const typename CompanyInvoice::PrimaryKeyType & CompanyInvoice::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const std::string &CompanyInvoice::getValueOfCompanyName() const noexcept
{
    const static std::string defaultValue = std::string();
    if(companyName_)
        return *companyName_;
    return defaultValue;
}
const std::shared_ptr<std::string> &CompanyInvoice::getCompanyName() const noexcept
{
    return companyName_;
}
void CompanyInvoice::setCompanyName(const std::string &pCompanyName) noexcept
{
    companyName_ = std::make_shared<std::string>(pCompanyName);
    dirtyFlag_[1] = true;
}
void CompanyInvoice::setCompanyName(std::string &&pCompanyName) noexcept
{
    companyName_ = std::make_shared<std::string>(std::move(pCompanyName));
    dirtyFlag_[1] = true;
}




const std::string &CompanyInvoice::getValueOfCompanyTaxNumber() const noexcept
{
    const static std::string defaultValue = std::string();
    if(companyTaxNumber_)
        return *companyTaxNumber_;
    return defaultValue;
}
const std::shared_ptr<std::string> &CompanyInvoice::getCompanyTaxNumber() const noexcept
{
    return companyTaxNumber_;
}
void CompanyInvoice::setCompanyTaxNumber(const std::string &pCompanyTaxNumber) noexcept
{
    companyTaxNumber_ = std::make_shared<std::string>(pCompanyTaxNumber);
    dirtyFlag_[2] = true;
}
void CompanyInvoice::setCompanyTaxNumber(std::string &&pCompanyTaxNumber) noexcept
{
    companyTaxNumber_ = std::make_shared<std::string>(std::move(pCompanyTaxNumber));
    dirtyFlag_[2] = true;
}




const std::string &CompanyInvoice::getValueOfCompanyBillingPhone() const noexcept
{
    const static std::string defaultValue = std::string();
    if(companyBillingPhone_)
        return *companyBillingPhone_;
    return defaultValue;
}
const std::shared_ptr<std::string> &CompanyInvoice::getCompanyBillingPhone() const noexcept
{
    return companyBillingPhone_;
}
void CompanyInvoice::setCompanyBillingPhone(const std::string &pCompanyBillingPhone) noexcept
{
    companyBillingPhone_ = std::make_shared<std::string>(pCompanyBillingPhone);
    dirtyFlag_[3] = true;
}
void CompanyInvoice::setCompanyBillingPhone(std::string &&pCompanyBillingPhone) noexcept
{
    companyBillingPhone_ = std::make_shared<std::string>(std::move(pCompanyBillingPhone));
    dirtyFlag_[3] = true;
}




const std::string &CompanyInvoice::getValueOfCompanyBillingAddress() const noexcept
{
    const static std::string defaultValue = std::string();
    if(companyBillingAddress_)
        return *companyBillingAddress_;
    return defaultValue;
}
const std::shared_ptr<std::string> &CompanyInvoice::getCompanyBillingAddress() const noexcept
{
    return companyBillingAddress_;
}
void CompanyInvoice::setCompanyBillingAddress(const std::string &pCompanyBillingAddress) noexcept
{
    companyBillingAddress_ = std::make_shared<std::string>(pCompanyBillingAddress);
    dirtyFlag_[4] = true;
}
void CompanyInvoice::setCompanyBillingAddress(std::string &&pCompanyBillingAddress) noexcept
{
    companyBillingAddress_ = std::make_shared<std::string>(std::move(pCompanyBillingAddress));
    dirtyFlag_[4] = true;
}




const std::string &CompanyInvoice::getValueOfCompanyOpeningBank() const noexcept
{
    const static std::string defaultValue = std::string();
    if(companyOpeningBank_)
        return *companyOpeningBank_;
    return defaultValue;
}
const std::shared_ptr<std::string> &CompanyInvoice::getCompanyOpeningBank() const noexcept
{
    return companyOpeningBank_;
}
void CompanyInvoice::setCompanyOpeningBank(const std::string &pCompanyOpeningBank) noexcept
{
    companyOpeningBank_ = std::make_shared<std::string>(pCompanyOpeningBank);
    dirtyFlag_[5] = true;
}
void CompanyInvoice::setCompanyOpeningBank(std::string &&pCompanyOpeningBank) noexcept
{
    companyOpeningBank_ = std::make_shared<std::string>(std::move(pCompanyOpeningBank));
    dirtyFlag_[5] = true;
}




const std::string &CompanyInvoice::getValueOfCompanyBankAccount() const noexcept
{
    const static std::string defaultValue = std::string();
    if(companyBankAccount_)
        return *companyBankAccount_;
    return defaultValue;
}
const std::shared_ptr<std::string> &CompanyInvoice::getCompanyBankAccount() const noexcept
{
    return companyBankAccount_;
}
void CompanyInvoice::setCompanyBankAccount(const std::string &pCompanyBankAccount) noexcept
{
    companyBankAccount_ = std::make_shared<std::string>(pCompanyBankAccount);
    dirtyFlag_[6] = true;
}
void CompanyInvoice::setCompanyBankAccount(std::string &&pCompanyBankAccount) noexcept
{
    companyBankAccount_ = std::make_shared<std::string>(std::move(pCompanyBankAccount));
    dirtyFlag_[6] = true;
}




const std::string &CompanyInvoice::getValueOfCompanyMailAddress() const noexcept
{
    const static std::string defaultValue = std::string();
    if(companyMailAddress_)
        return *companyMailAddress_;
    return defaultValue;
}
const std::shared_ptr<std::string> &CompanyInvoice::getCompanyMailAddress() const noexcept
{
    return companyMailAddress_;
}
void CompanyInvoice::setCompanyMailAddress(const std::string &pCompanyMailAddress) noexcept
{
    companyMailAddress_ = std::make_shared<std::string>(pCompanyMailAddress);
    dirtyFlag_[7] = true;
}
void CompanyInvoice::setCompanyMailAddress(std::string &&pCompanyMailAddress) noexcept
{
    companyMailAddress_ = std::make_shared<std::string>(std::move(pCompanyMailAddress));
    dirtyFlag_[7] = true;
}




const std::string &CompanyInvoice::getValueOfAmount() const noexcept
{
    const static std::string defaultValue = std::string();
    if(amount_)
        return *amount_;
    return defaultValue;
}
const std::shared_ptr<std::string> &CompanyInvoice::getAmount() const noexcept
{
    return amount_;
}
void CompanyInvoice::setAmount(const std::string &pAmount) noexcept
{
    amount_ = std::make_shared<std::string>(pAmount);
    dirtyFlag_[8] = true;
}
void CompanyInvoice::setAmount(std::string &&pAmount) noexcept
{
    amount_ = std::make_shared<std::string>(std::move(pAmount));
    dirtyFlag_[8] = true;
}




const std::string &CompanyInvoice::getValueOfNum() const noexcept
{
    const static std::string defaultValue = std::string();
    if(num_)
        return *num_;
    return defaultValue;
}
const std::shared_ptr<std::string> &CompanyInvoice::getNum() const noexcept
{
    return num_;
}
void CompanyInvoice::setNum(const std::string &pNum) noexcept
{
    num_ = std::make_shared<std::string>(pNum);
    dirtyFlag_[9] = true;
}
void CompanyInvoice::setNum(std::string &&pNum) noexcept
{
    num_ = std::make_shared<std::string>(std::move(pNum));
    dirtyFlag_[9] = true;
}




const std::string &CompanyInvoice::getValueOfInvoicePic() const noexcept
{
    const static std::string defaultValue = std::string();
    if(invoicePic_)
        return *invoicePic_;
    return defaultValue;
}
const std::shared_ptr<std::string> &CompanyInvoice::getInvoicePic() const noexcept
{
    return invoicePic_;
}
void CompanyInvoice::setInvoicePic(const std::string &pInvoicePic) noexcept
{
    invoicePic_ = std::make_shared<std::string>(pInvoicePic);
    dirtyFlag_[10] = true;
}
void CompanyInvoice::setInvoicePic(std::string &&pInvoicePic) noexcept
{
    invoicePic_ = std::make_shared<std::string>(std::move(pInvoicePic));
    dirtyFlag_[10] = true;
}


void CompanyInvoice::setInvoicePicToNull() noexcept
{
    invoicePic_.reset();
    dirtyFlag_[10] = true;
}


const uint64_t &CompanyInvoice::getValueOfCompanyId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(companyId_)
        return *companyId_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &CompanyInvoice::getCompanyId() const noexcept
{
    return companyId_;
}
void CompanyInvoice::setCompanyId(const uint64_t &pCompanyId) noexcept
{
    companyId_ = std::make_shared<uint64_t>(pCompanyId);
    dirtyFlag_[11] = true;
}




const uint8_t &CompanyInvoice::getValueOfStatus() const noexcept
{
    const static uint8_t defaultValue = uint8_t();
    if(status_)
        return *status_;
    return defaultValue;
}
const std::shared_ptr<uint8_t> &CompanyInvoice::getStatus() const noexcept
{
    return status_;
}
void CompanyInvoice::setStatus(const uint8_t &pStatus) noexcept
{
    status_ = std::make_shared<uint8_t>(pStatus);
    dirtyFlag_[12] = true;
}




const ::trantor::Date &CompanyInvoice::getValueOfCreateTime() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(createTime_)
        return *createTime_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &CompanyInvoice::getCreateTime() const noexcept
{
    return createTime_;
}
void CompanyInvoice::setCreateTime(const ::trantor::Date &pCreateTime) noexcept
{
    createTime_ = std::make_shared<::trantor::Date>(pCreateTime);
    dirtyFlag_[13] = true;
}




const ::trantor::Date &CompanyInvoice::getValueOfUpdateTime() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(updateTime_)
        return *updateTime_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &CompanyInvoice::getUpdateTime() const noexcept
{
    return updateTime_;
}
void CompanyInvoice::setUpdateTime(const ::trantor::Date &pUpdateTime) noexcept
{
    updateTime_ = std::make_shared<::trantor::Date>(pUpdateTime);
    dirtyFlag_[14] = true;
}




const int64_t &CompanyInvoice::getValueOfUserId() const noexcept
{
    const static int64_t defaultValue = int64_t();
    if(userId_)
        return *userId_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &CompanyInvoice::getUserId() const noexcept
{
    return userId_;
}
void CompanyInvoice::setUserId(const int64_t &pUserId) noexcept
{
    userId_ = std::make_shared<int64_t>(pUserId);
    dirtyFlag_[15] = true;
}




const int64_t &CompanyInvoice::getValueOfAdminId() const noexcept
{
    const static int64_t defaultValue = int64_t();
    if(adminId_)
        return *adminId_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &CompanyInvoice::getAdminId() const noexcept
{
    return adminId_;
}
void CompanyInvoice::setAdminId(const int64_t &pAdminId) noexcept
{
    adminId_ = std::make_shared<int64_t>(pAdminId);
    dirtyFlag_[16] = true;
}




const std::string &CompanyInvoice::getValueOfRemark() const noexcept
{
    const static std::string defaultValue = std::string();
    if(remark_)
        return *remark_;
    return defaultValue;
}
const std::shared_ptr<std::string> &CompanyInvoice::getRemark() const noexcept
{
    return remark_;
}
void CompanyInvoice::setRemark(const std::string &pRemark) noexcept
{
    remark_ = std::make_shared<std::string>(pRemark);
    dirtyFlag_[17] = true;
}
void CompanyInvoice::setRemark(std::string &&pRemark) noexcept
{
    remark_ = std::make_shared<std::string>(std::move(pRemark));
    dirtyFlag_[17] = true;
}


void CompanyInvoice::setRemarkToNull() noexcept
{
    remark_.reset();
    dirtyFlag_[17] = true;
}


const std::string &CompanyInvoice::getValueOfExpressName() const noexcept
{
    const static std::string defaultValue = std::string();
    if(expressName_)
        return *expressName_;
    return defaultValue;
}
const std::shared_ptr<std::string> &CompanyInvoice::getExpressName() const noexcept
{
    return expressName_;
}
void CompanyInvoice::setExpressName(const std::string &pExpressName) noexcept
{
    expressName_ = std::make_shared<std::string>(pExpressName);
    dirtyFlag_[18] = true;
}
void CompanyInvoice::setExpressName(std::string &&pExpressName) noexcept
{
    expressName_ = std::make_shared<std::string>(std::move(pExpressName));
    dirtyFlag_[18] = true;
}


void CompanyInvoice::setExpressNameToNull() noexcept
{
    expressName_.reset();
    dirtyFlag_[18] = true;
}


const std::string &CompanyInvoice::getValueOfExpressCom() const noexcept
{
    const static std::string defaultValue = std::string();
    if(expressCom_)
        return *expressCom_;
    return defaultValue;
}
const std::shared_ptr<std::string> &CompanyInvoice::getExpressCom() const noexcept
{
    return expressCom_;
}
void CompanyInvoice::setExpressCom(const std::string &pExpressCom) noexcept
{
    expressCom_ = std::make_shared<std::string>(pExpressCom);
    dirtyFlag_[19] = true;
}
void CompanyInvoice::setExpressCom(std::string &&pExpressCom) noexcept
{
    expressCom_ = std::make_shared<std::string>(std::move(pExpressCom));
    dirtyFlag_[19] = true;
}


void CompanyInvoice::setExpressComToNull() noexcept
{
    expressCom_.reset();
    dirtyFlag_[19] = true;
}


const std::string &CompanyInvoice::getValueOfExpressNu() const noexcept
{
    const static std::string defaultValue = std::string();
    if(expressNu_)
        return *expressNu_;
    return defaultValue;
}
const std::shared_ptr<std::string> &CompanyInvoice::getExpressNu() const noexcept
{
    return expressNu_;
}
void CompanyInvoice::setExpressNu(const std::string &pExpressNu) noexcept
{
    expressNu_ = std::make_shared<std::string>(pExpressNu);
    dirtyFlag_[20] = true;
}
void CompanyInvoice::setExpressNu(std::string &&pExpressNu) noexcept
{
    expressNu_ = std::make_shared<std::string>(std::move(pExpressNu));
    dirtyFlag_[20] = true;
}


void CompanyInvoice::setExpressNuToNull() noexcept
{
    expressNu_.reset();
    dirtyFlag_[20] = true;
}


const int64_t &CompanyInvoice::getValueOfExpressAdminId() const noexcept
{
    const static int64_t defaultValue = int64_t();
    if(expressAdminId_)
        return *expressAdminId_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &CompanyInvoice::getExpressAdminId() const noexcept
{
    return expressAdminId_;
}
void CompanyInvoice::setExpressAdminId(const int64_t &pExpressAdminId) noexcept
{
    expressAdminId_ = std::make_shared<int64_t>(pExpressAdminId);
    dirtyFlag_[21] = true;
}




const int64_t &CompanyInvoice::getValueOfShopId() const noexcept
{
    const static int64_t defaultValue = int64_t();
    if(shopId_)
        return *shopId_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &CompanyInvoice::getShopId() const noexcept
{
    return shopId_;
}
void CompanyInvoice::setShopId(const int64_t &pShopId) noexcept
{
    shopId_ = std::make_shared<int64_t>(pShopId);
    dirtyFlag_[22] = true;
}




const int8_t &CompanyInvoice::getValueOfIsDelete() const noexcept
{
    const static int8_t defaultValue = int8_t();
    if(isDelete_)
        return *isDelete_;
    return defaultValue;
}
const std::shared_ptr<int8_t> &CompanyInvoice::getIsDelete() const noexcept
{
    return isDelete_;
}
void CompanyInvoice::setIsDelete(const int8_t &pIsDelete) noexcept
{
    isDelete_ = std::make_shared<int8_t>(pIsDelete);
    dirtyFlag_[23] = true;
}




const int8_t &CompanyInvoice::getValueOfExpressType() const noexcept
{
    const static int8_t defaultValue = int8_t();
    if(expressType_)
        return *expressType_;
    return defaultValue;
}
const std::shared_ptr<int8_t> &CompanyInvoice::getExpressType() const noexcept
{
    return expressType_;
}
void CompanyInvoice::setExpressType(const int8_t &pExpressType) noexcept
{
    expressType_ = std::make_shared<int8_t>(pExpressType);
    dirtyFlag_[24] = true;
}




void CompanyInvoice::updateId(const uint64_t id)
{
    id_ = std::make_shared<uint64_t>(id);
}

const std::vector<std::string> &CompanyInvoice::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "company_name",
        "company_tax_number",
        "company_billing_phone",
        "company_billing_address",
        "company_opening_bank",
        "company_bank_account",
        "company_mail_address",
        "amount",
        "num",
        "invoice_pic",
        "company_id",
        "status",
        "create_time",
        "update_time",
        "user_id",
        "admin_id",
        "remark",
        "express_name",
        "express_com",
        "express_nu",
        "express_admin_id",
        "shop_id",
        "is_delete",
        "express_type"
    };
    return inCols;
}

void CompanyInvoice::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getCompanyName())
        {
            binder << getValueOfCompanyName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getCompanyTaxNumber())
        {
            binder << getValueOfCompanyTaxNumber();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getCompanyBillingPhone())
        {
            binder << getValueOfCompanyBillingPhone();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getCompanyBillingAddress())
        {
            binder << getValueOfCompanyBillingAddress();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getCompanyOpeningBank())
        {
            binder << getValueOfCompanyOpeningBank();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getCompanyBankAccount())
        {
            binder << getValueOfCompanyBankAccount();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getCompanyMailAddress())
        {
            binder << getValueOfCompanyMailAddress();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getAmount())
        {
            binder << getValueOfAmount();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getNum())
        {
            binder << getValueOfNum();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getInvoicePic())
        {
            binder << getValueOfInvoicePic();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getCompanyId())
        {
            binder << getValueOfCompanyId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getStatus())
        {
            binder << getValueOfStatus();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[13])
    {
        if(getCreateTime())
        {
            binder << getValueOfCreateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[14])
    {
        if(getUpdateTime())
        {
            binder << getValueOfUpdateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[15])
    {
        if(getUserId())
        {
            binder << getValueOfUserId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[16])
    {
        if(getAdminId())
        {
            binder << getValueOfAdminId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[17])
    {
        if(getRemark())
        {
            binder << getValueOfRemark();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[18])
    {
        if(getExpressName())
        {
            binder << getValueOfExpressName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[19])
    {
        if(getExpressCom())
        {
            binder << getValueOfExpressCom();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[20])
    {
        if(getExpressNu())
        {
            binder << getValueOfExpressNu();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[21])
    {
        if(getExpressAdminId())
        {
            binder << getValueOfExpressAdminId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[22])
    {
        if(getShopId())
        {
            binder << getValueOfShopId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[23])
    {
        if(getIsDelete())
        {
            binder << getValueOfIsDelete();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[24])
    {
        if(getExpressType())
        {
            binder << getValueOfExpressType();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> CompanyInvoice::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    if(dirtyFlag_[8])
    {
        ret.push_back(getColumnName(8));
    }
    if(dirtyFlag_[9])
    {
        ret.push_back(getColumnName(9));
    }
    if(dirtyFlag_[10])
    {
        ret.push_back(getColumnName(10));
    }
    if(dirtyFlag_[11])
    {
        ret.push_back(getColumnName(11));
    }
    if(dirtyFlag_[12])
    {
        ret.push_back(getColumnName(12));
    }
    if(dirtyFlag_[13])
    {
        ret.push_back(getColumnName(13));
    }
    if(dirtyFlag_[14])
    {
        ret.push_back(getColumnName(14));
    }
    if(dirtyFlag_[15])
    {
        ret.push_back(getColumnName(15));
    }
    if(dirtyFlag_[16])
    {
        ret.push_back(getColumnName(16));
    }
    if(dirtyFlag_[17])
    {
        ret.push_back(getColumnName(17));
    }
    if(dirtyFlag_[18])
    {
        ret.push_back(getColumnName(18));
    }
    if(dirtyFlag_[19])
    {
        ret.push_back(getColumnName(19));
    }
    if(dirtyFlag_[20])
    {
        ret.push_back(getColumnName(20));
    }
    if(dirtyFlag_[21])
    {
        ret.push_back(getColumnName(21));
    }
    if(dirtyFlag_[22])
    {
        ret.push_back(getColumnName(22));
    }
    if(dirtyFlag_[23])
    {
        ret.push_back(getColumnName(23));
    }
    if(dirtyFlag_[24])
    {
        ret.push_back(getColumnName(24));
    }
    return ret;
}

void CompanyInvoice::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getCompanyName())
        {
            binder << getValueOfCompanyName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getCompanyTaxNumber())
        {
            binder << getValueOfCompanyTaxNumber();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getCompanyBillingPhone())
        {
            binder << getValueOfCompanyBillingPhone();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getCompanyBillingAddress())
        {
            binder << getValueOfCompanyBillingAddress();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getCompanyOpeningBank())
        {
            binder << getValueOfCompanyOpeningBank();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getCompanyBankAccount())
        {
            binder << getValueOfCompanyBankAccount();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getCompanyMailAddress())
        {
            binder << getValueOfCompanyMailAddress();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getAmount())
        {
            binder << getValueOfAmount();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getNum())
        {
            binder << getValueOfNum();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getInvoicePic())
        {
            binder << getValueOfInvoicePic();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getCompanyId())
        {
            binder << getValueOfCompanyId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getStatus())
        {
            binder << getValueOfStatus();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[13])
    {
        if(getCreateTime())
        {
            binder << getValueOfCreateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[14])
    {
        if(getUpdateTime())
        {
            binder << getValueOfUpdateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[15])
    {
        if(getUserId())
        {
            binder << getValueOfUserId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[16])
    {
        if(getAdminId())
        {
            binder << getValueOfAdminId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[17])
    {
        if(getRemark())
        {
            binder << getValueOfRemark();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[18])
    {
        if(getExpressName())
        {
            binder << getValueOfExpressName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[19])
    {
        if(getExpressCom())
        {
            binder << getValueOfExpressCom();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[20])
    {
        if(getExpressNu())
        {
            binder << getValueOfExpressNu();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[21])
    {
        if(getExpressAdminId())
        {
            binder << getValueOfExpressAdminId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[22])
    {
        if(getShopId())
        {
            binder << getValueOfShopId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[23])
    {
        if(getIsDelete())
        {
            binder << getValueOfIsDelete();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[24])
    {
        if(getExpressType())
        {
            binder << getValueOfExpressType();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value CompanyInvoice::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=(Json::UInt64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getCompanyName())
    {
        ret["company_name"]=getValueOfCompanyName();
    }
    else
    {
        ret["company_name"]=Json::Value();
    }
    if(getCompanyTaxNumber())
    {
        ret["company_tax_number"]=getValueOfCompanyTaxNumber();
    }
    else
    {
        ret["company_tax_number"]=Json::Value();
    }
    if(getCompanyBillingPhone())
    {
        ret["company_billing_phone"]=getValueOfCompanyBillingPhone();
    }
    else
    {
        ret["company_billing_phone"]=Json::Value();
    }
    if(getCompanyBillingAddress())
    {
        ret["company_billing_address"]=getValueOfCompanyBillingAddress();
    }
    else
    {
        ret["company_billing_address"]=Json::Value();
    }
    if(getCompanyOpeningBank())
    {
        ret["company_opening_bank"]=getValueOfCompanyOpeningBank();
    }
    else
    {
        ret["company_opening_bank"]=Json::Value();
    }
    if(getCompanyBankAccount())
    {
        ret["company_bank_account"]=getValueOfCompanyBankAccount();
    }
    else
    {
        ret["company_bank_account"]=Json::Value();
    }
    if(getCompanyMailAddress())
    {
        ret["company_mail_address"]=getValueOfCompanyMailAddress();
    }
    else
    {
        ret["company_mail_address"]=Json::Value();
    }
    if(getAmount())
    {
        ret["amount"]=getValueOfAmount();
    }
    else
    {
        ret["amount"]=Json::Value();
    }
    if(getNum())
    {
        ret["num"]=getValueOfNum();
    }
    else
    {
        ret["num"]=Json::Value();
    }
    if(getInvoicePic())
    {
        ret["invoice_pic"]=getValueOfInvoicePic();
    }
    else
    {
        ret["invoice_pic"]=Json::Value();
    }
    if(getCompanyId())
    {
        ret["company_id"]=(Json::UInt64)getValueOfCompanyId();
    }
    else
    {
        ret["company_id"]=Json::Value();
    }
    if(getStatus())
    {
        ret["status"]=getValueOfStatus();
    }
    else
    {
        ret["status"]=Json::Value();
    }
    if(getCreateTime())
    {
        ret["create_time"]=getCreateTime()->toDbStringLocal();
    }
    else
    {
        ret["create_time"]=Json::Value();
    }
    if(getUpdateTime())
    {
        ret["update_time"]=getUpdateTime()->toDbStringLocal();
    }
    else
    {
        ret["update_time"]=Json::Value();
    }
    if(getUserId())
    {
        ret["user_id"]=(Json::Int64)getValueOfUserId();
    }
    else
    {
        ret["user_id"]=Json::Value();
    }
    if(getAdminId())
    {
        ret["admin_id"]=(Json::Int64)getValueOfAdminId();
    }
    else
    {
        ret["admin_id"]=Json::Value();
    }
    if(getRemark())
    {
        ret["remark"]=getValueOfRemark();
    }
    else
    {
        ret["remark"]=Json::Value();
    }
    if(getExpressName())
    {
        ret["express_name"]=getValueOfExpressName();
    }
    else
    {
        ret["express_name"]=Json::Value();
    }
    if(getExpressCom())
    {
        ret["express_com"]=getValueOfExpressCom();
    }
    else
    {
        ret["express_com"]=Json::Value();
    }
    if(getExpressNu())
    {
        ret["express_nu"]=getValueOfExpressNu();
    }
    else
    {
        ret["express_nu"]=Json::Value();
    }
    if(getExpressAdminId())
    {
        ret["express_admin_id"]=(Json::Int64)getValueOfExpressAdminId();
    }
    else
    {
        ret["express_admin_id"]=Json::Value();
    }
    if(getShopId())
    {
        ret["shop_id"]=(Json::Int64)getValueOfShopId();
    }
    else
    {
        ret["shop_id"]=Json::Value();
    }
    if(getIsDelete())
    {
        ret["is_delete"]=getValueOfIsDelete();
    }
    else
    {
        ret["is_delete"]=Json::Value();
    }
    if(getExpressType())
    {
        ret["express_type"]=getValueOfExpressType();
    }
    else
    {
        ret["express_type"]=Json::Value();
    }
    return ret;
}

Json::Value CompanyInvoice::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 25)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=(Json::UInt64)getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getCompanyName())
            {
                ret[pMasqueradingVector[1]]=getValueOfCompanyName();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getCompanyTaxNumber())
            {
                ret[pMasqueradingVector[2]]=getValueOfCompanyTaxNumber();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getCompanyBillingPhone())
            {
                ret[pMasqueradingVector[3]]=getValueOfCompanyBillingPhone();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getCompanyBillingAddress())
            {
                ret[pMasqueradingVector[4]]=getValueOfCompanyBillingAddress();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getCompanyOpeningBank())
            {
                ret[pMasqueradingVector[5]]=getValueOfCompanyOpeningBank();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getCompanyBankAccount())
            {
                ret[pMasqueradingVector[6]]=getValueOfCompanyBankAccount();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getCompanyMailAddress())
            {
                ret[pMasqueradingVector[7]]=getValueOfCompanyMailAddress();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[8].empty())
        {
            if(getAmount())
            {
                ret[pMasqueradingVector[8]]=getValueOfAmount();
            }
            else
            {
                ret[pMasqueradingVector[8]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[9].empty())
        {
            if(getNum())
            {
                ret[pMasqueradingVector[9]]=getValueOfNum();
            }
            else
            {
                ret[pMasqueradingVector[9]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[10].empty())
        {
            if(getInvoicePic())
            {
                ret[pMasqueradingVector[10]]=getValueOfInvoicePic();
            }
            else
            {
                ret[pMasqueradingVector[10]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[11].empty())
        {
            if(getCompanyId())
            {
                ret[pMasqueradingVector[11]]=(Json::UInt64)getValueOfCompanyId();
            }
            else
            {
                ret[pMasqueradingVector[11]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[12].empty())
        {
            if(getStatus())
            {
                ret[pMasqueradingVector[12]]=getValueOfStatus();
            }
            else
            {
                ret[pMasqueradingVector[12]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[13].empty())
        {
            if(getCreateTime())
            {
                ret[pMasqueradingVector[13]]=getCreateTime()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[13]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[14].empty())
        {
            if(getUpdateTime())
            {
                ret[pMasqueradingVector[14]]=getUpdateTime()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[14]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[15].empty())
        {
            if(getUserId())
            {
                ret[pMasqueradingVector[15]]=(Json::Int64)getValueOfUserId();
            }
            else
            {
                ret[pMasqueradingVector[15]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[16].empty())
        {
            if(getAdminId())
            {
                ret[pMasqueradingVector[16]]=(Json::Int64)getValueOfAdminId();
            }
            else
            {
                ret[pMasqueradingVector[16]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[17].empty())
        {
            if(getRemark())
            {
                ret[pMasqueradingVector[17]]=getValueOfRemark();
            }
            else
            {
                ret[pMasqueradingVector[17]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[18].empty())
        {
            if(getExpressName())
            {
                ret[pMasqueradingVector[18]]=getValueOfExpressName();
            }
            else
            {
                ret[pMasqueradingVector[18]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[19].empty())
        {
            if(getExpressCom())
            {
                ret[pMasqueradingVector[19]]=getValueOfExpressCom();
            }
            else
            {
                ret[pMasqueradingVector[19]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[20].empty())
        {
            if(getExpressNu())
            {
                ret[pMasqueradingVector[20]]=getValueOfExpressNu();
            }
            else
            {
                ret[pMasqueradingVector[20]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[21].empty())
        {
            if(getExpressAdminId())
            {
                ret[pMasqueradingVector[21]]=(Json::Int64)getValueOfExpressAdminId();
            }
            else
            {
                ret[pMasqueradingVector[21]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[22].empty())
        {
            if(getShopId())
            {
                ret[pMasqueradingVector[22]]=(Json::Int64)getValueOfShopId();
            }
            else
            {
                ret[pMasqueradingVector[22]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[23].empty())
        {
            if(getIsDelete())
            {
                ret[pMasqueradingVector[23]]=getValueOfIsDelete();
            }
            else
            {
                ret[pMasqueradingVector[23]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[24].empty())
        {
            if(getExpressType())
            {
                ret[pMasqueradingVector[24]]=getValueOfExpressType();
            }
            else
            {
                ret[pMasqueradingVector[24]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=(Json::UInt64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getCompanyName())
    {
        ret["company_name"]=getValueOfCompanyName();
    }
    else
    {
        ret["company_name"]=Json::Value();
    }
    if(getCompanyTaxNumber())
    {
        ret["company_tax_number"]=getValueOfCompanyTaxNumber();
    }
    else
    {
        ret["company_tax_number"]=Json::Value();
    }
    if(getCompanyBillingPhone())
    {
        ret["company_billing_phone"]=getValueOfCompanyBillingPhone();
    }
    else
    {
        ret["company_billing_phone"]=Json::Value();
    }
    if(getCompanyBillingAddress())
    {
        ret["company_billing_address"]=getValueOfCompanyBillingAddress();
    }
    else
    {
        ret["company_billing_address"]=Json::Value();
    }
    if(getCompanyOpeningBank())
    {
        ret["company_opening_bank"]=getValueOfCompanyOpeningBank();
    }
    else
    {
        ret["company_opening_bank"]=Json::Value();
    }
    if(getCompanyBankAccount())
    {
        ret["company_bank_account"]=getValueOfCompanyBankAccount();
    }
    else
    {
        ret["company_bank_account"]=Json::Value();
    }
    if(getCompanyMailAddress())
    {
        ret["company_mail_address"]=getValueOfCompanyMailAddress();
    }
    else
    {
        ret["company_mail_address"]=Json::Value();
    }
    if(getAmount())
    {
        ret["amount"]=getValueOfAmount();
    }
    else
    {
        ret["amount"]=Json::Value();
    }
    if(getNum())
    {
        ret["num"]=getValueOfNum();
    }
    else
    {
        ret["num"]=Json::Value();
    }
    if(getInvoicePic())
    {
        ret["invoice_pic"]=getValueOfInvoicePic();
    }
    else
    {
        ret["invoice_pic"]=Json::Value();
    }
    if(getCompanyId())
    {
        ret["company_id"]=(Json::UInt64)getValueOfCompanyId();
    }
    else
    {
        ret["company_id"]=Json::Value();
    }
    if(getStatus())
    {
        ret["status"]=getValueOfStatus();
    }
    else
    {
        ret["status"]=Json::Value();
    }
    if(getCreateTime())
    {
        ret["create_time"]=getCreateTime()->toDbStringLocal();
    }
    else
    {
        ret["create_time"]=Json::Value();
    }
    if(getUpdateTime())
    {
        ret["update_time"]=getUpdateTime()->toDbStringLocal();
    }
    else
    {
        ret["update_time"]=Json::Value();
    }
    if(getUserId())
    {
        ret["user_id"]=(Json::Int64)getValueOfUserId();
    }
    else
    {
        ret["user_id"]=Json::Value();
    }
    if(getAdminId())
    {
        ret["admin_id"]=(Json::Int64)getValueOfAdminId();
    }
    else
    {
        ret["admin_id"]=Json::Value();
    }
    if(getRemark())
    {
        ret["remark"]=getValueOfRemark();
    }
    else
    {
        ret["remark"]=Json::Value();
    }
    if(getExpressName())
    {
        ret["express_name"]=getValueOfExpressName();
    }
    else
    {
        ret["express_name"]=Json::Value();
    }
    if(getExpressCom())
    {
        ret["express_com"]=getValueOfExpressCom();
    }
    else
    {
        ret["express_com"]=Json::Value();
    }
    if(getExpressNu())
    {
        ret["express_nu"]=getValueOfExpressNu();
    }
    else
    {
        ret["express_nu"]=Json::Value();
    }
    if(getExpressAdminId())
    {
        ret["express_admin_id"]=(Json::Int64)getValueOfExpressAdminId();
    }
    else
    {
        ret["express_admin_id"]=Json::Value();
    }
    if(getShopId())
    {
        ret["shop_id"]=(Json::Int64)getValueOfShopId();
    }
    else
    {
        ret["shop_id"]=Json::Value();
    }
    if(getIsDelete())
    {
        ret["is_delete"]=getValueOfIsDelete();
    }
    else
    {
        ret["is_delete"]=Json::Value();
    }
    if(getExpressType())
    {
        ret["express_type"]=getValueOfExpressType();
    }
    else
    {
        ret["express_type"]=Json::Value();
    }
    return ret;
}

bool CompanyInvoice::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("company_name"))
    {
        if(!validJsonOfField(1, "company_name", pJson["company_name"], err, true))
            return false;
    }
    else
    {
        err="The company_name column cannot be null";
        return false;
    }
    if(pJson.isMember("company_tax_number"))
    {
        if(!validJsonOfField(2, "company_tax_number", pJson["company_tax_number"], err, true))
            return false;
    }
    else
    {
        err="The company_tax_number column cannot be null";
        return false;
    }
    if(pJson.isMember("company_billing_phone"))
    {
        if(!validJsonOfField(3, "company_billing_phone", pJson["company_billing_phone"], err, true))
            return false;
    }
    else
    {
        err="The company_billing_phone column cannot be null";
        return false;
    }
    if(pJson.isMember("company_billing_address"))
    {
        if(!validJsonOfField(4, "company_billing_address", pJson["company_billing_address"], err, true))
            return false;
    }
    else
    {
        err="The company_billing_address column cannot be null";
        return false;
    }
    if(pJson.isMember("company_opening_bank"))
    {
        if(!validJsonOfField(5, "company_opening_bank", pJson["company_opening_bank"], err, true))
            return false;
    }
    else
    {
        err="The company_opening_bank column cannot be null";
        return false;
    }
    if(pJson.isMember("company_bank_account"))
    {
        if(!validJsonOfField(6, "company_bank_account", pJson["company_bank_account"], err, true))
            return false;
    }
    else
    {
        err="The company_bank_account column cannot be null";
        return false;
    }
    if(pJson.isMember("company_mail_address"))
    {
        if(!validJsonOfField(7, "company_mail_address", pJson["company_mail_address"], err, true))
            return false;
    }
    else
    {
        err="The company_mail_address column cannot be null";
        return false;
    }
    if(pJson.isMember("amount"))
    {
        if(!validJsonOfField(8, "amount", pJson["amount"], err, true))
            return false;
    }
    if(pJson.isMember("num"))
    {
        if(!validJsonOfField(9, "num", pJson["num"], err, true))
            return false;
    }
    if(pJson.isMember("invoice_pic"))
    {
        if(!validJsonOfField(10, "invoice_pic", pJson["invoice_pic"], err, true))
            return false;
    }
    if(pJson.isMember("company_id"))
    {
        if(!validJsonOfField(11, "company_id", pJson["company_id"], err, true))
            return false;
    }
    if(pJson.isMember("status"))
    {
        if(!validJsonOfField(12, "status", pJson["status"], err, true))
            return false;
    }
    if(pJson.isMember("create_time"))
    {
        if(!validJsonOfField(13, "create_time", pJson["create_time"], err, true))
            return false;
    }
    if(pJson.isMember("update_time"))
    {
        if(!validJsonOfField(14, "update_time", pJson["update_time"], err, true))
            return false;
    }
    if(pJson.isMember("user_id"))
    {
        if(!validJsonOfField(15, "user_id", pJson["user_id"], err, true))
            return false;
    }
    if(pJson.isMember("admin_id"))
    {
        if(!validJsonOfField(16, "admin_id", pJson["admin_id"], err, true))
            return false;
    }
    if(pJson.isMember("remark"))
    {
        if(!validJsonOfField(17, "remark", pJson["remark"], err, true))
            return false;
    }
    if(pJson.isMember("express_name"))
    {
        if(!validJsonOfField(18, "express_name", pJson["express_name"], err, true))
            return false;
    }
    if(pJson.isMember("express_com"))
    {
        if(!validJsonOfField(19, "express_com", pJson["express_com"], err, true))
            return false;
    }
    if(pJson.isMember("express_nu"))
    {
        if(!validJsonOfField(20, "express_nu", pJson["express_nu"], err, true))
            return false;
    }
    if(pJson.isMember("express_admin_id"))
    {
        if(!validJsonOfField(21, "express_admin_id", pJson["express_admin_id"], err, true))
            return false;
    }
    if(pJson.isMember("shop_id"))
    {
        if(!validJsonOfField(22, "shop_id", pJson["shop_id"], err, true))
            return false;
    }
    if(pJson.isMember("is_delete"))
    {
        if(!validJsonOfField(23, "is_delete", pJson["is_delete"], err, true))
            return false;
    }
    if(pJson.isMember("express_type"))
    {
        if(!validJsonOfField(24, "express_type", pJson["express_type"], err, true))
            return false;
    }
    return true;
}
bool CompanyInvoice::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                        const std::vector<std::string> &pMasqueradingVector,
                                                        std::string &err)
{
    if(pMasqueradingVector.size() != 25)
    {
        err = "Bad masquerading vector";
        return false;
    }
    if(!pMasqueradingVector[0].empty())
    {
        if(pJson.isMember(pMasqueradingVector[0]))
        {
            if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[1].empty())
    {
        if(pJson.isMember(pMasqueradingVector[1]))
        {
            if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                return false;
        }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
    }
    if(!pMasqueradingVector[2].empty())
    {
        if(pJson.isMember(pMasqueradingVector[2]))
        {
            if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                return false;
        }
        else
        {
            err="The " + pMasqueradingVector[2] + " column cannot be null";
            return false;
        }
    }
    if(!pMasqueradingVector[3].empty())
    {
        if(pJson.isMember(pMasqueradingVector[3]))
        {
            if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                return false;
        }
        else
        {
            err="The " + pMasqueradingVector[3] + " column cannot be null";
            return false;
        }
    }
    if(!pMasqueradingVector[4].empty())
    {
        if(pJson.isMember(pMasqueradingVector[4]))
        {
            if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                return false;
        }
        else
        {
            err="The " + pMasqueradingVector[4] + " column cannot be null";
            return false;
        }
    }
    if(!pMasqueradingVector[5].empty())
    {
        if(pJson.isMember(pMasqueradingVector[5]))
        {
            if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                return false;
        }
        else
        {
            err="The " + pMasqueradingVector[5] + " column cannot be null";
            return false;
        }
    }
    if(!pMasqueradingVector[6].empty())
    {
        if(pJson.isMember(pMasqueradingVector[6]))
        {
            if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                return false;
        }
        else
        {
            err="The " + pMasqueradingVector[6] + " column cannot be null";
            return false;
        }
    }
    if(!pMasqueradingVector[7].empty())
    {
        if(pJson.isMember(pMasqueradingVector[7]))
        {
            if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                return false;
        }
        else
        {
            err="The " + pMasqueradingVector[7] + " column cannot be null";
            return false;
        }
    }
    if(!pMasqueradingVector[8].empty())
    {
        if(pJson.isMember(pMasqueradingVector[8]))
        {
            if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[9].empty())
    {
        if(pJson.isMember(pMasqueradingVector[9]))
        {
            if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[10].empty())
    {
        if(pJson.isMember(pMasqueradingVector[10]))
        {
            if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[11].empty())
    {
        if(pJson.isMember(pMasqueradingVector[11]))
        {
            if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[12].empty())
    {
        if(pJson.isMember(pMasqueradingVector[12]))
        {
            if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[13].empty())
    {
        if(pJson.isMember(pMasqueradingVector[13]))
        {
            if(!validJsonOfField(13, pMasqueradingVector[13], pJson[pMasqueradingVector[13]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[14].empty())
    {
        if(pJson.isMember(pMasqueradingVector[14]))
        {
            if(!validJsonOfField(14, pMasqueradingVector[14], pJson[pMasqueradingVector[14]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[15].empty())
    {
        if(pJson.isMember(pMasqueradingVector[15]))
        {
            if(!validJsonOfField(15, pMasqueradingVector[15], pJson[pMasqueradingVector[15]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[16].empty())
    {
        if(pJson.isMember(pMasqueradingVector[16]))
        {
            if(!validJsonOfField(16, pMasqueradingVector[16], pJson[pMasqueradingVector[16]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[17].empty())
    {
        if(pJson.isMember(pMasqueradingVector[17]))
        {
            if(!validJsonOfField(17, pMasqueradingVector[17], pJson[pMasqueradingVector[17]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[18].empty())
    {
        if(pJson.isMember(pMasqueradingVector[18]))
        {
            if(!validJsonOfField(18, pMasqueradingVector[18], pJson[pMasqueradingVector[18]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[19].empty())
    {
        if(pJson.isMember(pMasqueradingVector[19]))
        {
            if(!validJsonOfField(19, pMasqueradingVector[19], pJson[pMasqueradingVector[19]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[20].empty())
    {
        if(pJson.isMember(pMasqueradingVector[20]))
        {
            if(!validJsonOfField(20, pMasqueradingVector[20], pJson[pMasqueradingVector[20]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[21].empty())
    {
        if(pJson.isMember(pMasqueradingVector[21]))
        {
            if(!validJsonOfField(21, pMasqueradingVector[21], pJson[pMasqueradingVector[21]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[22].empty())
    {
        if(pJson.isMember(pMasqueradingVector[22]))
        {
            if(!validJsonOfField(22, pMasqueradingVector[22], pJson[pMasqueradingVector[22]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[23].empty())
    {
        if(pJson.isMember(pMasqueradingVector[23]))
        {
            if(!validJsonOfField(23, pMasqueradingVector[23], pJson[pMasqueradingVector[23]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[24].empty())
    {
        if(pJson.isMember(pMasqueradingVector[24]))
        {
            if(!validJsonOfField(24, pMasqueradingVector[24], pJson[pMasqueradingVector[24]], err, true))
                return false;
        }
    }
    return true;
}
bool CompanyInvoice::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("company_name"))
    {
        if(!validJsonOfField(1, "company_name", pJson["company_name"], err, false))
            return false;
    }
    if(pJson.isMember("company_tax_number"))
    {
        if(!validJsonOfField(2, "company_tax_number", pJson["company_tax_number"], err, false))
            return false;
    }
    if(pJson.isMember("company_billing_phone"))
    {
        if(!validJsonOfField(3, "company_billing_phone", pJson["company_billing_phone"], err, false))
            return false;
    }
    if(pJson.isMember("company_billing_address"))
    {
        if(!validJsonOfField(4, "company_billing_address", pJson["company_billing_address"], err, false))
            return false;
    }
    if(pJson.isMember("company_opening_bank"))
    {
        if(!validJsonOfField(5, "company_opening_bank", pJson["company_opening_bank"], err, false))
            return false;
    }
    if(pJson.isMember("company_bank_account"))
    {
        if(!validJsonOfField(6, "company_bank_account", pJson["company_bank_account"], err, false))
            return false;
    }
    if(pJson.isMember("company_mail_address"))
    {
        if(!validJsonOfField(7, "company_mail_address", pJson["company_mail_address"], err, false))
            return false;
    }
    if(pJson.isMember("amount"))
    {
        if(!validJsonOfField(8, "amount", pJson["amount"], err, false))
            return false;
    }
    if(pJson.isMember("num"))
    {
        if(!validJsonOfField(9, "num", pJson["num"], err, false))
            return false;
    }
    if(pJson.isMember("invoice_pic"))
    {
        if(!validJsonOfField(10, "invoice_pic", pJson["invoice_pic"], err, false))
            return false;
    }
    if(pJson.isMember("company_id"))
    {
        if(!validJsonOfField(11, "company_id", pJson["company_id"], err, false))
            return false;
    }
    if(pJson.isMember("status"))
    {
        if(!validJsonOfField(12, "status", pJson["status"], err, false))
            return false;
    }
    if(pJson.isMember("create_time"))
    {
        if(!validJsonOfField(13, "create_time", pJson["create_time"], err, false))
            return false;
    }
    if(pJson.isMember("update_time"))
    {
        if(!validJsonOfField(14, "update_time", pJson["update_time"], err, false))
            return false;
    }
    if(pJson.isMember("user_id"))
    {
        if(!validJsonOfField(15, "user_id", pJson["user_id"], err, false))
            return false;
    }
    if(pJson.isMember("admin_id"))
    {
        if(!validJsonOfField(16, "admin_id", pJson["admin_id"], err, false))
            return false;
    }
    if(pJson.isMember("remark"))
    {
        if(!validJsonOfField(17, "remark", pJson["remark"], err, false))
            return false;
    }
    if(pJson.isMember("express_name"))
    {
        if(!validJsonOfField(18, "express_name", pJson["express_name"], err, false))
            return false;
    }
    if(pJson.isMember("express_com"))
    {
        if(!validJsonOfField(19, "express_com", pJson["express_com"], err, false))
            return false;
    }
    if(pJson.isMember("express_nu"))
    {
        if(!validJsonOfField(20, "express_nu", pJson["express_nu"], err, false))
            return false;
    }
    if(pJson.isMember("express_admin_id"))
    {
        if(!validJsonOfField(21, "express_admin_id", pJson["express_admin_id"], err, false))
            return false;
    }
    if(pJson.isMember("shop_id"))
    {
        if(!validJsonOfField(22, "shop_id", pJson["shop_id"], err, false))
            return false;
    }
    if(pJson.isMember("is_delete"))
    {
        if(!validJsonOfField(23, "is_delete", pJson["is_delete"], err, false))
            return false;
    }
    if(pJson.isMember("express_type"))
    {
        if(!validJsonOfField(24, "express_type", pJson["express_type"], err, false))
            return false;
    }
    return true;
}
bool CompanyInvoice::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                      const std::vector<std::string> &pMasqueradingVector,
                                                      std::string &err)
{
    if(pMasqueradingVector.size() != 25)
    {
        err = "Bad masquerading vector";
        return false;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
            return false;
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
            return false;
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
            return false;
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
            return false;
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
            return false;
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
            return false;
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
            return false;
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, false))
            return false;
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, false))
            return false;
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, false))
            return false;
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, false))
            return false;
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, false))
            return false;
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        if(!validJsonOfField(13, pMasqueradingVector[13], pJson[pMasqueradingVector[13]], err, false))
            return false;
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        if(!validJsonOfField(14, pMasqueradingVector[14], pJson[pMasqueradingVector[14]], err, false))
            return false;
    }
    if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
    {
        if(!validJsonOfField(15, pMasqueradingVector[15], pJson[pMasqueradingVector[15]], err, false))
            return false;
    }
    if(!pMasqueradingVector[16].empty() && pJson.isMember(pMasqueradingVector[16]))
    {
        if(!validJsonOfField(16, pMasqueradingVector[16], pJson[pMasqueradingVector[16]], err, false))
            return false;
    }
    if(!pMasqueradingVector[17].empty() && pJson.isMember(pMasqueradingVector[17]))
    {
        if(!validJsonOfField(17, pMasqueradingVector[17], pJson[pMasqueradingVector[17]], err, false))
            return false;
    }
    if(!pMasqueradingVector[18].empty() && pJson.isMember(pMasqueradingVector[18]))
    {
        if(!validJsonOfField(18, pMasqueradingVector[18], pJson[pMasqueradingVector[18]], err, false))
            return false;
    }
    if(!pMasqueradingVector[19].empty() && pJson.isMember(pMasqueradingVector[19]))
    {
        if(!validJsonOfField(19, pMasqueradingVector[19], pJson[pMasqueradingVector[19]], err, false))
            return false;
    }
    if(!pMasqueradingVector[20].empty() && pJson.isMember(pMasqueradingVector[20]))
    {
        if(!validJsonOfField(20, pMasqueradingVector[20], pJson[pMasqueradingVector[20]], err, false))
            return false;
    }
    if(!pMasqueradingVector[21].empty() && pJson.isMember(pMasqueradingVector[21]))
    {
        if(!validJsonOfField(21, pMasqueradingVector[21], pJson[pMasqueradingVector[21]], err, false))
            return false;
    }
    if(!pMasqueradingVector[22].empty() && pJson.isMember(pMasqueradingVector[22]))
    {
        if(!validJsonOfField(22, pMasqueradingVector[22], pJson[pMasqueradingVector[22]], err, false))
            return false;
    }
    if(!pMasqueradingVector[23].empty() && pJson.isMember(pMasqueradingVector[23]))
    {
        if(!validJsonOfField(23, pMasqueradingVector[23], pJson[pMasqueradingVector[23]], err, false))
            return false;
    }
    if(!pMasqueradingVector[24].empty() && pJson.isMember(pMasqueradingVector[24]))
    {
        if(!validJsonOfField(24, pMasqueradingVector[24], pJson[pMasqueradingVector[24]], err, false))
            return false;
    }
    return true;
}
bool CompanyInvoice::validJsonOfField(size_t index,
                                      const std::string &fieldName,
                                      const Json::Value &pJson, 
                                      std::string &err, 
                                      bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }        
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 120)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 120)";
                return false;               
            }

            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 120)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 120)";
                return false;               
            }

            break;
        case 3:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 120)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 120)";
                return false;               
            }

            break;
        case 4:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;               
            }

            break;
        case 5:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 120)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 120)";
                return false;               
            }

            break;
        case 6:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 120)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 120)";
                return false;               
            }

            break;
        case 7:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;               
            }

            break;
        case 8:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 9:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 10:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 11:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 12:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 13:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 14:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 15:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 16:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 17:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;               
            }

            break;
        case 18:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 60)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 60)";
                return false;               
            }

            break;
        case 19:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 100)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 100)";
                return false;               
            }

            break;
        case 20:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 100)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 100)";
                return false;               
            }

            break;
        case 21:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 22:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 23:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 24:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
     
        default:
            err="Internal error in the server";
            return false;
            break;
    }
    return true;
}
