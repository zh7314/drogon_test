/**
 *
 *  Admin.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Admin.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::v2;

const std::string Admin::Cols::_id = "id";
const std::string Admin::Cols::_create_time = "create_time";
const std::string Admin::Cols::_update_time = "update_time";
const std::string Admin::Cols::_remark = "remark";
const std::string Admin::Cols::_is_delete = "is_delete";
const std::string Admin::Cols::_shop_id = "shop_id";
const std::string Admin::Cols::_admin_login_name = "admin_login_name";
const std::string Admin::Cols::_admin_password = "admin_password";
const std::string Admin::Cols::_admin_phone = "admin_phone";
const std::string Admin::Cols::_admin_email = "admin_email";
const std::string Admin::Cols::_real_name = "real_name";
const std::string Admin::Cols::_admin_avatar = "admin_avatar";
const std::string Admin::Cols::_admin_qq = "admin_qq";
const std::string Admin::Cols::_admin_id = "admin_id";
const std::string Admin::Cols::_manage_product = "manage_product";
const std::string Admin::Cols::_admin_status = "admin_status";
const std::string Admin::Cols::_session_id = "session_id";
const std::string Admin::Cols::_admin_group_ids = "admin_group_ids";
const std::string Admin::Cols::_is_admin = "is_admin";
const std::string Admin::Cols::_is_shop_admin = "is_shop_admin";
const std::string Admin::Cols::_token = "token";
const std::string Admin::Cols::_token_time = "token_time";
const std::string Admin::Cols::_status = "status";
const std::string Admin::Cols::_weixin_token = "weixin_token";
const std::string Admin::Cols::_weixin_token_time = "weixin_token_time";
const std::string Admin::Cols::_weixin_id = "weixin_id";
const std::string Admin::primaryKeyName = "id";
const bool Admin::hasPrimaryKey = true;
const std::string Admin::tableName = "admin";

const std::vector<typename Admin::MetaData> Admin::metaData_={
{"id","uint64_t","bigint(20) unsigned",8,1,1,1},
{"create_time","::trantor::Date","datetime",0,0,0,0},
{"update_time","::trantor::Date","datetime",0,0,0,0},
{"remark","std::string","varchar(200)",200,0,0,0},
{"is_delete","int8_t","tinyint(1)",1,0,0,1},
{"shop_id","int64_t","bigint(20)",8,0,0,1},
{"admin_login_name","std::string","varchar(20)",20,0,0,1},
{"admin_password","std::string","varchar(32)",32,0,0,0},
{"admin_phone","std::string","varchar(20)",20,0,0,0},
{"admin_email","std::string","varchar(50)",50,0,0,0},
{"real_name","std::string","varchar(20)",20,0,0,0},
{"admin_avatar","std::string","varchar(100)",100,0,0,0},
{"admin_qq","std::string","varchar(20)",20,0,0,0},
{"admin_id","int64_t","bigint(20)",8,0,0,1},
{"manage_product","std::string","varchar(200)",200,0,0,0},
{"admin_status","uint8_t","tinyint(1) unsigned",1,0,0,1},
{"session_id","std::string","varchar(50)",50,0,0,0},
{"admin_group_ids","std::string","varchar(500)",500,0,0,0},
{"is_admin","uint8_t","tinyint(1) unsigned",1,0,0,1},
{"is_shop_admin","uint8_t","tinyint(1) unsigned",1,0,0,1},
{"token","std::string","varchar(32)",32,0,0,0},
{"token_time","::trantor::Date","datetime",0,0,0,0},
{"status","int8_t","tinyint(1)",1,0,0,1},
{"weixin_token","std::string","varchar(32)",32,0,0,0},
{"weixin_token_time","::trantor::Date","datetime",0,0,0,0},
{"weixin_id","int32_t","int(100)",4,0,0,0}
};
const std::string &Admin::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Admin::Admin(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<uint64_t>(r["id"].as<uint64_t>());
        }
        if(!r["create_time"].isNull())
        {
            auto timeStr = r["create_time"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        if(!r["update_time"].isNull())
        {
            auto timeStr = r["update_time"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        if(!r["remark"].isNull())
        {
            remark_=std::make_shared<std::string>(r["remark"].as<std::string>());
        }
        if(!r["is_delete"].isNull())
        {
            isDelete_=std::make_shared<int8_t>(r["is_delete"].as<int8_t>());
        }
        if(!r["shop_id"].isNull())
        {
            shopId_=std::make_shared<int64_t>(r["shop_id"].as<int64_t>());
        }
        if(!r["admin_login_name"].isNull())
        {
            adminLoginName_=std::make_shared<std::string>(r["admin_login_name"].as<std::string>());
        }
        if(!r["admin_password"].isNull())
        {
            adminPassword_=std::make_shared<std::string>(r["admin_password"].as<std::string>());
        }
        if(!r["admin_phone"].isNull())
        {
            adminPhone_=std::make_shared<std::string>(r["admin_phone"].as<std::string>());
        }
        if(!r["admin_email"].isNull())
        {
            adminEmail_=std::make_shared<std::string>(r["admin_email"].as<std::string>());
        }
        if(!r["real_name"].isNull())
        {
            realName_=std::make_shared<std::string>(r["real_name"].as<std::string>());
        }
        if(!r["admin_avatar"].isNull())
        {
            adminAvatar_=std::make_shared<std::string>(r["admin_avatar"].as<std::string>());
        }
        if(!r["admin_qq"].isNull())
        {
            adminQq_=std::make_shared<std::string>(r["admin_qq"].as<std::string>());
        }
        if(!r["admin_id"].isNull())
        {
            adminId_=std::make_shared<int64_t>(r["admin_id"].as<int64_t>());
        }
        if(!r["manage_product"].isNull())
        {
            manageProduct_=std::make_shared<std::string>(r["manage_product"].as<std::string>());
        }
        if(!r["admin_status"].isNull())
        {
            adminStatus_=std::make_shared<uint8_t>(r["admin_status"].as<uint8_t>());
        }
        if(!r["session_id"].isNull())
        {
            sessionId_=std::make_shared<std::string>(r["session_id"].as<std::string>());
        }
        if(!r["admin_group_ids"].isNull())
        {
            adminGroupIds_=std::make_shared<std::string>(r["admin_group_ids"].as<std::string>());
        }
        if(!r["is_admin"].isNull())
        {
            isAdmin_=std::make_shared<uint8_t>(r["is_admin"].as<uint8_t>());
        }
        if(!r["is_shop_admin"].isNull())
        {
            isShopAdmin_=std::make_shared<uint8_t>(r["is_shop_admin"].as<uint8_t>());
        }
        if(!r["token"].isNull())
        {
            token_=std::make_shared<std::string>(r["token"].as<std::string>());
        }
        if(!r["token_time"].isNull())
        {
            auto timeStr = r["token_time"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            tokenTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        if(!r["status"].isNull())
        {
            status_=std::make_shared<int8_t>(r["status"].as<int8_t>());
        }
        if(!r["weixin_token"].isNull())
        {
            weixinToken_=std::make_shared<std::string>(r["weixin_token"].as<std::string>());
        }
        if(!r["weixin_token_time"].isNull())
        {
            auto timeStr = r["weixin_token_time"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            weixinTokenTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        if(!r["weixin_id"].isNull())
        {
            weixinId_=std::make_shared<int32_t>(r["weixin_id"].as<int32_t>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 26 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            remark_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            isDelete_=std::make_shared<int8_t>(r[index].as<int8_t>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            shopId_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            adminLoginName_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            adminPassword_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 8;
        if(!r[index].isNull())
        {
            adminPhone_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 9;
        if(!r[index].isNull())
        {
            adminEmail_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 10;
        if(!r[index].isNull())
        {
            realName_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 11;
        if(!r[index].isNull())
        {
            adminAvatar_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 12;
        if(!r[index].isNull())
        {
            adminQq_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 13;
        if(!r[index].isNull())
        {
            adminId_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 14;
        if(!r[index].isNull())
        {
            manageProduct_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 15;
        if(!r[index].isNull())
        {
            adminStatus_=std::make_shared<uint8_t>(r[index].as<uint8_t>());
        }
        index = offset + 16;
        if(!r[index].isNull())
        {
            sessionId_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 17;
        if(!r[index].isNull())
        {
            adminGroupIds_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 18;
        if(!r[index].isNull())
        {
            isAdmin_=std::make_shared<uint8_t>(r[index].as<uint8_t>());
        }
        index = offset + 19;
        if(!r[index].isNull())
        {
            isShopAdmin_=std::make_shared<uint8_t>(r[index].as<uint8_t>());
        }
        index = offset + 20;
        if(!r[index].isNull())
        {
            token_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 21;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            tokenTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        index = offset + 22;
        if(!r[index].isNull())
        {
            status_=std::make_shared<int8_t>(r[index].as<int8_t>());
        }
        index = offset + 23;
        if(!r[index].isNull())
        {
            weixinToken_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 24;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            weixinTokenTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        index = offset + 25;
        if(!r[index].isNull())
        {
            weixinId_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
    }

}

Admin::Admin(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 26)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[1]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[2]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            remark_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            isDelete_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[4]].asInt64());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            shopId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[5]].asInt64());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            adminLoginName_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            adminPassword_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            adminPhone_=std::make_shared<std::string>(pJson[pMasqueradingVector[8]].asString());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            adminEmail_=std::make_shared<std::string>(pJson[pMasqueradingVector[9]].asString());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            realName_=std::make_shared<std::string>(pJson[pMasqueradingVector[10]].asString());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            adminAvatar_=std::make_shared<std::string>(pJson[pMasqueradingVector[11]].asString());
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            adminQq_=std::make_shared<std::string>(pJson[pMasqueradingVector[12]].asString());
        }
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        dirtyFlag_[13] = true;
        if(!pJson[pMasqueradingVector[13]].isNull())
        {
            adminId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[13]].asInt64());
        }
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        dirtyFlag_[14] = true;
        if(!pJson[pMasqueradingVector[14]].isNull())
        {
            manageProduct_=std::make_shared<std::string>(pJson[pMasqueradingVector[14]].asString());
        }
    }
    if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
    {
        dirtyFlag_[15] = true;
        if(!pJson[pMasqueradingVector[15]].isNull())
        {
            adminStatus_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[15]].asUInt64());
        }
    }
    if(!pMasqueradingVector[16].empty() && pJson.isMember(pMasqueradingVector[16]))
    {
        dirtyFlag_[16] = true;
        if(!pJson[pMasqueradingVector[16]].isNull())
        {
            sessionId_=std::make_shared<std::string>(pJson[pMasqueradingVector[16]].asString());
        }
    }
    if(!pMasqueradingVector[17].empty() && pJson.isMember(pMasqueradingVector[17]))
    {
        dirtyFlag_[17] = true;
        if(!pJson[pMasqueradingVector[17]].isNull())
        {
            adminGroupIds_=std::make_shared<std::string>(pJson[pMasqueradingVector[17]].asString());
        }
    }
    if(!pMasqueradingVector[18].empty() && pJson.isMember(pMasqueradingVector[18]))
    {
        dirtyFlag_[18] = true;
        if(!pJson[pMasqueradingVector[18]].isNull())
        {
            isAdmin_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[18]].asUInt64());
        }
    }
    if(!pMasqueradingVector[19].empty() && pJson.isMember(pMasqueradingVector[19]))
    {
        dirtyFlag_[19] = true;
        if(!pJson[pMasqueradingVector[19]].isNull())
        {
            isShopAdmin_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[19]].asUInt64());
        }
    }
    if(!pMasqueradingVector[20].empty() && pJson.isMember(pMasqueradingVector[20]))
    {
        dirtyFlag_[20] = true;
        if(!pJson[pMasqueradingVector[20]].isNull())
        {
            token_=std::make_shared<std::string>(pJson[pMasqueradingVector[20]].asString());
        }
    }
    if(!pMasqueradingVector[21].empty() && pJson.isMember(pMasqueradingVector[21]))
    {
        dirtyFlag_[21] = true;
        if(!pJson[pMasqueradingVector[21]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[21]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            tokenTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[22].empty() && pJson.isMember(pMasqueradingVector[22]))
    {
        dirtyFlag_[22] = true;
        if(!pJson[pMasqueradingVector[22]].isNull())
        {
            status_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[22]].asInt64());
        }
    }
    if(!pMasqueradingVector[23].empty() && pJson.isMember(pMasqueradingVector[23]))
    {
        dirtyFlag_[23] = true;
        if(!pJson[pMasqueradingVector[23]].isNull())
        {
            weixinToken_=std::make_shared<std::string>(pJson[pMasqueradingVector[23]].asString());
        }
    }
    if(!pMasqueradingVector[24].empty() && pJson.isMember(pMasqueradingVector[24]))
    {
        dirtyFlag_[24] = true;
        if(!pJson[pMasqueradingVector[24]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[24]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            weixinTokenTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[25].empty() && pJson.isMember(pMasqueradingVector[25]))
    {
        dirtyFlag_[25] = true;
        if(!pJson[pMasqueradingVector[25]].isNull())
        {
            weixinId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[25]].asInt64());
        }
    }
}

Admin::Admin(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson["id"].asUInt64());
        }
    }
    if(pJson.isMember("create_time"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["create_time"].isNull())
        {
            auto timeStr = pJson["create_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("update_time"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["update_time"].isNull())
        {
            auto timeStr = pJson["update_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("remark"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["remark"].isNull())
        {
            remark_=std::make_shared<std::string>(pJson["remark"].asString());
        }
    }
    if(pJson.isMember("is_delete"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["is_delete"].isNull())
        {
            isDelete_=std::make_shared<int8_t>((int8_t)pJson["is_delete"].asInt64());
        }
    }
    if(pJson.isMember("shop_id"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["shop_id"].isNull())
        {
            shopId_=std::make_shared<int64_t>((int64_t)pJson["shop_id"].asInt64());
        }
    }
    if(pJson.isMember("admin_login_name"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["admin_login_name"].isNull())
        {
            adminLoginName_=std::make_shared<std::string>(pJson["admin_login_name"].asString());
        }
    }
    if(pJson.isMember("admin_password"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["admin_password"].isNull())
        {
            adminPassword_=std::make_shared<std::string>(pJson["admin_password"].asString());
        }
    }
    if(pJson.isMember("admin_phone"))
    {
        dirtyFlag_[8]=true;
        if(!pJson["admin_phone"].isNull())
        {
            adminPhone_=std::make_shared<std::string>(pJson["admin_phone"].asString());
        }
    }
    if(pJson.isMember("admin_email"))
    {
        dirtyFlag_[9]=true;
        if(!pJson["admin_email"].isNull())
        {
            adminEmail_=std::make_shared<std::string>(pJson["admin_email"].asString());
        }
    }
    if(pJson.isMember("real_name"))
    {
        dirtyFlag_[10]=true;
        if(!pJson["real_name"].isNull())
        {
            realName_=std::make_shared<std::string>(pJson["real_name"].asString());
        }
    }
    if(pJson.isMember("admin_avatar"))
    {
        dirtyFlag_[11]=true;
        if(!pJson["admin_avatar"].isNull())
        {
            adminAvatar_=std::make_shared<std::string>(pJson["admin_avatar"].asString());
        }
    }
    if(pJson.isMember("admin_qq"))
    {
        dirtyFlag_[12]=true;
        if(!pJson["admin_qq"].isNull())
        {
            adminQq_=std::make_shared<std::string>(pJson["admin_qq"].asString());
        }
    }
    if(pJson.isMember("admin_id"))
    {
        dirtyFlag_[13]=true;
        if(!pJson["admin_id"].isNull())
        {
            adminId_=std::make_shared<int64_t>((int64_t)pJson["admin_id"].asInt64());
        }
    }
    if(pJson.isMember("manage_product"))
    {
        dirtyFlag_[14]=true;
        if(!pJson["manage_product"].isNull())
        {
            manageProduct_=std::make_shared<std::string>(pJson["manage_product"].asString());
        }
    }
    if(pJson.isMember("admin_status"))
    {
        dirtyFlag_[15]=true;
        if(!pJson["admin_status"].isNull())
        {
            adminStatus_=std::make_shared<uint8_t>((uint8_t)pJson["admin_status"].asUInt64());
        }
    }
    if(pJson.isMember("session_id"))
    {
        dirtyFlag_[16]=true;
        if(!pJson["session_id"].isNull())
        {
            sessionId_=std::make_shared<std::string>(pJson["session_id"].asString());
        }
    }
    if(pJson.isMember("admin_group_ids"))
    {
        dirtyFlag_[17]=true;
        if(!pJson["admin_group_ids"].isNull())
        {
            adminGroupIds_=std::make_shared<std::string>(pJson["admin_group_ids"].asString());
        }
    }
    if(pJson.isMember("is_admin"))
    {
        dirtyFlag_[18]=true;
        if(!pJson["is_admin"].isNull())
        {
            isAdmin_=std::make_shared<uint8_t>((uint8_t)pJson["is_admin"].asUInt64());
        }
    }
    if(pJson.isMember("is_shop_admin"))
    {
        dirtyFlag_[19]=true;
        if(!pJson["is_shop_admin"].isNull())
        {
            isShopAdmin_=std::make_shared<uint8_t>((uint8_t)pJson["is_shop_admin"].asUInt64());
        }
    }
    if(pJson.isMember("token"))
    {
        dirtyFlag_[20]=true;
        if(!pJson["token"].isNull())
        {
            token_=std::make_shared<std::string>(pJson["token"].asString());
        }
    }
    if(pJson.isMember("token_time"))
    {
        dirtyFlag_[21]=true;
        if(!pJson["token_time"].isNull())
        {
            auto timeStr = pJson["token_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            tokenTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("status"))
    {
        dirtyFlag_[22]=true;
        if(!pJson["status"].isNull())
        {
            status_=std::make_shared<int8_t>((int8_t)pJson["status"].asInt64());
        }
    }
    if(pJson.isMember("weixin_token"))
    {
        dirtyFlag_[23]=true;
        if(!pJson["weixin_token"].isNull())
        {
            weixinToken_=std::make_shared<std::string>(pJson["weixin_token"].asString());
        }
    }
    if(pJson.isMember("weixin_token_time"))
    {
        dirtyFlag_[24]=true;
        if(!pJson["weixin_token_time"].isNull())
        {
            auto timeStr = pJson["weixin_token_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            weixinTokenTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("weixin_id"))
    {
        dirtyFlag_[25]=true;
        if(!pJson["weixin_id"].isNull())
        {
            weixinId_=std::make_shared<int32_t>((int32_t)pJson["weixin_id"].asInt64());
        }
    }
}

void Admin::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 26)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[1]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[2]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            remark_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            isDelete_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[4]].asInt64());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            shopId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[5]].asInt64());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            adminLoginName_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            adminPassword_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            adminPhone_=std::make_shared<std::string>(pJson[pMasqueradingVector[8]].asString());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            adminEmail_=std::make_shared<std::string>(pJson[pMasqueradingVector[9]].asString());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            realName_=std::make_shared<std::string>(pJson[pMasqueradingVector[10]].asString());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            adminAvatar_=std::make_shared<std::string>(pJson[pMasqueradingVector[11]].asString());
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            adminQq_=std::make_shared<std::string>(pJson[pMasqueradingVector[12]].asString());
        }
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        dirtyFlag_[13] = true;
        if(!pJson[pMasqueradingVector[13]].isNull())
        {
            adminId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[13]].asInt64());
        }
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        dirtyFlag_[14] = true;
        if(!pJson[pMasqueradingVector[14]].isNull())
        {
            manageProduct_=std::make_shared<std::string>(pJson[pMasqueradingVector[14]].asString());
        }
    }
    if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
    {
        dirtyFlag_[15] = true;
        if(!pJson[pMasqueradingVector[15]].isNull())
        {
            adminStatus_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[15]].asUInt64());
        }
    }
    if(!pMasqueradingVector[16].empty() && pJson.isMember(pMasqueradingVector[16]))
    {
        dirtyFlag_[16] = true;
        if(!pJson[pMasqueradingVector[16]].isNull())
        {
            sessionId_=std::make_shared<std::string>(pJson[pMasqueradingVector[16]].asString());
        }
    }
    if(!pMasqueradingVector[17].empty() && pJson.isMember(pMasqueradingVector[17]))
    {
        dirtyFlag_[17] = true;
        if(!pJson[pMasqueradingVector[17]].isNull())
        {
            adminGroupIds_=std::make_shared<std::string>(pJson[pMasqueradingVector[17]].asString());
        }
    }
    if(!pMasqueradingVector[18].empty() && pJson.isMember(pMasqueradingVector[18]))
    {
        dirtyFlag_[18] = true;
        if(!pJson[pMasqueradingVector[18]].isNull())
        {
            isAdmin_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[18]].asUInt64());
        }
    }
    if(!pMasqueradingVector[19].empty() && pJson.isMember(pMasqueradingVector[19]))
    {
        dirtyFlag_[19] = true;
        if(!pJson[pMasqueradingVector[19]].isNull())
        {
            isShopAdmin_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[19]].asUInt64());
        }
    }
    if(!pMasqueradingVector[20].empty() && pJson.isMember(pMasqueradingVector[20]))
    {
        dirtyFlag_[20] = true;
        if(!pJson[pMasqueradingVector[20]].isNull())
        {
            token_=std::make_shared<std::string>(pJson[pMasqueradingVector[20]].asString());
        }
    }
    if(!pMasqueradingVector[21].empty() && pJson.isMember(pMasqueradingVector[21]))
    {
        dirtyFlag_[21] = true;
        if(!pJson[pMasqueradingVector[21]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[21]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            tokenTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[22].empty() && pJson.isMember(pMasqueradingVector[22]))
    {
        dirtyFlag_[22] = true;
        if(!pJson[pMasqueradingVector[22]].isNull())
        {
            status_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[22]].asInt64());
        }
    }
    if(!pMasqueradingVector[23].empty() && pJson.isMember(pMasqueradingVector[23]))
    {
        dirtyFlag_[23] = true;
        if(!pJson[pMasqueradingVector[23]].isNull())
        {
            weixinToken_=std::make_shared<std::string>(pJson[pMasqueradingVector[23]].asString());
        }
    }
    if(!pMasqueradingVector[24].empty() && pJson.isMember(pMasqueradingVector[24]))
    {
        dirtyFlag_[24] = true;
        if(!pJson[pMasqueradingVector[24]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[24]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            weixinTokenTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[25].empty() && pJson.isMember(pMasqueradingVector[25]))
    {
        dirtyFlag_[25] = true;
        if(!pJson[pMasqueradingVector[25]].isNull())
        {
            weixinId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[25]].asInt64());
        }
    }
}
                                                                    
void Admin::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson["id"].asUInt64());
        }
    }
    if(pJson.isMember("create_time"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["create_time"].isNull())
        {
            auto timeStr = pJson["create_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("update_time"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["update_time"].isNull())
        {
            auto timeStr = pJson["update_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("remark"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["remark"].isNull())
        {
            remark_=std::make_shared<std::string>(pJson["remark"].asString());
        }
    }
    if(pJson.isMember("is_delete"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["is_delete"].isNull())
        {
            isDelete_=std::make_shared<int8_t>((int8_t)pJson["is_delete"].asInt64());
        }
    }
    if(pJson.isMember("shop_id"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["shop_id"].isNull())
        {
            shopId_=std::make_shared<int64_t>((int64_t)pJson["shop_id"].asInt64());
        }
    }
    if(pJson.isMember("admin_login_name"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["admin_login_name"].isNull())
        {
            adminLoginName_=std::make_shared<std::string>(pJson["admin_login_name"].asString());
        }
    }
    if(pJson.isMember("admin_password"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["admin_password"].isNull())
        {
            adminPassword_=std::make_shared<std::string>(pJson["admin_password"].asString());
        }
    }
    if(pJson.isMember("admin_phone"))
    {
        dirtyFlag_[8] = true;
        if(!pJson["admin_phone"].isNull())
        {
            adminPhone_=std::make_shared<std::string>(pJson["admin_phone"].asString());
        }
    }
    if(pJson.isMember("admin_email"))
    {
        dirtyFlag_[9] = true;
        if(!pJson["admin_email"].isNull())
        {
            adminEmail_=std::make_shared<std::string>(pJson["admin_email"].asString());
        }
    }
    if(pJson.isMember("real_name"))
    {
        dirtyFlag_[10] = true;
        if(!pJson["real_name"].isNull())
        {
            realName_=std::make_shared<std::string>(pJson["real_name"].asString());
        }
    }
    if(pJson.isMember("admin_avatar"))
    {
        dirtyFlag_[11] = true;
        if(!pJson["admin_avatar"].isNull())
        {
            adminAvatar_=std::make_shared<std::string>(pJson["admin_avatar"].asString());
        }
    }
    if(pJson.isMember("admin_qq"))
    {
        dirtyFlag_[12] = true;
        if(!pJson["admin_qq"].isNull())
        {
            adminQq_=std::make_shared<std::string>(pJson["admin_qq"].asString());
        }
    }
    if(pJson.isMember("admin_id"))
    {
        dirtyFlag_[13] = true;
        if(!pJson["admin_id"].isNull())
        {
            adminId_=std::make_shared<int64_t>((int64_t)pJson["admin_id"].asInt64());
        }
    }
    if(pJson.isMember("manage_product"))
    {
        dirtyFlag_[14] = true;
        if(!pJson["manage_product"].isNull())
        {
            manageProduct_=std::make_shared<std::string>(pJson["manage_product"].asString());
        }
    }
    if(pJson.isMember("admin_status"))
    {
        dirtyFlag_[15] = true;
        if(!pJson["admin_status"].isNull())
        {
            adminStatus_=std::make_shared<uint8_t>((uint8_t)pJson["admin_status"].asUInt64());
        }
    }
    if(pJson.isMember("session_id"))
    {
        dirtyFlag_[16] = true;
        if(!pJson["session_id"].isNull())
        {
            sessionId_=std::make_shared<std::string>(pJson["session_id"].asString());
        }
    }
    if(pJson.isMember("admin_group_ids"))
    {
        dirtyFlag_[17] = true;
        if(!pJson["admin_group_ids"].isNull())
        {
            adminGroupIds_=std::make_shared<std::string>(pJson["admin_group_ids"].asString());
        }
    }
    if(pJson.isMember("is_admin"))
    {
        dirtyFlag_[18] = true;
        if(!pJson["is_admin"].isNull())
        {
            isAdmin_=std::make_shared<uint8_t>((uint8_t)pJson["is_admin"].asUInt64());
        }
    }
    if(pJson.isMember("is_shop_admin"))
    {
        dirtyFlag_[19] = true;
        if(!pJson["is_shop_admin"].isNull())
        {
            isShopAdmin_=std::make_shared<uint8_t>((uint8_t)pJson["is_shop_admin"].asUInt64());
        }
    }
    if(pJson.isMember("token"))
    {
        dirtyFlag_[20] = true;
        if(!pJson["token"].isNull())
        {
            token_=std::make_shared<std::string>(pJson["token"].asString());
        }
    }
    if(pJson.isMember("token_time"))
    {
        dirtyFlag_[21] = true;
        if(!pJson["token_time"].isNull())
        {
            auto timeStr = pJson["token_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            tokenTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("status"))
    {
        dirtyFlag_[22] = true;
        if(!pJson["status"].isNull())
        {
            status_=std::make_shared<int8_t>((int8_t)pJson["status"].asInt64());
        }
    }
    if(pJson.isMember("weixin_token"))
    {
        dirtyFlag_[23] = true;
        if(!pJson["weixin_token"].isNull())
        {
            weixinToken_=std::make_shared<std::string>(pJson["weixin_token"].asString());
        }
    }
    if(pJson.isMember("weixin_token_time"))
    {
        dirtyFlag_[24] = true;
        if(!pJson["weixin_token_time"].isNull())
        {
            auto timeStr = pJson["weixin_token_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            weixinTokenTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("weixin_id"))
    {
        dirtyFlag_[25] = true;
        if(!pJson["weixin_id"].isNull())
        {
            weixinId_=std::make_shared<int32_t>((int32_t)pJson["weixin_id"].asInt64());
        }
    }
}

const uint64_t &Admin::getValueOfId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &Admin::getId() const noexcept
{
    return id_;
}
void Admin::setId(const uint64_t &pId) noexcept
{
    id_ = std::make_shared<uint64_t>(pId);
    dirtyFlag_[0] = true;
}



const typename Admin::PrimaryKeyType & Admin::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const ::trantor::Date &Admin::getValueOfCreateTime() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(createTime_)
        return *createTime_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Admin::getCreateTime() const noexcept
{
    return createTime_;
}
void Admin::setCreateTime(const ::trantor::Date &pCreateTime) noexcept
{
    createTime_ = std::make_shared<::trantor::Date>(pCreateTime);
    dirtyFlag_[1] = true;
}


void Admin::setCreateTimeToNull() noexcept
{
    createTime_.reset();
    dirtyFlag_[1] = true;
}


const ::trantor::Date &Admin::getValueOfUpdateTime() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(updateTime_)
        return *updateTime_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Admin::getUpdateTime() const noexcept
{
    return updateTime_;
}
void Admin::setUpdateTime(const ::trantor::Date &pUpdateTime) noexcept
{
    updateTime_ = std::make_shared<::trantor::Date>(pUpdateTime);
    dirtyFlag_[2] = true;
}


void Admin::setUpdateTimeToNull() noexcept
{
    updateTime_.reset();
    dirtyFlag_[2] = true;
}


const std::string &Admin::getValueOfRemark() const noexcept
{
    const static std::string defaultValue = std::string();
    if(remark_)
        return *remark_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Admin::getRemark() const noexcept
{
    return remark_;
}
void Admin::setRemark(const std::string &pRemark) noexcept
{
    remark_ = std::make_shared<std::string>(pRemark);
    dirtyFlag_[3] = true;
}
void Admin::setRemark(std::string &&pRemark) noexcept
{
    remark_ = std::make_shared<std::string>(std::move(pRemark));
    dirtyFlag_[3] = true;
}


void Admin::setRemarkToNull() noexcept
{
    remark_.reset();
    dirtyFlag_[3] = true;
}


const int8_t &Admin::getValueOfIsDelete() const noexcept
{
    const static int8_t defaultValue = int8_t();
    if(isDelete_)
        return *isDelete_;
    return defaultValue;
}
const std::shared_ptr<int8_t> &Admin::getIsDelete() const noexcept
{
    return isDelete_;
}
void Admin::setIsDelete(const int8_t &pIsDelete) noexcept
{
    isDelete_ = std::make_shared<int8_t>(pIsDelete);
    dirtyFlag_[4] = true;
}




const int64_t &Admin::getValueOfShopId() const noexcept
{
    const static int64_t defaultValue = int64_t();
    if(shopId_)
        return *shopId_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &Admin::getShopId() const noexcept
{
    return shopId_;
}
void Admin::setShopId(const int64_t &pShopId) noexcept
{
    shopId_ = std::make_shared<int64_t>(pShopId);
    dirtyFlag_[5] = true;
}




const std::string &Admin::getValueOfAdminLoginName() const noexcept
{
    const static std::string defaultValue = std::string();
    if(adminLoginName_)
        return *adminLoginName_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Admin::getAdminLoginName() const noexcept
{
    return adminLoginName_;
}
void Admin::setAdminLoginName(const std::string &pAdminLoginName) noexcept
{
    adminLoginName_ = std::make_shared<std::string>(pAdminLoginName);
    dirtyFlag_[6] = true;
}
void Admin::setAdminLoginName(std::string &&pAdminLoginName) noexcept
{
    adminLoginName_ = std::make_shared<std::string>(std::move(pAdminLoginName));
    dirtyFlag_[6] = true;
}




const std::string &Admin::getValueOfAdminPassword() const noexcept
{
    const static std::string defaultValue = std::string();
    if(adminPassword_)
        return *adminPassword_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Admin::getAdminPassword() const noexcept
{
    return adminPassword_;
}
void Admin::setAdminPassword(const std::string &pAdminPassword) noexcept
{
    adminPassword_ = std::make_shared<std::string>(pAdminPassword);
    dirtyFlag_[7] = true;
}
void Admin::setAdminPassword(std::string &&pAdminPassword) noexcept
{
    adminPassword_ = std::make_shared<std::string>(std::move(pAdminPassword));
    dirtyFlag_[7] = true;
}


void Admin::setAdminPasswordToNull() noexcept
{
    adminPassword_.reset();
    dirtyFlag_[7] = true;
}


const std::string &Admin::getValueOfAdminPhone() const noexcept
{
    const static std::string defaultValue = std::string();
    if(adminPhone_)
        return *adminPhone_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Admin::getAdminPhone() const noexcept
{
    return adminPhone_;
}
void Admin::setAdminPhone(const std::string &pAdminPhone) noexcept
{
    adminPhone_ = std::make_shared<std::string>(pAdminPhone);
    dirtyFlag_[8] = true;
}
void Admin::setAdminPhone(std::string &&pAdminPhone) noexcept
{
    adminPhone_ = std::make_shared<std::string>(std::move(pAdminPhone));
    dirtyFlag_[8] = true;
}


void Admin::setAdminPhoneToNull() noexcept
{
    adminPhone_.reset();
    dirtyFlag_[8] = true;
}


const std::string &Admin::getValueOfAdminEmail() const noexcept
{
    const static std::string defaultValue = std::string();
    if(adminEmail_)
        return *adminEmail_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Admin::getAdminEmail() const noexcept
{
    return adminEmail_;
}
void Admin::setAdminEmail(const std::string &pAdminEmail) noexcept
{
    adminEmail_ = std::make_shared<std::string>(pAdminEmail);
    dirtyFlag_[9] = true;
}
void Admin::setAdminEmail(std::string &&pAdminEmail) noexcept
{
    adminEmail_ = std::make_shared<std::string>(std::move(pAdminEmail));
    dirtyFlag_[9] = true;
}


void Admin::setAdminEmailToNull() noexcept
{
    adminEmail_.reset();
    dirtyFlag_[9] = true;
}


const std::string &Admin::getValueOfRealName() const noexcept
{
    const static std::string defaultValue = std::string();
    if(realName_)
        return *realName_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Admin::getRealName() const noexcept
{
    return realName_;
}
void Admin::setRealName(const std::string &pRealName) noexcept
{
    realName_ = std::make_shared<std::string>(pRealName);
    dirtyFlag_[10] = true;
}
void Admin::setRealName(std::string &&pRealName) noexcept
{
    realName_ = std::make_shared<std::string>(std::move(pRealName));
    dirtyFlag_[10] = true;
}


void Admin::setRealNameToNull() noexcept
{
    realName_.reset();
    dirtyFlag_[10] = true;
}


const std::string &Admin::getValueOfAdminAvatar() const noexcept
{
    const static std::string defaultValue = std::string();
    if(adminAvatar_)
        return *adminAvatar_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Admin::getAdminAvatar() const noexcept
{
    return adminAvatar_;
}
void Admin::setAdminAvatar(const std::string &pAdminAvatar) noexcept
{
    adminAvatar_ = std::make_shared<std::string>(pAdminAvatar);
    dirtyFlag_[11] = true;
}
void Admin::setAdminAvatar(std::string &&pAdminAvatar) noexcept
{
    adminAvatar_ = std::make_shared<std::string>(std::move(pAdminAvatar));
    dirtyFlag_[11] = true;
}


void Admin::setAdminAvatarToNull() noexcept
{
    adminAvatar_.reset();
    dirtyFlag_[11] = true;
}


const std::string &Admin::getValueOfAdminQq() const noexcept
{
    const static std::string defaultValue = std::string();
    if(adminQq_)
        return *adminQq_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Admin::getAdminQq() const noexcept
{
    return adminQq_;
}
void Admin::setAdminQq(const std::string &pAdminQq) noexcept
{
    adminQq_ = std::make_shared<std::string>(pAdminQq);
    dirtyFlag_[12] = true;
}
void Admin::setAdminQq(std::string &&pAdminQq) noexcept
{
    adminQq_ = std::make_shared<std::string>(std::move(pAdminQq));
    dirtyFlag_[12] = true;
}


void Admin::setAdminQqToNull() noexcept
{
    adminQq_.reset();
    dirtyFlag_[12] = true;
}


const int64_t &Admin::getValueOfAdminId() const noexcept
{
    const static int64_t defaultValue = int64_t();
    if(adminId_)
        return *adminId_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &Admin::getAdminId() const noexcept
{
    return adminId_;
}
void Admin::setAdminId(const int64_t &pAdminId) noexcept
{
    adminId_ = std::make_shared<int64_t>(pAdminId);
    dirtyFlag_[13] = true;
}




const std::string &Admin::getValueOfManageProduct() const noexcept
{
    const static std::string defaultValue = std::string();
    if(manageProduct_)
        return *manageProduct_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Admin::getManageProduct() const noexcept
{
    return manageProduct_;
}
void Admin::setManageProduct(const std::string &pManageProduct) noexcept
{
    manageProduct_ = std::make_shared<std::string>(pManageProduct);
    dirtyFlag_[14] = true;
}
void Admin::setManageProduct(std::string &&pManageProduct) noexcept
{
    manageProduct_ = std::make_shared<std::string>(std::move(pManageProduct));
    dirtyFlag_[14] = true;
}


void Admin::setManageProductToNull() noexcept
{
    manageProduct_.reset();
    dirtyFlag_[14] = true;
}


const uint8_t &Admin::getValueOfAdminStatus() const noexcept
{
    const static uint8_t defaultValue = uint8_t();
    if(adminStatus_)
        return *adminStatus_;
    return defaultValue;
}
const std::shared_ptr<uint8_t> &Admin::getAdminStatus() const noexcept
{
    return adminStatus_;
}
void Admin::setAdminStatus(const uint8_t &pAdminStatus) noexcept
{
    adminStatus_ = std::make_shared<uint8_t>(pAdminStatus);
    dirtyFlag_[15] = true;
}




const std::string &Admin::getValueOfSessionId() const noexcept
{
    const static std::string defaultValue = std::string();
    if(sessionId_)
        return *sessionId_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Admin::getSessionId() const noexcept
{
    return sessionId_;
}
void Admin::setSessionId(const std::string &pSessionId) noexcept
{
    sessionId_ = std::make_shared<std::string>(pSessionId);
    dirtyFlag_[16] = true;
}
void Admin::setSessionId(std::string &&pSessionId) noexcept
{
    sessionId_ = std::make_shared<std::string>(std::move(pSessionId));
    dirtyFlag_[16] = true;
}


void Admin::setSessionIdToNull() noexcept
{
    sessionId_.reset();
    dirtyFlag_[16] = true;
}


const std::string &Admin::getValueOfAdminGroupIds() const noexcept
{
    const static std::string defaultValue = std::string();
    if(adminGroupIds_)
        return *adminGroupIds_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Admin::getAdminGroupIds() const noexcept
{
    return adminGroupIds_;
}
void Admin::setAdminGroupIds(const std::string &pAdminGroupIds) noexcept
{
    adminGroupIds_ = std::make_shared<std::string>(pAdminGroupIds);
    dirtyFlag_[17] = true;
}
void Admin::setAdminGroupIds(std::string &&pAdminGroupIds) noexcept
{
    adminGroupIds_ = std::make_shared<std::string>(std::move(pAdminGroupIds));
    dirtyFlag_[17] = true;
}


void Admin::setAdminGroupIdsToNull() noexcept
{
    adminGroupIds_.reset();
    dirtyFlag_[17] = true;
}


const uint8_t &Admin::getValueOfIsAdmin() const noexcept
{
    const static uint8_t defaultValue = uint8_t();
    if(isAdmin_)
        return *isAdmin_;
    return defaultValue;
}
const std::shared_ptr<uint8_t> &Admin::getIsAdmin() const noexcept
{
    return isAdmin_;
}
void Admin::setIsAdmin(const uint8_t &pIsAdmin) noexcept
{
    isAdmin_ = std::make_shared<uint8_t>(pIsAdmin);
    dirtyFlag_[18] = true;
}




const uint8_t &Admin::getValueOfIsShopAdmin() const noexcept
{
    const static uint8_t defaultValue = uint8_t();
    if(isShopAdmin_)
        return *isShopAdmin_;
    return defaultValue;
}
const std::shared_ptr<uint8_t> &Admin::getIsShopAdmin() const noexcept
{
    return isShopAdmin_;
}
void Admin::setIsShopAdmin(const uint8_t &pIsShopAdmin) noexcept
{
    isShopAdmin_ = std::make_shared<uint8_t>(pIsShopAdmin);
    dirtyFlag_[19] = true;
}




const std::string &Admin::getValueOfToken() const noexcept
{
    const static std::string defaultValue = std::string();
    if(token_)
        return *token_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Admin::getToken() const noexcept
{
    return token_;
}
void Admin::setToken(const std::string &pToken) noexcept
{
    token_ = std::make_shared<std::string>(pToken);
    dirtyFlag_[20] = true;
}
void Admin::setToken(std::string &&pToken) noexcept
{
    token_ = std::make_shared<std::string>(std::move(pToken));
    dirtyFlag_[20] = true;
}


void Admin::setTokenToNull() noexcept
{
    token_.reset();
    dirtyFlag_[20] = true;
}


const ::trantor::Date &Admin::getValueOfTokenTime() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(tokenTime_)
        return *tokenTime_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Admin::getTokenTime() const noexcept
{
    return tokenTime_;
}
void Admin::setTokenTime(const ::trantor::Date &pTokenTime) noexcept
{
    tokenTime_ = std::make_shared<::trantor::Date>(pTokenTime);
    dirtyFlag_[21] = true;
}


void Admin::setTokenTimeToNull() noexcept
{
    tokenTime_.reset();
    dirtyFlag_[21] = true;
}


const int8_t &Admin::getValueOfStatus() const noexcept
{
    const static int8_t defaultValue = int8_t();
    if(status_)
        return *status_;
    return defaultValue;
}
const std::shared_ptr<int8_t> &Admin::getStatus() const noexcept
{
    return status_;
}
void Admin::setStatus(const int8_t &pStatus) noexcept
{
    status_ = std::make_shared<int8_t>(pStatus);
    dirtyFlag_[22] = true;
}




const std::string &Admin::getValueOfWeixinToken() const noexcept
{
    const static std::string defaultValue = std::string();
    if(weixinToken_)
        return *weixinToken_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Admin::getWeixinToken() const noexcept
{
    return weixinToken_;
}
void Admin::setWeixinToken(const std::string &pWeixinToken) noexcept
{
    weixinToken_ = std::make_shared<std::string>(pWeixinToken);
    dirtyFlag_[23] = true;
}
void Admin::setWeixinToken(std::string &&pWeixinToken) noexcept
{
    weixinToken_ = std::make_shared<std::string>(std::move(pWeixinToken));
    dirtyFlag_[23] = true;
}


void Admin::setWeixinTokenToNull() noexcept
{
    weixinToken_.reset();
    dirtyFlag_[23] = true;
}


const ::trantor::Date &Admin::getValueOfWeixinTokenTime() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(weixinTokenTime_)
        return *weixinTokenTime_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Admin::getWeixinTokenTime() const noexcept
{
    return weixinTokenTime_;
}
void Admin::setWeixinTokenTime(const ::trantor::Date &pWeixinTokenTime) noexcept
{
    weixinTokenTime_ = std::make_shared<::trantor::Date>(pWeixinTokenTime);
    dirtyFlag_[24] = true;
}


void Admin::setWeixinTokenTimeToNull() noexcept
{
    weixinTokenTime_.reset();
    dirtyFlag_[24] = true;
}


const int32_t &Admin::getValueOfWeixinId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(weixinId_)
        return *weixinId_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Admin::getWeixinId() const noexcept
{
    return weixinId_;
}
void Admin::setWeixinId(const int32_t &pWeixinId) noexcept
{
    weixinId_ = std::make_shared<int32_t>(pWeixinId);
    dirtyFlag_[25] = true;
}


void Admin::setWeixinIdToNull() noexcept
{
    weixinId_.reset();
    dirtyFlag_[25] = true;
}


void Admin::updateId(const uint64_t id)
{
    id_ = std::make_shared<uint64_t>(id);
}

const std::vector<std::string> &Admin::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "create_time",
        "update_time",
        "remark",
        "is_delete",
        "shop_id",
        "admin_login_name",
        "admin_password",
        "admin_phone",
        "admin_email",
        "real_name",
        "admin_avatar",
        "admin_qq",
        "admin_id",
        "manage_product",
        "admin_status",
        "session_id",
        "admin_group_ids",
        "is_admin",
        "is_shop_admin",
        "token",
        "token_time",
        "status",
        "weixin_token",
        "weixin_token_time",
        "weixin_id"
    };
    return inCols;
}

void Admin::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getCreateTime())
        {
            binder << getValueOfCreateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getUpdateTime())
        {
            binder << getValueOfUpdateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getRemark())
        {
            binder << getValueOfRemark();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getIsDelete())
        {
            binder << getValueOfIsDelete();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getShopId())
        {
            binder << getValueOfShopId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getAdminLoginName())
        {
            binder << getValueOfAdminLoginName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getAdminPassword())
        {
            binder << getValueOfAdminPassword();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getAdminPhone())
        {
            binder << getValueOfAdminPhone();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getAdminEmail())
        {
            binder << getValueOfAdminEmail();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getRealName())
        {
            binder << getValueOfRealName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getAdminAvatar())
        {
            binder << getValueOfAdminAvatar();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getAdminQq())
        {
            binder << getValueOfAdminQq();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[13])
    {
        if(getAdminId())
        {
            binder << getValueOfAdminId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[14])
    {
        if(getManageProduct())
        {
            binder << getValueOfManageProduct();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[15])
    {
        if(getAdminStatus())
        {
            binder << getValueOfAdminStatus();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[16])
    {
        if(getSessionId())
        {
            binder << getValueOfSessionId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[17])
    {
        if(getAdminGroupIds())
        {
            binder << getValueOfAdminGroupIds();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[18])
    {
        if(getIsAdmin())
        {
            binder << getValueOfIsAdmin();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[19])
    {
        if(getIsShopAdmin())
        {
            binder << getValueOfIsShopAdmin();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[20])
    {
        if(getToken())
        {
            binder << getValueOfToken();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[21])
    {
        if(getTokenTime())
        {
            binder << getValueOfTokenTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[22])
    {
        if(getStatus())
        {
            binder << getValueOfStatus();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[23])
    {
        if(getWeixinToken())
        {
            binder << getValueOfWeixinToken();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[24])
    {
        if(getWeixinTokenTime())
        {
            binder << getValueOfWeixinTokenTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[25])
    {
        if(getWeixinId())
        {
            binder << getValueOfWeixinId();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Admin::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    if(dirtyFlag_[8])
    {
        ret.push_back(getColumnName(8));
    }
    if(dirtyFlag_[9])
    {
        ret.push_back(getColumnName(9));
    }
    if(dirtyFlag_[10])
    {
        ret.push_back(getColumnName(10));
    }
    if(dirtyFlag_[11])
    {
        ret.push_back(getColumnName(11));
    }
    if(dirtyFlag_[12])
    {
        ret.push_back(getColumnName(12));
    }
    if(dirtyFlag_[13])
    {
        ret.push_back(getColumnName(13));
    }
    if(dirtyFlag_[14])
    {
        ret.push_back(getColumnName(14));
    }
    if(dirtyFlag_[15])
    {
        ret.push_back(getColumnName(15));
    }
    if(dirtyFlag_[16])
    {
        ret.push_back(getColumnName(16));
    }
    if(dirtyFlag_[17])
    {
        ret.push_back(getColumnName(17));
    }
    if(dirtyFlag_[18])
    {
        ret.push_back(getColumnName(18));
    }
    if(dirtyFlag_[19])
    {
        ret.push_back(getColumnName(19));
    }
    if(dirtyFlag_[20])
    {
        ret.push_back(getColumnName(20));
    }
    if(dirtyFlag_[21])
    {
        ret.push_back(getColumnName(21));
    }
    if(dirtyFlag_[22])
    {
        ret.push_back(getColumnName(22));
    }
    if(dirtyFlag_[23])
    {
        ret.push_back(getColumnName(23));
    }
    if(dirtyFlag_[24])
    {
        ret.push_back(getColumnName(24));
    }
    if(dirtyFlag_[25])
    {
        ret.push_back(getColumnName(25));
    }
    return ret;
}

void Admin::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getCreateTime())
        {
            binder << getValueOfCreateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getUpdateTime())
        {
            binder << getValueOfUpdateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getRemark())
        {
            binder << getValueOfRemark();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getIsDelete())
        {
            binder << getValueOfIsDelete();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getShopId())
        {
            binder << getValueOfShopId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getAdminLoginName())
        {
            binder << getValueOfAdminLoginName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getAdminPassword())
        {
            binder << getValueOfAdminPassword();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getAdminPhone())
        {
            binder << getValueOfAdminPhone();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getAdminEmail())
        {
            binder << getValueOfAdminEmail();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getRealName())
        {
            binder << getValueOfRealName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getAdminAvatar())
        {
            binder << getValueOfAdminAvatar();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getAdminQq())
        {
            binder << getValueOfAdminQq();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[13])
    {
        if(getAdminId())
        {
            binder << getValueOfAdminId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[14])
    {
        if(getManageProduct())
        {
            binder << getValueOfManageProduct();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[15])
    {
        if(getAdminStatus())
        {
            binder << getValueOfAdminStatus();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[16])
    {
        if(getSessionId())
        {
            binder << getValueOfSessionId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[17])
    {
        if(getAdminGroupIds())
        {
            binder << getValueOfAdminGroupIds();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[18])
    {
        if(getIsAdmin())
        {
            binder << getValueOfIsAdmin();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[19])
    {
        if(getIsShopAdmin())
        {
            binder << getValueOfIsShopAdmin();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[20])
    {
        if(getToken())
        {
            binder << getValueOfToken();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[21])
    {
        if(getTokenTime())
        {
            binder << getValueOfTokenTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[22])
    {
        if(getStatus())
        {
            binder << getValueOfStatus();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[23])
    {
        if(getWeixinToken())
        {
            binder << getValueOfWeixinToken();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[24])
    {
        if(getWeixinTokenTime())
        {
            binder << getValueOfWeixinTokenTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[25])
    {
        if(getWeixinId())
        {
            binder << getValueOfWeixinId();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Admin::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=(Json::UInt64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getCreateTime())
    {
        ret["create_time"]=getCreateTime()->toDbStringLocal();
    }
    else
    {
        ret["create_time"]=Json::Value();
    }
    if(getUpdateTime())
    {
        ret["update_time"]=getUpdateTime()->toDbStringLocal();
    }
    else
    {
        ret["update_time"]=Json::Value();
    }
    if(getRemark())
    {
        ret["remark"]=getValueOfRemark();
    }
    else
    {
        ret["remark"]=Json::Value();
    }
    if(getIsDelete())
    {
        ret["is_delete"]=getValueOfIsDelete();
    }
    else
    {
        ret["is_delete"]=Json::Value();
    }
    if(getShopId())
    {
        ret["shop_id"]=(Json::Int64)getValueOfShopId();
    }
    else
    {
        ret["shop_id"]=Json::Value();
    }
    if(getAdminLoginName())
    {
        ret["admin_login_name"]=getValueOfAdminLoginName();
    }
    else
    {
        ret["admin_login_name"]=Json::Value();
    }
    if(getAdminPassword())
    {
        ret["admin_password"]=getValueOfAdminPassword();
    }
    else
    {
        ret["admin_password"]=Json::Value();
    }
    if(getAdminPhone())
    {
        ret["admin_phone"]=getValueOfAdminPhone();
    }
    else
    {
        ret["admin_phone"]=Json::Value();
    }
    if(getAdminEmail())
    {
        ret["admin_email"]=getValueOfAdminEmail();
    }
    else
    {
        ret["admin_email"]=Json::Value();
    }
    if(getRealName())
    {
        ret["real_name"]=getValueOfRealName();
    }
    else
    {
        ret["real_name"]=Json::Value();
    }
    if(getAdminAvatar())
    {
        ret["admin_avatar"]=getValueOfAdminAvatar();
    }
    else
    {
        ret["admin_avatar"]=Json::Value();
    }
    if(getAdminQq())
    {
        ret["admin_qq"]=getValueOfAdminQq();
    }
    else
    {
        ret["admin_qq"]=Json::Value();
    }
    if(getAdminId())
    {
        ret["admin_id"]=(Json::Int64)getValueOfAdminId();
    }
    else
    {
        ret["admin_id"]=Json::Value();
    }
    if(getManageProduct())
    {
        ret["manage_product"]=getValueOfManageProduct();
    }
    else
    {
        ret["manage_product"]=Json::Value();
    }
    if(getAdminStatus())
    {
        ret["admin_status"]=getValueOfAdminStatus();
    }
    else
    {
        ret["admin_status"]=Json::Value();
    }
    if(getSessionId())
    {
        ret["session_id"]=getValueOfSessionId();
    }
    else
    {
        ret["session_id"]=Json::Value();
    }
    if(getAdminGroupIds())
    {
        ret["admin_group_ids"]=getValueOfAdminGroupIds();
    }
    else
    {
        ret["admin_group_ids"]=Json::Value();
    }
    if(getIsAdmin())
    {
        ret["is_admin"]=getValueOfIsAdmin();
    }
    else
    {
        ret["is_admin"]=Json::Value();
    }
    if(getIsShopAdmin())
    {
        ret["is_shop_admin"]=getValueOfIsShopAdmin();
    }
    else
    {
        ret["is_shop_admin"]=Json::Value();
    }
    if(getToken())
    {
        ret["token"]=getValueOfToken();
    }
    else
    {
        ret["token"]=Json::Value();
    }
    if(getTokenTime())
    {
        ret["token_time"]=getTokenTime()->toDbStringLocal();
    }
    else
    {
        ret["token_time"]=Json::Value();
    }
    if(getStatus())
    {
        ret["status"]=getValueOfStatus();
    }
    else
    {
        ret["status"]=Json::Value();
    }
    if(getWeixinToken())
    {
        ret["weixin_token"]=getValueOfWeixinToken();
    }
    else
    {
        ret["weixin_token"]=Json::Value();
    }
    if(getWeixinTokenTime())
    {
        ret["weixin_token_time"]=getWeixinTokenTime()->toDbStringLocal();
    }
    else
    {
        ret["weixin_token_time"]=Json::Value();
    }
    if(getWeixinId())
    {
        ret["weixin_id"]=getValueOfWeixinId();
    }
    else
    {
        ret["weixin_id"]=Json::Value();
    }
    return ret;
}

Json::Value Admin::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 26)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=(Json::UInt64)getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getCreateTime())
            {
                ret[pMasqueradingVector[1]]=getCreateTime()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getUpdateTime())
            {
                ret[pMasqueradingVector[2]]=getUpdateTime()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getRemark())
            {
                ret[pMasqueradingVector[3]]=getValueOfRemark();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getIsDelete())
            {
                ret[pMasqueradingVector[4]]=getValueOfIsDelete();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getShopId())
            {
                ret[pMasqueradingVector[5]]=(Json::Int64)getValueOfShopId();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getAdminLoginName())
            {
                ret[pMasqueradingVector[6]]=getValueOfAdminLoginName();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getAdminPassword())
            {
                ret[pMasqueradingVector[7]]=getValueOfAdminPassword();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[8].empty())
        {
            if(getAdminPhone())
            {
                ret[pMasqueradingVector[8]]=getValueOfAdminPhone();
            }
            else
            {
                ret[pMasqueradingVector[8]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[9].empty())
        {
            if(getAdminEmail())
            {
                ret[pMasqueradingVector[9]]=getValueOfAdminEmail();
            }
            else
            {
                ret[pMasqueradingVector[9]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[10].empty())
        {
            if(getRealName())
            {
                ret[pMasqueradingVector[10]]=getValueOfRealName();
            }
            else
            {
                ret[pMasqueradingVector[10]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[11].empty())
        {
            if(getAdminAvatar())
            {
                ret[pMasqueradingVector[11]]=getValueOfAdminAvatar();
            }
            else
            {
                ret[pMasqueradingVector[11]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[12].empty())
        {
            if(getAdminQq())
            {
                ret[pMasqueradingVector[12]]=getValueOfAdminQq();
            }
            else
            {
                ret[pMasqueradingVector[12]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[13].empty())
        {
            if(getAdminId())
            {
                ret[pMasqueradingVector[13]]=(Json::Int64)getValueOfAdminId();
            }
            else
            {
                ret[pMasqueradingVector[13]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[14].empty())
        {
            if(getManageProduct())
            {
                ret[pMasqueradingVector[14]]=getValueOfManageProduct();
            }
            else
            {
                ret[pMasqueradingVector[14]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[15].empty())
        {
            if(getAdminStatus())
            {
                ret[pMasqueradingVector[15]]=getValueOfAdminStatus();
            }
            else
            {
                ret[pMasqueradingVector[15]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[16].empty())
        {
            if(getSessionId())
            {
                ret[pMasqueradingVector[16]]=getValueOfSessionId();
            }
            else
            {
                ret[pMasqueradingVector[16]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[17].empty())
        {
            if(getAdminGroupIds())
            {
                ret[pMasqueradingVector[17]]=getValueOfAdminGroupIds();
            }
            else
            {
                ret[pMasqueradingVector[17]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[18].empty())
        {
            if(getIsAdmin())
            {
                ret[pMasqueradingVector[18]]=getValueOfIsAdmin();
            }
            else
            {
                ret[pMasqueradingVector[18]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[19].empty())
        {
            if(getIsShopAdmin())
            {
                ret[pMasqueradingVector[19]]=getValueOfIsShopAdmin();
            }
            else
            {
                ret[pMasqueradingVector[19]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[20].empty())
        {
            if(getToken())
            {
                ret[pMasqueradingVector[20]]=getValueOfToken();
            }
            else
            {
                ret[pMasqueradingVector[20]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[21].empty())
        {
            if(getTokenTime())
            {
                ret[pMasqueradingVector[21]]=getTokenTime()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[21]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[22].empty())
        {
            if(getStatus())
            {
                ret[pMasqueradingVector[22]]=getValueOfStatus();
            }
            else
            {
                ret[pMasqueradingVector[22]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[23].empty())
        {
            if(getWeixinToken())
            {
                ret[pMasqueradingVector[23]]=getValueOfWeixinToken();
            }
            else
            {
                ret[pMasqueradingVector[23]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[24].empty())
        {
            if(getWeixinTokenTime())
            {
                ret[pMasqueradingVector[24]]=getWeixinTokenTime()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[24]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[25].empty())
        {
            if(getWeixinId())
            {
                ret[pMasqueradingVector[25]]=getValueOfWeixinId();
            }
            else
            {
                ret[pMasqueradingVector[25]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=(Json::UInt64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getCreateTime())
    {
        ret["create_time"]=getCreateTime()->toDbStringLocal();
    }
    else
    {
        ret["create_time"]=Json::Value();
    }
    if(getUpdateTime())
    {
        ret["update_time"]=getUpdateTime()->toDbStringLocal();
    }
    else
    {
        ret["update_time"]=Json::Value();
    }
    if(getRemark())
    {
        ret["remark"]=getValueOfRemark();
    }
    else
    {
        ret["remark"]=Json::Value();
    }
    if(getIsDelete())
    {
        ret["is_delete"]=getValueOfIsDelete();
    }
    else
    {
        ret["is_delete"]=Json::Value();
    }
    if(getShopId())
    {
        ret["shop_id"]=(Json::Int64)getValueOfShopId();
    }
    else
    {
        ret["shop_id"]=Json::Value();
    }
    if(getAdminLoginName())
    {
        ret["admin_login_name"]=getValueOfAdminLoginName();
    }
    else
    {
        ret["admin_login_name"]=Json::Value();
    }
    if(getAdminPassword())
    {
        ret["admin_password"]=getValueOfAdminPassword();
    }
    else
    {
        ret["admin_password"]=Json::Value();
    }
    if(getAdminPhone())
    {
        ret["admin_phone"]=getValueOfAdminPhone();
    }
    else
    {
        ret["admin_phone"]=Json::Value();
    }
    if(getAdminEmail())
    {
        ret["admin_email"]=getValueOfAdminEmail();
    }
    else
    {
        ret["admin_email"]=Json::Value();
    }
    if(getRealName())
    {
        ret["real_name"]=getValueOfRealName();
    }
    else
    {
        ret["real_name"]=Json::Value();
    }
    if(getAdminAvatar())
    {
        ret["admin_avatar"]=getValueOfAdminAvatar();
    }
    else
    {
        ret["admin_avatar"]=Json::Value();
    }
    if(getAdminQq())
    {
        ret["admin_qq"]=getValueOfAdminQq();
    }
    else
    {
        ret["admin_qq"]=Json::Value();
    }
    if(getAdminId())
    {
        ret["admin_id"]=(Json::Int64)getValueOfAdminId();
    }
    else
    {
        ret["admin_id"]=Json::Value();
    }
    if(getManageProduct())
    {
        ret["manage_product"]=getValueOfManageProduct();
    }
    else
    {
        ret["manage_product"]=Json::Value();
    }
    if(getAdminStatus())
    {
        ret["admin_status"]=getValueOfAdminStatus();
    }
    else
    {
        ret["admin_status"]=Json::Value();
    }
    if(getSessionId())
    {
        ret["session_id"]=getValueOfSessionId();
    }
    else
    {
        ret["session_id"]=Json::Value();
    }
    if(getAdminGroupIds())
    {
        ret["admin_group_ids"]=getValueOfAdminGroupIds();
    }
    else
    {
        ret["admin_group_ids"]=Json::Value();
    }
    if(getIsAdmin())
    {
        ret["is_admin"]=getValueOfIsAdmin();
    }
    else
    {
        ret["is_admin"]=Json::Value();
    }
    if(getIsShopAdmin())
    {
        ret["is_shop_admin"]=getValueOfIsShopAdmin();
    }
    else
    {
        ret["is_shop_admin"]=Json::Value();
    }
    if(getToken())
    {
        ret["token"]=getValueOfToken();
    }
    else
    {
        ret["token"]=Json::Value();
    }
    if(getTokenTime())
    {
        ret["token_time"]=getTokenTime()->toDbStringLocal();
    }
    else
    {
        ret["token_time"]=Json::Value();
    }
    if(getStatus())
    {
        ret["status"]=getValueOfStatus();
    }
    else
    {
        ret["status"]=Json::Value();
    }
    if(getWeixinToken())
    {
        ret["weixin_token"]=getValueOfWeixinToken();
    }
    else
    {
        ret["weixin_token"]=Json::Value();
    }
    if(getWeixinTokenTime())
    {
        ret["weixin_token_time"]=getWeixinTokenTime()->toDbStringLocal();
    }
    else
    {
        ret["weixin_token_time"]=Json::Value();
    }
    if(getWeixinId())
    {
        ret["weixin_id"]=getValueOfWeixinId();
    }
    else
    {
        ret["weixin_id"]=Json::Value();
    }
    return ret;
}

bool Admin::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("create_time"))
    {
        if(!validJsonOfField(1, "create_time", pJson["create_time"], err, true))
            return false;
    }
    if(pJson.isMember("update_time"))
    {
        if(!validJsonOfField(2, "update_time", pJson["update_time"], err, true))
            return false;
    }
    if(pJson.isMember("remark"))
    {
        if(!validJsonOfField(3, "remark", pJson["remark"], err, true))
            return false;
    }
    if(pJson.isMember("is_delete"))
    {
        if(!validJsonOfField(4, "is_delete", pJson["is_delete"], err, true))
            return false;
    }
    if(pJson.isMember("shop_id"))
    {
        if(!validJsonOfField(5, "shop_id", pJson["shop_id"], err, true))
            return false;
    }
    if(pJson.isMember("admin_login_name"))
    {
        if(!validJsonOfField(6, "admin_login_name", pJson["admin_login_name"], err, true))
            return false;
    }
    else
    {
        err="The admin_login_name column cannot be null";
        return false;
    }
    if(pJson.isMember("admin_password"))
    {
        if(!validJsonOfField(7, "admin_password", pJson["admin_password"], err, true))
            return false;
    }
    if(pJson.isMember("admin_phone"))
    {
        if(!validJsonOfField(8, "admin_phone", pJson["admin_phone"], err, true))
            return false;
    }
    if(pJson.isMember("admin_email"))
    {
        if(!validJsonOfField(9, "admin_email", pJson["admin_email"], err, true))
            return false;
    }
    if(pJson.isMember("real_name"))
    {
        if(!validJsonOfField(10, "real_name", pJson["real_name"], err, true))
            return false;
    }
    if(pJson.isMember("admin_avatar"))
    {
        if(!validJsonOfField(11, "admin_avatar", pJson["admin_avatar"], err, true))
            return false;
    }
    if(pJson.isMember("admin_qq"))
    {
        if(!validJsonOfField(12, "admin_qq", pJson["admin_qq"], err, true))
            return false;
    }
    if(pJson.isMember("admin_id"))
    {
        if(!validJsonOfField(13, "admin_id", pJson["admin_id"], err, true))
            return false;
    }
    if(pJson.isMember("manage_product"))
    {
        if(!validJsonOfField(14, "manage_product", pJson["manage_product"], err, true))
            return false;
    }
    if(pJson.isMember("admin_status"))
    {
        if(!validJsonOfField(15, "admin_status", pJson["admin_status"], err, true))
            return false;
    }
    if(pJson.isMember("session_id"))
    {
        if(!validJsonOfField(16, "session_id", pJson["session_id"], err, true))
            return false;
    }
    if(pJson.isMember("admin_group_ids"))
    {
        if(!validJsonOfField(17, "admin_group_ids", pJson["admin_group_ids"], err, true))
            return false;
    }
    if(pJson.isMember("is_admin"))
    {
        if(!validJsonOfField(18, "is_admin", pJson["is_admin"], err, true))
            return false;
    }
    if(pJson.isMember("is_shop_admin"))
    {
        if(!validJsonOfField(19, "is_shop_admin", pJson["is_shop_admin"], err, true))
            return false;
    }
    if(pJson.isMember("token"))
    {
        if(!validJsonOfField(20, "token", pJson["token"], err, true))
            return false;
    }
    if(pJson.isMember("token_time"))
    {
        if(!validJsonOfField(21, "token_time", pJson["token_time"], err, true))
            return false;
    }
    if(pJson.isMember("status"))
    {
        if(!validJsonOfField(22, "status", pJson["status"], err, true))
            return false;
    }
    if(pJson.isMember("weixin_token"))
    {
        if(!validJsonOfField(23, "weixin_token", pJson["weixin_token"], err, true))
            return false;
    }
    if(pJson.isMember("weixin_token_time"))
    {
        if(!validJsonOfField(24, "weixin_token_time", pJson["weixin_token_time"], err, true))
            return false;
    }
    if(pJson.isMember("weixin_id"))
    {
        if(!validJsonOfField(25, "weixin_id", pJson["weixin_id"], err, true))
            return false;
    }
    return true;
}
bool Admin::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                               const std::vector<std::string> &pMasqueradingVector,
                                               std::string &err)
{
    if(pMasqueradingVector.size() != 26)
    {
        err = "Bad masquerading vector";
        return false;
    }
    if(!pMasqueradingVector[0].empty())
    {
        if(pJson.isMember(pMasqueradingVector[0]))
        {
            if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[1].empty())
    {
        if(pJson.isMember(pMasqueradingVector[1]))
        {
            if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[2].empty())
    {
        if(pJson.isMember(pMasqueradingVector[2]))
        {
            if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[3].empty())
    {
        if(pJson.isMember(pMasqueradingVector[3]))
        {
            if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[4].empty())
    {
        if(pJson.isMember(pMasqueradingVector[4]))
        {
            if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[5].empty())
    {
        if(pJson.isMember(pMasqueradingVector[5]))
        {
            if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[6].empty())
    {
        if(pJson.isMember(pMasqueradingVector[6]))
        {
            if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                return false;
        }
        else
        {
            err="The " + pMasqueradingVector[6] + " column cannot be null";
            return false;
        }
    }
    if(!pMasqueradingVector[7].empty())
    {
        if(pJson.isMember(pMasqueradingVector[7]))
        {
            if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[8].empty())
    {
        if(pJson.isMember(pMasqueradingVector[8]))
        {
            if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[9].empty())
    {
        if(pJson.isMember(pMasqueradingVector[9]))
        {
            if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[10].empty())
    {
        if(pJson.isMember(pMasqueradingVector[10]))
        {
            if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[11].empty())
    {
        if(pJson.isMember(pMasqueradingVector[11]))
        {
            if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[12].empty())
    {
        if(pJson.isMember(pMasqueradingVector[12]))
        {
            if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[13].empty())
    {
        if(pJson.isMember(pMasqueradingVector[13]))
        {
            if(!validJsonOfField(13, pMasqueradingVector[13], pJson[pMasqueradingVector[13]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[14].empty())
    {
        if(pJson.isMember(pMasqueradingVector[14]))
        {
            if(!validJsonOfField(14, pMasqueradingVector[14], pJson[pMasqueradingVector[14]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[15].empty())
    {
        if(pJson.isMember(pMasqueradingVector[15]))
        {
            if(!validJsonOfField(15, pMasqueradingVector[15], pJson[pMasqueradingVector[15]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[16].empty())
    {
        if(pJson.isMember(pMasqueradingVector[16]))
        {
            if(!validJsonOfField(16, pMasqueradingVector[16], pJson[pMasqueradingVector[16]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[17].empty())
    {
        if(pJson.isMember(pMasqueradingVector[17]))
        {
            if(!validJsonOfField(17, pMasqueradingVector[17], pJson[pMasqueradingVector[17]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[18].empty())
    {
        if(pJson.isMember(pMasqueradingVector[18]))
        {
            if(!validJsonOfField(18, pMasqueradingVector[18], pJson[pMasqueradingVector[18]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[19].empty())
    {
        if(pJson.isMember(pMasqueradingVector[19]))
        {
            if(!validJsonOfField(19, pMasqueradingVector[19], pJson[pMasqueradingVector[19]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[20].empty())
    {
        if(pJson.isMember(pMasqueradingVector[20]))
        {
            if(!validJsonOfField(20, pMasqueradingVector[20], pJson[pMasqueradingVector[20]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[21].empty())
    {
        if(pJson.isMember(pMasqueradingVector[21]))
        {
            if(!validJsonOfField(21, pMasqueradingVector[21], pJson[pMasqueradingVector[21]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[22].empty())
    {
        if(pJson.isMember(pMasqueradingVector[22]))
        {
            if(!validJsonOfField(22, pMasqueradingVector[22], pJson[pMasqueradingVector[22]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[23].empty())
    {
        if(pJson.isMember(pMasqueradingVector[23]))
        {
            if(!validJsonOfField(23, pMasqueradingVector[23], pJson[pMasqueradingVector[23]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[24].empty())
    {
        if(pJson.isMember(pMasqueradingVector[24]))
        {
            if(!validJsonOfField(24, pMasqueradingVector[24], pJson[pMasqueradingVector[24]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[25].empty())
    {
        if(pJson.isMember(pMasqueradingVector[25]))
        {
            if(!validJsonOfField(25, pMasqueradingVector[25], pJson[pMasqueradingVector[25]], err, true))
                return false;
        }
    }
    return true;
}
bool Admin::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("create_time"))
    {
        if(!validJsonOfField(1, "create_time", pJson["create_time"], err, false))
            return false;
    }
    if(pJson.isMember("update_time"))
    {
        if(!validJsonOfField(2, "update_time", pJson["update_time"], err, false))
            return false;
    }
    if(pJson.isMember("remark"))
    {
        if(!validJsonOfField(3, "remark", pJson["remark"], err, false))
            return false;
    }
    if(pJson.isMember("is_delete"))
    {
        if(!validJsonOfField(4, "is_delete", pJson["is_delete"], err, false))
            return false;
    }
    if(pJson.isMember("shop_id"))
    {
        if(!validJsonOfField(5, "shop_id", pJson["shop_id"], err, false))
            return false;
    }
    if(pJson.isMember("admin_login_name"))
    {
        if(!validJsonOfField(6, "admin_login_name", pJson["admin_login_name"], err, false))
            return false;
    }
    if(pJson.isMember("admin_password"))
    {
        if(!validJsonOfField(7, "admin_password", pJson["admin_password"], err, false))
            return false;
    }
    if(pJson.isMember("admin_phone"))
    {
        if(!validJsonOfField(8, "admin_phone", pJson["admin_phone"], err, false))
            return false;
    }
    if(pJson.isMember("admin_email"))
    {
        if(!validJsonOfField(9, "admin_email", pJson["admin_email"], err, false))
            return false;
    }
    if(pJson.isMember("real_name"))
    {
        if(!validJsonOfField(10, "real_name", pJson["real_name"], err, false))
            return false;
    }
    if(pJson.isMember("admin_avatar"))
    {
        if(!validJsonOfField(11, "admin_avatar", pJson["admin_avatar"], err, false))
            return false;
    }
    if(pJson.isMember("admin_qq"))
    {
        if(!validJsonOfField(12, "admin_qq", pJson["admin_qq"], err, false))
            return false;
    }
    if(pJson.isMember("admin_id"))
    {
        if(!validJsonOfField(13, "admin_id", pJson["admin_id"], err, false))
            return false;
    }
    if(pJson.isMember("manage_product"))
    {
        if(!validJsonOfField(14, "manage_product", pJson["manage_product"], err, false))
            return false;
    }
    if(pJson.isMember("admin_status"))
    {
        if(!validJsonOfField(15, "admin_status", pJson["admin_status"], err, false))
            return false;
    }
    if(pJson.isMember("session_id"))
    {
        if(!validJsonOfField(16, "session_id", pJson["session_id"], err, false))
            return false;
    }
    if(pJson.isMember("admin_group_ids"))
    {
        if(!validJsonOfField(17, "admin_group_ids", pJson["admin_group_ids"], err, false))
            return false;
    }
    if(pJson.isMember("is_admin"))
    {
        if(!validJsonOfField(18, "is_admin", pJson["is_admin"], err, false))
            return false;
    }
    if(pJson.isMember("is_shop_admin"))
    {
        if(!validJsonOfField(19, "is_shop_admin", pJson["is_shop_admin"], err, false))
            return false;
    }
    if(pJson.isMember("token"))
    {
        if(!validJsonOfField(20, "token", pJson["token"], err, false))
            return false;
    }
    if(pJson.isMember("token_time"))
    {
        if(!validJsonOfField(21, "token_time", pJson["token_time"], err, false))
            return false;
    }
    if(pJson.isMember("status"))
    {
        if(!validJsonOfField(22, "status", pJson["status"], err, false))
            return false;
    }
    if(pJson.isMember("weixin_token"))
    {
        if(!validJsonOfField(23, "weixin_token", pJson["weixin_token"], err, false))
            return false;
    }
    if(pJson.isMember("weixin_token_time"))
    {
        if(!validJsonOfField(24, "weixin_token_time", pJson["weixin_token_time"], err, false))
            return false;
    }
    if(pJson.isMember("weixin_id"))
    {
        if(!validJsonOfField(25, "weixin_id", pJson["weixin_id"], err, false))
            return false;
    }
    return true;
}
bool Admin::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                             const std::vector<std::string> &pMasqueradingVector,
                                             std::string &err)
{
    if(pMasqueradingVector.size() != 26)
    {
        err = "Bad masquerading vector";
        return false;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
            return false;
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
            return false;
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
            return false;
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
            return false;
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
            return false;
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
            return false;
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
            return false;
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, false))
            return false;
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, false))
            return false;
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, false))
            return false;
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, false))
            return false;
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, false))
            return false;
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        if(!validJsonOfField(13, pMasqueradingVector[13], pJson[pMasqueradingVector[13]], err, false))
            return false;
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        if(!validJsonOfField(14, pMasqueradingVector[14], pJson[pMasqueradingVector[14]], err, false))
            return false;
    }
    if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
    {
        if(!validJsonOfField(15, pMasqueradingVector[15], pJson[pMasqueradingVector[15]], err, false))
            return false;
    }
    if(!pMasqueradingVector[16].empty() && pJson.isMember(pMasqueradingVector[16]))
    {
        if(!validJsonOfField(16, pMasqueradingVector[16], pJson[pMasqueradingVector[16]], err, false))
            return false;
    }
    if(!pMasqueradingVector[17].empty() && pJson.isMember(pMasqueradingVector[17]))
    {
        if(!validJsonOfField(17, pMasqueradingVector[17], pJson[pMasqueradingVector[17]], err, false))
            return false;
    }
    if(!pMasqueradingVector[18].empty() && pJson.isMember(pMasqueradingVector[18]))
    {
        if(!validJsonOfField(18, pMasqueradingVector[18], pJson[pMasqueradingVector[18]], err, false))
            return false;
    }
    if(!pMasqueradingVector[19].empty() && pJson.isMember(pMasqueradingVector[19]))
    {
        if(!validJsonOfField(19, pMasqueradingVector[19], pJson[pMasqueradingVector[19]], err, false))
            return false;
    }
    if(!pMasqueradingVector[20].empty() && pJson.isMember(pMasqueradingVector[20]))
    {
        if(!validJsonOfField(20, pMasqueradingVector[20], pJson[pMasqueradingVector[20]], err, false))
            return false;
    }
    if(!pMasqueradingVector[21].empty() && pJson.isMember(pMasqueradingVector[21]))
    {
        if(!validJsonOfField(21, pMasqueradingVector[21], pJson[pMasqueradingVector[21]], err, false))
            return false;
    }
    if(!pMasqueradingVector[22].empty() && pJson.isMember(pMasqueradingVector[22]))
    {
        if(!validJsonOfField(22, pMasqueradingVector[22], pJson[pMasqueradingVector[22]], err, false))
            return false;
    }
    if(!pMasqueradingVector[23].empty() && pJson.isMember(pMasqueradingVector[23]))
    {
        if(!validJsonOfField(23, pMasqueradingVector[23], pJson[pMasqueradingVector[23]], err, false))
            return false;
    }
    if(!pMasqueradingVector[24].empty() && pJson.isMember(pMasqueradingVector[24]))
    {
        if(!validJsonOfField(24, pMasqueradingVector[24], pJson[pMasqueradingVector[24]], err, false))
            return false;
    }
    if(!pMasqueradingVector[25].empty() && pJson.isMember(pMasqueradingVector[25]))
    {
        if(!validJsonOfField(25, pMasqueradingVector[25], pJson[pMasqueradingVector[25]], err, false))
            return false;
    }
    return true;
}
bool Admin::validJsonOfField(size_t index,
                             const std::string &fieldName,
                             const Json::Value &pJson, 
                             std::string &err, 
                             bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }        
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 200)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 200)";
                return false;               
            }

            break;
        case 4:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 5:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 6:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 20)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 20)";
                return false;               
            }

            break;
        case 7:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 32)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 32)";
                return false;               
            }

            break;
        case 8:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 20)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 20)";
                return false;               
            }

            break;
        case 9:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 50)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 50)";
                return false;               
            }

            break;
        case 10:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 20)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 20)";
                return false;               
            }

            break;
        case 11:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 100)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 100)";
                return false;               
            }

            break;
        case 12:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 20)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 20)";
                return false;               
            }

            break;
        case 13:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 14:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 200)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 200)";
                return false;               
            }

            break;
        case 15:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 16:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 50)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 50)";
                return false;               
            }

            break;
        case 17:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 500)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 500)";
                return false;               
            }

            break;
        case 18:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 19:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 20:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 32)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 32)";
                return false;               
            }

            break;
        case 21:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 22:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 23:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 32)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 32)";
                return false;               
            }

            break;
        case 24:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 25:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
     
        default:
            err="Internal error in the server";
            return false;
            break;
    }
    return true;
}
