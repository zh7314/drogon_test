/**
 *
 *  SaleOrderSku.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "SaleOrderSku.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::v2;

const std::string SaleOrderSku::Cols::_id = "id";
const std::string SaleOrderSku::Cols::_create_time = "create_time";
const std::string SaleOrderSku::Cols::_update_time = "update_time";
const std::string SaleOrderSku::Cols::_remark = "remark";
const std::string SaleOrderSku::Cols::_is_delete = "is_delete";
const std::string SaleOrderSku::Cols::_shop_id = "shop_id";
const std::string SaleOrderSku::Cols::_sale_order_id = "sale_order_id";
const std::string SaleOrderSku::Cols::_sale_order_key = "sale_order_key";
const std::string SaleOrderSku::Cols::_company_id = "company_id";
const std::string SaleOrderSku::Cols::_product_history_info = "product_history_info";
const std::string SaleOrderSku::Cols::_product_brand_id = "product_brand_id";
const std::string SaleOrderSku::Cols::_product_id = "product_id";
const std::string SaleOrderSku::Cols::_product_category_id = "product_category_id";
const std::string SaleOrderSku::Cols::_product_model_id = "product_model_id";
const std::string SaleOrderSku::Cols::_sale_price = "sale_price";
const std::string SaleOrderSku::Cols::_sale_num = "sale_num";
const std::string SaleOrderSku::Cols::_deliver_type = "deliver_type";
const std::string SaleOrderSku::Cols::_admin_id = "admin_id";
const std::string SaleOrderSku::Cols::_receipt_province_id = "receipt_province_id";
const std::string SaleOrderSku::Cols::_receipt_city_id = "receipt_city_id";
const std::string SaleOrderSku::Cols::_receipt_area_id = "receipt_area_id";
const std::string SaleOrderSku::Cols::_receipt_address = "receipt_address";
const std::string SaleOrderSku::Cols::_order_status = "order_status";
const std::string SaleOrderSku::Cols::_quote_price_id = "quote_price_id";
const std::string SaleOrderSku::Cols::_deliver_time = "deliver_time";
const std::string SaleOrderSku::Cols::_deliver_place = "deliver_place";
const std::string SaleOrderSku::Cols::_point_num = "point_num";
const std::string SaleOrderSku::primaryKeyName = "id";
const bool SaleOrderSku::hasPrimaryKey = true;
const std::string SaleOrderSku::tableName = "sale_order_sku";

const std::vector<typename SaleOrderSku::MetaData> SaleOrderSku::metaData_={
{"id","uint64_t","bigint(20) unsigned",8,1,1,1},
{"create_time","::trantor::Date","datetime",0,0,0,1},
{"update_time","::trantor::Date","datetime",0,0,0,1},
{"remark","std::string","varchar(200)",200,0,0,0},
{"is_delete","uint8_t","tinyint(1) unsigned",1,0,0,1},
{"shop_id","uint64_t","bigint(20) unsigned",8,0,0,1},
{"sale_order_id","int64_t","bigint(20)",8,0,0,1},
{"sale_order_key","std::string","varchar(20)",20,0,0,0},
{"company_id","int64_t","bigint(20)",8,0,0,1},
{"product_history_info","std::string","text",0,0,0,0},
{"product_brand_id","uint64_t","bigint(20) unsigned",8,0,0,1},
{"product_id","uint64_t","bigint(20) unsigned",8,0,0,1},
{"product_category_id","uint64_t","bigint(20) unsigned",8,0,0,1},
{"product_model_id","uint64_t","bigint(20) unsigned",8,0,0,1},
{"sale_price","std::string","decimal(32,5)",0,0,0,1},
{"sale_num","std::string","decimal(32,5)",0,0,0,1},
{"deliver_type","uint8_t","tinyint(1) unsigned",1,0,0,1},
{"admin_id","uint64_t","bigint(20) unsigned",8,0,0,1},
{"receipt_province_id","int64_t","bigint(20)",8,0,0,1},
{"receipt_city_id","int64_t","bigint(20)",8,0,0,1},
{"receipt_area_id","int64_t","bigint(20)",8,0,0,1},
{"receipt_address","std::string","varchar(100)",100,0,0,0},
{"order_status","uint8_t","tinyint(1) unsigned",1,0,0,1},
{"quote_price_id","int64_t","bigint(20)",8,0,0,1},
{"deliver_time","::trantor::Date","datetime",0,0,0,0},
{"deliver_place","std::string","varchar(50)",50,0,0,0},
{"point_num","std::string","decimal(32,5)",0,0,0,1}
};
const std::string &SaleOrderSku::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
SaleOrderSku::SaleOrderSku(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<uint64_t>(r["id"].as<uint64_t>());
        }
        if(!r["create_time"].isNull())
        {
            auto timeStr = r["create_time"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        if(!r["update_time"].isNull())
        {
            auto timeStr = r["update_time"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        if(!r["remark"].isNull())
        {
            remark_=std::make_shared<std::string>(r["remark"].as<std::string>());
        }
        if(!r["is_delete"].isNull())
        {
            isDelete_=std::make_shared<uint8_t>(r["is_delete"].as<uint8_t>());
        }
        if(!r["shop_id"].isNull())
        {
            shopId_=std::make_shared<uint64_t>(r["shop_id"].as<uint64_t>());
        }
        if(!r["sale_order_id"].isNull())
        {
            saleOrderId_=std::make_shared<int64_t>(r["sale_order_id"].as<int64_t>());
        }
        if(!r["sale_order_key"].isNull())
        {
            saleOrderKey_=std::make_shared<std::string>(r["sale_order_key"].as<std::string>());
        }
        if(!r["company_id"].isNull())
        {
            companyId_=std::make_shared<int64_t>(r["company_id"].as<int64_t>());
        }
        if(!r["product_history_info"].isNull())
        {
            productHistoryInfo_=std::make_shared<std::string>(r["product_history_info"].as<std::string>());
        }
        if(!r["product_brand_id"].isNull())
        {
            productBrandId_=std::make_shared<uint64_t>(r["product_brand_id"].as<uint64_t>());
        }
        if(!r["product_id"].isNull())
        {
            productId_=std::make_shared<uint64_t>(r["product_id"].as<uint64_t>());
        }
        if(!r["product_category_id"].isNull())
        {
            productCategoryId_=std::make_shared<uint64_t>(r["product_category_id"].as<uint64_t>());
        }
        if(!r["product_model_id"].isNull())
        {
            productModelId_=std::make_shared<uint64_t>(r["product_model_id"].as<uint64_t>());
        }
        if(!r["sale_price"].isNull())
        {
            salePrice_=std::make_shared<std::string>(r["sale_price"].as<std::string>());
        }
        if(!r["sale_num"].isNull())
        {
            saleNum_=std::make_shared<std::string>(r["sale_num"].as<std::string>());
        }
        if(!r["deliver_type"].isNull())
        {
            deliverType_=std::make_shared<uint8_t>(r["deliver_type"].as<uint8_t>());
        }
        if(!r["admin_id"].isNull())
        {
            adminId_=std::make_shared<uint64_t>(r["admin_id"].as<uint64_t>());
        }
        if(!r["receipt_province_id"].isNull())
        {
            receiptProvinceId_=std::make_shared<int64_t>(r["receipt_province_id"].as<int64_t>());
        }
        if(!r["receipt_city_id"].isNull())
        {
            receiptCityId_=std::make_shared<int64_t>(r["receipt_city_id"].as<int64_t>());
        }
        if(!r["receipt_area_id"].isNull())
        {
            receiptAreaId_=std::make_shared<int64_t>(r["receipt_area_id"].as<int64_t>());
        }
        if(!r["receipt_address"].isNull())
        {
            receiptAddress_=std::make_shared<std::string>(r["receipt_address"].as<std::string>());
        }
        if(!r["order_status"].isNull())
        {
            orderStatus_=std::make_shared<uint8_t>(r["order_status"].as<uint8_t>());
        }
        if(!r["quote_price_id"].isNull())
        {
            quotePriceId_=std::make_shared<int64_t>(r["quote_price_id"].as<int64_t>());
        }
        if(!r["deliver_time"].isNull())
        {
            auto timeStr = r["deliver_time"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            deliverTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        if(!r["deliver_place"].isNull())
        {
            deliverPlace_=std::make_shared<std::string>(r["deliver_place"].as<std::string>());
        }
        if(!r["point_num"].isNull())
        {
            pointNum_=std::make_shared<std::string>(r["point_num"].as<std::string>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 27 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            remark_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            isDelete_=std::make_shared<uint8_t>(r[index].as<uint8_t>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            shopId_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            saleOrderId_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            saleOrderKey_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 8;
        if(!r[index].isNull())
        {
            companyId_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 9;
        if(!r[index].isNull())
        {
            productHistoryInfo_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 10;
        if(!r[index].isNull())
        {
            productBrandId_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 11;
        if(!r[index].isNull())
        {
            productId_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 12;
        if(!r[index].isNull())
        {
            productCategoryId_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 13;
        if(!r[index].isNull())
        {
            productModelId_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 14;
        if(!r[index].isNull())
        {
            salePrice_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 15;
        if(!r[index].isNull())
        {
            saleNum_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 16;
        if(!r[index].isNull())
        {
            deliverType_=std::make_shared<uint8_t>(r[index].as<uint8_t>());
        }
        index = offset + 17;
        if(!r[index].isNull())
        {
            adminId_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 18;
        if(!r[index].isNull())
        {
            receiptProvinceId_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 19;
        if(!r[index].isNull())
        {
            receiptCityId_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 20;
        if(!r[index].isNull())
        {
            receiptAreaId_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 21;
        if(!r[index].isNull())
        {
            receiptAddress_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 22;
        if(!r[index].isNull())
        {
            orderStatus_=std::make_shared<uint8_t>(r[index].as<uint8_t>());
        }
        index = offset + 23;
        if(!r[index].isNull())
        {
            quotePriceId_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 24;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            deliverTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        index = offset + 25;
        if(!r[index].isNull())
        {
            deliverPlace_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 26;
        if(!r[index].isNull())
        {
            pointNum_=std::make_shared<std::string>(r[index].as<std::string>());
        }
    }

}

SaleOrderSku::SaleOrderSku(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 27)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[1]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[2]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            remark_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            isDelete_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[4]].asUInt64());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            shopId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[5]].asUInt64());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            saleOrderId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[6]].asInt64());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            saleOrderKey_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            companyId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[8]].asInt64());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            productHistoryInfo_=std::make_shared<std::string>(pJson[pMasqueradingVector[9]].asString());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            productBrandId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[10]].asUInt64());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            productId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[11]].asUInt64());
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            productCategoryId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[12]].asUInt64());
        }
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        dirtyFlag_[13] = true;
        if(!pJson[pMasqueradingVector[13]].isNull())
        {
            productModelId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[13]].asUInt64());
        }
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        dirtyFlag_[14] = true;
        if(!pJson[pMasqueradingVector[14]].isNull())
        {
            salePrice_=std::make_shared<std::string>(pJson[pMasqueradingVector[14]].asString());
        }
    }
    if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
    {
        dirtyFlag_[15] = true;
        if(!pJson[pMasqueradingVector[15]].isNull())
        {
            saleNum_=std::make_shared<std::string>(pJson[pMasqueradingVector[15]].asString());
        }
    }
    if(!pMasqueradingVector[16].empty() && pJson.isMember(pMasqueradingVector[16]))
    {
        dirtyFlag_[16] = true;
        if(!pJson[pMasqueradingVector[16]].isNull())
        {
            deliverType_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[16]].asUInt64());
        }
    }
    if(!pMasqueradingVector[17].empty() && pJson.isMember(pMasqueradingVector[17]))
    {
        dirtyFlag_[17] = true;
        if(!pJson[pMasqueradingVector[17]].isNull())
        {
            adminId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[17]].asUInt64());
        }
    }
    if(!pMasqueradingVector[18].empty() && pJson.isMember(pMasqueradingVector[18]))
    {
        dirtyFlag_[18] = true;
        if(!pJson[pMasqueradingVector[18]].isNull())
        {
            receiptProvinceId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[18]].asInt64());
        }
    }
    if(!pMasqueradingVector[19].empty() && pJson.isMember(pMasqueradingVector[19]))
    {
        dirtyFlag_[19] = true;
        if(!pJson[pMasqueradingVector[19]].isNull())
        {
            receiptCityId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[19]].asInt64());
        }
    }
    if(!pMasqueradingVector[20].empty() && pJson.isMember(pMasqueradingVector[20]))
    {
        dirtyFlag_[20] = true;
        if(!pJson[pMasqueradingVector[20]].isNull())
        {
            receiptAreaId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[20]].asInt64());
        }
    }
    if(!pMasqueradingVector[21].empty() && pJson.isMember(pMasqueradingVector[21]))
    {
        dirtyFlag_[21] = true;
        if(!pJson[pMasqueradingVector[21]].isNull())
        {
            receiptAddress_=std::make_shared<std::string>(pJson[pMasqueradingVector[21]].asString());
        }
    }
    if(!pMasqueradingVector[22].empty() && pJson.isMember(pMasqueradingVector[22]))
    {
        dirtyFlag_[22] = true;
        if(!pJson[pMasqueradingVector[22]].isNull())
        {
            orderStatus_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[22]].asUInt64());
        }
    }
    if(!pMasqueradingVector[23].empty() && pJson.isMember(pMasqueradingVector[23]))
    {
        dirtyFlag_[23] = true;
        if(!pJson[pMasqueradingVector[23]].isNull())
        {
            quotePriceId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[23]].asInt64());
        }
    }
    if(!pMasqueradingVector[24].empty() && pJson.isMember(pMasqueradingVector[24]))
    {
        dirtyFlag_[24] = true;
        if(!pJson[pMasqueradingVector[24]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[24]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            deliverTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[25].empty() && pJson.isMember(pMasqueradingVector[25]))
    {
        dirtyFlag_[25] = true;
        if(!pJson[pMasqueradingVector[25]].isNull())
        {
            deliverPlace_=std::make_shared<std::string>(pJson[pMasqueradingVector[25]].asString());
        }
    }
    if(!pMasqueradingVector[26].empty() && pJson.isMember(pMasqueradingVector[26]))
    {
        dirtyFlag_[26] = true;
        if(!pJson[pMasqueradingVector[26]].isNull())
        {
            pointNum_=std::make_shared<std::string>(pJson[pMasqueradingVector[26]].asString());
        }
    }
}

SaleOrderSku::SaleOrderSku(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson["id"].asUInt64());
        }
    }
    if(pJson.isMember("create_time"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["create_time"].isNull())
        {
            auto timeStr = pJson["create_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("update_time"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["update_time"].isNull())
        {
            auto timeStr = pJson["update_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("remark"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["remark"].isNull())
        {
            remark_=std::make_shared<std::string>(pJson["remark"].asString());
        }
    }
    if(pJson.isMember("is_delete"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["is_delete"].isNull())
        {
            isDelete_=std::make_shared<uint8_t>((uint8_t)pJson["is_delete"].asUInt64());
        }
    }
    if(pJson.isMember("shop_id"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["shop_id"].isNull())
        {
            shopId_=std::make_shared<uint64_t>((uint64_t)pJson["shop_id"].asUInt64());
        }
    }
    if(pJson.isMember("sale_order_id"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["sale_order_id"].isNull())
        {
            saleOrderId_=std::make_shared<int64_t>((int64_t)pJson["sale_order_id"].asInt64());
        }
    }
    if(pJson.isMember("sale_order_key"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["sale_order_key"].isNull())
        {
            saleOrderKey_=std::make_shared<std::string>(pJson["sale_order_key"].asString());
        }
    }
    if(pJson.isMember("company_id"))
    {
        dirtyFlag_[8]=true;
        if(!pJson["company_id"].isNull())
        {
            companyId_=std::make_shared<int64_t>((int64_t)pJson["company_id"].asInt64());
        }
    }
    if(pJson.isMember("product_history_info"))
    {
        dirtyFlag_[9]=true;
        if(!pJson["product_history_info"].isNull())
        {
            productHistoryInfo_=std::make_shared<std::string>(pJson["product_history_info"].asString());
        }
    }
    if(pJson.isMember("product_brand_id"))
    {
        dirtyFlag_[10]=true;
        if(!pJson["product_brand_id"].isNull())
        {
            productBrandId_=std::make_shared<uint64_t>((uint64_t)pJson["product_brand_id"].asUInt64());
        }
    }
    if(pJson.isMember("product_id"))
    {
        dirtyFlag_[11]=true;
        if(!pJson["product_id"].isNull())
        {
            productId_=std::make_shared<uint64_t>((uint64_t)pJson["product_id"].asUInt64());
        }
    }
    if(pJson.isMember("product_category_id"))
    {
        dirtyFlag_[12]=true;
        if(!pJson["product_category_id"].isNull())
        {
            productCategoryId_=std::make_shared<uint64_t>((uint64_t)pJson["product_category_id"].asUInt64());
        }
    }
    if(pJson.isMember("product_model_id"))
    {
        dirtyFlag_[13]=true;
        if(!pJson["product_model_id"].isNull())
        {
            productModelId_=std::make_shared<uint64_t>((uint64_t)pJson["product_model_id"].asUInt64());
        }
    }
    if(pJson.isMember("sale_price"))
    {
        dirtyFlag_[14]=true;
        if(!pJson["sale_price"].isNull())
        {
            salePrice_=std::make_shared<std::string>(pJson["sale_price"].asString());
        }
    }
    if(pJson.isMember("sale_num"))
    {
        dirtyFlag_[15]=true;
        if(!pJson["sale_num"].isNull())
        {
            saleNum_=std::make_shared<std::string>(pJson["sale_num"].asString());
        }
    }
    if(pJson.isMember("deliver_type"))
    {
        dirtyFlag_[16]=true;
        if(!pJson["deliver_type"].isNull())
        {
            deliverType_=std::make_shared<uint8_t>((uint8_t)pJson["deliver_type"].asUInt64());
        }
    }
    if(pJson.isMember("admin_id"))
    {
        dirtyFlag_[17]=true;
        if(!pJson["admin_id"].isNull())
        {
            adminId_=std::make_shared<uint64_t>((uint64_t)pJson["admin_id"].asUInt64());
        }
    }
    if(pJson.isMember("receipt_province_id"))
    {
        dirtyFlag_[18]=true;
        if(!pJson["receipt_province_id"].isNull())
        {
            receiptProvinceId_=std::make_shared<int64_t>((int64_t)pJson["receipt_province_id"].asInt64());
        }
    }
    if(pJson.isMember("receipt_city_id"))
    {
        dirtyFlag_[19]=true;
        if(!pJson["receipt_city_id"].isNull())
        {
            receiptCityId_=std::make_shared<int64_t>((int64_t)pJson["receipt_city_id"].asInt64());
        }
    }
    if(pJson.isMember("receipt_area_id"))
    {
        dirtyFlag_[20]=true;
        if(!pJson["receipt_area_id"].isNull())
        {
            receiptAreaId_=std::make_shared<int64_t>((int64_t)pJson["receipt_area_id"].asInt64());
        }
    }
    if(pJson.isMember("receipt_address"))
    {
        dirtyFlag_[21]=true;
        if(!pJson["receipt_address"].isNull())
        {
            receiptAddress_=std::make_shared<std::string>(pJson["receipt_address"].asString());
        }
    }
    if(pJson.isMember("order_status"))
    {
        dirtyFlag_[22]=true;
        if(!pJson["order_status"].isNull())
        {
            orderStatus_=std::make_shared<uint8_t>((uint8_t)pJson["order_status"].asUInt64());
        }
    }
    if(pJson.isMember("quote_price_id"))
    {
        dirtyFlag_[23]=true;
        if(!pJson["quote_price_id"].isNull())
        {
            quotePriceId_=std::make_shared<int64_t>((int64_t)pJson["quote_price_id"].asInt64());
        }
    }
    if(pJson.isMember("deliver_time"))
    {
        dirtyFlag_[24]=true;
        if(!pJson["deliver_time"].isNull())
        {
            auto timeStr = pJson["deliver_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            deliverTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("deliver_place"))
    {
        dirtyFlag_[25]=true;
        if(!pJson["deliver_place"].isNull())
        {
            deliverPlace_=std::make_shared<std::string>(pJson["deliver_place"].asString());
        }
    }
    if(pJson.isMember("point_num"))
    {
        dirtyFlag_[26]=true;
        if(!pJson["point_num"].isNull())
        {
            pointNum_=std::make_shared<std::string>(pJson["point_num"].asString());
        }
    }
}

void SaleOrderSku::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 27)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[1]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[2]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            remark_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            isDelete_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[4]].asUInt64());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            shopId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[5]].asUInt64());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            saleOrderId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[6]].asInt64());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            saleOrderKey_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            companyId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[8]].asInt64());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            productHistoryInfo_=std::make_shared<std::string>(pJson[pMasqueradingVector[9]].asString());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            productBrandId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[10]].asUInt64());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            productId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[11]].asUInt64());
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            productCategoryId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[12]].asUInt64());
        }
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        dirtyFlag_[13] = true;
        if(!pJson[pMasqueradingVector[13]].isNull())
        {
            productModelId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[13]].asUInt64());
        }
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        dirtyFlag_[14] = true;
        if(!pJson[pMasqueradingVector[14]].isNull())
        {
            salePrice_=std::make_shared<std::string>(pJson[pMasqueradingVector[14]].asString());
        }
    }
    if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
    {
        dirtyFlag_[15] = true;
        if(!pJson[pMasqueradingVector[15]].isNull())
        {
            saleNum_=std::make_shared<std::string>(pJson[pMasqueradingVector[15]].asString());
        }
    }
    if(!pMasqueradingVector[16].empty() && pJson.isMember(pMasqueradingVector[16]))
    {
        dirtyFlag_[16] = true;
        if(!pJson[pMasqueradingVector[16]].isNull())
        {
            deliverType_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[16]].asUInt64());
        }
    }
    if(!pMasqueradingVector[17].empty() && pJson.isMember(pMasqueradingVector[17]))
    {
        dirtyFlag_[17] = true;
        if(!pJson[pMasqueradingVector[17]].isNull())
        {
            adminId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[17]].asUInt64());
        }
    }
    if(!pMasqueradingVector[18].empty() && pJson.isMember(pMasqueradingVector[18]))
    {
        dirtyFlag_[18] = true;
        if(!pJson[pMasqueradingVector[18]].isNull())
        {
            receiptProvinceId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[18]].asInt64());
        }
    }
    if(!pMasqueradingVector[19].empty() && pJson.isMember(pMasqueradingVector[19]))
    {
        dirtyFlag_[19] = true;
        if(!pJson[pMasqueradingVector[19]].isNull())
        {
            receiptCityId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[19]].asInt64());
        }
    }
    if(!pMasqueradingVector[20].empty() && pJson.isMember(pMasqueradingVector[20]))
    {
        dirtyFlag_[20] = true;
        if(!pJson[pMasqueradingVector[20]].isNull())
        {
            receiptAreaId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[20]].asInt64());
        }
    }
    if(!pMasqueradingVector[21].empty() && pJson.isMember(pMasqueradingVector[21]))
    {
        dirtyFlag_[21] = true;
        if(!pJson[pMasqueradingVector[21]].isNull())
        {
            receiptAddress_=std::make_shared<std::string>(pJson[pMasqueradingVector[21]].asString());
        }
    }
    if(!pMasqueradingVector[22].empty() && pJson.isMember(pMasqueradingVector[22]))
    {
        dirtyFlag_[22] = true;
        if(!pJson[pMasqueradingVector[22]].isNull())
        {
            orderStatus_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[22]].asUInt64());
        }
    }
    if(!pMasqueradingVector[23].empty() && pJson.isMember(pMasqueradingVector[23]))
    {
        dirtyFlag_[23] = true;
        if(!pJson[pMasqueradingVector[23]].isNull())
        {
            quotePriceId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[23]].asInt64());
        }
    }
    if(!pMasqueradingVector[24].empty() && pJson.isMember(pMasqueradingVector[24]))
    {
        dirtyFlag_[24] = true;
        if(!pJson[pMasqueradingVector[24]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[24]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            deliverTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[25].empty() && pJson.isMember(pMasqueradingVector[25]))
    {
        dirtyFlag_[25] = true;
        if(!pJson[pMasqueradingVector[25]].isNull())
        {
            deliverPlace_=std::make_shared<std::string>(pJson[pMasqueradingVector[25]].asString());
        }
    }
    if(!pMasqueradingVector[26].empty() && pJson.isMember(pMasqueradingVector[26]))
    {
        dirtyFlag_[26] = true;
        if(!pJson[pMasqueradingVector[26]].isNull())
        {
            pointNum_=std::make_shared<std::string>(pJson[pMasqueradingVector[26]].asString());
        }
    }
}
                                                                    
void SaleOrderSku::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson["id"].asUInt64());
        }
    }
    if(pJson.isMember("create_time"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["create_time"].isNull())
        {
            auto timeStr = pJson["create_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("update_time"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["update_time"].isNull())
        {
            auto timeStr = pJson["update_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("remark"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["remark"].isNull())
        {
            remark_=std::make_shared<std::string>(pJson["remark"].asString());
        }
    }
    if(pJson.isMember("is_delete"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["is_delete"].isNull())
        {
            isDelete_=std::make_shared<uint8_t>((uint8_t)pJson["is_delete"].asUInt64());
        }
    }
    if(pJson.isMember("shop_id"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["shop_id"].isNull())
        {
            shopId_=std::make_shared<uint64_t>((uint64_t)pJson["shop_id"].asUInt64());
        }
    }
    if(pJson.isMember("sale_order_id"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["sale_order_id"].isNull())
        {
            saleOrderId_=std::make_shared<int64_t>((int64_t)pJson["sale_order_id"].asInt64());
        }
    }
    if(pJson.isMember("sale_order_key"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["sale_order_key"].isNull())
        {
            saleOrderKey_=std::make_shared<std::string>(pJson["sale_order_key"].asString());
        }
    }
    if(pJson.isMember("company_id"))
    {
        dirtyFlag_[8] = true;
        if(!pJson["company_id"].isNull())
        {
            companyId_=std::make_shared<int64_t>((int64_t)pJson["company_id"].asInt64());
        }
    }
    if(pJson.isMember("product_history_info"))
    {
        dirtyFlag_[9] = true;
        if(!pJson["product_history_info"].isNull())
        {
            productHistoryInfo_=std::make_shared<std::string>(pJson["product_history_info"].asString());
        }
    }
    if(pJson.isMember("product_brand_id"))
    {
        dirtyFlag_[10] = true;
        if(!pJson["product_brand_id"].isNull())
        {
            productBrandId_=std::make_shared<uint64_t>((uint64_t)pJson["product_brand_id"].asUInt64());
        }
    }
    if(pJson.isMember("product_id"))
    {
        dirtyFlag_[11] = true;
        if(!pJson["product_id"].isNull())
        {
            productId_=std::make_shared<uint64_t>((uint64_t)pJson["product_id"].asUInt64());
        }
    }
    if(pJson.isMember("product_category_id"))
    {
        dirtyFlag_[12] = true;
        if(!pJson["product_category_id"].isNull())
        {
            productCategoryId_=std::make_shared<uint64_t>((uint64_t)pJson["product_category_id"].asUInt64());
        }
    }
    if(pJson.isMember("product_model_id"))
    {
        dirtyFlag_[13] = true;
        if(!pJson["product_model_id"].isNull())
        {
            productModelId_=std::make_shared<uint64_t>((uint64_t)pJson["product_model_id"].asUInt64());
        }
    }
    if(pJson.isMember("sale_price"))
    {
        dirtyFlag_[14] = true;
        if(!pJson["sale_price"].isNull())
        {
            salePrice_=std::make_shared<std::string>(pJson["sale_price"].asString());
        }
    }
    if(pJson.isMember("sale_num"))
    {
        dirtyFlag_[15] = true;
        if(!pJson["sale_num"].isNull())
        {
            saleNum_=std::make_shared<std::string>(pJson["sale_num"].asString());
        }
    }
    if(pJson.isMember("deliver_type"))
    {
        dirtyFlag_[16] = true;
        if(!pJson["deliver_type"].isNull())
        {
            deliverType_=std::make_shared<uint8_t>((uint8_t)pJson["deliver_type"].asUInt64());
        }
    }
    if(pJson.isMember("admin_id"))
    {
        dirtyFlag_[17] = true;
        if(!pJson["admin_id"].isNull())
        {
            adminId_=std::make_shared<uint64_t>((uint64_t)pJson["admin_id"].asUInt64());
        }
    }
    if(pJson.isMember("receipt_province_id"))
    {
        dirtyFlag_[18] = true;
        if(!pJson["receipt_province_id"].isNull())
        {
            receiptProvinceId_=std::make_shared<int64_t>((int64_t)pJson["receipt_province_id"].asInt64());
        }
    }
    if(pJson.isMember("receipt_city_id"))
    {
        dirtyFlag_[19] = true;
        if(!pJson["receipt_city_id"].isNull())
        {
            receiptCityId_=std::make_shared<int64_t>((int64_t)pJson["receipt_city_id"].asInt64());
        }
    }
    if(pJson.isMember("receipt_area_id"))
    {
        dirtyFlag_[20] = true;
        if(!pJson["receipt_area_id"].isNull())
        {
            receiptAreaId_=std::make_shared<int64_t>((int64_t)pJson["receipt_area_id"].asInt64());
        }
    }
    if(pJson.isMember("receipt_address"))
    {
        dirtyFlag_[21] = true;
        if(!pJson["receipt_address"].isNull())
        {
            receiptAddress_=std::make_shared<std::string>(pJson["receipt_address"].asString());
        }
    }
    if(pJson.isMember("order_status"))
    {
        dirtyFlag_[22] = true;
        if(!pJson["order_status"].isNull())
        {
            orderStatus_=std::make_shared<uint8_t>((uint8_t)pJson["order_status"].asUInt64());
        }
    }
    if(pJson.isMember("quote_price_id"))
    {
        dirtyFlag_[23] = true;
        if(!pJson["quote_price_id"].isNull())
        {
            quotePriceId_=std::make_shared<int64_t>((int64_t)pJson["quote_price_id"].asInt64());
        }
    }
    if(pJson.isMember("deliver_time"))
    {
        dirtyFlag_[24] = true;
        if(!pJson["deliver_time"].isNull())
        {
            auto timeStr = pJson["deliver_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            deliverTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("deliver_place"))
    {
        dirtyFlag_[25] = true;
        if(!pJson["deliver_place"].isNull())
        {
            deliverPlace_=std::make_shared<std::string>(pJson["deliver_place"].asString());
        }
    }
    if(pJson.isMember("point_num"))
    {
        dirtyFlag_[26] = true;
        if(!pJson["point_num"].isNull())
        {
            pointNum_=std::make_shared<std::string>(pJson["point_num"].asString());
        }
    }
}

const uint64_t &SaleOrderSku::getValueOfId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &SaleOrderSku::getId() const noexcept
{
    return id_;
}
void SaleOrderSku::setId(const uint64_t &pId) noexcept
{
    id_ = std::make_shared<uint64_t>(pId);
    dirtyFlag_[0] = true;
}



const typename SaleOrderSku::PrimaryKeyType & SaleOrderSku::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const ::trantor::Date &SaleOrderSku::getValueOfCreateTime() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(createTime_)
        return *createTime_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &SaleOrderSku::getCreateTime() const noexcept
{
    return createTime_;
}
void SaleOrderSku::setCreateTime(const ::trantor::Date &pCreateTime) noexcept
{
    createTime_ = std::make_shared<::trantor::Date>(pCreateTime);
    dirtyFlag_[1] = true;
}




const ::trantor::Date &SaleOrderSku::getValueOfUpdateTime() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(updateTime_)
        return *updateTime_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &SaleOrderSku::getUpdateTime() const noexcept
{
    return updateTime_;
}
void SaleOrderSku::setUpdateTime(const ::trantor::Date &pUpdateTime) noexcept
{
    updateTime_ = std::make_shared<::trantor::Date>(pUpdateTime);
    dirtyFlag_[2] = true;
}




const std::string &SaleOrderSku::getValueOfRemark() const noexcept
{
    const static std::string defaultValue = std::string();
    if(remark_)
        return *remark_;
    return defaultValue;
}
const std::shared_ptr<std::string> &SaleOrderSku::getRemark() const noexcept
{
    return remark_;
}
void SaleOrderSku::setRemark(const std::string &pRemark) noexcept
{
    remark_ = std::make_shared<std::string>(pRemark);
    dirtyFlag_[3] = true;
}
void SaleOrderSku::setRemark(std::string &&pRemark) noexcept
{
    remark_ = std::make_shared<std::string>(std::move(pRemark));
    dirtyFlag_[3] = true;
}


void SaleOrderSku::setRemarkToNull() noexcept
{
    remark_.reset();
    dirtyFlag_[3] = true;
}


const uint8_t &SaleOrderSku::getValueOfIsDelete() const noexcept
{
    const static uint8_t defaultValue = uint8_t();
    if(isDelete_)
        return *isDelete_;
    return defaultValue;
}
const std::shared_ptr<uint8_t> &SaleOrderSku::getIsDelete() const noexcept
{
    return isDelete_;
}
void SaleOrderSku::setIsDelete(const uint8_t &pIsDelete) noexcept
{
    isDelete_ = std::make_shared<uint8_t>(pIsDelete);
    dirtyFlag_[4] = true;
}




const uint64_t &SaleOrderSku::getValueOfShopId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(shopId_)
        return *shopId_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &SaleOrderSku::getShopId() const noexcept
{
    return shopId_;
}
void SaleOrderSku::setShopId(const uint64_t &pShopId) noexcept
{
    shopId_ = std::make_shared<uint64_t>(pShopId);
    dirtyFlag_[5] = true;
}




const int64_t &SaleOrderSku::getValueOfSaleOrderId() const noexcept
{
    const static int64_t defaultValue = int64_t();
    if(saleOrderId_)
        return *saleOrderId_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &SaleOrderSku::getSaleOrderId() const noexcept
{
    return saleOrderId_;
}
void SaleOrderSku::setSaleOrderId(const int64_t &pSaleOrderId) noexcept
{
    saleOrderId_ = std::make_shared<int64_t>(pSaleOrderId);
    dirtyFlag_[6] = true;
}




const std::string &SaleOrderSku::getValueOfSaleOrderKey() const noexcept
{
    const static std::string defaultValue = std::string();
    if(saleOrderKey_)
        return *saleOrderKey_;
    return defaultValue;
}
const std::shared_ptr<std::string> &SaleOrderSku::getSaleOrderKey() const noexcept
{
    return saleOrderKey_;
}
void SaleOrderSku::setSaleOrderKey(const std::string &pSaleOrderKey) noexcept
{
    saleOrderKey_ = std::make_shared<std::string>(pSaleOrderKey);
    dirtyFlag_[7] = true;
}
void SaleOrderSku::setSaleOrderKey(std::string &&pSaleOrderKey) noexcept
{
    saleOrderKey_ = std::make_shared<std::string>(std::move(pSaleOrderKey));
    dirtyFlag_[7] = true;
}


void SaleOrderSku::setSaleOrderKeyToNull() noexcept
{
    saleOrderKey_.reset();
    dirtyFlag_[7] = true;
}


const int64_t &SaleOrderSku::getValueOfCompanyId() const noexcept
{
    const static int64_t defaultValue = int64_t();
    if(companyId_)
        return *companyId_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &SaleOrderSku::getCompanyId() const noexcept
{
    return companyId_;
}
void SaleOrderSku::setCompanyId(const int64_t &pCompanyId) noexcept
{
    companyId_ = std::make_shared<int64_t>(pCompanyId);
    dirtyFlag_[8] = true;
}




const std::string &SaleOrderSku::getValueOfProductHistoryInfo() const noexcept
{
    const static std::string defaultValue = std::string();
    if(productHistoryInfo_)
        return *productHistoryInfo_;
    return defaultValue;
}
const std::shared_ptr<std::string> &SaleOrderSku::getProductHistoryInfo() const noexcept
{
    return productHistoryInfo_;
}
void SaleOrderSku::setProductHistoryInfo(const std::string &pProductHistoryInfo) noexcept
{
    productHistoryInfo_ = std::make_shared<std::string>(pProductHistoryInfo);
    dirtyFlag_[9] = true;
}
void SaleOrderSku::setProductHistoryInfo(std::string &&pProductHistoryInfo) noexcept
{
    productHistoryInfo_ = std::make_shared<std::string>(std::move(pProductHistoryInfo));
    dirtyFlag_[9] = true;
}


void SaleOrderSku::setProductHistoryInfoToNull() noexcept
{
    productHistoryInfo_.reset();
    dirtyFlag_[9] = true;
}


const uint64_t &SaleOrderSku::getValueOfProductBrandId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(productBrandId_)
        return *productBrandId_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &SaleOrderSku::getProductBrandId() const noexcept
{
    return productBrandId_;
}
void SaleOrderSku::setProductBrandId(const uint64_t &pProductBrandId) noexcept
{
    productBrandId_ = std::make_shared<uint64_t>(pProductBrandId);
    dirtyFlag_[10] = true;
}




const uint64_t &SaleOrderSku::getValueOfProductId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(productId_)
        return *productId_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &SaleOrderSku::getProductId() const noexcept
{
    return productId_;
}
void SaleOrderSku::setProductId(const uint64_t &pProductId) noexcept
{
    productId_ = std::make_shared<uint64_t>(pProductId);
    dirtyFlag_[11] = true;
}




const uint64_t &SaleOrderSku::getValueOfProductCategoryId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(productCategoryId_)
        return *productCategoryId_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &SaleOrderSku::getProductCategoryId() const noexcept
{
    return productCategoryId_;
}
void SaleOrderSku::setProductCategoryId(const uint64_t &pProductCategoryId) noexcept
{
    productCategoryId_ = std::make_shared<uint64_t>(pProductCategoryId);
    dirtyFlag_[12] = true;
}




const uint64_t &SaleOrderSku::getValueOfProductModelId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(productModelId_)
        return *productModelId_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &SaleOrderSku::getProductModelId() const noexcept
{
    return productModelId_;
}
void SaleOrderSku::setProductModelId(const uint64_t &pProductModelId) noexcept
{
    productModelId_ = std::make_shared<uint64_t>(pProductModelId);
    dirtyFlag_[13] = true;
}




const std::string &SaleOrderSku::getValueOfSalePrice() const noexcept
{
    const static std::string defaultValue = std::string();
    if(salePrice_)
        return *salePrice_;
    return defaultValue;
}
const std::shared_ptr<std::string> &SaleOrderSku::getSalePrice() const noexcept
{
    return salePrice_;
}
void SaleOrderSku::setSalePrice(const std::string &pSalePrice) noexcept
{
    salePrice_ = std::make_shared<std::string>(pSalePrice);
    dirtyFlag_[14] = true;
}
void SaleOrderSku::setSalePrice(std::string &&pSalePrice) noexcept
{
    salePrice_ = std::make_shared<std::string>(std::move(pSalePrice));
    dirtyFlag_[14] = true;
}




const std::string &SaleOrderSku::getValueOfSaleNum() const noexcept
{
    const static std::string defaultValue = std::string();
    if(saleNum_)
        return *saleNum_;
    return defaultValue;
}
const std::shared_ptr<std::string> &SaleOrderSku::getSaleNum() const noexcept
{
    return saleNum_;
}
void SaleOrderSku::setSaleNum(const std::string &pSaleNum) noexcept
{
    saleNum_ = std::make_shared<std::string>(pSaleNum);
    dirtyFlag_[15] = true;
}
void SaleOrderSku::setSaleNum(std::string &&pSaleNum) noexcept
{
    saleNum_ = std::make_shared<std::string>(std::move(pSaleNum));
    dirtyFlag_[15] = true;
}




const uint8_t &SaleOrderSku::getValueOfDeliverType() const noexcept
{
    const static uint8_t defaultValue = uint8_t();
    if(deliverType_)
        return *deliverType_;
    return defaultValue;
}
const std::shared_ptr<uint8_t> &SaleOrderSku::getDeliverType() const noexcept
{
    return deliverType_;
}
void SaleOrderSku::setDeliverType(const uint8_t &pDeliverType) noexcept
{
    deliverType_ = std::make_shared<uint8_t>(pDeliverType);
    dirtyFlag_[16] = true;
}




const uint64_t &SaleOrderSku::getValueOfAdminId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(adminId_)
        return *adminId_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &SaleOrderSku::getAdminId() const noexcept
{
    return adminId_;
}
void SaleOrderSku::setAdminId(const uint64_t &pAdminId) noexcept
{
    adminId_ = std::make_shared<uint64_t>(pAdminId);
    dirtyFlag_[17] = true;
}




const int64_t &SaleOrderSku::getValueOfReceiptProvinceId() const noexcept
{
    const static int64_t defaultValue = int64_t();
    if(receiptProvinceId_)
        return *receiptProvinceId_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &SaleOrderSku::getReceiptProvinceId() const noexcept
{
    return receiptProvinceId_;
}
void SaleOrderSku::setReceiptProvinceId(const int64_t &pReceiptProvinceId) noexcept
{
    receiptProvinceId_ = std::make_shared<int64_t>(pReceiptProvinceId);
    dirtyFlag_[18] = true;
}




const int64_t &SaleOrderSku::getValueOfReceiptCityId() const noexcept
{
    const static int64_t defaultValue = int64_t();
    if(receiptCityId_)
        return *receiptCityId_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &SaleOrderSku::getReceiptCityId() const noexcept
{
    return receiptCityId_;
}
void SaleOrderSku::setReceiptCityId(const int64_t &pReceiptCityId) noexcept
{
    receiptCityId_ = std::make_shared<int64_t>(pReceiptCityId);
    dirtyFlag_[19] = true;
}




const int64_t &SaleOrderSku::getValueOfReceiptAreaId() const noexcept
{
    const static int64_t defaultValue = int64_t();
    if(receiptAreaId_)
        return *receiptAreaId_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &SaleOrderSku::getReceiptAreaId() const noexcept
{
    return receiptAreaId_;
}
void SaleOrderSku::setReceiptAreaId(const int64_t &pReceiptAreaId) noexcept
{
    receiptAreaId_ = std::make_shared<int64_t>(pReceiptAreaId);
    dirtyFlag_[20] = true;
}




const std::string &SaleOrderSku::getValueOfReceiptAddress() const noexcept
{
    const static std::string defaultValue = std::string();
    if(receiptAddress_)
        return *receiptAddress_;
    return defaultValue;
}
const std::shared_ptr<std::string> &SaleOrderSku::getReceiptAddress() const noexcept
{
    return receiptAddress_;
}
void SaleOrderSku::setReceiptAddress(const std::string &pReceiptAddress) noexcept
{
    receiptAddress_ = std::make_shared<std::string>(pReceiptAddress);
    dirtyFlag_[21] = true;
}
void SaleOrderSku::setReceiptAddress(std::string &&pReceiptAddress) noexcept
{
    receiptAddress_ = std::make_shared<std::string>(std::move(pReceiptAddress));
    dirtyFlag_[21] = true;
}


void SaleOrderSku::setReceiptAddressToNull() noexcept
{
    receiptAddress_.reset();
    dirtyFlag_[21] = true;
}


const uint8_t &SaleOrderSku::getValueOfOrderStatus() const noexcept
{
    const static uint8_t defaultValue = uint8_t();
    if(orderStatus_)
        return *orderStatus_;
    return defaultValue;
}
const std::shared_ptr<uint8_t> &SaleOrderSku::getOrderStatus() const noexcept
{
    return orderStatus_;
}
void SaleOrderSku::setOrderStatus(const uint8_t &pOrderStatus) noexcept
{
    orderStatus_ = std::make_shared<uint8_t>(pOrderStatus);
    dirtyFlag_[22] = true;
}




const int64_t &SaleOrderSku::getValueOfQuotePriceId() const noexcept
{
    const static int64_t defaultValue = int64_t();
    if(quotePriceId_)
        return *quotePriceId_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &SaleOrderSku::getQuotePriceId() const noexcept
{
    return quotePriceId_;
}
void SaleOrderSku::setQuotePriceId(const int64_t &pQuotePriceId) noexcept
{
    quotePriceId_ = std::make_shared<int64_t>(pQuotePriceId);
    dirtyFlag_[23] = true;
}




const ::trantor::Date &SaleOrderSku::getValueOfDeliverTime() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(deliverTime_)
        return *deliverTime_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &SaleOrderSku::getDeliverTime() const noexcept
{
    return deliverTime_;
}
void SaleOrderSku::setDeliverTime(const ::trantor::Date &pDeliverTime) noexcept
{
    deliverTime_ = std::make_shared<::trantor::Date>(pDeliverTime);
    dirtyFlag_[24] = true;
}


void SaleOrderSku::setDeliverTimeToNull() noexcept
{
    deliverTime_.reset();
    dirtyFlag_[24] = true;
}


const std::string &SaleOrderSku::getValueOfDeliverPlace() const noexcept
{
    const static std::string defaultValue = std::string();
    if(deliverPlace_)
        return *deliverPlace_;
    return defaultValue;
}
const std::shared_ptr<std::string> &SaleOrderSku::getDeliverPlace() const noexcept
{
    return deliverPlace_;
}
void SaleOrderSku::setDeliverPlace(const std::string &pDeliverPlace) noexcept
{
    deliverPlace_ = std::make_shared<std::string>(pDeliverPlace);
    dirtyFlag_[25] = true;
}
void SaleOrderSku::setDeliverPlace(std::string &&pDeliverPlace) noexcept
{
    deliverPlace_ = std::make_shared<std::string>(std::move(pDeliverPlace));
    dirtyFlag_[25] = true;
}


void SaleOrderSku::setDeliverPlaceToNull() noexcept
{
    deliverPlace_.reset();
    dirtyFlag_[25] = true;
}


const std::string &SaleOrderSku::getValueOfPointNum() const noexcept
{
    const static std::string defaultValue = std::string();
    if(pointNum_)
        return *pointNum_;
    return defaultValue;
}
const std::shared_ptr<std::string> &SaleOrderSku::getPointNum() const noexcept
{
    return pointNum_;
}
void SaleOrderSku::setPointNum(const std::string &pPointNum) noexcept
{
    pointNum_ = std::make_shared<std::string>(pPointNum);
    dirtyFlag_[26] = true;
}
void SaleOrderSku::setPointNum(std::string &&pPointNum) noexcept
{
    pointNum_ = std::make_shared<std::string>(std::move(pPointNum));
    dirtyFlag_[26] = true;
}




void SaleOrderSku::updateId(const uint64_t id)
{
    id_ = std::make_shared<uint64_t>(id);
}

const std::vector<std::string> &SaleOrderSku::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "create_time",
        "update_time",
        "remark",
        "is_delete",
        "shop_id",
        "sale_order_id",
        "sale_order_key",
        "company_id",
        "product_history_info",
        "product_brand_id",
        "product_id",
        "product_category_id",
        "product_model_id",
        "sale_price",
        "sale_num",
        "deliver_type",
        "admin_id",
        "receipt_province_id",
        "receipt_city_id",
        "receipt_area_id",
        "receipt_address",
        "order_status",
        "quote_price_id",
        "deliver_time",
        "deliver_place",
        "point_num"
    };
    return inCols;
}

void SaleOrderSku::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getCreateTime())
        {
            binder << getValueOfCreateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getUpdateTime())
        {
            binder << getValueOfUpdateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getRemark())
        {
            binder << getValueOfRemark();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getIsDelete())
        {
            binder << getValueOfIsDelete();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getShopId())
        {
            binder << getValueOfShopId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getSaleOrderId())
        {
            binder << getValueOfSaleOrderId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getSaleOrderKey())
        {
            binder << getValueOfSaleOrderKey();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getCompanyId())
        {
            binder << getValueOfCompanyId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getProductHistoryInfo())
        {
            binder << getValueOfProductHistoryInfo();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getProductBrandId())
        {
            binder << getValueOfProductBrandId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getProductId())
        {
            binder << getValueOfProductId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getProductCategoryId())
        {
            binder << getValueOfProductCategoryId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[13])
    {
        if(getProductModelId())
        {
            binder << getValueOfProductModelId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[14])
    {
        if(getSalePrice())
        {
            binder << getValueOfSalePrice();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[15])
    {
        if(getSaleNum())
        {
            binder << getValueOfSaleNum();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[16])
    {
        if(getDeliverType())
        {
            binder << getValueOfDeliverType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[17])
    {
        if(getAdminId())
        {
            binder << getValueOfAdminId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[18])
    {
        if(getReceiptProvinceId())
        {
            binder << getValueOfReceiptProvinceId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[19])
    {
        if(getReceiptCityId())
        {
            binder << getValueOfReceiptCityId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[20])
    {
        if(getReceiptAreaId())
        {
            binder << getValueOfReceiptAreaId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[21])
    {
        if(getReceiptAddress())
        {
            binder << getValueOfReceiptAddress();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[22])
    {
        if(getOrderStatus())
        {
            binder << getValueOfOrderStatus();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[23])
    {
        if(getQuotePriceId())
        {
            binder << getValueOfQuotePriceId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[24])
    {
        if(getDeliverTime())
        {
            binder << getValueOfDeliverTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[25])
    {
        if(getDeliverPlace())
        {
            binder << getValueOfDeliverPlace();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[26])
    {
        if(getPointNum())
        {
            binder << getValueOfPointNum();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> SaleOrderSku::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    if(dirtyFlag_[8])
    {
        ret.push_back(getColumnName(8));
    }
    if(dirtyFlag_[9])
    {
        ret.push_back(getColumnName(9));
    }
    if(dirtyFlag_[10])
    {
        ret.push_back(getColumnName(10));
    }
    if(dirtyFlag_[11])
    {
        ret.push_back(getColumnName(11));
    }
    if(dirtyFlag_[12])
    {
        ret.push_back(getColumnName(12));
    }
    if(dirtyFlag_[13])
    {
        ret.push_back(getColumnName(13));
    }
    if(dirtyFlag_[14])
    {
        ret.push_back(getColumnName(14));
    }
    if(dirtyFlag_[15])
    {
        ret.push_back(getColumnName(15));
    }
    if(dirtyFlag_[16])
    {
        ret.push_back(getColumnName(16));
    }
    if(dirtyFlag_[17])
    {
        ret.push_back(getColumnName(17));
    }
    if(dirtyFlag_[18])
    {
        ret.push_back(getColumnName(18));
    }
    if(dirtyFlag_[19])
    {
        ret.push_back(getColumnName(19));
    }
    if(dirtyFlag_[20])
    {
        ret.push_back(getColumnName(20));
    }
    if(dirtyFlag_[21])
    {
        ret.push_back(getColumnName(21));
    }
    if(dirtyFlag_[22])
    {
        ret.push_back(getColumnName(22));
    }
    if(dirtyFlag_[23])
    {
        ret.push_back(getColumnName(23));
    }
    if(dirtyFlag_[24])
    {
        ret.push_back(getColumnName(24));
    }
    if(dirtyFlag_[25])
    {
        ret.push_back(getColumnName(25));
    }
    if(dirtyFlag_[26])
    {
        ret.push_back(getColumnName(26));
    }
    return ret;
}

void SaleOrderSku::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getCreateTime())
        {
            binder << getValueOfCreateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getUpdateTime())
        {
            binder << getValueOfUpdateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getRemark())
        {
            binder << getValueOfRemark();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getIsDelete())
        {
            binder << getValueOfIsDelete();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getShopId())
        {
            binder << getValueOfShopId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getSaleOrderId())
        {
            binder << getValueOfSaleOrderId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getSaleOrderKey())
        {
            binder << getValueOfSaleOrderKey();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getCompanyId())
        {
            binder << getValueOfCompanyId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getProductHistoryInfo())
        {
            binder << getValueOfProductHistoryInfo();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getProductBrandId())
        {
            binder << getValueOfProductBrandId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getProductId())
        {
            binder << getValueOfProductId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getProductCategoryId())
        {
            binder << getValueOfProductCategoryId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[13])
    {
        if(getProductModelId())
        {
            binder << getValueOfProductModelId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[14])
    {
        if(getSalePrice())
        {
            binder << getValueOfSalePrice();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[15])
    {
        if(getSaleNum())
        {
            binder << getValueOfSaleNum();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[16])
    {
        if(getDeliverType())
        {
            binder << getValueOfDeliverType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[17])
    {
        if(getAdminId())
        {
            binder << getValueOfAdminId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[18])
    {
        if(getReceiptProvinceId())
        {
            binder << getValueOfReceiptProvinceId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[19])
    {
        if(getReceiptCityId())
        {
            binder << getValueOfReceiptCityId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[20])
    {
        if(getReceiptAreaId())
        {
            binder << getValueOfReceiptAreaId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[21])
    {
        if(getReceiptAddress())
        {
            binder << getValueOfReceiptAddress();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[22])
    {
        if(getOrderStatus())
        {
            binder << getValueOfOrderStatus();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[23])
    {
        if(getQuotePriceId())
        {
            binder << getValueOfQuotePriceId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[24])
    {
        if(getDeliverTime())
        {
            binder << getValueOfDeliverTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[25])
    {
        if(getDeliverPlace())
        {
            binder << getValueOfDeliverPlace();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[26])
    {
        if(getPointNum())
        {
            binder << getValueOfPointNum();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value SaleOrderSku::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=(Json::UInt64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getCreateTime())
    {
        ret["create_time"]=getCreateTime()->toDbStringLocal();
    }
    else
    {
        ret["create_time"]=Json::Value();
    }
    if(getUpdateTime())
    {
        ret["update_time"]=getUpdateTime()->toDbStringLocal();
    }
    else
    {
        ret["update_time"]=Json::Value();
    }
    if(getRemark())
    {
        ret["remark"]=getValueOfRemark();
    }
    else
    {
        ret["remark"]=Json::Value();
    }
    if(getIsDelete())
    {
        ret["is_delete"]=getValueOfIsDelete();
    }
    else
    {
        ret["is_delete"]=Json::Value();
    }
    if(getShopId())
    {
        ret["shop_id"]=(Json::UInt64)getValueOfShopId();
    }
    else
    {
        ret["shop_id"]=Json::Value();
    }
    if(getSaleOrderId())
    {
        ret["sale_order_id"]=(Json::Int64)getValueOfSaleOrderId();
    }
    else
    {
        ret["sale_order_id"]=Json::Value();
    }
    if(getSaleOrderKey())
    {
        ret["sale_order_key"]=getValueOfSaleOrderKey();
    }
    else
    {
        ret["sale_order_key"]=Json::Value();
    }
    if(getCompanyId())
    {
        ret["company_id"]=(Json::Int64)getValueOfCompanyId();
    }
    else
    {
        ret["company_id"]=Json::Value();
    }
    if(getProductHistoryInfo())
    {
        ret["product_history_info"]=getValueOfProductHistoryInfo();
    }
    else
    {
        ret["product_history_info"]=Json::Value();
    }
    if(getProductBrandId())
    {
        ret["product_brand_id"]=(Json::UInt64)getValueOfProductBrandId();
    }
    else
    {
        ret["product_brand_id"]=Json::Value();
    }
    if(getProductId())
    {
        ret["product_id"]=(Json::UInt64)getValueOfProductId();
    }
    else
    {
        ret["product_id"]=Json::Value();
    }
    if(getProductCategoryId())
    {
        ret["product_category_id"]=(Json::UInt64)getValueOfProductCategoryId();
    }
    else
    {
        ret["product_category_id"]=Json::Value();
    }
    if(getProductModelId())
    {
        ret["product_model_id"]=(Json::UInt64)getValueOfProductModelId();
    }
    else
    {
        ret["product_model_id"]=Json::Value();
    }
    if(getSalePrice())
    {
        ret["sale_price"]=getValueOfSalePrice();
    }
    else
    {
        ret["sale_price"]=Json::Value();
    }
    if(getSaleNum())
    {
        ret["sale_num"]=getValueOfSaleNum();
    }
    else
    {
        ret["sale_num"]=Json::Value();
    }
    if(getDeliverType())
    {
        ret["deliver_type"]=getValueOfDeliverType();
    }
    else
    {
        ret["deliver_type"]=Json::Value();
    }
    if(getAdminId())
    {
        ret["admin_id"]=(Json::UInt64)getValueOfAdminId();
    }
    else
    {
        ret["admin_id"]=Json::Value();
    }
    if(getReceiptProvinceId())
    {
        ret["receipt_province_id"]=(Json::Int64)getValueOfReceiptProvinceId();
    }
    else
    {
        ret["receipt_province_id"]=Json::Value();
    }
    if(getReceiptCityId())
    {
        ret["receipt_city_id"]=(Json::Int64)getValueOfReceiptCityId();
    }
    else
    {
        ret["receipt_city_id"]=Json::Value();
    }
    if(getReceiptAreaId())
    {
        ret["receipt_area_id"]=(Json::Int64)getValueOfReceiptAreaId();
    }
    else
    {
        ret["receipt_area_id"]=Json::Value();
    }
    if(getReceiptAddress())
    {
        ret["receipt_address"]=getValueOfReceiptAddress();
    }
    else
    {
        ret["receipt_address"]=Json::Value();
    }
    if(getOrderStatus())
    {
        ret["order_status"]=getValueOfOrderStatus();
    }
    else
    {
        ret["order_status"]=Json::Value();
    }
    if(getQuotePriceId())
    {
        ret["quote_price_id"]=(Json::Int64)getValueOfQuotePriceId();
    }
    else
    {
        ret["quote_price_id"]=Json::Value();
    }
    if(getDeliverTime())
    {
        ret["deliver_time"]=getDeliverTime()->toDbStringLocal();
    }
    else
    {
        ret["deliver_time"]=Json::Value();
    }
    if(getDeliverPlace())
    {
        ret["deliver_place"]=getValueOfDeliverPlace();
    }
    else
    {
        ret["deliver_place"]=Json::Value();
    }
    if(getPointNum())
    {
        ret["point_num"]=getValueOfPointNum();
    }
    else
    {
        ret["point_num"]=Json::Value();
    }
    return ret;
}

Json::Value SaleOrderSku::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 27)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=(Json::UInt64)getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getCreateTime())
            {
                ret[pMasqueradingVector[1]]=getCreateTime()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getUpdateTime())
            {
                ret[pMasqueradingVector[2]]=getUpdateTime()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getRemark())
            {
                ret[pMasqueradingVector[3]]=getValueOfRemark();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getIsDelete())
            {
                ret[pMasqueradingVector[4]]=getValueOfIsDelete();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getShopId())
            {
                ret[pMasqueradingVector[5]]=(Json::UInt64)getValueOfShopId();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getSaleOrderId())
            {
                ret[pMasqueradingVector[6]]=(Json::Int64)getValueOfSaleOrderId();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getSaleOrderKey())
            {
                ret[pMasqueradingVector[7]]=getValueOfSaleOrderKey();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[8].empty())
        {
            if(getCompanyId())
            {
                ret[pMasqueradingVector[8]]=(Json::Int64)getValueOfCompanyId();
            }
            else
            {
                ret[pMasqueradingVector[8]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[9].empty())
        {
            if(getProductHistoryInfo())
            {
                ret[pMasqueradingVector[9]]=getValueOfProductHistoryInfo();
            }
            else
            {
                ret[pMasqueradingVector[9]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[10].empty())
        {
            if(getProductBrandId())
            {
                ret[pMasqueradingVector[10]]=(Json::UInt64)getValueOfProductBrandId();
            }
            else
            {
                ret[pMasqueradingVector[10]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[11].empty())
        {
            if(getProductId())
            {
                ret[pMasqueradingVector[11]]=(Json::UInt64)getValueOfProductId();
            }
            else
            {
                ret[pMasqueradingVector[11]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[12].empty())
        {
            if(getProductCategoryId())
            {
                ret[pMasqueradingVector[12]]=(Json::UInt64)getValueOfProductCategoryId();
            }
            else
            {
                ret[pMasqueradingVector[12]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[13].empty())
        {
            if(getProductModelId())
            {
                ret[pMasqueradingVector[13]]=(Json::UInt64)getValueOfProductModelId();
            }
            else
            {
                ret[pMasqueradingVector[13]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[14].empty())
        {
            if(getSalePrice())
            {
                ret[pMasqueradingVector[14]]=getValueOfSalePrice();
            }
            else
            {
                ret[pMasqueradingVector[14]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[15].empty())
        {
            if(getSaleNum())
            {
                ret[pMasqueradingVector[15]]=getValueOfSaleNum();
            }
            else
            {
                ret[pMasqueradingVector[15]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[16].empty())
        {
            if(getDeliverType())
            {
                ret[pMasqueradingVector[16]]=getValueOfDeliverType();
            }
            else
            {
                ret[pMasqueradingVector[16]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[17].empty())
        {
            if(getAdminId())
            {
                ret[pMasqueradingVector[17]]=(Json::UInt64)getValueOfAdminId();
            }
            else
            {
                ret[pMasqueradingVector[17]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[18].empty())
        {
            if(getReceiptProvinceId())
            {
                ret[pMasqueradingVector[18]]=(Json::Int64)getValueOfReceiptProvinceId();
            }
            else
            {
                ret[pMasqueradingVector[18]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[19].empty())
        {
            if(getReceiptCityId())
            {
                ret[pMasqueradingVector[19]]=(Json::Int64)getValueOfReceiptCityId();
            }
            else
            {
                ret[pMasqueradingVector[19]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[20].empty())
        {
            if(getReceiptAreaId())
            {
                ret[pMasqueradingVector[20]]=(Json::Int64)getValueOfReceiptAreaId();
            }
            else
            {
                ret[pMasqueradingVector[20]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[21].empty())
        {
            if(getReceiptAddress())
            {
                ret[pMasqueradingVector[21]]=getValueOfReceiptAddress();
            }
            else
            {
                ret[pMasqueradingVector[21]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[22].empty())
        {
            if(getOrderStatus())
            {
                ret[pMasqueradingVector[22]]=getValueOfOrderStatus();
            }
            else
            {
                ret[pMasqueradingVector[22]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[23].empty())
        {
            if(getQuotePriceId())
            {
                ret[pMasqueradingVector[23]]=(Json::Int64)getValueOfQuotePriceId();
            }
            else
            {
                ret[pMasqueradingVector[23]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[24].empty())
        {
            if(getDeliverTime())
            {
                ret[pMasqueradingVector[24]]=getDeliverTime()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[24]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[25].empty())
        {
            if(getDeliverPlace())
            {
                ret[pMasqueradingVector[25]]=getValueOfDeliverPlace();
            }
            else
            {
                ret[pMasqueradingVector[25]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[26].empty())
        {
            if(getPointNum())
            {
                ret[pMasqueradingVector[26]]=getValueOfPointNum();
            }
            else
            {
                ret[pMasqueradingVector[26]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=(Json::UInt64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getCreateTime())
    {
        ret["create_time"]=getCreateTime()->toDbStringLocal();
    }
    else
    {
        ret["create_time"]=Json::Value();
    }
    if(getUpdateTime())
    {
        ret["update_time"]=getUpdateTime()->toDbStringLocal();
    }
    else
    {
        ret["update_time"]=Json::Value();
    }
    if(getRemark())
    {
        ret["remark"]=getValueOfRemark();
    }
    else
    {
        ret["remark"]=Json::Value();
    }
    if(getIsDelete())
    {
        ret["is_delete"]=getValueOfIsDelete();
    }
    else
    {
        ret["is_delete"]=Json::Value();
    }
    if(getShopId())
    {
        ret["shop_id"]=(Json::UInt64)getValueOfShopId();
    }
    else
    {
        ret["shop_id"]=Json::Value();
    }
    if(getSaleOrderId())
    {
        ret["sale_order_id"]=(Json::Int64)getValueOfSaleOrderId();
    }
    else
    {
        ret["sale_order_id"]=Json::Value();
    }
    if(getSaleOrderKey())
    {
        ret["sale_order_key"]=getValueOfSaleOrderKey();
    }
    else
    {
        ret["sale_order_key"]=Json::Value();
    }
    if(getCompanyId())
    {
        ret["company_id"]=(Json::Int64)getValueOfCompanyId();
    }
    else
    {
        ret["company_id"]=Json::Value();
    }
    if(getProductHistoryInfo())
    {
        ret["product_history_info"]=getValueOfProductHistoryInfo();
    }
    else
    {
        ret["product_history_info"]=Json::Value();
    }
    if(getProductBrandId())
    {
        ret["product_brand_id"]=(Json::UInt64)getValueOfProductBrandId();
    }
    else
    {
        ret["product_brand_id"]=Json::Value();
    }
    if(getProductId())
    {
        ret["product_id"]=(Json::UInt64)getValueOfProductId();
    }
    else
    {
        ret["product_id"]=Json::Value();
    }
    if(getProductCategoryId())
    {
        ret["product_category_id"]=(Json::UInt64)getValueOfProductCategoryId();
    }
    else
    {
        ret["product_category_id"]=Json::Value();
    }
    if(getProductModelId())
    {
        ret["product_model_id"]=(Json::UInt64)getValueOfProductModelId();
    }
    else
    {
        ret["product_model_id"]=Json::Value();
    }
    if(getSalePrice())
    {
        ret["sale_price"]=getValueOfSalePrice();
    }
    else
    {
        ret["sale_price"]=Json::Value();
    }
    if(getSaleNum())
    {
        ret["sale_num"]=getValueOfSaleNum();
    }
    else
    {
        ret["sale_num"]=Json::Value();
    }
    if(getDeliverType())
    {
        ret["deliver_type"]=getValueOfDeliverType();
    }
    else
    {
        ret["deliver_type"]=Json::Value();
    }
    if(getAdminId())
    {
        ret["admin_id"]=(Json::UInt64)getValueOfAdminId();
    }
    else
    {
        ret["admin_id"]=Json::Value();
    }
    if(getReceiptProvinceId())
    {
        ret["receipt_province_id"]=(Json::Int64)getValueOfReceiptProvinceId();
    }
    else
    {
        ret["receipt_province_id"]=Json::Value();
    }
    if(getReceiptCityId())
    {
        ret["receipt_city_id"]=(Json::Int64)getValueOfReceiptCityId();
    }
    else
    {
        ret["receipt_city_id"]=Json::Value();
    }
    if(getReceiptAreaId())
    {
        ret["receipt_area_id"]=(Json::Int64)getValueOfReceiptAreaId();
    }
    else
    {
        ret["receipt_area_id"]=Json::Value();
    }
    if(getReceiptAddress())
    {
        ret["receipt_address"]=getValueOfReceiptAddress();
    }
    else
    {
        ret["receipt_address"]=Json::Value();
    }
    if(getOrderStatus())
    {
        ret["order_status"]=getValueOfOrderStatus();
    }
    else
    {
        ret["order_status"]=Json::Value();
    }
    if(getQuotePriceId())
    {
        ret["quote_price_id"]=(Json::Int64)getValueOfQuotePriceId();
    }
    else
    {
        ret["quote_price_id"]=Json::Value();
    }
    if(getDeliverTime())
    {
        ret["deliver_time"]=getDeliverTime()->toDbStringLocal();
    }
    else
    {
        ret["deliver_time"]=Json::Value();
    }
    if(getDeliverPlace())
    {
        ret["deliver_place"]=getValueOfDeliverPlace();
    }
    else
    {
        ret["deliver_place"]=Json::Value();
    }
    if(getPointNum())
    {
        ret["point_num"]=getValueOfPointNum();
    }
    else
    {
        ret["point_num"]=Json::Value();
    }
    return ret;
}

bool SaleOrderSku::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("create_time"))
    {
        if(!validJsonOfField(1, "create_time", pJson["create_time"], err, true))
            return false;
    }
    if(pJson.isMember("update_time"))
    {
        if(!validJsonOfField(2, "update_time", pJson["update_time"], err, true))
            return false;
    }
    if(pJson.isMember("remark"))
    {
        if(!validJsonOfField(3, "remark", pJson["remark"], err, true))
            return false;
    }
    if(pJson.isMember("is_delete"))
    {
        if(!validJsonOfField(4, "is_delete", pJson["is_delete"], err, true))
            return false;
    }
    if(pJson.isMember("shop_id"))
    {
        if(!validJsonOfField(5, "shop_id", pJson["shop_id"], err, true))
            return false;
    }
    if(pJson.isMember("sale_order_id"))
    {
        if(!validJsonOfField(6, "sale_order_id", pJson["sale_order_id"], err, true))
            return false;
    }
    if(pJson.isMember("sale_order_key"))
    {
        if(!validJsonOfField(7, "sale_order_key", pJson["sale_order_key"], err, true))
            return false;
    }
    if(pJson.isMember("company_id"))
    {
        if(!validJsonOfField(8, "company_id", pJson["company_id"], err, true))
            return false;
    }
    if(pJson.isMember("product_history_info"))
    {
        if(!validJsonOfField(9, "product_history_info", pJson["product_history_info"], err, true))
            return false;
    }
    if(pJson.isMember("product_brand_id"))
    {
        if(!validJsonOfField(10, "product_brand_id", pJson["product_brand_id"], err, true))
            return false;
    }
    if(pJson.isMember("product_id"))
    {
        if(!validJsonOfField(11, "product_id", pJson["product_id"], err, true))
            return false;
    }
    if(pJson.isMember("product_category_id"))
    {
        if(!validJsonOfField(12, "product_category_id", pJson["product_category_id"], err, true))
            return false;
    }
    if(pJson.isMember("product_model_id"))
    {
        if(!validJsonOfField(13, "product_model_id", pJson["product_model_id"], err, true))
            return false;
    }
    if(pJson.isMember("sale_price"))
    {
        if(!validJsonOfField(14, "sale_price", pJson["sale_price"], err, true))
            return false;
    }
    if(pJson.isMember("sale_num"))
    {
        if(!validJsonOfField(15, "sale_num", pJson["sale_num"], err, true))
            return false;
    }
    if(pJson.isMember("deliver_type"))
    {
        if(!validJsonOfField(16, "deliver_type", pJson["deliver_type"], err, true))
            return false;
    }
    if(pJson.isMember("admin_id"))
    {
        if(!validJsonOfField(17, "admin_id", pJson["admin_id"], err, true))
            return false;
    }
    if(pJson.isMember("receipt_province_id"))
    {
        if(!validJsonOfField(18, "receipt_province_id", pJson["receipt_province_id"], err, true))
            return false;
    }
    if(pJson.isMember("receipt_city_id"))
    {
        if(!validJsonOfField(19, "receipt_city_id", pJson["receipt_city_id"], err, true))
            return false;
    }
    if(pJson.isMember("receipt_area_id"))
    {
        if(!validJsonOfField(20, "receipt_area_id", pJson["receipt_area_id"], err, true))
            return false;
    }
    if(pJson.isMember("receipt_address"))
    {
        if(!validJsonOfField(21, "receipt_address", pJson["receipt_address"], err, true))
            return false;
    }
    if(pJson.isMember("order_status"))
    {
        if(!validJsonOfField(22, "order_status", pJson["order_status"], err, true))
            return false;
    }
    if(pJson.isMember("quote_price_id"))
    {
        if(!validJsonOfField(23, "quote_price_id", pJson["quote_price_id"], err, true))
            return false;
    }
    if(pJson.isMember("deliver_time"))
    {
        if(!validJsonOfField(24, "deliver_time", pJson["deliver_time"], err, true))
            return false;
    }
    if(pJson.isMember("deliver_place"))
    {
        if(!validJsonOfField(25, "deliver_place", pJson["deliver_place"], err, true))
            return false;
    }
    if(pJson.isMember("point_num"))
    {
        if(!validJsonOfField(26, "point_num", pJson["point_num"], err, true))
            return false;
    }
    return true;
}
bool SaleOrderSku::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                      const std::vector<std::string> &pMasqueradingVector,
                                                      std::string &err)
{
    if(pMasqueradingVector.size() != 27)
    {
        err = "Bad masquerading vector";
        return false;
    }
    if(!pMasqueradingVector[0].empty())
    {
        if(pJson.isMember(pMasqueradingVector[0]))
        {
            if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[1].empty())
    {
        if(pJson.isMember(pMasqueradingVector[1]))
        {
            if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[2].empty())
    {
        if(pJson.isMember(pMasqueradingVector[2]))
        {
            if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[3].empty())
    {
        if(pJson.isMember(pMasqueradingVector[3]))
        {
            if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[4].empty())
    {
        if(pJson.isMember(pMasqueradingVector[4]))
        {
            if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[5].empty())
    {
        if(pJson.isMember(pMasqueradingVector[5]))
        {
            if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[6].empty())
    {
        if(pJson.isMember(pMasqueradingVector[6]))
        {
            if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[7].empty())
    {
        if(pJson.isMember(pMasqueradingVector[7]))
        {
            if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[8].empty())
    {
        if(pJson.isMember(pMasqueradingVector[8]))
        {
            if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[9].empty())
    {
        if(pJson.isMember(pMasqueradingVector[9]))
        {
            if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[10].empty())
    {
        if(pJson.isMember(pMasqueradingVector[10]))
        {
            if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[11].empty())
    {
        if(pJson.isMember(pMasqueradingVector[11]))
        {
            if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[12].empty())
    {
        if(pJson.isMember(pMasqueradingVector[12]))
        {
            if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[13].empty())
    {
        if(pJson.isMember(pMasqueradingVector[13]))
        {
            if(!validJsonOfField(13, pMasqueradingVector[13], pJson[pMasqueradingVector[13]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[14].empty())
    {
        if(pJson.isMember(pMasqueradingVector[14]))
        {
            if(!validJsonOfField(14, pMasqueradingVector[14], pJson[pMasqueradingVector[14]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[15].empty())
    {
        if(pJson.isMember(pMasqueradingVector[15]))
        {
            if(!validJsonOfField(15, pMasqueradingVector[15], pJson[pMasqueradingVector[15]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[16].empty())
    {
        if(pJson.isMember(pMasqueradingVector[16]))
        {
            if(!validJsonOfField(16, pMasqueradingVector[16], pJson[pMasqueradingVector[16]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[17].empty())
    {
        if(pJson.isMember(pMasqueradingVector[17]))
        {
            if(!validJsonOfField(17, pMasqueradingVector[17], pJson[pMasqueradingVector[17]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[18].empty())
    {
        if(pJson.isMember(pMasqueradingVector[18]))
        {
            if(!validJsonOfField(18, pMasqueradingVector[18], pJson[pMasqueradingVector[18]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[19].empty())
    {
        if(pJson.isMember(pMasqueradingVector[19]))
        {
            if(!validJsonOfField(19, pMasqueradingVector[19], pJson[pMasqueradingVector[19]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[20].empty())
    {
        if(pJson.isMember(pMasqueradingVector[20]))
        {
            if(!validJsonOfField(20, pMasqueradingVector[20], pJson[pMasqueradingVector[20]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[21].empty())
    {
        if(pJson.isMember(pMasqueradingVector[21]))
        {
            if(!validJsonOfField(21, pMasqueradingVector[21], pJson[pMasqueradingVector[21]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[22].empty())
    {
        if(pJson.isMember(pMasqueradingVector[22]))
        {
            if(!validJsonOfField(22, pMasqueradingVector[22], pJson[pMasqueradingVector[22]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[23].empty())
    {
        if(pJson.isMember(pMasqueradingVector[23]))
        {
            if(!validJsonOfField(23, pMasqueradingVector[23], pJson[pMasqueradingVector[23]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[24].empty())
    {
        if(pJson.isMember(pMasqueradingVector[24]))
        {
            if(!validJsonOfField(24, pMasqueradingVector[24], pJson[pMasqueradingVector[24]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[25].empty())
    {
        if(pJson.isMember(pMasqueradingVector[25]))
        {
            if(!validJsonOfField(25, pMasqueradingVector[25], pJson[pMasqueradingVector[25]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[26].empty())
    {
        if(pJson.isMember(pMasqueradingVector[26]))
        {
            if(!validJsonOfField(26, pMasqueradingVector[26], pJson[pMasqueradingVector[26]], err, true))
                return false;
        }
    }
    return true;
}
bool SaleOrderSku::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("create_time"))
    {
        if(!validJsonOfField(1, "create_time", pJson["create_time"], err, false))
            return false;
    }
    if(pJson.isMember("update_time"))
    {
        if(!validJsonOfField(2, "update_time", pJson["update_time"], err, false))
            return false;
    }
    if(pJson.isMember("remark"))
    {
        if(!validJsonOfField(3, "remark", pJson["remark"], err, false))
            return false;
    }
    if(pJson.isMember("is_delete"))
    {
        if(!validJsonOfField(4, "is_delete", pJson["is_delete"], err, false))
            return false;
    }
    if(pJson.isMember("shop_id"))
    {
        if(!validJsonOfField(5, "shop_id", pJson["shop_id"], err, false))
            return false;
    }
    if(pJson.isMember("sale_order_id"))
    {
        if(!validJsonOfField(6, "sale_order_id", pJson["sale_order_id"], err, false))
            return false;
    }
    if(pJson.isMember("sale_order_key"))
    {
        if(!validJsonOfField(7, "sale_order_key", pJson["sale_order_key"], err, false))
            return false;
    }
    if(pJson.isMember("company_id"))
    {
        if(!validJsonOfField(8, "company_id", pJson["company_id"], err, false))
            return false;
    }
    if(pJson.isMember("product_history_info"))
    {
        if(!validJsonOfField(9, "product_history_info", pJson["product_history_info"], err, false))
            return false;
    }
    if(pJson.isMember("product_brand_id"))
    {
        if(!validJsonOfField(10, "product_brand_id", pJson["product_brand_id"], err, false))
            return false;
    }
    if(pJson.isMember("product_id"))
    {
        if(!validJsonOfField(11, "product_id", pJson["product_id"], err, false))
            return false;
    }
    if(pJson.isMember("product_category_id"))
    {
        if(!validJsonOfField(12, "product_category_id", pJson["product_category_id"], err, false))
            return false;
    }
    if(pJson.isMember("product_model_id"))
    {
        if(!validJsonOfField(13, "product_model_id", pJson["product_model_id"], err, false))
            return false;
    }
    if(pJson.isMember("sale_price"))
    {
        if(!validJsonOfField(14, "sale_price", pJson["sale_price"], err, false))
            return false;
    }
    if(pJson.isMember("sale_num"))
    {
        if(!validJsonOfField(15, "sale_num", pJson["sale_num"], err, false))
            return false;
    }
    if(pJson.isMember("deliver_type"))
    {
        if(!validJsonOfField(16, "deliver_type", pJson["deliver_type"], err, false))
            return false;
    }
    if(pJson.isMember("admin_id"))
    {
        if(!validJsonOfField(17, "admin_id", pJson["admin_id"], err, false))
            return false;
    }
    if(pJson.isMember("receipt_province_id"))
    {
        if(!validJsonOfField(18, "receipt_province_id", pJson["receipt_province_id"], err, false))
            return false;
    }
    if(pJson.isMember("receipt_city_id"))
    {
        if(!validJsonOfField(19, "receipt_city_id", pJson["receipt_city_id"], err, false))
            return false;
    }
    if(pJson.isMember("receipt_area_id"))
    {
        if(!validJsonOfField(20, "receipt_area_id", pJson["receipt_area_id"], err, false))
            return false;
    }
    if(pJson.isMember("receipt_address"))
    {
        if(!validJsonOfField(21, "receipt_address", pJson["receipt_address"], err, false))
            return false;
    }
    if(pJson.isMember("order_status"))
    {
        if(!validJsonOfField(22, "order_status", pJson["order_status"], err, false))
            return false;
    }
    if(pJson.isMember("quote_price_id"))
    {
        if(!validJsonOfField(23, "quote_price_id", pJson["quote_price_id"], err, false))
            return false;
    }
    if(pJson.isMember("deliver_time"))
    {
        if(!validJsonOfField(24, "deliver_time", pJson["deliver_time"], err, false))
            return false;
    }
    if(pJson.isMember("deliver_place"))
    {
        if(!validJsonOfField(25, "deliver_place", pJson["deliver_place"], err, false))
            return false;
    }
    if(pJson.isMember("point_num"))
    {
        if(!validJsonOfField(26, "point_num", pJson["point_num"], err, false))
            return false;
    }
    return true;
}
bool SaleOrderSku::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                    const std::vector<std::string> &pMasqueradingVector,
                                                    std::string &err)
{
    if(pMasqueradingVector.size() != 27)
    {
        err = "Bad masquerading vector";
        return false;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
            return false;
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
            return false;
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
            return false;
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
            return false;
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
            return false;
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
            return false;
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
            return false;
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, false))
            return false;
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, false))
            return false;
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, false))
            return false;
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, false))
            return false;
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, false))
            return false;
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        if(!validJsonOfField(13, pMasqueradingVector[13], pJson[pMasqueradingVector[13]], err, false))
            return false;
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        if(!validJsonOfField(14, pMasqueradingVector[14], pJson[pMasqueradingVector[14]], err, false))
            return false;
    }
    if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
    {
        if(!validJsonOfField(15, pMasqueradingVector[15], pJson[pMasqueradingVector[15]], err, false))
            return false;
    }
    if(!pMasqueradingVector[16].empty() && pJson.isMember(pMasqueradingVector[16]))
    {
        if(!validJsonOfField(16, pMasqueradingVector[16], pJson[pMasqueradingVector[16]], err, false))
            return false;
    }
    if(!pMasqueradingVector[17].empty() && pJson.isMember(pMasqueradingVector[17]))
    {
        if(!validJsonOfField(17, pMasqueradingVector[17], pJson[pMasqueradingVector[17]], err, false))
            return false;
    }
    if(!pMasqueradingVector[18].empty() && pJson.isMember(pMasqueradingVector[18]))
    {
        if(!validJsonOfField(18, pMasqueradingVector[18], pJson[pMasqueradingVector[18]], err, false))
            return false;
    }
    if(!pMasqueradingVector[19].empty() && pJson.isMember(pMasqueradingVector[19]))
    {
        if(!validJsonOfField(19, pMasqueradingVector[19], pJson[pMasqueradingVector[19]], err, false))
            return false;
    }
    if(!pMasqueradingVector[20].empty() && pJson.isMember(pMasqueradingVector[20]))
    {
        if(!validJsonOfField(20, pMasqueradingVector[20], pJson[pMasqueradingVector[20]], err, false))
            return false;
    }
    if(!pMasqueradingVector[21].empty() && pJson.isMember(pMasqueradingVector[21]))
    {
        if(!validJsonOfField(21, pMasqueradingVector[21], pJson[pMasqueradingVector[21]], err, false))
            return false;
    }
    if(!pMasqueradingVector[22].empty() && pJson.isMember(pMasqueradingVector[22]))
    {
        if(!validJsonOfField(22, pMasqueradingVector[22], pJson[pMasqueradingVector[22]], err, false))
            return false;
    }
    if(!pMasqueradingVector[23].empty() && pJson.isMember(pMasqueradingVector[23]))
    {
        if(!validJsonOfField(23, pMasqueradingVector[23], pJson[pMasqueradingVector[23]], err, false))
            return false;
    }
    if(!pMasqueradingVector[24].empty() && pJson.isMember(pMasqueradingVector[24]))
    {
        if(!validJsonOfField(24, pMasqueradingVector[24], pJson[pMasqueradingVector[24]], err, false))
            return false;
    }
    if(!pMasqueradingVector[25].empty() && pJson.isMember(pMasqueradingVector[25]))
    {
        if(!validJsonOfField(25, pMasqueradingVector[25], pJson[pMasqueradingVector[25]], err, false))
            return false;
    }
    if(!pMasqueradingVector[26].empty() && pJson.isMember(pMasqueradingVector[26]))
    {
        if(!validJsonOfField(26, pMasqueradingVector[26], pJson[pMasqueradingVector[26]], err, false))
            return false;
    }
    return true;
}
bool SaleOrderSku::validJsonOfField(size_t index,
                                    const std::string &fieldName,
                                    const Json::Value &pJson, 
                                    std::string &err, 
                                    bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }        
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 200)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 200)";
                return false;               
            }

            break;
        case 4:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 5:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 6:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 7:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 20)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 20)";
                return false;               
            }

            break;
        case 8:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 9:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 10:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 11:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 12:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 13:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 14:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 15:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 16:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 17:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 18:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 19:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 20:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 21:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 100)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 100)";
                return false;               
            }

            break;
        case 22:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 23:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 24:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 25:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 50)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 50)";
                return false;               
            }

            break;
        case 26:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
     
        default:
            err="Internal error in the server";
            return false;
            break;
    }
    return true;
}
