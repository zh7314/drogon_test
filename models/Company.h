/**
 *
 *  Company.h
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#pragma once
#include <drogon/orm/Result.h>
#include <drogon/orm/Row.h>
#include <drogon/orm/Field.h>
#include <drogon/orm/SqlBinder.h>
#include <drogon/orm/Mapper.h>
#include <trantor/utils/Date.h>
#include <trantor/utils/Logger.h>
#include <json/json.h>
#include <string>
#include <memory>
#include <vector>
#include <tuple>
#include <stdint.h>
#include <iostream>

using namespace drogon::orm;
namespace drogon
{
namespace orm
{
class DbClient;
using DbClientPtr = std::shared_ptr<DbClient>;
}
}
namespace drogon_model
{
namespace v2 
{

class Company
{
  public:
    struct Cols
    {
        static const std::string _id;
        static const std::string _create_time;
        static const std::string _update_time;
        static const std::string _company_name;
        static const std::string _company_short_name;
        static const std::string _company_type;
        static const std::string _shop_id;
        static const std::string _user_id;
        static const std::string _company_status;
        static const std::string _remark;
        static const std::string _company_fax;
        static const std::string _company_qq;
        static const std::string _company_email;
        static const std::string _company_trade_type;
        static const std::string _is_lock;
        static const std::string _company_logo;
        static const std::string _company_tax_number;
        static const std::string _company_billing_address;
        static const std::string _company_billing_phone;
        static const std::string _is_default;
        static const std::string _company_representative;
        static const std::string _is_delete;
        static const std::string _sort;
        static const std::string _account_balance;
        static const std::string _company_business_license;
        static const std::string _company_mail_address;
        static const std::string _province_id;
        static const std::string _city_id;
        static const std::string _area_id;
        static const std::string _address;
        static const std::string _company_phone;
        static const std::string _company_opening_bank;
        static const std::string _company_bank_account;
        static const std::string _supplier_level;
        static const std::string _k3_supplier_id;
        static const std::string _admin_id;
        static const std::string _score;
        static const std::string _score_json;
        static const std::string _score_status;
    };

    const static int primaryKeyNumber;
    const static std::string tableName;
    const static bool hasPrimaryKey;
    const static std::string primaryKeyName;
    using PrimaryKeyType = uint64_t;
    const PrimaryKeyType &getPrimaryKey() const;

    /**
     * @brief constructor
     * @param r One row of records in the SQL query result.
     * @param indexOffset Set the offset to -1 to access all columns by column names, 
     * otherwise access all columns by offsets.
     * @note If the SQL is not a style of 'select * from table_name ...' (select all 
     * columns by an asterisk), please set the offset to -1.
     */
    explicit Company(const Row &r, const ssize_t indexOffset = 0) noexcept;

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     */
    explicit Company(const Json::Value &pJson) noexcept(false);

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     * @param pMasqueradingVector The aliases of table columns.
     */
    Company(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false);

    Company() = default;
    
    void updateByJson(const Json::Value &pJson) noexcept(false);
    void updateByMasqueradedJson(const Json::Value &pJson,
                                 const std::vector<std::string> &pMasqueradingVector) noexcept(false);
    static bool validateJsonForCreation(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForCreation(const Json::Value &,
                                                const std::vector<std::string> &pMasqueradingVector,
                                                    std::string &err);
    static bool validateJsonForUpdate(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForUpdate(const Json::Value &,
                                          const std::vector<std::string> &pMasqueradingVector,
                                          std::string &err);
    static bool validJsonOfField(size_t index,
                          const std::string &fieldName,
                          const Json::Value &pJson, 
                          std::string &err, 
                          bool isForCreation);

    /**  For column id  */
    ///Get the value of the column id, returns the default value if the column is null
    const uint64_t &getValueOfId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint64_t> &getId() const noexcept;

    ///Set the value of the column id
    void setId(const uint64_t &pId) noexcept;


    /**  For column create_time  */
    ///Get the value of the column create_time, returns the default value if the column is null
    const ::trantor::Date &getValueOfCreateTime() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getCreateTime() const noexcept;

    ///Set the value of the column create_time
    void setCreateTime(const ::trantor::Date &pCreateTime) noexcept;


    /**  For column update_time  */
    ///Get the value of the column update_time, returns the default value if the column is null
    const ::trantor::Date &getValueOfUpdateTime() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getUpdateTime() const noexcept;

    ///Set the value of the column update_time
    void setUpdateTime(const ::trantor::Date &pUpdateTime) noexcept;


    /**  For column company_name  */
    ///Get the value of the column company_name, returns the default value if the column is null
    const std::string &getValueOfCompanyName() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getCompanyName() const noexcept;

    ///Set the value of the column company_name
    void setCompanyName(const std::string &pCompanyName) noexcept;
    void setCompanyName(std::string &&pCompanyName) noexcept;


    /**  For column company_short_name  */
    ///Get the value of the column company_short_name, returns the default value if the column is null
    const std::string &getValueOfCompanyShortName() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getCompanyShortName() const noexcept;

    ///Set the value of the column company_short_name
    void setCompanyShortName(const std::string &pCompanyShortName) noexcept;
    void setCompanyShortName(std::string &&pCompanyShortName) noexcept;
    void setCompanyShortNameToNull() noexcept;


    /**  For column company_type  */
    ///Get the value of the column company_type, returns the default value if the column is null
    const uint8_t &getValueOfCompanyType() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint8_t> &getCompanyType() const noexcept;

    ///Set the value of the column company_type
    void setCompanyType(const uint8_t &pCompanyType) noexcept;


    /**  For column shop_id  */
    ///Get the value of the column shop_id, returns the default value if the column is null
    const uint64_t &getValueOfShopId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint64_t> &getShopId() const noexcept;

    ///Set the value of the column shop_id
    void setShopId(const uint64_t &pShopId) noexcept;


    /**  For column user_id  */
    ///Get the value of the column user_id, returns the default value if the column is null
    const uint64_t &getValueOfUserId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint64_t> &getUserId() const noexcept;

    ///Set the value of the column user_id
    void setUserId(const uint64_t &pUserId) noexcept;


    /**  For column company_status  */
    ///Get the value of the column company_status, returns the default value if the column is null
    const int8_t &getValueOfCompanyStatus() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int8_t> &getCompanyStatus() const noexcept;

    ///Set the value of the column company_status
    void setCompanyStatus(const int8_t &pCompanyStatus) noexcept;


    /**  For column remark  */
    ///Get the value of the column remark, returns the default value if the column is null
    const std::string &getValueOfRemark() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getRemark() const noexcept;

    ///Set the value of the column remark
    void setRemark(const std::string &pRemark) noexcept;
    void setRemark(std::string &&pRemark) noexcept;
    void setRemarkToNull() noexcept;


    /**  For column company_fax  */
    ///Get the value of the column company_fax, returns the default value if the column is null
    const std::string &getValueOfCompanyFax() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getCompanyFax() const noexcept;

    ///Set the value of the column company_fax
    void setCompanyFax(const std::string &pCompanyFax) noexcept;
    void setCompanyFax(std::string &&pCompanyFax) noexcept;
    void setCompanyFaxToNull() noexcept;


    /**  For column company_qq  */
    ///Get the value of the column company_qq, returns the default value if the column is null
    const std::string &getValueOfCompanyQq() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getCompanyQq() const noexcept;

    ///Set the value of the column company_qq
    void setCompanyQq(const std::string &pCompanyQq) noexcept;
    void setCompanyQq(std::string &&pCompanyQq) noexcept;
    void setCompanyQqToNull() noexcept;


    /**  For column company_email  */
    ///Get the value of the column company_email, returns the default value if the column is null
    const std::string &getValueOfCompanyEmail() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getCompanyEmail() const noexcept;

    ///Set the value of the column company_email
    void setCompanyEmail(const std::string &pCompanyEmail) noexcept;
    void setCompanyEmail(std::string &&pCompanyEmail) noexcept;
    void setCompanyEmailToNull() noexcept;


    /**  For column company_trade_type  */
    ///Get the value of the column company_trade_type, returns the default value if the column is null
    const uint8_t &getValueOfCompanyTradeType() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint8_t> &getCompanyTradeType() const noexcept;

    ///Set the value of the column company_trade_type
    void setCompanyTradeType(const uint8_t &pCompanyTradeType) noexcept;


    /**  For column is_lock  */
    ///Get the value of the column is_lock, returns the default value if the column is null
    const uint8_t &getValueOfIsLock() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint8_t> &getIsLock() const noexcept;

    ///Set the value of the column is_lock
    void setIsLock(const uint8_t &pIsLock) noexcept;


    /**  For column company_logo  */
    ///Get the value of the column company_logo, returns the default value if the column is null
    const std::string &getValueOfCompanyLogo() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getCompanyLogo() const noexcept;

    ///Set the value of the column company_logo
    void setCompanyLogo(const std::string &pCompanyLogo) noexcept;
    void setCompanyLogo(std::string &&pCompanyLogo) noexcept;
    void setCompanyLogoToNull() noexcept;


    /**  For column company_tax_number  */
    ///Get the value of the column company_tax_number, returns the default value if the column is null
    const std::string &getValueOfCompanyTaxNumber() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getCompanyTaxNumber() const noexcept;

    ///Set the value of the column company_tax_number
    void setCompanyTaxNumber(const std::string &pCompanyTaxNumber) noexcept;
    void setCompanyTaxNumber(std::string &&pCompanyTaxNumber) noexcept;
    void setCompanyTaxNumberToNull() noexcept;


    /**  For column company_billing_address  */
    ///Get the value of the column company_billing_address, returns the default value if the column is null
    const std::string &getValueOfCompanyBillingAddress() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getCompanyBillingAddress() const noexcept;

    ///Set the value of the column company_billing_address
    void setCompanyBillingAddress(const std::string &pCompanyBillingAddress) noexcept;
    void setCompanyBillingAddress(std::string &&pCompanyBillingAddress) noexcept;
    void setCompanyBillingAddressToNull() noexcept;


    /**  For column company_billing_phone  */
    ///Get the value of the column company_billing_phone, returns the default value if the column is null
    const std::string &getValueOfCompanyBillingPhone() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getCompanyBillingPhone() const noexcept;

    ///Set the value of the column company_billing_phone
    void setCompanyBillingPhone(const std::string &pCompanyBillingPhone) noexcept;
    void setCompanyBillingPhone(std::string &&pCompanyBillingPhone) noexcept;


    /**  For column is_default  */
    ///Get the value of the column is_default, returns the default value if the column is null
    const uint8_t &getValueOfIsDefault() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint8_t> &getIsDefault() const noexcept;

    ///Set the value of the column is_default
    void setIsDefault(const uint8_t &pIsDefault) noexcept;


    /**  For column company_representative  */
    ///Get the value of the column company_representative, returns the default value if the column is null
    const std::string &getValueOfCompanyRepresentative() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getCompanyRepresentative() const noexcept;

    ///Set the value of the column company_representative
    void setCompanyRepresentative(const std::string &pCompanyRepresentative) noexcept;
    void setCompanyRepresentative(std::string &&pCompanyRepresentative) noexcept;
    void setCompanyRepresentativeToNull() noexcept;


    /**  For column is_delete  */
    ///Get the value of the column is_delete, returns the default value if the column is null
    const uint8_t &getValueOfIsDelete() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint8_t> &getIsDelete() const noexcept;

    ///Set the value of the column is_delete
    void setIsDelete(const uint8_t &pIsDelete) noexcept;


    /**  For column sort  */
    ///Get the value of the column sort, returns the default value if the column is null
    const uint8_t &getValueOfSort() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint8_t> &getSort() const noexcept;

    ///Set the value of the column sort
    void setSort(const uint8_t &pSort) noexcept;


    /**  For column account_balance  */
    ///Get the value of the column account_balance, returns the default value if the column is null
    const std::string &getValueOfAccountBalance() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getAccountBalance() const noexcept;

    ///Set the value of the column account_balance
    void setAccountBalance(const std::string &pAccountBalance) noexcept;
    void setAccountBalance(std::string &&pAccountBalance) noexcept;


    /**  For column company_business_license  */
    ///Get the value of the column company_business_license, returns the default value if the column is null
    const std::string &getValueOfCompanyBusinessLicense() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getCompanyBusinessLicense() const noexcept;

    ///Set the value of the column company_business_license
    void setCompanyBusinessLicense(const std::string &pCompanyBusinessLicense) noexcept;
    void setCompanyBusinessLicense(std::string &&pCompanyBusinessLicense) noexcept;
    void setCompanyBusinessLicenseToNull() noexcept;


    /**  For column company_mail_address  */
    ///Get the value of the column company_mail_address, returns the default value if the column is null
    const std::string &getValueOfCompanyMailAddress() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getCompanyMailAddress() const noexcept;

    ///Set the value of the column company_mail_address
    void setCompanyMailAddress(const std::string &pCompanyMailAddress) noexcept;
    void setCompanyMailAddress(std::string &&pCompanyMailAddress) noexcept;
    void setCompanyMailAddressToNull() noexcept;


    /**  For column province_id  */
    ///Get the value of the column province_id, returns the default value if the column is null
    const int64_t &getValueOfProvinceId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int64_t> &getProvinceId() const noexcept;

    ///Set the value of the column province_id
    void setProvinceId(const int64_t &pProvinceId) noexcept;


    /**  For column city_id  */
    ///Get the value of the column city_id, returns the default value if the column is null
    const int64_t &getValueOfCityId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int64_t> &getCityId() const noexcept;

    ///Set the value of the column city_id
    void setCityId(const int64_t &pCityId) noexcept;


    /**  For column area_id  */
    ///Get the value of the column area_id, returns the default value if the column is null
    const int64_t &getValueOfAreaId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int64_t> &getAreaId() const noexcept;

    ///Set the value of the column area_id
    void setAreaId(const int64_t &pAreaId) noexcept;


    /**  For column address  */
    ///Get the value of the column address, returns the default value if the column is null
    const std::string &getValueOfAddress() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getAddress() const noexcept;

    ///Set the value of the column address
    void setAddress(const std::string &pAddress) noexcept;
    void setAddress(std::string &&pAddress) noexcept;
    void setAddressToNull() noexcept;


    /**  For column company_phone  */
    ///Get the value of the column company_phone, returns the default value if the column is null
    const std::string &getValueOfCompanyPhone() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getCompanyPhone() const noexcept;

    ///Set the value of the column company_phone
    void setCompanyPhone(const std::string &pCompanyPhone) noexcept;
    void setCompanyPhone(std::string &&pCompanyPhone) noexcept;
    void setCompanyPhoneToNull() noexcept;


    /**  For column company_opening_bank  */
    ///Get the value of the column company_opening_bank, returns the default value if the column is null
    const std::string &getValueOfCompanyOpeningBank() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getCompanyOpeningBank() const noexcept;

    ///Set the value of the column company_opening_bank
    void setCompanyOpeningBank(const std::string &pCompanyOpeningBank) noexcept;
    void setCompanyOpeningBank(std::string &&pCompanyOpeningBank) noexcept;
    void setCompanyOpeningBankToNull() noexcept;


    /**  For column company_bank_account  */
    ///Get the value of the column company_bank_account, returns the default value if the column is null
    const std::string &getValueOfCompanyBankAccount() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getCompanyBankAccount() const noexcept;

    ///Set the value of the column company_bank_account
    void setCompanyBankAccount(const std::string &pCompanyBankAccount) noexcept;
    void setCompanyBankAccount(std::string &&pCompanyBankAccount) noexcept;
    void setCompanyBankAccountToNull() noexcept;


    /**  For column supplier_level  */
    ///Get the value of the column supplier_level, returns the default value if the column is null
    const uint8_t &getValueOfSupplierLevel() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint8_t> &getSupplierLevel() const noexcept;

    ///Set the value of the column supplier_level
    void setSupplierLevel(const uint8_t &pSupplierLevel) noexcept;


    /**  For column k3_supplier_id  */
    ///Get the value of the column k3_supplier_id, returns the default value if the column is null
    const int32_t &getValueOfK3SupplierId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getK3SupplierId() const noexcept;

    ///Set the value of the column k3_supplier_id
    void setK3SupplierId(const int32_t &pK3SupplierId) noexcept;


    /**  For column admin_id  */
    ///Get the value of the column admin_id, returns the default value if the column is null
    const uint64_t &getValueOfAdminId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint64_t> &getAdminId() const noexcept;

    ///Set the value of the column admin_id
    void setAdminId(const uint64_t &pAdminId) noexcept;


    /**  For column score  */
    ///Get the value of the column score, returns the default value if the column is null
    const std::string &getValueOfScore() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getScore() const noexcept;

    ///Set the value of the column score
    void setScore(const std::string &pScore) noexcept;
    void setScore(std::string &&pScore) noexcept;


    /**  For column score_json  */
    ///Get the value of the column score_json, returns the default value if the column is null
    const std::string &getValueOfScoreJson() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getScoreJson() const noexcept;

    ///Set the value of the column score_json
    void setScoreJson(const std::string &pScoreJson) noexcept;
    void setScoreJson(std::string &&pScoreJson) noexcept;
    void setScoreJsonToNull() noexcept;


    /**  For column score_status  */
    ///Get the value of the column score_status, returns the default value if the column is null
    const uint8_t &getValueOfScoreStatus() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint8_t> &getScoreStatus() const noexcept;

    ///Set the value of the column score_status
    void setScoreStatus(const uint8_t &pScoreStatus) noexcept;



    static size_t getColumnNumber() noexcept {  return 39;  }
    static const std::string &getColumnName(size_t index) noexcept(false);

    Json::Value toJson() const;
    Json::Value toMasqueradedJson(const std::vector<std::string> &pMasqueradingVector) const;
    /// Relationship interfaces
  private:
    friend Mapper<Company>;
    static const std::vector<std::string> &insertColumns() noexcept;
    void outputArgs(drogon::orm::internal::SqlBinder &binder) const;
    const std::vector<std::string> updateColumns() const;
    void updateArgs(drogon::orm::internal::SqlBinder &binder) const;
    ///For mysql or sqlite3
    void updateId(const uint64_t id);
    std::shared_ptr<uint64_t> id_;
    std::shared_ptr<::trantor::Date> createTime_;
    std::shared_ptr<::trantor::Date> updateTime_;
    std::shared_ptr<std::string> companyName_;
    std::shared_ptr<std::string> companyShortName_;
    std::shared_ptr<uint8_t> companyType_;
    std::shared_ptr<uint64_t> shopId_;
    std::shared_ptr<uint64_t> userId_;
    std::shared_ptr<int8_t> companyStatus_;
    std::shared_ptr<std::string> remark_;
    std::shared_ptr<std::string> companyFax_;
    std::shared_ptr<std::string> companyQq_;
    std::shared_ptr<std::string> companyEmail_;
    std::shared_ptr<uint8_t> companyTradeType_;
    std::shared_ptr<uint8_t> isLock_;
    std::shared_ptr<std::string> companyLogo_;
    std::shared_ptr<std::string> companyTaxNumber_;
    std::shared_ptr<std::string> companyBillingAddress_;
    std::shared_ptr<std::string> companyBillingPhone_;
    std::shared_ptr<uint8_t> isDefault_;
    std::shared_ptr<std::string> companyRepresentative_;
    std::shared_ptr<uint8_t> isDelete_;
    std::shared_ptr<uint8_t> sort_;
    std::shared_ptr<std::string> accountBalance_;
    std::shared_ptr<std::string> companyBusinessLicense_;
    std::shared_ptr<std::string> companyMailAddress_;
    std::shared_ptr<int64_t> provinceId_;
    std::shared_ptr<int64_t> cityId_;
    std::shared_ptr<int64_t> areaId_;
    std::shared_ptr<std::string> address_;
    std::shared_ptr<std::string> companyPhone_;
    std::shared_ptr<std::string> companyOpeningBank_;
    std::shared_ptr<std::string> companyBankAccount_;
    std::shared_ptr<uint8_t> supplierLevel_;
    std::shared_ptr<int32_t> k3SupplierId_;
    std::shared_ptr<uint64_t> adminId_;
    std::shared_ptr<std::string> score_;
    std::shared_ptr<std::string> scoreJson_;
    std::shared_ptr<uint8_t> scoreStatus_;
    struct MetaData
    {
        const std::string colName_;
        const std::string colType_;
        const std::string colDatabaseType_;
        const ssize_t colLength_;
        const bool isAutoVal_;
        const bool isPrimaryKey_;
        const bool notNull_;
    };
    static const std::vector<MetaData> metaData_;
    bool dirtyFlag_[39]={ false };
  public:
    static const std::string &sqlForFindingByPrimaryKey()
    {
        static const std::string sql="select * from " + tableName + " where id = ?";
        return sql;                   
    }

    static const std::string &sqlForDeletingByPrimaryKey()
    {
        static const std::string sql="delete from " + tableName + " where id = ?";
        return sql;                   
    }
    std::string sqlForInserting(bool &needSelection) const
    {
        std::string sql="insert into " + tableName + " (";
        size_t parametersCount = 0;
        needSelection = false;
            sql += "id,";
            ++parametersCount;
        sql += "create_time,";
        ++parametersCount;
        if(!dirtyFlag_[1])
        {
            needSelection=true;
        }
        sql += "update_time,";
        ++parametersCount;
        if(!dirtyFlag_[2])
        {
            needSelection=true;
        }
        if(dirtyFlag_[3])
        {
            sql += "company_name,";
            ++parametersCount;
        }
        if(dirtyFlag_[4])
        {
            sql += "company_short_name,";
            ++parametersCount;
        }
        sql += "company_type,";
        ++parametersCount;
        if(!dirtyFlag_[5])
        {
            needSelection=true;
        }
        sql += "shop_id,";
        ++parametersCount;
        if(!dirtyFlag_[6])
        {
            needSelection=true;
        }
        sql += "user_id,";
        ++parametersCount;
        if(!dirtyFlag_[7])
        {
            needSelection=true;
        }
        sql += "company_status,";
        ++parametersCount;
        if(!dirtyFlag_[8])
        {
            needSelection=true;
        }
        if(dirtyFlag_[9])
        {
            sql += "remark,";
            ++parametersCount;
        }
        if(dirtyFlag_[10])
        {
            sql += "company_fax,";
            ++parametersCount;
        }
        if(dirtyFlag_[11])
        {
            sql += "company_qq,";
            ++parametersCount;
        }
        if(dirtyFlag_[12])
        {
            sql += "company_email,";
            ++parametersCount;
        }
        sql += "company_trade_type,";
        ++parametersCount;
        if(!dirtyFlag_[13])
        {
            needSelection=true;
        }
        sql += "is_lock,";
        ++parametersCount;
        if(!dirtyFlag_[14])
        {
            needSelection=true;
        }
        if(dirtyFlag_[15])
        {
            sql += "company_logo,";
            ++parametersCount;
        }
        if(dirtyFlag_[16])
        {
            sql += "company_tax_number,";
            ++parametersCount;
        }
        if(dirtyFlag_[17])
        {
            sql += "company_billing_address,";
            ++parametersCount;
        }
        if(dirtyFlag_[18])
        {
            sql += "company_billing_phone,";
            ++parametersCount;
        }
        sql += "is_default,";
        ++parametersCount;
        if(!dirtyFlag_[19])
        {
            needSelection=true;
        }
        if(dirtyFlag_[20])
        {
            sql += "company_representative,";
            ++parametersCount;
        }
        sql += "is_delete,";
        ++parametersCount;
        if(!dirtyFlag_[21])
        {
            needSelection=true;
        }
        sql += "sort,";
        ++parametersCount;
        if(!dirtyFlag_[22])
        {
            needSelection=true;
        }
        sql += "account_balance,";
        ++parametersCount;
        if(!dirtyFlag_[23])
        {
            needSelection=true;
        }
        if(dirtyFlag_[24])
        {
            sql += "company_business_license,";
            ++parametersCount;
        }
        if(dirtyFlag_[25])
        {
            sql += "company_mail_address,";
            ++parametersCount;
        }
        sql += "province_id,";
        ++parametersCount;
        if(!dirtyFlag_[26])
        {
            needSelection=true;
        }
        sql += "city_id,";
        ++parametersCount;
        if(!dirtyFlag_[27])
        {
            needSelection=true;
        }
        sql += "area_id,";
        ++parametersCount;
        if(!dirtyFlag_[28])
        {
            needSelection=true;
        }
        if(dirtyFlag_[29])
        {
            sql += "address,";
            ++parametersCount;
        }
        if(dirtyFlag_[30])
        {
            sql += "company_phone,";
            ++parametersCount;
        }
        if(dirtyFlag_[31])
        {
            sql += "company_opening_bank,";
            ++parametersCount;
        }
        if(dirtyFlag_[32])
        {
            sql += "company_bank_account,";
            ++parametersCount;
        }
        sql += "supplier_level,";
        ++parametersCount;
        if(!dirtyFlag_[33])
        {
            needSelection=true;
        }
        sql += "k3_supplier_id,";
        ++parametersCount;
        if(!dirtyFlag_[34])
        {
            needSelection=true;
        }
        sql += "admin_id,";
        ++parametersCount;
        if(!dirtyFlag_[35])
        {
            needSelection=true;
        }
        sql += "score,";
        ++parametersCount;
        if(!dirtyFlag_[36])
        {
            needSelection=true;
        }
        if(dirtyFlag_[37])
        {
            sql += "score_json,";
            ++parametersCount;
        }
        sql += "score_status,";
        ++parametersCount;
        if(!dirtyFlag_[38])
        {
            needSelection=true;
        }
        needSelection=true;
        if(parametersCount > 0)
        {
            sql[sql.length()-1]=')';
            sql += " values (";
        }
        else
            sql += ") values (";
        
        sql +="default,";
        if(dirtyFlag_[1])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[2])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[3])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[4])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[5])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[6])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[7])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[8])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[9])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[10])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[11])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[12])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[13])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[14])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[15])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[16])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[17])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[18])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[19])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[20])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[21])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[22])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[23])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[24])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[25])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[26])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[27])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[28])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[29])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[30])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[31])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[32])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[33])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[34])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[35])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[36])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[37])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[38])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(parametersCount > 0)
        {
            sql.resize(sql.length() - 1);
        }
        sql.append(1, ')');
        LOG_TRACE << sql;
        return sql;   
    }
};
} // namespace v2
} // namespace drogon_model
