/**
 *
 *  Shop.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Shop.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::v2;

const std::string Shop::Cols::_id = "id";
const std::string Shop::Cols::_create_time = "create_time";
const std::string Shop::Cols::_update_time = "update_time";
const std::string Shop::Cols::_shop_title = "shop_title";
const std::string Shop::Cols::_shop_brief_introduction = "shop_brief_introduction";
const std::string Shop::Cols::_shop_keywords = "shop_keywords";
const std::string Shop::Cols::_shop_description = "shop_description";
const std::string Shop::Cols::_shop_qq = "shop_qq";
const std::string Shop::Cols::_shop_phone = "shop_phone";
const std::string Shop::Cols::_shop_logo = "shop_logo";
const std::string Shop::Cols::_shop_type = "shop_type";
const std::string Shop::Cols::_shop_status = "shop_status";
const std::string Shop::Cols::_is_closed = "is_closed";
const std::string Shop::Cols::_shop_avatar = "shop_avatar";
const std::string Shop::Cols::_shop_business_start_time = "shop_business_start_time";
const std::string Shop::Cols::_shop_business_end_time = "shop_business_end_time";
const std::string Shop::Cols::_remark = "remark";
const std::string Shop::Cols::_sort = "sort";
const std::string Shop::Cols::_is_recommend = "is_recommend";
const std::string Shop::Cols::_is_lock = "is_lock";
const std::string Shop::Cols::_shop_email = "shop_email";
const std::string Shop::Cols::_shop_main_variety = "shop_main_variety";
const std::string Shop::Cols::_is_delete = "is_delete";
const std::string Shop::Cols::_k3_on_off = "k3_on_off";
const std::string Shop::primaryKeyName = "id";
const bool Shop::hasPrimaryKey = true;
const std::string Shop::tableName = "shop";

const std::vector<typename Shop::MetaData> Shop::metaData_={
{"id","uint64_t","bigint(20) unsigned",8,1,1,1},
{"create_time","::trantor::Date","datetime",0,0,0,1},
{"update_time","::trantor::Date","datetime",0,0,0,1},
{"shop_title","std::string","varchar(50)",50,0,0,0},
{"shop_brief_introduction","std::string","varchar(50)",50,0,0,0},
{"shop_keywords","std::string","varchar(100)",100,0,0,0},
{"shop_description","std::string","varchar(100)",100,0,0,0},
{"shop_qq","std::string","varchar(20)",20,0,0,0},
{"shop_phone","std::string","varchar(20)",20,0,0,0},
{"shop_logo","std::string","varchar(100)",100,0,0,0},
{"shop_type","uint8_t","tinyint(1) unsigned",1,0,0,1},
{"shop_status","uint8_t","tinyint(1) unsigned",1,0,0,1},
{"is_closed","uint8_t","tinyint(1) unsigned",1,0,0,1},
{"shop_avatar","std::string","varchar(100)",100,0,0,0},
{"shop_business_start_time","std::string","varchar(10)",10,0,0,1},
{"shop_business_end_time","std::string","varchar(10)",10,0,0,1},
{"remark","std::string","varchar(100)",100,0,0,0},
{"sort","uint8_t","tinyint(1) unsigned",1,0,0,1},
{"is_recommend","int8_t","tinyint(1)",1,0,0,1},
{"is_lock","int8_t","tinyint(1)",1,0,0,1},
{"shop_email","std::string","varchar(50)",50,0,0,0},
{"shop_main_variety","std::string","varchar(200)",200,0,0,0},
{"is_delete","int8_t","tinyint(1)",1,0,0,1},
{"k3_on_off","int8_t","tinyint(1)",1,0,0,1}
};
const std::string &Shop::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Shop::Shop(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<uint64_t>(r["id"].as<uint64_t>());
        }
        if(!r["create_time"].isNull())
        {
            auto timeStr = r["create_time"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        if(!r["update_time"].isNull())
        {
            auto timeStr = r["update_time"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        if(!r["shop_title"].isNull())
        {
            shopTitle_=std::make_shared<std::string>(r["shop_title"].as<std::string>());
        }
        if(!r["shop_brief_introduction"].isNull())
        {
            shopBriefIntroduction_=std::make_shared<std::string>(r["shop_brief_introduction"].as<std::string>());
        }
        if(!r["shop_keywords"].isNull())
        {
            shopKeywords_=std::make_shared<std::string>(r["shop_keywords"].as<std::string>());
        }
        if(!r["shop_description"].isNull())
        {
            shopDescription_=std::make_shared<std::string>(r["shop_description"].as<std::string>());
        }
        if(!r["shop_qq"].isNull())
        {
            shopQq_=std::make_shared<std::string>(r["shop_qq"].as<std::string>());
        }
        if(!r["shop_phone"].isNull())
        {
            shopPhone_=std::make_shared<std::string>(r["shop_phone"].as<std::string>());
        }
        if(!r["shop_logo"].isNull())
        {
            shopLogo_=std::make_shared<std::string>(r["shop_logo"].as<std::string>());
        }
        if(!r["shop_type"].isNull())
        {
            shopType_=std::make_shared<uint8_t>(r["shop_type"].as<uint8_t>());
        }
        if(!r["shop_status"].isNull())
        {
            shopStatus_=std::make_shared<uint8_t>(r["shop_status"].as<uint8_t>());
        }
        if(!r["is_closed"].isNull())
        {
            isClosed_=std::make_shared<uint8_t>(r["is_closed"].as<uint8_t>());
        }
        if(!r["shop_avatar"].isNull())
        {
            shopAvatar_=std::make_shared<std::string>(r["shop_avatar"].as<std::string>());
        }
        if(!r["shop_business_start_time"].isNull())
        {
            shopBusinessStartTime_=std::make_shared<std::string>(r["shop_business_start_time"].as<std::string>());
        }
        if(!r["shop_business_end_time"].isNull())
        {
            shopBusinessEndTime_=std::make_shared<std::string>(r["shop_business_end_time"].as<std::string>());
        }
        if(!r["remark"].isNull())
        {
            remark_=std::make_shared<std::string>(r["remark"].as<std::string>());
        }
        if(!r["sort"].isNull())
        {
            sort_=std::make_shared<uint8_t>(r["sort"].as<uint8_t>());
        }
        if(!r["is_recommend"].isNull())
        {
            isRecommend_=std::make_shared<int8_t>(r["is_recommend"].as<int8_t>());
        }
        if(!r["is_lock"].isNull())
        {
            isLock_=std::make_shared<int8_t>(r["is_lock"].as<int8_t>());
        }
        if(!r["shop_email"].isNull())
        {
            shopEmail_=std::make_shared<std::string>(r["shop_email"].as<std::string>());
        }
        if(!r["shop_main_variety"].isNull())
        {
            shopMainVariety_=std::make_shared<std::string>(r["shop_main_variety"].as<std::string>());
        }
        if(!r["is_delete"].isNull())
        {
            isDelete_=std::make_shared<int8_t>(r["is_delete"].as<int8_t>());
        }
        if(!r["k3_on_off"].isNull())
        {
            k3OnOff_=std::make_shared<int8_t>(r["k3_on_off"].as<int8_t>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 24 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            shopTitle_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            shopBriefIntroduction_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            shopKeywords_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            shopDescription_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            shopQq_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 8;
        if(!r[index].isNull())
        {
            shopPhone_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 9;
        if(!r[index].isNull())
        {
            shopLogo_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 10;
        if(!r[index].isNull())
        {
            shopType_=std::make_shared<uint8_t>(r[index].as<uint8_t>());
        }
        index = offset + 11;
        if(!r[index].isNull())
        {
            shopStatus_=std::make_shared<uint8_t>(r[index].as<uint8_t>());
        }
        index = offset + 12;
        if(!r[index].isNull())
        {
            isClosed_=std::make_shared<uint8_t>(r[index].as<uint8_t>());
        }
        index = offset + 13;
        if(!r[index].isNull())
        {
            shopAvatar_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 14;
        if(!r[index].isNull())
        {
            shopBusinessStartTime_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 15;
        if(!r[index].isNull())
        {
            shopBusinessEndTime_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 16;
        if(!r[index].isNull())
        {
            remark_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 17;
        if(!r[index].isNull())
        {
            sort_=std::make_shared<uint8_t>(r[index].as<uint8_t>());
        }
        index = offset + 18;
        if(!r[index].isNull())
        {
            isRecommend_=std::make_shared<int8_t>(r[index].as<int8_t>());
        }
        index = offset + 19;
        if(!r[index].isNull())
        {
            isLock_=std::make_shared<int8_t>(r[index].as<int8_t>());
        }
        index = offset + 20;
        if(!r[index].isNull())
        {
            shopEmail_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 21;
        if(!r[index].isNull())
        {
            shopMainVariety_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 22;
        if(!r[index].isNull())
        {
            isDelete_=std::make_shared<int8_t>(r[index].as<int8_t>());
        }
        index = offset + 23;
        if(!r[index].isNull())
        {
            k3OnOff_=std::make_shared<int8_t>(r[index].as<int8_t>());
        }
    }

}

Shop::Shop(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 24)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[1]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[2]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            shopTitle_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            shopBriefIntroduction_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            shopKeywords_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            shopDescription_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            shopQq_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            shopPhone_=std::make_shared<std::string>(pJson[pMasqueradingVector[8]].asString());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            shopLogo_=std::make_shared<std::string>(pJson[pMasqueradingVector[9]].asString());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            shopType_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[10]].asUInt64());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            shopStatus_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[11]].asUInt64());
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            isClosed_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[12]].asUInt64());
        }
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        dirtyFlag_[13] = true;
        if(!pJson[pMasqueradingVector[13]].isNull())
        {
            shopAvatar_=std::make_shared<std::string>(pJson[pMasqueradingVector[13]].asString());
        }
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        dirtyFlag_[14] = true;
        if(!pJson[pMasqueradingVector[14]].isNull())
        {
            shopBusinessStartTime_=std::make_shared<std::string>(pJson[pMasqueradingVector[14]].asString());
        }
    }
    if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
    {
        dirtyFlag_[15] = true;
        if(!pJson[pMasqueradingVector[15]].isNull())
        {
            shopBusinessEndTime_=std::make_shared<std::string>(pJson[pMasqueradingVector[15]].asString());
        }
    }
    if(!pMasqueradingVector[16].empty() && pJson.isMember(pMasqueradingVector[16]))
    {
        dirtyFlag_[16] = true;
        if(!pJson[pMasqueradingVector[16]].isNull())
        {
            remark_=std::make_shared<std::string>(pJson[pMasqueradingVector[16]].asString());
        }
    }
    if(!pMasqueradingVector[17].empty() && pJson.isMember(pMasqueradingVector[17]))
    {
        dirtyFlag_[17] = true;
        if(!pJson[pMasqueradingVector[17]].isNull())
        {
            sort_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[17]].asUInt64());
        }
    }
    if(!pMasqueradingVector[18].empty() && pJson.isMember(pMasqueradingVector[18]))
    {
        dirtyFlag_[18] = true;
        if(!pJson[pMasqueradingVector[18]].isNull())
        {
            isRecommend_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[18]].asInt64());
        }
    }
    if(!pMasqueradingVector[19].empty() && pJson.isMember(pMasqueradingVector[19]))
    {
        dirtyFlag_[19] = true;
        if(!pJson[pMasqueradingVector[19]].isNull())
        {
            isLock_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[19]].asInt64());
        }
    }
    if(!pMasqueradingVector[20].empty() && pJson.isMember(pMasqueradingVector[20]))
    {
        dirtyFlag_[20] = true;
        if(!pJson[pMasqueradingVector[20]].isNull())
        {
            shopEmail_=std::make_shared<std::string>(pJson[pMasqueradingVector[20]].asString());
        }
    }
    if(!pMasqueradingVector[21].empty() && pJson.isMember(pMasqueradingVector[21]))
    {
        dirtyFlag_[21] = true;
        if(!pJson[pMasqueradingVector[21]].isNull())
        {
            shopMainVariety_=std::make_shared<std::string>(pJson[pMasqueradingVector[21]].asString());
        }
    }
    if(!pMasqueradingVector[22].empty() && pJson.isMember(pMasqueradingVector[22]))
    {
        dirtyFlag_[22] = true;
        if(!pJson[pMasqueradingVector[22]].isNull())
        {
            isDelete_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[22]].asInt64());
        }
    }
    if(!pMasqueradingVector[23].empty() && pJson.isMember(pMasqueradingVector[23]))
    {
        dirtyFlag_[23] = true;
        if(!pJson[pMasqueradingVector[23]].isNull())
        {
            k3OnOff_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[23]].asInt64());
        }
    }
}

Shop::Shop(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson["id"].asUInt64());
        }
    }
    if(pJson.isMember("create_time"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["create_time"].isNull())
        {
            auto timeStr = pJson["create_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("update_time"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["update_time"].isNull())
        {
            auto timeStr = pJson["update_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("shop_title"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["shop_title"].isNull())
        {
            shopTitle_=std::make_shared<std::string>(pJson["shop_title"].asString());
        }
    }
    if(pJson.isMember("shop_brief_introduction"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["shop_brief_introduction"].isNull())
        {
            shopBriefIntroduction_=std::make_shared<std::string>(pJson["shop_brief_introduction"].asString());
        }
    }
    if(pJson.isMember("shop_keywords"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["shop_keywords"].isNull())
        {
            shopKeywords_=std::make_shared<std::string>(pJson["shop_keywords"].asString());
        }
    }
    if(pJson.isMember("shop_description"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["shop_description"].isNull())
        {
            shopDescription_=std::make_shared<std::string>(pJson["shop_description"].asString());
        }
    }
    if(pJson.isMember("shop_qq"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["shop_qq"].isNull())
        {
            shopQq_=std::make_shared<std::string>(pJson["shop_qq"].asString());
        }
    }
    if(pJson.isMember("shop_phone"))
    {
        dirtyFlag_[8]=true;
        if(!pJson["shop_phone"].isNull())
        {
            shopPhone_=std::make_shared<std::string>(pJson["shop_phone"].asString());
        }
    }
    if(pJson.isMember("shop_logo"))
    {
        dirtyFlag_[9]=true;
        if(!pJson["shop_logo"].isNull())
        {
            shopLogo_=std::make_shared<std::string>(pJson["shop_logo"].asString());
        }
    }
    if(pJson.isMember("shop_type"))
    {
        dirtyFlag_[10]=true;
        if(!pJson["shop_type"].isNull())
        {
            shopType_=std::make_shared<uint8_t>((uint8_t)pJson["shop_type"].asUInt64());
        }
    }
    if(pJson.isMember("shop_status"))
    {
        dirtyFlag_[11]=true;
        if(!pJson["shop_status"].isNull())
        {
            shopStatus_=std::make_shared<uint8_t>((uint8_t)pJson["shop_status"].asUInt64());
        }
    }
    if(pJson.isMember("is_closed"))
    {
        dirtyFlag_[12]=true;
        if(!pJson["is_closed"].isNull())
        {
            isClosed_=std::make_shared<uint8_t>((uint8_t)pJson["is_closed"].asUInt64());
        }
    }
    if(pJson.isMember("shop_avatar"))
    {
        dirtyFlag_[13]=true;
        if(!pJson["shop_avatar"].isNull())
        {
            shopAvatar_=std::make_shared<std::string>(pJson["shop_avatar"].asString());
        }
    }
    if(pJson.isMember("shop_business_start_time"))
    {
        dirtyFlag_[14]=true;
        if(!pJson["shop_business_start_time"].isNull())
        {
            shopBusinessStartTime_=std::make_shared<std::string>(pJson["shop_business_start_time"].asString());
        }
    }
    if(pJson.isMember("shop_business_end_time"))
    {
        dirtyFlag_[15]=true;
        if(!pJson["shop_business_end_time"].isNull())
        {
            shopBusinessEndTime_=std::make_shared<std::string>(pJson["shop_business_end_time"].asString());
        }
    }
    if(pJson.isMember("remark"))
    {
        dirtyFlag_[16]=true;
        if(!pJson["remark"].isNull())
        {
            remark_=std::make_shared<std::string>(pJson["remark"].asString());
        }
    }
    if(pJson.isMember("sort"))
    {
        dirtyFlag_[17]=true;
        if(!pJson["sort"].isNull())
        {
            sort_=std::make_shared<uint8_t>((uint8_t)pJson["sort"].asUInt64());
        }
    }
    if(pJson.isMember("is_recommend"))
    {
        dirtyFlag_[18]=true;
        if(!pJson["is_recommend"].isNull())
        {
            isRecommend_=std::make_shared<int8_t>((int8_t)pJson["is_recommend"].asInt64());
        }
    }
    if(pJson.isMember("is_lock"))
    {
        dirtyFlag_[19]=true;
        if(!pJson["is_lock"].isNull())
        {
            isLock_=std::make_shared<int8_t>((int8_t)pJson["is_lock"].asInt64());
        }
    }
    if(pJson.isMember("shop_email"))
    {
        dirtyFlag_[20]=true;
        if(!pJson["shop_email"].isNull())
        {
            shopEmail_=std::make_shared<std::string>(pJson["shop_email"].asString());
        }
    }
    if(pJson.isMember("shop_main_variety"))
    {
        dirtyFlag_[21]=true;
        if(!pJson["shop_main_variety"].isNull())
        {
            shopMainVariety_=std::make_shared<std::string>(pJson["shop_main_variety"].asString());
        }
    }
    if(pJson.isMember("is_delete"))
    {
        dirtyFlag_[22]=true;
        if(!pJson["is_delete"].isNull())
        {
            isDelete_=std::make_shared<int8_t>((int8_t)pJson["is_delete"].asInt64());
        }
    }
    if(pJson.isMember("k3_on_off"))
    {
        dirtyFlag_[23]=true;
        if(!pJson["k3_on_off"].isNull())
        {
            k3OnOff_=std::make_shared<int8_t>((int8_t)pJson["k3_on_off"].asInt64());
        }
    }
}

void Shop::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 24)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[1]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[2]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            shopTitle_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            shopBriefIntroduction_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            shopKeywords_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            shopDescription_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            shopQq_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            shopPhone_=std::make_shared<std::string>(pJson[pMasqueradingVector[8]].asString());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            shopLogo_=std::make_shared<std::string>(pJson[pMasqueradingVector[9]].asString());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            shopType_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[10]].asUInt64());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            shopStatus_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[11]].asUInt64());
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            isClosed_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[12]].asUInt64());
        }
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        dirtyFlag_[13] = true;
        if(!pJson[pMasqueradingVector[13]].isNull())
        {
            shopAvatar_=std::make_shared<std::string>(pJson[pMasqueradingVector[13]].asString());
        }
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        dirtyFlag_[14] = true;
        if(!pJson[pMasqueradingVector[14]].isNull())
        {
            shopBusinessStartTime_=std::make_shared<std::string>(pJson[pMasqueradingVector[14]].asString());
        }
    }
    if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
    {
        dirtyFlag_[15] = true;
        if(!pJson[pMasqueradingVector[15]].isNull())
        {
            shopBusinessEndTime_=std::make_shared<std::string>(pJson[pMasqueradingVector[15]].asString());
        }
    }
    if(!pMasqueradingVector[16].empty() && pJson.isMember(pMasqueradingVector[16]))
    {
        dirtyFlag_[16] = true;
        if(!pJson[pMasqueradingVector[16]].isNull())
        {
            remark_=std::make_shared<std::string>(pJson[pMasqueradingVector[16]].asString());
        }
    }
    if(!pMasqueradingVector[17].empty() && pJson.isMember(pMasqueradingVector[17]))
    {
        dirtyFlag_[17] = true;
        if(!pJson[pMasqueradingVector[17]].isNull())
        {
            sort_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[17]].asUInt64());
        }
    }
    if(!pMasqueradingVector[18].empty() && pJson.isMember(pMasqueradingVector[18]))
    {
        dirtyFlag_[18] = true;
        if(!pJson[pMasqueradingVector[18]].isNull())
        {
            isRecommend_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[18]].asInt64());
        }
    }
    if(!pMasqueradingVector[19].empty() && pJson.isMember(pMasqueradingVector[19]))
    {
        dirtyFlag_[19] = true;
        if(!pJson[pMasqueradingVector[19]].isNull())
        {
            isLock_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[19]].asInt64());
        }
    }
    if(!pMasqueradingVector[20].empty() && pJson.isMember(pMasqueradingVector[20]))
    {
        dirtyFlag_[20] = true;
        if(!pJson[pMasqueradingVector[20]].isNull())
        {
            shopEmail_=std::make_shared<std::string>(pJson[pMasqueradingVector[20]].asString());
        }
    }
    if(!pMasqueradingVector[21].empty() && pJson.isMember(pMasqueradingVector[21]))
    {
        dirtyFlag_[21] = true;
        if(!pJson[pMasqueradingVector[21]].isNull())
        {
            shopMainVariety_=std::make_shared<std::string>(pJson[pMasqueradingVector[21]].asString());
        }
    }
    if(!pMasqueradingVector[22].empty() && pJson.isMember(pMasqueradingVector[22]))
    {
        dirtyFlag_[22] = true;
        if(!pJson[pMasqueradingVector[22]].isNull())
        {
            isDelete_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[22]].asInt64());
        }
    }
    if(!pMasqueradingVector[23].empty() && pJson.isMember(pMasqueradingVector[23]))
    {
        dirtyFlag_[23] = true;
        if(!pJson[pMasqueradingVector[23]].isNull())
        {
            k3OnOff_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[23]].asInt64());
        }
    }
}
                                                                    
void Shop::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson["id"].asUInt64());
        }
    }
    if(pJson.isMember("create_time"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["create_time"].isNull())
        {
            auto timeStr = pJson["create_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("update_time"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["update_time"].isNull())
        {
            auto timeStr = pJson["update_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("shop_title"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["shop_title"].isNull())
        {
            shopTitle_=std::make_shared<std::string>(pJson["shop_title"].asString());
        }
    }
    if(pJson.isMember("shop_brief_introduction"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["shop_brief_introduction"].isNull())
        {
            shopBriefIntroduction_=std::make_shared<std::string>(pJson["shop_brief_introduction"].asString());
        }
    }
    if(pJson.isMember("shop_keywords"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["shop_keywords"].isNull())
        {
            shopKeywords_=std::make_shared<std::string>(pJson["shop_keywords"].asString());
        }
    }
    if(pJson.isMember("shop_description"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["shop_description"].isNull())
        {
            shopDescription_=std::make_shared<std::string>(pJson["shop_description"].asString());
        }
    }
    if(pJson.isMember("shop_qq"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["shop_qq"].isNull())
        {
            shopQq_=std::make_shared<std::string>(pJson["shop_qq"].asString());
        }
    }
    if(pJson.isMember("shop_phone"))
    {
        dirtyFlag_[8] = true;
        if(!pJson["shop_phone"].isNull())
        {
            shopPhone_=std::make_shared<std::string>(pJson["shop_phone"].asString());
        }
    }
    if(pJson.isMember("shop_logo"))
    {
        dirtyFlag_[9] = true;
        if(!pJson["shop_logo"].isNull())
        {
            shopLogo_=std::make_shared<std::string>(pJson["shop_logo"].asString());
        }
    }
    if(pJson.isMember("shop_type"))
    {
        dirtyFlag_[10] = true;
        if(!pJson["shop_type"].isNull())
        {
            shopType_=std::make_shared<uint8_t>((uint8_t)pJson["shop_type"].asUInt64());
        }
    }
    if(pJson.isMember("shop_status"))
    {
        dirtyFlag_[11] = true;
        if(!pJson["shop_status"].isNull())
        {
            shopStatus_=std::make_shared<uint8_t>((uint8_t)pJson["shop_status"].asUInt64());
        }
    }
    if(pJson.isMember("is_closed"))
    {
        dirtyFlag_[12] = true;
        if(!pJson["is_closed"].isNull())
        {
            isClosed_=std::make_shared<uint8_t>((uint8_t)pJson["is_closed"].asUInt64());
        }
    }
    if(pJson.isMember("shop_avatar"))
    {
        dirtyFlag_[13] = true;
        if(!pJson["shop_avatar"].isNull())
        {
            shopAvatar_=std::make_shared<std::string>(pJson["shop_avatar"].asString());
        }
    }
    if(pJson.isMember("shop_business_start_time"))
    {
        dirtyFlag_[14] = true;
        if(!pJson["shop_business_start_time"].isNull())
        {
            shopBusinessStartTime_=std::make_shared<std::string>(pJson["shop_business_start_time"].asString());
        }
    }
    if(pJson.isMember("shop_business_end_time"))
    {
        dirtyFlag_[15] = true;
        if(!pJson["shop_business_end_time"].isNull())
        {
            shopBusinessEndTime_=std::make_shared<std::string>(pJson["shop_business_end_time"].asString());
        }
    }
    if(pJson.isMember("remark"))
    {
        dirtyFlag_[16] = true;
        if(!pJson["remark"].isNull())
        {
            remark_=std::make_shared<std::string>(pJson["remark"].asString());
        }
    }
    if(pJson.isMember("sort"))
    {
        dirtyFlag_[17] = true;
        if(!pJson["sort"].isNull())
        {
            sort_=std::make_shared<uint8_t>((uint8_t)pJson["sort"].asUInt64());
        }
    }
    if(pJson.isMember("is_recommend"))
    {
        dirtyFlag_[18] = true;
        if(!pJson["is_recommend"].isNull())
        {
            isRecommend_=std::make_shared<int8_t>((int8_t)pJson["is_recommend"].asInt64());
        }
    }
    if(pJson.isMember("is_lock"))
    {
        dirtyFlag_[19] = true;
        if(!pJson["is_lock"].isNull())
        {
            isLock_=std::make_shared<int8_t>((int8_t)pJson["is_lock"].asInt64());
        }
    }
    if(pJson.isMember("shop_email"))
    {
        dirtyFlag_[20] = true;
        if(!pJson["shop_email"].isNull())
        {
            shopEmail_=std::make_shared<std::string>(pJson["shop_email"].asString());
        }
    }
    if(pJson.isMember("shop_main_variety"))
    {
        dirtyFlag_[21] = true;
        if(!pJson["shop_main_variety"].isNull())
        {
            shopMainVariety_=std::make_shared<std::string>(pJson["shop_main_variety"].asString());
        }
    }
    if(pJson.isMember("is_delete"))
    {
        dirtyFlag_[22] = true;
        if(!pJson["is_delete"].isNull())
        {
            isDelete_=std::make_shared<int8_t>((int8_t)pJson["is_delete"].asInt64());
        }
    }
    if(pJson.isMember("k3_on_off"))
    {
        dirtyFlag_[23] = true;
        if(!pJson["k3_on_off"].isNull())
        {
            k3OnOff_=std::make_shared<int8_t>((int8_t)pJson["k3_on_off"].asInt64());
        }
    }
}

const uint64_t &Shop::getValueOfId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &Shop::getId() const noexcept
{
    return id_;
}
void Shop::setId(const uint64_t &pId) noexcept
{
    id_ = std::make_shared<uint64_t>(pId);
    dirtyFlag_[0] = true;
}



const typename Shop::PrimaryKeyType & Shop::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const ::trantor::Date &Shop::getValueOfCreateTime() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(createTime_)
        return *createTime_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Shop::getCreateTime() const noexcept
{
    return createTime_;
}
void Shop::setCreateTime(const ::trantor::Date &pCreateTime) noexcept
{
    createTime_ = std::make_shared<::trantor::Date>(pCreateTime);
    dirtyFlag_[1] = true;
}




const ::trantor::Date &Shop::getValueOfUpdateTime() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(updateTime_)
        return *updateTime_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Shop::getUpdateTime() const noexcept
{
    return updateTime_;
}
void Shop::setUpdateTime(const ::trantor::Date &pUpdateTime) noexcept
{
    updateTime_ = std::make_shared<::trantor::Date>(pUpdateTime);
    dirtyFlag_[2] = true;
}




const std::string &Shop::getValueOfShopTitle() const noexcept
{
    const static std::string defaultValue = std::string();
    if(shopTitle_)
        return *shopTitle_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Shop::getShopTitle() const noexcept
{
    return shopTitle_;
}
void Shop::setShopTitle(const std::string &pShopTitle) noexcept
{
    shopTitle_ = std::make_shared<std::string>(pShopTitle);
    dirtyFlag_[3] = true;
}
void Shop::setShopTitle(std::string &&pShopTitle) noexcept
{
    shopTitle_ = std::make_shared<std::string>(std::move(pShopTitle));
    dirtyFlag_[3] = true;
}


void Shop::setShopTitleToNull() noexcept
{
    shopTitle_.reset();
    dirtyFlag_[3] = true;
}


const std::string &Shop::getValueOfShopBriefIntroduction() const noexcept
{
    const static std::string defaultValue = std::string();
    if(shopBriefIntroduction_)
        return *shopBriefIntroduction_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Shop::getShopBriefIntroduction() const noexcept
{
    return shopBriefIntroduction_;
}
void Shop::setShopBriefIntroduction(const std::string &pShopBriefIntroduction) noexcept
{
    shopBriefIntroduction_ = std::make_shared<std::string>(pShopBriefIntroduction);
    dirtyFlag_[4] = true;
}
void Shop::setShopBriefIntroduction(std::string &&pShopBriefIntroduction) noexcept
{
    shopBriefIntroduction_ = std::make_shared<std::string>(std::move(pShopBriefIntroduction));
    dirtyFlag_[4] = true;
}


void Shop::setShopBriefIntroductionToNull() noexcept
{
    shopBriefIntroduction_.reset();
    dirtyFlag_[4] = true;
}


const std::string &Shop::getValueOfShopKeywords() const noexcept
{
    const static std::string defaultValue = std::string();
    if(shopKeywords_)
        return *shopKeywords_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Shop::getShopKeywords() const noexcept
{
    return shopKeywords_;
}
void Shop::setShopKeywords(const std::string &pShopKeywords) noexcept
{
    shopKeywords_ = std::make_shared<std::string>(pShopKeywords);
    dirtyFlag_[5] = true;
}
void Shop::setShopKeywords(std::string &&pShopKeywords) noexcept
{
    shopKeywords_ = std::make_shared<std::string>(std::move(pShopKeywords));
    dirtyFlag_[5] = true;
}


void Shop::setShopKeywordsToNull() noexcept
{
    shopKeywords_.reset();
    dirtyFlag_[5] = true;
}


const std::string &Shop::getValueOfShopDescription() const noexcept
{
    const static std::string defaultValue = std::string();
    if(shopDescription_)
        return *shopDescription_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Shop::getShopDescription() const noexcept
{
    return shopDescription_;
}
void Shop::setShopDescription(const std::string &pShopDescription) noexcept
{
    shopDescription_ = std::make_shared<std::string>(pShopDescription);
    dirtyFlag_[6] = true;
}
void Shop::setShopDescription(std::string &&pShopDescription) noexcept
{
    shopDescription_ = std::make_shared<std::string>(std::move(pShopDescription));
    dirtyFlag_[6] = true;
}


void Shop::setShopDescriptionToNull() noexcept
{
    shopDescription_.reset();
    dirtyFlag_[6] = true;
}


const std::string &Shop::getValueOfShopQq() const noexcept
{
    const static std::string defaultValue = std::string();
    if(shopQq_)
        return *shopQq_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Shop::getShopQq() const noexcept
{
    return shopQq_;
}
void Shop::setShopQq(const std::string &pShopQq) noexcept
{
    shopQq_ = std::make_shared<std::string>(pShopQq);
    dirtyFlag_[7] = true;
}
void Shop::setShopQq(std::string &&pShopQq) noexcept
{
    shopQq_ = std::make_shared<std::string>(std::move(pShopQq));
    dirtyFlag_[7] = true;
}


void Shop::setShopQqToNull() noexcept
{
    shopQq_.reset();
    dirtyFlag_[7] = true;
}


const std::string &Shop::getValueOfShopPhone() const noexcept
{
    const static std::string defaultValue = std::string();
    if(shopPhone_)
        return *shopPhone_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Shop::getShopPhone() const noexcept
{
    return shopPhone_;
}
void Shop::setShopPhone(const std::string &pShopPhone) noexcept
{
    shopPhone_ = std::make_shared<std::string>(pShopPhone);
    dirtyFlag_[8] = true;
}
void Shop::setShopPhone(std::string &&pShopPhone) noexcept
{
    shopPhone_ = std::make_shared<std::string>(std::move(pShopPhone));
    dirtyFlag_[8] = true;
}


void Shop::setShopPhoneToNull() noexcept
{
    shopPhone_.reset();
    dirtyFlag_[8] = true;
}


const std::string &Shop::getValueOfShopLogo() const noexcept
{
    const static std::string defaultValue = std::string();
    if(shopLogo_)
        return *shopLogo_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Shop::getShopLogo() const noexcept
{
    return shopLogo_;
}
void Shop::setShopLogo(const std::string &pShopLogo) noexcept
{
    shopLogo_ = std::make_shared<std::string>(pShopLogo);
    dirtyFlag_[9] = true;
}
void Shop::setShopLogo(std::string &&pShopLogo) noexcept
{
    shopLogo_ = std::make_shared<std::string>(std::move(pShopLogo));
    dirtyFlag_[9] = true;
}


void Shop::setShopLogoToNull() noexcept
{
    shopLogo_.reset();
    dirtyFlag_[9] = true;
}


const uint8_t &Shop::getValueOfShopType() const noexcept
{
    const static uint8_t defaultValue = uint8_t();
    if(shopType_)
        return *shopType_;
    return defaultValue;
}
const std::shared_ptr<uint8_t> &Shop::getShopType() const noexcept
{
    return shopType_;
}
void Shop::setShopType(const uint8_t &pShopType) noexcept
{
    shopType_ = std::make_shared<uint8_t>(pShopType);
    dirtyFlag_[10] = true;
}




const uint8_t &Shop::getValueOfShopStatus() const noexcept
{
    const static uint8_t defaultValue = uint8_t();
    if(shopStatus_)
        return *shopStatus_;
    return defaultValue;
}
const std::shared_ptr<uint8_t> &Shop::getShopStatus() const noexcept
{
    return shopStatus_;
}
void Shop::setShopStatus(const uint8_t &pShopStatus) noexcept
{
    shopStatus_ = std::make_shared<uint8_t>(pShopStatus);
    dirtyFlag_[11] = true;
}




const uint8_t &Shop::getValueOfIsClosed() const noexcept
{
    const static uint8_t defaultValue = uint8_t();
    if(isClosed_)
        return *isClosed_;
    return defaultValue;
}
const std::shared_ptr<uint8_t> &Shop::getIsClosed() const noexcept
{
    return isClosed_;
}
void Shop::setIsClosed(const uint8_t &pIsClosed) noexcept
{
    isClosed_ = std::make_shared<uint8_t>(pIsClosed);
    dirtyFlag_[12] = true;
}




const std::string &Shop::getValueOfShopAvatar() const noexcept
{
    const static std::string defaultValue = std::string();
    if(shopAvatar_)
        return *shopAvatar_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Shop::getShopAvatar() const noexcept
{
    return shopAvatar_;
}
void Shop::setShopAvatar(const std::string &pShopAvatar) noexcept
{
    shopAvatar_ = std::make_shared<std::string>(pShopAvatar);
    dirtyFlag_[13] = true;
}
void Shop::setShopAvatar(std::string &&pShopAvatar) noexcept
{
    shopAvatar_ = std::make_shared<std::string>(std::move(pShopAvatar));
    dirtyFlag_[13] = true;
}


void Shop::setShopAvatarToNull() noexcept
{
    shopAvatar_.reset();
    dirtyFlag_[13] = true;
}


const std::string &Shop::getValueOfShopBusinessStartTime() const noexcept
{
    const static std::string defaultValue = std::string();
    if(shopBusinessStartTime_)
        return *shopBusinessStartTime_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Shop::getShopBusinessStartTime() const noexcept
{
    return shopBusinessStartTime_;
}
void Shop::setShopBusinessStartTime(const std::string &pShopBusinessStartTime) noexcept
{
    shopBusinessStartTime_ = std::make_shared<std::string>(pShopBusinessStartTime);
    dirtyFlag_[14] = true;
}
void Shop::setShopBusinessStartTime(std::string &&pShopBusinessStartTime) noexcept
{
    shopBusinessStartTime_ = std::make_shared<std::string>(std::move(pShopBusinessStartTime));
    dirtyFlag_[14] = true;
}




const std::string &Shop::getValueOfShopBusinessEndTime() const noexcept
{
    const static std::string defaultValue = std::string();
    if(shopBusinessEndTime_)
        return *shopBusinessEndTime_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Shop::getShopBusinessEndTime() const noexcept
{
    return shopBusinessEndTime_;
}
void Shop::setShopBusinessEndTime(const std::string &pShopBusinessEndTime) noexcept
{
    shopBusinessEndTime_ = std::make_shared<std::string>(pShopBusinessEndTime);
    dirtyFlag_[15] = true;
}
void Shop::setShopBusinessEndTime(std::string &&pShopBusinessEndTime) noexcept
{
    shopBusinessEndTime_ = std::make_shared<std::string>(std::move(pShopBusinessEndTime));
    dirtyFlag_[15] = true;
}




const std::string &Shop::getValueOfRemark() const noexcept
{
    const static std::string defaultValue = std::string();
    if(remark_)
        return *remark_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Shop::getRemark() const noexcept
{
    return remark_;
}
void Shop::setRemark(const std::string &pRemark) noexcept
{
    remark_ = std::make_shared<std::string>(pRemark);
    dirtyFlag_[16] = true;
}
void Shop::setRemark(std::string &&pRemark) noexcept
{
    remark_ = std::make_shared<std::string>(std::move(pRemark));
    dirtyFlag_[16] = true;
}


void Shop::setRemarkToNull() noexcept
{
    remark_.reset();
    dirtyFlag_[16] = true;
}


const uint8_t &Shop::getValueOfSort() const noexcept
{
    const static uint8_t defaultValue = uint8_t();
    if(sort_)
        return *sort_;
    return defaultValue;
}
const std::shared_ptr<uint8_t> &Shop::getSort() const noexcept
{
    return sort_;
}
void Shop::setSort(const uint8_t &pSort) noexcept
{
    sort_ = std::make_shared<uint8_t>(pSort);
    dirtyFlag_[17] = true;
}




const int8_t &Shop::getValueOfIsRecommend() const noexcept
{
    const static int8_t defaultValue = int8_t();
    if(isRecommend_)
        return *isRecommend_;
    return defaultValue;
}
const std::shared_ptr<int8_t> &Shop::getIsRecommend() const noexcept
{
    return isRecommend_;
}
void Shop::setIsRecommend(const int8_t &pIsRecommend) noexcept
{
    isRecommend_ = std::make_shared<int8_t>(pIsRecommend);
    dirtyFlag_[18] = true;
}




const int8_t &Shop::getValueOfIsLock() const noexcept
{
    const static int8_t defaultValue = int8_t();
    if(isLock_)
        return *isLock_;
    return defaultValue;
}
const std::shared_ptr<int8_t> &Shop::getIsLock() const noexcept
{
    return isLock_;
}
void Shop::setIsLock(const int8_t &pIsLock) noexcept
{
    isLock_ = std::make_shared<int8_t>(pIsLock);
    dirtyFlag_[19] = true;
}




const std::string &Shop::getValueOfShopEmail() const noexcept
{
    const static std::string defaultValue = std::string();
    if(shopEmail_)
        return *shopEmail_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Shop::getShopEmail() const noexcept
{
    return shopEmail_;
}
void Shop::setShopEmail(const std::string &pShopEmail) noexcept
{
    shopEmail_ = std::make_shared<std::string>(pShopEmail);
    dirtyFlag_[20] = true;
}
void Shop::setShopEmail(std::string &&pShopEmail) noexcept
{
    shopEmail_ = std::make_shared<std::string>(std::move(pShopEmail));
    dirtyFlag_[20] = true;
}


void Shop::setShopEmailToNull() noexcept
{
    shopEmail_.reset();
    dirtyFlag_[20] = true;
}


const std::string &Shop::getValueOfShopMainVariety() const noexcept
{
    const static std::string defaultValue = std::string();
    if(shopMainVariety_)
        return *shopMainVariety_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Shop::getShopMainVariety() const noexcept
{
    return shopMainVariety_;
}
void Shop::setShopMainVariety(const std::string &pShopMainVariety) noexcept
{
    shopMainVariety_ = std::make_shared<std::string>(pShopMainVariety);
    dirtyFlag_[21] = true;
}
void Shop::setShopMainVariety(std::string &&pShopMainVariety) noexcept
{
    shopMainVariety_ = std::make_shared<std::string>(std::move(pShopMainVariety));
    dirtyFlag_[21] = true;
}


void Shop::setShopMainVarietyToNull() noexcept
{
    shopMainVariety_.reset();
    dirtyFlag_[21] = true;
}


const int8_t &Shop::getValueOfIsDelete() const noexcept
{
    const static int8_t defaultValue = int8_t();
    if(isDelete_)
        return *isDelete_;
    return defaultValue;
}
const std::shared_ptr<int8_t> &Shop::getIsDelete() const noexcept
{
    return isDelete_;
}
void Shop::setIsDelete(const int8_t &pIsDelete) noexcept
{
    isDelete_ = std::make_shared<int8_t>(pIsDelete);
    dirtyFlag_[22] = true;
}




const int8_t &Shop::getValueOfK3OnOff() const noexcept
{
    const static int8_t defaultValue = int8_t();
    if(k3OnOff_)
        return *k3OnOff_;
    return defaultValue;
}
const std::shared_ptr<int8_t> &Shop::getK3OnOff() const noexcept
{
    return k3OnOff_;
}
void Shop::setK3OnOff(const int8_t &pK3OnOff) noexcept
{
    k3OnOff_ = std::make_shared<int8_t>(pK3OnOff);
    dirtyFlag_[23] = true;
}




void Shop::updateId(const uint64_t id)
{
    id_ = std::make_shared<uint64_t>(id);
}

const std::vector<std::string> &Shop::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "create_time",
        "update_time",
        "shop_title",
        "shop_brief_introduction",
        "shop_keywords",
        "shop_description",
        "shop_qq",
        "shop_phone",
        "shop_logo",
        "shop_type",
        "shop_status",
        "is_closed",
        "shop_avatar",
        "shop_business_start_time",
        "shop_business_end_time",
        "remark",
        "sort",
        "is_recommend",
        "is_lock",
        "shop_email",
        "shop_main_variety",
        "is_delete",
        "k3_on_off"
    };
    return inCols;
}

void Shop::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getCreateTime())
        {
            binder << getValueOfCreateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getUpdateTime())
        {
            binder << getValueOfUpdateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getShopTitle())
        {
            binder << getValueOfShopTitle();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getShopBriefIntroduction())
        {
            binder << getValueOfShopBriefIntroduction();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getShopKeywords())
        {
            binder << getValueOfShopKeywords();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getShopDescription())
        {
            binder << getValueOfShopDescription();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getShopQq())
        {
            binder << getValueOfShopQq();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getShopPhone())
        {
            binder << getValueOfShopPhone();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getShopLogo())
        {
            binder << getValueOfShopLogo();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getShopType())
        {
            binder << getValueOfShopType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getShopStatus())
        {
            binder << getValueOfShopStatus();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getIsClosed())
        {
            binder << getValueOfIsClosed();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[13])
    {
        if(getShopAvatar())
        {
            binder << getValueOfShopAvatar();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[14])
    {
        if(getShopBusinessStartTime())
        {
            binder << getValueOfShopBusinessStartTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[15])
    {
        if(getShopBusinessEndTime())
        {
            binder << getValueOfShopBusinessEndTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[16])
    {
        if(getRemark())
        {
            binder << getValueOfRemark();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[17])
    {
        if(getSort())
        {
            binder << getValueOfSort();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[18])
    {
        if(getIsRecommend())
        {
            binder << getValueOfIsRecommend();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[19])
    {
        if(getIsLock())
        {
            binder << getValueOfIsLock();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[20])
    {
        if(getShopEmail())
        {
            binder << getValueOfShopEmail();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[21])
    {
        if(getShopMainVariety())
        {
            binder << getValueOfShopMainVariety();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[22])
    {
        if(getIsDelete())
        {
            binder << getValueOfIsDelete();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[23])
    {
        if(getK3OnOff())
        {
            binder << getValueOfK3OnOff();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Shop::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    if(dirtyFlag_[8])
    {
        ret.push_back(getColumnName(8));
    }
    if(dirtyFlag_[9])
    {
        ret.push_back(getColumnName(9));
    }
    if(dirtyFlag_[10])
    {
        ret.push_back(getColumnName(10));
    }
    if(dirtyFlag_[11])
    {
        ret.push_back(getColumnName(11));
    }
    if(dirtyFlag_[12])
    {
        ret.push_back(getColumnName(12));
    }
    if(dirtyFlag_[13])
    {
        ret.push_back(getColumnName(13));
    }
    if(dirtyFlag_[14])
    {
        ret.push_back(getColumnName(14));
    }
    if(dirtyFlag_[15])
    {
        ret.push_back(getColumnName(15));
    }
    if(dirtyFlag_[16])
    {
        ret.push_back(getColumnName(16));
    }
    if(dirtyFlag_[17])
    {
        ret.push_back(getColumnName(17));
    }
    if(dirtyFlag_[18])
    {
        ret.push_back(getColumnName(18));
    }
    if(dirtyFlag_[19])
    {
        ret.push_back(getColumnName(19));
    }
    if(dirtyFlag_[20])
    {
        ret.push_back(getColumnName(20));
    }
    if(dirtyFlag_[21])
    {
        ret.push_back(getColumnName(21));
    }
    if(dirtyFlag_[22])
    {
        ret.push_back(getColumnName(22));
    }
    if(dirtyFlag_[23])
    {
        ret.push_back(getColumnName(23));
    }
    return ret;
}

void Shop::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getCreateTime())
        {
            binder << getValueOfCreateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getUpdateTime())
        {
            binder << getValueOfUpdateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getShopTitle())
        {
            binder << getValueOfShopTitle();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getShopBriefIntroduction())
        {
            binder << getValueOfShopBriefIntroduction();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getShopKeywords())
        {
            binder << getValueOfShopKeywords();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getShopDescription())
        {
            binder << getValueOfShopDescription();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getShopQq())
        {
            binder << getValueOfShopQq();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getShopPhone())
        {
            binder << getValueOfShopPhone();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getShopLogo())
        {
            binder << getValueOfShopLogo();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getShopType())
        {
            binder << getValueOfShopType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getShopStatus())
        {
            binder << getValueOfShopStatus();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getIsClosed())
        {
            binder << getValueOfIsClosed();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[13])
    {
        if(getShopAvatar())
        {
            binder << getValueOfShopAvatar();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[14])
    {
        if(getShopBusinessStartTime())
        {
            binder << getValueOfShopBusinessStartTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[15])
    {
        if(getShopBusinessEndTime())
        {
            binder << getValueOfShopBusinessEndTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[16])
    {
        if(getRemark())
        {
            binder << getValueOfRemark();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[17])
    {
        if(getSort())
        {
            binder << getValueOfSort();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[18])
    {
        if(getIsRecommend())
        {
            binder << getValueOfIsRecommend();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[19])
    {
        if(getIsLock())
        {
            binder << getValueOfIsLock();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[20])
    {
        if(getShopEmail())
        {
            binder << getValueOfShopEmail();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[21])
    {
        if(getShopMainVariety())
        {
            binder << getValueOfShopMainVariety();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[22])
    {
        if(getIsDelete())
        {
            binder << getValueOfIsDelete();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[23])
    {
        if(getK3OnOff())
        {
            binder << getValueOfK3OnOff();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Shop::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=(Json::UInt64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getCreateTime())
    {
        ret["create_time"]=getCreateTime()->toDbStringLocal();
    }
    else
    {
        ret["create_time"]=Json::Value();
    }
    if(getUpdateTime())
    {
        ret["update_time"]=getUpdateTime()->toDbStringLocal();
    }
    else
    {
        ret["update_time"]=Json::Value();
    }
    if(getShopTitle())
    {
        ret["shop_title"]=getValueOfShopTitle();
    }
    else
    {
        ret["shop_title"]=Json::Value();
    }
    if(getShopBriefIntroduction())
    {
        ret["shop_brief_introduction"]=getValueOfShopBriefIntroduction();
    }
    else
    {
        ret["shop_brief_introduction"]=Json::Value();
    }
    if(getShopKeywords())
    {
        ret["shop_keywords"]=getValueOfShopKeywords();
    }
    else
    {
        ret["shop_keywords"]=Json::Value();
    }
    if(getShopDescription())
    {
        ret["shop_description"]=getValueOfShopDescription();
    }
    else
    {
        ret["shop_description"]=Json::Value();
    }
    if(getShopQq())
    {
        ret["shop_qq"]=getValueOfShopQq();
    }
    else
    {
        ret["shop_qq"]=Json::Value();
    }
    if(getShopPhone())
    {
        ret["shop_phone"]=getValueOfShopPhone();
    }
    else
    {
        ret["shop_phone"]=Json::Value();
    }
    if(getShopLogo())
    {
        ret["shop_logo"]=getValueOfShopLogo();
    }
    else
    {
        ret["shop_logo"]=Json::Value();
    }
    if(getShopType())
    {
        ret["shop_type"]=getValueOfShopType();
    }
    else
    {
        ret["shop_type"]=Json::Value();
    }
    if(getShopStatus())
    {
        ret["shop_status"]=getValueOfShopStatus();
    }
    else
    {
        ret["shop_status"]=Json::Value();
    }
    if(getIsClosed())
    {
        ret["is_closed"]=getValueOfIsClosed();
    }
    else
    {
        ret["is_closed"]=Json::Value();
    }
    if(getShopAvatar())
    {
        ret["shop_avatar"]=getValueOfShopAvatar();
    }
    else
    {
        ret["shop_avatar"]=Json::Value();
    }
    if(getShopBusinessStartTime())
    {
        ret["shop_business_start_time"]=getValueOfShopBusinessStartTime();
    }
    else
    {
        ret["shop_business_start_time"]=Json::Value();
    }
    if(getShopBusinessEndTime())
    {
        ret["shop_business_end_time"]=getValueOfShopBusinessEndTime();
    }
    else
    {
        ret["shop_business_end_time"]=Json::Value();
    }
    if(getRemark())
    {
        ret["remark"]=getValueOfRemark();
    }
    else
    {
        ret["remark"]=Json::Value();
    }
    if(getSort())
    {
        ret["sort"]=getValueOfSort();
    }
    else
    {
        ret["sort"]=Json::Value();
    }
    if(getIsRecommend())
    {
        ret["is_recommend"]=getValueOfIsRecommend();
    }
    else
    {
        ret["is_recommend"]=Json::Value();
    }
    if(getIsLock())
    {
        ret["is_lock"]=getValueOfIsLock();
    }
    else
    {
        ret["is_lock"]=Json::Value();
    }
    if(getShopEmail())
    {
        ret["shop_email"]=getValueOfShopEmail();
    }
    else
    {
        ret["shop_email"]=Json::Value();
    }
    if(getShopMainVariety())
    {
        ret["shop_main_variety"]=getValueOfShopMainVariety();
    }
    else
    {
        ret["shop_main_variety"]=Json::Value();
    }
    if(getIsDelete())
    {
        ret["is_delete"]=getValueOfIsDelete();
    }
    else
    {
        ret["is_delete"]=Json::Value();
    }
    if(getK3OnOff())
    {
        ret["k3_on_off"]=getValueOfK3OnOff();
    }
    else
    {
        ret["k3_on_off"]=Json::Value();
    }
    return ret;
}

Json::Value Shop::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 24)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=(Json::UInt64)getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getCreateTime())
            {
                ret[pMasqueradingVector[1]]=getCreateTime()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getUpdateTime())
            {
                ret[pMasqueradingVector[2]]=getUpdateTime()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getShopTitle())
            {
                ret[pMasqueradingVector[3]]=getValueOfShopTitle();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getShopBriefIntroduction())
            {
                ret[pMasqueradingVector[4]]=getValueOfShopBriefIntroduction();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getShopKeywords())
            {
                ret[pMasqueradingVector[5]]=getValueOfShopKeywords();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getShopDescription())
            {
                ret[pMasqueradingVector[6]]=getValueOfShopDescription();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getShopQq())
            {
                ret[pMasqueradingVector[7]]=getValueOfShopQq();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[8].empty())
        {
            if(getShopPhone())
            {
                ret[pMasqueradingVector[8]]=getValueOfShopPhone();
            }
            else
            {
                ret[pMasqueradingVector[8]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[9].empty())
        {
            if(getShopLogo())
            {
                ret[pMasqueradingVector[9]]=getValueOfShopLogo();
            }
            else
            {
                ret[pMasqueradingVector[9]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[10].empty())
        {
            if(getShopType())
            {
                ret[pMasqueradingVector[10]]=getValueOfShopType();
            }
            else
            {
                ret[pMasqueradingVector[10]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[11].empty())
        {
            if(getShopStatus())
            {
                ret[pMasqueradingVector[11]]=getValueOfShopStatus();
            }
            else
            {
                ret[pMasqueradingVector[11]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[12].empty())
        {
            if(getIsClosed())
            {
                ret[pMasqueradingVector[12]]=getValueOfIsClosed();
            }
            else
            {
                ret[pMasqueradingVector[12]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[13].empty())
        {
            if(getShopAvatar())
            {
                ret[pMasqueradingVector[13]]=getValueOfShopAvatar();
            }
            else
            {
                ret[pMasqueradingVector[13]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[14].empty())
        {
            if(getShopBusinessStartTime())
            {
                ret[pMasqueradingVector[14]]=getValueOfShopBusinessStartTime();
            }
            else
            {
                ret[pMasqueradingVector[14]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[15].empty())
        {
            if(getShopBusinessEndTime())
            {
                ret[pMasqueradingVector[15]]=getValueOfShopBusinessEndTime();
            }
            else
            {
                ret[pMasqueradingVector[15]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[16].empty())
        {
            if(getRemark())
            {
                ret[pMasqueradingVector[16]]=getValueOfRemark();
            }
            else
            {
                ret[pMasqueradingVector[16]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[17].empty())
        {
            if(getSort())
            {
                ret[pMasqueradingVector[17]]=getValueOfSort();
            }
            else
            {
                ret[pMasqueradingVector[17]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[18].empty())
        {
            if(getIsRecommend())
            {
                ret[pMasqueradingVector[18]]=getValueOfIsRecommend();
            }
            else
            {
                ret[pMasqueradingVector[18]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[19].empty())
        {
            if(getIsLock())
            {
                ret[pMasqueradingVector[19]]=getValueOfIsLock();
            }
            else
            {
                ret[pMasqueradingVector[19]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[20].empty())
        {
            if(getShopEmail())
            {
                ret[pMasqueradingVector[20]]=getValueOfShopEmail();
            }
            else
            {
                ret[pMasqueradingVector[20]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[21].empty())
        {
            if(getShopMainVariety())
            {
                ret[pMasqueradingVector[21]]=getValueOfShopMainVariety();
            }
            else
            {
                ret[pMasqueradingVector[21]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[22].empty())
        {
            if(getIsDelete())
            {
                ret[pMasqueradingVector[22]]=getValueOfIsDelete();
            }
            else
            {
                ret[pMasqueradingVector[22]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[23].empty())
        {
            if(getK3OnOff())
            {
                ret[pMasqueradingVector[23]]=getValueOfK3OnOff();
            }
            else
            {
                ret[pMasqueradingVector[23]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=(Json::UInt64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getCreateTime())
    {
        ret["create_time"]=getCreateTime()->toDbStringLocal();
    }
    else
    {
        ret["create_time"]=Json::Value();
    }
    if(getUpdateTime())
    {
        ret["update_time"]=getUpdateTime()->toDbStringLocal();
    }
    else
    {
        ret["update_time"]=Json::Value();
    }
    if(getShopTitle())
    {
        ret["shop_title"]=getValueOfShopTitle();
    }
    else
    {
        ret["shop_title"]=Json::Value();
    }
    if(getShopBriefIntroduction())
    {
        ret["shop_brief_introduction"]=getValueOfShopBriefIntroduction();
    }
    else
    {
        ret["shop_brief_introduction"]=Json::Value();
    }
    if(getShopKeywords())
    {
        ret["shop_keywords"]=getValueOfShopKeywords();
    }
    else
    {
        ret["shop_keywords"]=Json::Value();
    }
    if(getShopDescription())
    {
        ret["shop_description"]=getValueOfShopDescription();
    }
    else
    {
        ret["shop_description"]=Json::Value();
    }
    if(getShopQq())
    {
        ret["shop_qq"]=getValueOfShopQq();
    }
    else
    {
        ret["shop_qq"]=Json::Value();
    }
    if(getShopPhone())
    {
        ret["shop_phone"]=getValueOfShopPhone();
    }
    else
    {
        ret["shop_phone"]=Json::Value();
    }
    if(getShopLogo())
    {
        ret["shop_logo"]=getValueOfShopLogo();
    }
    else
    {
        ret["shop_logo"]=Json::Value();
    }
    if(getShopType())
    {
        ret["shop_type"]=getValueOfShopType();
    }
    else
    {
        ret["shop_type"]=Json::Value();
    }
    if(getShopStatus())
    {
        ret["shop_status"]=getValueOfShopStatus();
    }
    else
    {
        ret["shop_status"]=Json::Value();
    }
    if(getIsClosed())
    {
        ret["is_closed"]=getValueOfIsClosed();
    }
    else
    {
        ret["is_closed"]=Json::Value();
    }
    if(getShopAvatar())
    {
        ret["shop_avatar"]=getValueOfShopAvatar();
    }
    else
    {
        ret["shop_avatar"]=Json::Value();
    }
    if(getShopBusinessStartTime())
    {
        ret["shop_business_start_time"]=getValueOfShopBusinessStartTime();
    }
    else
    {
        ret["shop_business_start_time"]=Json::Value();
    }
    if(getShopBusinessEndTime())
    {
        ret["shop_business_end_time"]=getValueOfShopBusinessEndTime();
    }
    else
    {
        ret["shop_business_end_time"]=Json::Value();
    }
    if(getRemark())
    {
        ret["remark"]=getValueOfRemark();
    }
    else
    {
        ret["remark"]=Json::Value();
    }
    if(getSort())
    {
        ret["sort"]=getValueOfSort();
    }
    else
    {
        ret["sort"]=Json::Value();
    }
    if(getIsRecommend())
    {
        ret["is_recommend"]=getValueOfIsRecommend();
    }
    else
    {
        ret["is_recommend"]=Json::Value();
    }
    if(getIsLock())
    {
        ret["is_lock"]=getValueOfIsLock();
    }
    else
    {
        ret["is_lock"]=Json::Value();
    }
    if(getShopEmail())
    {
        ret["shop_email"]=getValueOfShopEmail();
    }
    else
    {
        ret["shop_email"]=Json::Value();
    }
    if(getShopMainVariety())
    {
        ret["shop_main_variety"]=getValueOfShopMainVariety();
    }
    else
    {
        ret["shop_main_variety"]=Json::Value();
    }
    if(getIsDelete())
    {
        ret["is_delete"]=getValueOfIsDelete();
    }
    else
    {
        ret["is_delete"]=Json::Value();
    }
    if(getK3OnOff())
    {
        ret["k3_on_off"]=getValueOfK3OnOff();
    }
    else
    {
        ret["k3_on_off"]=Json::Value();
    }
    return ret;
}

bool Shop::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("create_time"))
    {
        if(!validJsonOfField(1, "create_time", pJson["create_time"], err, true))
            return false;
    }
    if(pJson.isMember("update_time"))
    {
        if(!validJsonOfField(2, "update_time", pJson["update_time"], err, true))
            return false;
    }
    if(pJson.isMember("shop_title"))
    {
        if(!validJsonOfField(3, "shop_title", pJson["shop_title"], err, true))
            return false;
    }
    if(pJson.isMember("shop_brief_introduction"))
    {
        if(!validJsonOfField(4, "shop_brief_introduction", pJson["shop_brief_introduction"], err, true))
            return false;
    }
    if(pJson.isMember("shop_keywords"))
    {
        if(!validJsonOfField(5, "shop_keywords", pJson["shop_keywords"], err, true))
            return false;
    }
    if(pJson.isMember("shop_description"))
    {
        if(!validJsonOfField(6, "shop_description", pJson["shop_description"], err, true))
            return false;
    }
    if(pJson.isMember("shop_qq"))
    {
        if(!validJsonOfField(7, "shop_qq", pJson["shop_qq"], err, true))
            return false;
    }
    if(pJson.isMember("shop_phone"))
    {
        if(!validJsonOfField(8, "shop_phone", pJson["shop_phone"], err, true))
            return false;
    }
    if(pJson.isMember("shop_logo"))
    {
        if(!validJsonOfField(9, "shop_logo", pJson["shop_logo"], err, true))
            return false;
    }
    if(pJson.isMember("shop_type"))
    {
        if(!validJsonOfField(10, "shop_type", pJson["shop_type"], err, true))
            return false;
    }
    if(pJson.isMember("shop_status"))
    {
        if(!validJsonOfField(11, "shop_status", pJson["shop_status"], err, true))
            return false;
    }
    if(pJson.isMember("is_closed"))
    {
        if(!validJsonOfField(12, "is_closed", pJson["is_closed"], err, true))
            return false;
    }
    if(pJson.isMember("shop_avatar"))
    {
        if(!validJsonOfField(13, "shop_avatar", pJson["shop_avatar"], err, true))
            return false;
    }
    if(pJson.isMember("shop_business_start_time"))
    {
        if(!validJsonOfField(14, "shop_business_start_time", pJson["shop_business_start_time"], err, true))
            return false;
    }
    if(pJson.isMember("shop_business_end_time"))
    {
        if(!validJsonOfField(15, "shop_business_end_time", pJson["shop_business_end_time"], err, true))
            return false;
    }
    if(pJson.isMember("remark"))
    {
        if(!validJsonOfField(16, "remark", pJson["remark"], err, true))
            return false;
    }
    if(pJson.isMember("sort"))
    {
        if(!validJsonOfField(17, "sort", pJson["sort"], err, true))
            return false;
    }
    if(pJson.isMember("is_recommend"))
    {
        if(!validJsonOfField(18, "is_recommend", pJson["is_recommend"], err, true))
            return false;
    }
    if(pJson.isMember("is_lock"))
    {
        if(!validJsonOfField(19, "is_lock", pJson["is_lock"], err, true))
            return false;
    }
    if(pJson.isMember("shop_email"))
    {
        if(!validJsonOfField(20, "shop_email", pJson["shop_email"], err, true))
            return false;
    }
    if(pJson.isMember("shop_main_variety"))
    {
        if(!validJsonOfField(21, "shop_main_variety", pJson["shop_main_variety"], err, true))
            return false;
    }
    if(pJson.isMember("is_delete"))
    {
        if(!validJsonOfField(22, "is_delete", pJson["is_delete"], err, true))
            return false;
    }
    if(pJson.isMember("k3_on_off"))
    {
        if(!validJsonOfField(23, "k3_on_off", pJson["k3_on_off"], err, true))
            return false;
    }
    return true;
}
bool Shop::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                              const std::vector<std::string> &pMasqueradingVector,
                                              std::string &err)
{
    if(pMasqueradingVector.size() != 24)
    {
        err = "Bad masquerading vector";
        return false;
    }
    if(!pMasqueradingVector[0].empty())
    {
        if(pJson.isMember(pMasqueradingVector[0]))
        {
            if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[1].empty())
    {
        if(pJson.isMember(pMasqueradingVector[1]))
        {
            if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[2].empty())
    {
        if(pJson.isMember(pMasqueradingVector[2]))
        {
            if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[3].empty())
    {
        if(pJson.isMember(pMasqueradingVector[3]))
        {
            if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[4].empty())
    {
        if(pJson.isMember(pMasqueradingVector[4]))
        {
            if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[5].empty())
    {
        if(pJson.isMember(pMasqueradingVector[5]))
        {
            if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[6].empty())
    {
        if(pJson.isMember(pMasqueradingVector[6]))
        {
            if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[7].empty())
    {
        if(pJson.isMember(pMasqueradingVector[7]))
        {
            if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[8].empty())
    {
        if(pJson.isMember(pMasqueradingVector[8]))
        {
            if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[9].empty())
    {
        if(pJson.isMember(pMasqueradingVector[9]))
        {
            if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[10].empty())
    {
        if(pJson.isMember(pMasqueradingVector[10]))
        {
            if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[11].empty())
    {
        if(pJson.isMember(pMasqueradingVector[11]))
        {
            if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[12].empty())
    {
        if(pJson.isMember(pMasqueradingVector[12]))
        {
            if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[13].empty())
    {
        if(pJson.isMember(pMasqueradingVector[13]))
        {
            if(!validJsonOfField(13, pMasqueradingVector[13], pJson[pMasqueradingVector[13]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[14].empty())
    {
        if(pJson.isMember(pMasqueradingVector[14]))
        {
            if(!validJsonOfField(14, pMasqueradingVector[14], pJson[pMasqueradingVector[14]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[15].empty())
    {
        if(pJson.isMember(pMasqueradingVector[15]))
        {
            if(!validJsonOfField(15, pMasqueradingVector[15], pJson[pMasqueradingVector[15]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[16].empty())
    {
        if(pJson.isMember(pMasqueradingVector[16]))
        {
            if(!validJsonOfField(16, pMasqueradingVector[16], pJson[pMasqueradingVector[16]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[17].empty())
    {
        if(pJson.isMember(pMasqueradingVector[17]))
        {
            if(!validJsonOfField(17, pMasqueradingVector[17], pJson[pMasqueradingVector[17]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[18].empty())
    {
        if(pJson.isMember(pMasqueradingVector[18]))
        {
            if(!validJsonOfField(18, pMasqueradingVector[18], pJson[pMasqueradingVector[18]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[19].empty())
    {
        if(pJson.isMember(pMasqueradingVector[19]))
        {
            if(!validJsonOfField(19, pMasqueradingVector[19], pJson[pMasqueradingVector[19]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[20].empty())
    {
        if(pJson.isMember(pMasqueradingVector[20]))
        {
            if(!validJsonOfField(20, pMasqueradingVector[20], pJson[pMasqueradingVector[20]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[21].empty())
    {
        if(pJson.isMember(pMasqueradingVector[21]))
        {
            if(!validJsonOfField(21, pMasqueradingVector[21], pJson[pMasqueradingVector[21]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[22].empty())
    {
        if(pJson.isMember(pMasqueradingVector[22]))
        {
            if(!validJsonOfField(22, pMasqueradingVector[22], pJson[pMasqueradingVector[22]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[23].empty())
    {
        if(pJson.isMember(pMasqueradingVector[23]))
        {
            if(!validJsonOfField(23, pMasqueradingVector[23], pJson[pMasqueradingVector[23]], err, true))
                return false;
        }
    }
    return true;
}
bool Shop::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("create_time"))
    {
        if(!validJsonOfField(1, "create_time", pJson["create_time"], err, false))
            return false;
    }
    if(pJson.isMember("update_time"))
    {
        if(!validJsonOfField(2, "update_time", pJson["update_time"], err, false))
            return false;
    }
    if(pJson.isMember("shop_title"))
    {
        if(!validJsonOfField(3, "shop_title", pJson["shop_title"], err, false))
            return false;
    }
    if(pJson.isMember("shop_brief_introduction"))
    {
        if(!validJsonOfField(4, "shop_brief_introduction", pJson["shop_brief_introduction"], err, false))
            return false;
    }
    if(pJson.isMember("shop_keywords"))
    {
        if(!validJsonOfField(5, "shop_keywords", pJson["shop_keywords"], err, false))
            return false;
    }
    if(pJson.isMember("shop_description"))
    {
        if(!validJsonOfField(6, "shop_description", pJson["shop_description"], err, false))
            return false;
    }
    if(pJson.isMember("shop_qq"))
    {
        if(!validJsonOfField(7, "shop_qq", pJson["shop_qq"], err, false))
            return false;
    }
    if(pJson.isMember("shop_phone"))
    {
        if(!validJsonOfField(8, "shop_phone", pJson["shop_phone"], err, false))
            return false;
    }
    if(pJson.isMember("shop_logo"))
    {
        if(!validJsonOfField(9, "shop_logo", pJson["shop_logo"], err, false))
            return false;
    }
    if(pJson.isMember("shop_type"))
    {
        if(!validJsonOfField(10, "shop_type", pJson["shop_type"], err, false))
            return false;
    }
    if(pJson.isMember("shop_status"))
    {
        if(!validJsonOfField(11, "shop_status", pJson["shop_status"], err, false))
            return false;
    }
    if(pJson.isMember("is_closed"))
    {
        if(!validJsonOfField(12, "is_closed", pJson["is_closed"], err, false))
            return false;
    }
    if(pJson.isMember("shop_avatar"))
    {
        if(!validJsonOfField(13, "shop_avatar", pJson["shop_avatar"], err, false))
            return false;
    }
    if(pJson.isMember("shop_business_start_time"))
    {
        if(!validJsonOfField(14, "shop_business_start_time", pJson["shop_business_start_time"], err, false))
            return false;
    }
    if(pJson.isMember("shop_business_end_time"))
    {
        if(!validJsonOfField(15, "shop_business_end_time", pJson["shop_business_end_time"], err, false))
            return false;
    }
    if(pJson.isMember("remark"))
    {
        if(!validJsonOfField(16, "remark", pJson["remark"], err, false))
            return false;
    }
    if(pJson.isMember("sort"))
    {
        if(!validJsonOfField(17, "sort", pJson["sort"], err, false))
            return false;
    }
    if(pJson.isMember("is_recommend"))
    {
        if(!validJsonOfField(18, "is_recommend", pJson["is_recommend"], err, false))
            return false;
    }
    if(pJson.isMember("is_lock"))
    {
        if(!validJsonOfField(19, "is_lock", pJson["is_lock"], err, false))
            return false;
    }
    if(pJson.isMember("shop_email"))
    {
        if(!validJsonOfField(20, "shop_email", pJson["shop_email"], err, false))
            return false;
    }
    if(pJson.isMember("shop_main_variety"))
    {
        if(!validJsonOfField(21, "shop_main_variety", pJson["shop_main_variety"], err, false))
            return false;
    }
    if(pJson.isMember("is_delete"))
    {
        if(!validJsonOfField(22, "is_delete", pJson["is_delete"], err, false))
            return false;
    }
    if(pJson.isMember("k3_on_off"))
    {
        if(!validJsonOfField(23, "k3_on_off", pJson["k3_on_off"], err, false))
            return false;
    }
    return true;
}
bool Shop::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector,
                                            std::string &err)
{
    if(pMasqueradingVector.size() != 24)
    {
        err = "Bad masquerading vector";
        return false;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
            return false;
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
            return false;
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
            return false;
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
            return false;
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
            return false;
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
            return false;
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
            return false;
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, false))
            return false;
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, false))
            return false;
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, false))
            return false;
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, false))
            return false;
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, false))
            return false;
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        if(!validJsonOfField(13, pMasqueradingVector[13], pJson[pMasqueradingVector[13]], err, false))
            return false;
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        if(!validJsonOfField(14, pMasqueradingVector[14], pJson[pMasqueradingVector[14]], err, false))
            return false;
    }
    if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
    {
        if(!validJsonOfField(15, pMasqueradingVector[15], pJson[pMasqueradingVector[15]], err, false))
            return false;
    }
    if(!pMasqueradingVector[16].empty() && pJson.isMember(pMasqueradingVector[16]))
    {
        if(!validJsonOfField(16, pMasqueradingVector[16], pJson[pMasqueradingVector[16]], err, false))
            return false;
    }
    if(!pMasqueradingVector[17].empty() && pJson.isMember(pMasqueradingVector[17]))
    {
        if(!validJsonOfField(17, pMasqueradingVector[17], pJson[pMasqueradingVector[17]], err, false))
            return false;
    }
    if(!pMasqueradingVector[18].empty() && pJson.isMember(pMasqueradingVector[18]))
    {
        if(!validJsonOfField(18, pMasqueradingVector[18], pJson[pMasqueradingVector[18]], err, false))
            return false;
    }
    if(!pMasqueradingVector[19].empty() && pJson.isMember(pMasqueradingVector[19]))
    {
        if(!validJsonOfField(19, pMasqueradingVector[19], pJson[pMasqueradingVector[19]], err, false))
            return false;
    }
    if(!pMasqueradingVector[20].empty() && pJson.isMember(pMasqueradingVector[20]))
    {
        if(!validJsonOfField(20, pMasqueradingVector[20], pJson[pMasqueradingVector[20]], err, false))
            return false;
    }
    if(!pMasqueradingVector[21].empty() && pJson.isMember(pMasqueradingVector[21]))
    {
        if(!validJsonOfField(21, pMasqueradingVector[21], pJson[pMasqueradingVector[21]], err, false))
            return false;
    }
    if(!pMasqueradingVector[22].empty() && pJson.isMember(pMasqueradingVector[22]))
    {
        if(!validJsonOfField(22, pMasqueradingVector[22], pJson[pMasqueradingVector[22]], err, false))
            return false;
    }
    if(!pMasqueradingVector[23].empty() && pJson.isMember(pMasqueradingVector[23]))
    {
        if(!validJsonOfField(23, pMasqueradingVector[23], pJson[pMasqueradingVector[23]], err, false))
            return false;
    }
    return true;
}
bool Shop::validJsonOfField(size_t index,
                            const std::string &fieldName,
                            const Json::Value &pJson, 
                            std::string &err, 
                            bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }        
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 50)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 50)";
                return false;               
            }

            break;
        case 4:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 50)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 50)";
                return false;               
            }

            break;
        case 5:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 100)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 100)";
                return false;               
            }

            break;
        case 6:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 100)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 100)";
                return false;               
            }

            break;
        case 7:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 20)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 20)";
                return false;               
            }

            break;
        case 8:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 20)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 20)";
                return false;               
            }

            break;
        case 9:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 100)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 100)";
                return false;               
            }

            break;
        case 10:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 11:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 12:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 13:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 100)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 100)";
                return false;               
            }

            break;
        case 14:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 10)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 10)";
                return false;               
            }

            break;
        case 15:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 10)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 10)";
                return false;               
            }

            break;
        case 16:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 100)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 100)";
                return false;               
            }

            break;
        case 17:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 18:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 19:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 20:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 50)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 50)";
                return false;               
            }

            break;
        case 21:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 200)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 200)";
                return false;               
            }

            break;
        case 22:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 23:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
     
        default:
            err="Internal error in the server";
            return false;
            break;
    }
    return true;
}
