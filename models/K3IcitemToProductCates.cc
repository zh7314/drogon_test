/**
 *
 *  K3IcitemToProductCates.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "K3IcitemToProductCates.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::v2;

const std::string K3IcitemToProductCates::Cols::_id = "id";
const std::string K3IcitemToProductCates::Cols::_FItemID = "FItemID";
const std::string K3IcitemToProductCates::Cols::_FParentID = "FParentID";
const std::string K3IcitemToProductCates::Cols::_FModel = "FModel";
const std::string K3IcitemToProductCates::Cols::_FName = "FName";
const std::string K3IcitemToProductCates::Cols::_FShortNumber = "FShortNumber";
const std::string K3IcitemToProductCates::Cols::_FNumber = "FNumber";
const std::string K3IcitemToProductCates::Cols::_FPY = "FPY";
const std::string K3IcitemToProductCates::Cols::_FPinYin = "FPinYin";
const std::string K3IcitemToProductCates::Cols::_is_delete = "is_delete";
const std::string K3IcitemToProductCates::Cols::_shop_id = "shop_id";
const std::string K3IcitemToProductCates::Cols::_create_time = "create_time";
const std::string K3IcitemToProductCates::Cols::_update_time = "update_time";
const std::string K3IcitemToProductCates::primaryKeyName = "id";
const bool K3IcitemToProductCates::hasPrimaryKey = true;
const std::string K3IcitemToProductCates::tableName = "k3_icitem_to_product_cates";

const std::vector<typename K3IcitemToProductCates::MetaData> K3IcitemToProductCates::metaData_={
{"id","uint64_t","bigint(20) unsigned",8,1,1,1},
{"FItemID","uint64_t","bigint(20) unsigned",8,0,0,1},
{"FParentID","uint64_t","bigint(20) unsigned",8,0,0,1},
{"FModel","std::string","varchar(255)",255,0,0,0},
{"FName","std::string","varchar(255)",255,0,0,1},
{"FShortNumber","std::string","varchar(80)",80,0,0,1},
{"FNumber","std::string","varchar(80)",80,0,0,1},
{"FPY","std::string","varchar(255)",255,0,0,1},
{"FPinYin","std::string","varchar(255)",255,0,0,1},
{"is_delete","uint8_t","tinyint(1) unsigned",1,0,0,1},
{"shop_id","uint64_t","bigint(20) unsigned",8,0,0,1},
{"create_time","::trantor::Date","datetime",0,0,0,0},
{"update_time","::trantor::Date","datetime",0,0,0,0}
};
const std::string &K3IcitemToProductCates::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
K3IcitemToProductCates::K3IcitemToProductCates(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<uint64_t>(r["id"].as<uint64_t>());
        }
        if(!r["FItemID"].isNull())
        {
            fitemid_=std::make_shared<uint64_t>(r["FItemID"].as<uint64_t>());
        }
        if(!r["FParentID"].isNull())
        {
            fparentid_=std::make_shared<uint64_t>(r["FParentID"].as<uint64_t>());
        }
        if(!r["FModel"].isNull())
        {
            fmodel_=std::make_shared<std::string>(r["FModel"].as<std::string>());
        }
        if(!r["FName"].isNull())
        {
            fname_=std::make_shared<std::string>(r["FName"].as<std::string>());
        }
        if(!r["FShortNumber"].isNull())
        {
            fshortnumber_=std::make_shared<std::string>(r["FShortNumber"].as<std::string>());
        }
        if(!r["FNumber"].isNull())
        {
            fnumber_=std::make_shared<std::string>(r["FNumber"].as<std::string>());
        }
        if(!r["FPY"].isNull())
        {
            fpy_=std::make_shared<std::string>(r["FPY"].as<std::string>());
        }
        if(!r["FPinYin"].isNull())
        {
            fpinyin_=std::make_shared<std::string>(r["FPinYin"].as<std::string>());
        }
        if(!r["is_delete"].isNull())
        {
            isDelete_=std::make_shared<uint8_t>(r["is_delete"].as<uint8_t>());
        }
        if(!r["shop_id"].isNull())
        {
            shopId_=std::make_shared<uint64_t>(r["shop_id"].as<uint64_t>());
        }
        if(!r["create_time"].isNull())
        {
            auto timeStr = r["create_time"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        if(!r["update_time"].isNull())
        {
            auto timeStr = r["update_time"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 13 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            fitemid_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            fparentid_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            fmodel_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            fname_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            fshortnumber_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            fnumber_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            fpy_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 8;
        if(!r[index].isNull())
        {
            fpinyin_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 9;
        if(!r[index].isNull())
        {
            isDelete_=std::make_shared<uint8_t>(r[index].as<uint8_t>());
        }
        index = offset + 10;
        if(!r[index].isNull())
        {
            shopId_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 11;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        index = offset + 12;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }

}

K3IcitemToProductCates::K3IcitemToProductCates(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 13)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            fitemid_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[1]].asUInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            fparentid_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[2]].asUInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            fmodel_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            fname_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            fshortnumber_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            fnumber_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            fpy_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            fpinyin_=std::make_shared<std::string>(pJson[pMasqueradingVector[8]].asString());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            isDelete_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[9]].asUInt64());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            shopId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[10]].asUInt64());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[11]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[12]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
}

K3IcitemToProductCates::K3IcitemToProductCates(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson["id"].asUInt64());
        }
    }
    if(pJson.isMember("FItemID"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["FItemID"].isNull())
        {
            fitemid_=std::make_shared<uint64_t>((uint64_t)pJson["FItemID"].asUInt64());
        }
    }
    if(pJson.isMember("FParentID"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["FParentID"].isNull())
        {
            fparentid_=std::make_shared<uint64_t>((uint64_t)pJson["FParentID"].asUInt64());
        }
    }
    if(pJson.isMember("FModel"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["FModel"].isNull())
        {
            fmodel_=std::make_shared<std::string>(pJson["FModel"].asString());
        }
    }
    if(pJson.isMember("FName"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["FName"].isNull())
        {
            fname_=std::make_shared<std::string>(pJson["FName"].asString());
        }
    }
    if(pJson.isMember("FShortNumber"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["FShortNumber"].isNull())
        {
            fshortnumber_=std::make_shared<std::string>(pJson["FShortNumber"].asString());
        }
    }
    if(pJson.isMember("FNumber"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["FNumber"].isNull())
        {
            fnumber_=std::make_shared<std::string>(pJson["FNumber"].asString());
        }
    }
    if(pJson.isMember("FPY"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["FPY"].isNull())
        {
            fpy_=std::make_shared<std::string>(pJson["FPY"].asString());
        }
    }
    if(pJson.isMember("FPinYin"))
    {
        dirtyFlag_[8]=true;
        if(!pJson["FPinYin"].isNull())
        {
            fpinyin_=std::make_shared<std::string>(pJson["FPinYin"].asString());
        }
    }
    if(pJson.isMember("is_delete"))
    {
        dirtyFlag_[9]=true;
        if(!pJson["is_delete"].isNull())
        {
            isDelete_=std::make_shared<uint8_t>((uint8_t)pJson["is_delete"].asUInt64());
        }
    }
    if(pJson.isMember("shop_id"))
    {
        dirtyFlag_[10]=true;
        if(!pJson["shop_id"].isNull())
        {
            shopId_=std::make_shared<uint64_t>((uint64_t)pJson["shop_id"].asUInt64());
        }
    }
    if(pJson.isMember("create_time"))
    {
        dirtyFlag_[11]=true;
        if(!pJson["create_time"].isNull())
        {
            auto timeStr = pJson["create_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("update_time"))
    {
        dirtyFlag_[12]=true;
        if(!pJson["update_time"].isNull())
        {
            auto timeStr = pJson["update_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
}

void K3IcitemToProductCates::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 13)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            fitemid_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[1]].asUInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            fparentid_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[2]].asUInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            fmodel_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            fname_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            fshortnumber_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            fnumber_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            fpy_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            fpinyin_=std::make_shared<std::string>(pJson[pMasqueradingVector[8]].asString());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            isDelete_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[9]].asUInt64());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            shopId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[10]].asUInt64());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[11]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[12]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
}
                                                                    
void K3IcitemToProductCates::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson["id"].asUInt64());
        }
    }
    if(pJson.isMember("FItemID"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["FItemID"].isNull())
        {
            fitemid_=std::make_shared<uint64_t>((uint64_t)pJson["FItemID"].asUInt64());
        }
    }
    if(pJson.isMember("FParentID"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["FParentID"].isNull())
        {
            fparentid_=std::make_shared<uint64_t>((uint64_t)pJson["FParentID"].asUInt64());
        }
    }
    if(pJson.isMember("FModel"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["FModel"].isNull())
        {
            fmodel_=std::make_shared<std::string>(pJson["FModel"].asString());
        }
    }
    if(pJson.isMember("FName"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["FName"].isNull())
        {
            fname_=std::make_shared<std::string>(pJson["FName"].asString());
        }
    }
    if(pJson.isMember("FShortNumber"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["FShortNumber"].isNull())
        {
            fshortnumber_=std::make_shared<std::string>(pJson["FShortNumber"].asString());
        }
    }
    if(pJson.isMember("FNumber"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["FNumber"].isNull())
        {
            fnumber_=std::make_shared<std::string>(pJson["FNumber"].asString());
        }
    }
    if(pJson.isMember("FPY"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["FPY"].isNull())
        {
            fpy_=std::make_shared<std::string>(pJson["FPY"].asString());
        }
    }
    if(pJson.isMember("FPinYin"))
    {
        dirtyFlag_[8] = true;
        if(!pJson["FPinYin"].isNull())
        {
            fpinyin_=std::make_shared<std::string>(pJson["FPinYin"].asString());
        }
    }
    if(pJson.isMember("is_delete"))
    {
        dirtyFlag_[9] = true;
        if(!pJson["is_delete"].isNull())
        {
            isDelete_=std::make_shared<uint8_t>((uint8_t)pJson["is_delete"].asUInt64());
        }
    }
    if(pJson.isMember("shop_id"))
    {
        dirtyFlag_[10] = true;
        if(!pJson["shop_id"].isNull())
        {
            shopId_=std::make_shared<uint64_t>((uint64_t)pJson["shop_id"].asUInt64());
        }
    }
    if(pJson.isMember("create_time"))
    {
        dirtyFlag_[11] = true;
        if(!pJson["create_time"].isNull())
        {
            auto timeStr = pJson["create_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("update_time"))
    {
        dirtyFlag_[12] = true;
        if(!pJson["update_time"].isNull())
        {
            auto timeStr = pJson["update_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
}

const uint64_t &K3IcitemToProductCates::getValueOfId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &K3IcitemToProductCates::getId() const noexcept
{
    return id_;
}
void K3IcitemToProductCates::setId(const uint64_t &pId) noexcept
{
    id_ = std::make_shared<uint64_t>(pId);
    dirtyFlag_[0] = true;
}



const typename K3IcitemToProductCates::PrimaryKeyType & K3IcitemToProductCates::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const uint64_t &K3IcitemToProductCates::getValueOfFitemid() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(fitemid_)
        return *fitemid_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &K3IcitemToProductCates::getFitemid() const noexcept
{
    return fitemid_;
}
void K3IcitemToProductCates::setFitemid(const uint64_t &pFitemid) noexcept
{
    fitemid_ = std::make_shared<uint64_t>(pFitemid);
    dirtyFlag_[1] = true;
}




const uint64_t &K3IcitemToProductCates::getValueOfFparentid() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(fparentid_)
        return *fparentid_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &K3IcitemToProductCates::getFparentid() const noexcept
{
    return fparentid_;
}
void K3IcitemToProductCates::setFparentid(const uint64_t &pFparentid) noexcept
{
    fparentid_ = std::make_shared<uint64_t>(pFparentid);
    dirtyFlag_[2] = true;
}




const std::string &K3IcitemToProductCates::getValueOfFmodel() const noexcept
{
    const static std::string defaultValue = std::string();
    if(fmodel_)
        return *fmodel_;
    return defaultValue;
}
const std::shared_ptr<std::string> &K3IcitemToProductCates::getFmodel() const noexcept
{
    return fmodel_;
}
void K3IcitemToProductCates::setFmodel(const std::string &pFmodel) noexcept
{
    fmodel_ = std::make_shared<std::string>(pFmodel);
    dirtyFlag_[3] = true;
}
void K3IcitemToProductCates::setFmodel(std::string &&pFmodel) noexcept
{
    fmodel_ = std::make_shared<std::string>(std::move(pFmodel));
    dirtyFlag_[3] = true;
}


void K3IcitemToProductCates::setFmodelToNull() noexcept
{
    fmodel_.reset();
    dirtyFlag_[3] = true;
}


const std::string &K3IcitemToProductCates::getValueOfFname() const noexcept
{
    const static std::string defaultValue = std::string();
    if(fname_)
        return *fname_;
    return defaultValue;
}
const std::shared_ptr<std::string> &K3IcitemToProductCates::getFname() const noexcept
{
    return fname_;
}
void K3IcitemToProductCates::setFname(const std::string &pFname) noexcept
{
    fname_ = std::make_shared<std::string>(pFname);
    dirtyFlag_[4] = true;
}
void K3IcitemToProductCates::setFname(std::string &&pFname) noexcept
{
    fname_ = std::make_shared<std::string>(std::move(pFname));
    dirtyFlag_[4] = true;
}




const std::string &K3IcitemToProductCates::getValueOfFshortnumber() const noexcept
{
    const static std::string defaultValue = std::string();
    if(fshortnumber_)
        return *fshortnumber_;
    return defaultValue;
}
const std::shared_ptr<std::string> &K3IcitemToProductCates::getFshortnumber() const noexcept
{
    return fshortnumber_;
}
void K3IcitemToProductCates::setFshortnumber(const std::string &pFshortnumber) noexcept
{
    fshortnumber_ = std::make_shared<std::string>(pFshortnumber);
    dirtyFlag_[5] = true;
}
void K3IcitemToProductCates::setFshortnumber(std::string &&pFshortnumber) noexcept
{
    fshortnumber_ = std::make_shared<std::string>(std::move(pFshortnumber));
    dirtyFlag_[5] = true;
}




const std::string &K3IcitemToProductCates::getValueOfFnumber() const noexcept
{
    const static std::string defaultValue = std::string();
    if(fnumber_)
        return *fnumber_;
    return defaultValue;
}
const std::shared_ptr<std::string> &K3IcitemToProductCates::getFnumber() const noexcept
{
    return fnumber_;
}
void K3IcitemToProductCates::setFnumber(const std::string &pFnumber) noexcept
{
    fnumber_ = std::make_shared<std::string>(pFnumber);
    dirtyFlag_[6] = true;
}
void K3IcitemToProductCates::setFnumber(std::string &&pFnumber) noexcept
{
    fnumber_ = std::make_shared<std::string>(std::move(pFnumber));
    dirtyFlag_[6] = true;
}




const std::string &K3IcitemToProductCates::getValueOfFpy() const noexcept
{
    const static std::string defaultValue = std::string();
    if(fpy_)
        return *fpy_;
    return defaultValue;
}
const std::shared_ptr<std::string> &K3IcitemToProductCates::getFpy() const noexcept
{
    return fpy_;
}
void K3IcitemToProductCates::setFpy(const std::string &pFpy) noexcept
{
    fpy_ = std::make_shared<std::string>(pFpy);
    dirtyFlag_[7] = true;
}
void K3IcitemToProductCates::setFpy(std::string &&pFpy) noexcept
{
    fpy_ = std::make_shared<std::string>(std::move(pFpy));
    dirtyFlag_[7] = true;
}




const std::string &K3IcitemToProductCates::getValueOfFpinyin() const noexcept
{
    const static std::string defaultValue = std::string();
    if(fpinyin_)
        return *fpinyin_;
    return defaultValue;
}
const std::shared_ptr<std::string> &K3IcitemToProductCates::getFpinyin() const noexcept
{
    return fpinyin_;
}
void K3IcitemToProductCates::setFpinyin(const std::string &pFpinyin) noexcept
{
    fpinyin_ = std::make_shared<std::string>(pFpinyin);
    dirtyFlag_[8] = true;
}
void K3IcitemToProductCates::setFpinyin(std::string &&pFpinyin) noexcept
{
    fpinyin_ = std::make_shared<std::string>(std::move(pFpinyin));
    dirtyFlag_[8] = true;
}




const uint8_t &K3IcitemToProductCates::getValueOfIsDelete() const noexcept
{
    const static uint8_t defaultValue = uint8_t();
    if(isDelete_)
        return *isDelete_;
    return defaultValue;
}
const std::shared_ptr<uint8_t> &K3IcitemToProductCates::getIsDelete() const noexcept
{
    return isDelete_;
}
void K3IcitemToProductCates::setIsDelete(const uint8_t &pIsDelete) noexcept
{
    isDelete_ = std::make_shared<uint8_t>(pIsDelete);
    dirtyFlag_[9] = true;
}




const uint64_t &K3IcitemToProductCates::getValueOfShopId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(shopId_)
        return *shopId_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &K3IcitemToProductCates::getShopId() const noexcept
{
    return shopId_;
}
void K3IcitemToProductCates::setShopId(const uint64_t &pShopId) noexcept
{
    shopId_ = std::make_shared<uint64_t>(pShopId);
    dirtyFlag_[10] = true;
}




const ::trantor::Date &K3IcitemToProductCates::getValueOfCreateTime() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(createTime_)
        return *createTime_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &K3IcitemToProductCates::getCreateTime() const noexcept
{
    return createTime_;
}
void K3IcitemToProductCates::setCreateTime(const ::trantor::Date &pCreateTime) noexcept
{
    createTime_ = std::make_shared<::trantor::Date>(pCreateTime);
    dirtyFlag_[11] = true;
}


void K3IcitemToProductCates::setCreateTimeToNull() noexcept
{
    createTime_.reset();
    dirtyFlag_[11] = true;
}


const ::trantor::Date &K3IcitemToProductCates::getValueOfUpdateTime() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(updateTime_)
        return *updateTime_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &K3IcitemToProductCates::getUpdateTime() const noexcept
{
    return updateTime_;
}
void K3IcitemToProductCates::setUpdateTime(const ::trantor::Date &pUpdateTime) noexcept
{
    updateTime_ = std::make_shared<::trantor::Date>(pUpdateTime);
    dirtyFlag_[12] = true;
}


void K3IcitemToProductCates::setUpdateTimeToNull() noexcept
{
    updateTime_.reset();
    dirtyFlag_[12] = true;
}


void K3IcitemToProductCates::updateId(const uint64_t id)
{
    id_ = std::make_shared<uint64_t>(id);
}

const std::vector<std::string> &K3IcitemToProductCates::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "FItemID",
        "FParentID",
        "FModel",
        "FName",
        "FShortNumber",
        "FNumber",
        "FPY",
        "FPinYin",
        "is_delete",
        "shop_id",
        "create_time",
        "update_time"
    };
    return inCols;
}

void K3IcitemToProductCates::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getFitemid())
        {
            binder << getValueOfFitemid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getFparentid())
        {
            binder << getValueOfFparentid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getFmodel())
        {
            binder << getValueOfFmodel();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getFname())
        {
            binder << getValueOfFname();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getFshortnumber())
        {
            binder << getValueOfFshortnumber();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getFnumber())
        {
            binder << getValueOfFnumber();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getFpy())
        {
            binder << getValueOfFpy();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getFpinyin())
        {
            binder << getValueOfFpinyin();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getIsDelete())
        {
            binder << getValueOfIsDelete();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getShopId())
        {
            binder << getValueOfShopId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getCreateTime())
        {
            binder << getValueOfCreateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getUpdateTime())
        {
            binder << getValueOfUpdateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> K3IcitemToProductCates::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    if(dirtyFlag_[8])
    {
        ret.push_back(getColumnName(8));
    }
    if(dirtyFlag_[9])
    {
        ret.push_back(getColumnName(9));
    }
    if(dirtyFlag_[10])
    {
        ret.push_back(getColumnName(10));
    }
    if(dirtyFlag_[11])
    {
        ret.push_back(getColumnName(11));
    }
    if(dirtyFlag_[12])
    {
        ret.push_back(getColumnName(12));
    }
    return ret;
}

void K3IcitemToProductCates::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getFitemid())
        {
            binder << getValueOfFitemid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getFparentid())
        {
            binder << getValueOfFparentid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getFmodel())
        {
            binder << getValueOfFmodel();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getFname())
        {
            binder << getValueOfFname();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getFshortnumber())
        {
            binder << getValueOfFshortnumber();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getFnumber())
        {
            binder << getValueOfFnumber();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getFpy())
        {
            binder << getValueOfFpy();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getFpinyin())
        {
            binder << getValueOfFpinyin();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getIsDelete())
        {
            binder << getValueOfIsDelete();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getShopId())
        {
            binder << getValueOfShopId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getCreateTime())
        {
            binder << getValueOfCreateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getUpdateTime())
        {
            binder << getValueOfUpdateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value K3IcitemToProductCates::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=(Json::UInt64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getFitemid())
    {
        ret["FItemID"]=(Json::UInt64)getValueOfFitemid();
    }
    else
    {
        ret["FItemID"]=Json::Value();
    }
    if(getFparentid())
    {
        ret["FParentID"]=(Json::UInt64)getValueOfFparentid();
    }
    else
    {
        ret["FParentID"]=Json::Value();
    }
    if(getFmodel())
    {
        ret["FModel"]=getValueOfFmodel();
    }
    else
    {
        ret["FModel"]=Json::Value();
    }
    if(getFname())
    {
        ret["FName"]=getValueOfFname();
    }
    else
    {
        ret["FName"]=Json::Value();
    }
    if(getFshortnumber())
    {
        ret["FShortNumber"]=getValueOfFshortnumber();
    }
    else
    {
        ret["FShortNumber"]=Json::Value();
    }
    if(getFnumber())
    {
        ret["FNumber"]=getValueOfFnumber();
    }
    else
    {
        ret["FNumber"]=Json::Value();
    }
    if(getFpy())
    {
        ret["FPY"]=getValueOfFpy();
    }
    else
    {
        ret["FPY"]=Json::Value();
    }
    if(getFpinyin())
    {
        ret["FPinYin"]=getValueOfFpinyin();
    }
    else
    {
        ret["FPinYin"]=Json::Value();
    }
    if(getIsDelete())
    {
        ret["is_delete"]=getValueOfIsDelete();
    }
    else
    {
        ret["is_delete"]=Json::Value();
    }
    if(getShopId())
    {
        ret["shop_id"]=(Json::UInt64)getValueOfShopId();
    }
    else
    {
        ret["shop_id"]=Json::Value();
    }
    if(getCreateTime())
    {
        ret["create_time"]=getCreateTime()->toDbStringLocal();
    }
    else
    {
        ret["create_time"]=Json::Value();
    }
    if(getUpdateTime())
    {
        ret["update_time"]=getUpdateTime()->toDbStringLocal();
    }
    else
    {
        ret["update_time"]=Json::Value();
    }
    return ret;
}

Json::Value K3IcitemToProductCates::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 13)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=(Json::UInt64)getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getFitemid())
            {
                ret[pMasqueradingVector[1]]=(Json::UInt64)getValueOfFitemid();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getFparentid())
            {
                ret[pMasqueradingVector[2]]=(Json::UInt64)getValueOfFparentid();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getFmodel())
            {
                ret[pMasqueradingVector[3]]=getValueOfFmodel();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getFname())
            {
                ret[pMasqueradingVector[4]]=getValueOfFname();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getFshortnumber())
            {
                ret[pMasqueradingVector[5]]=getValueOfFshortnumber();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getFnumber())
            {
                ret[pMasqueradingVector[6]]=getValueOfFnumber();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getFpy())
            {
                ret[pMasqueradingVector[7]]=getValueOfFpy();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[8].empty())
        {
            if(getFpinyin())
            {
                ret[pMasqueradingVector[8]]=getValueOfFpinyin();
            }
            else
            {
                ret[pMasqueradingVector[8]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[9].empty())
        {
            if(getIsDelete())
            {
                ret[pMasqueradingVector[9]]=getValueOfIsDelete();
            }
            else
            {
                ret[pMasqueradingVector[9]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[10].empty())
        {
            if(getShopId())
            {
                ret[pMasqueradingVector[10]]=(Json::UInt64)getValueOfShopId();
            }
            else
            {
                ret[pMasqueradingVector[10]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[11].empty())
        {
            if(getCreateTime())
            {
                ret[pMasqueradingVector[11]]=getCreateTime()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[11]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[12].empty())
        {
            if(getUpdateTime())
            {
                ret[pMasqueradingVector[12]]=getUpdateTime()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[12]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=(Json::UInt64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getFitemid())
    {
        ret["FItemID"]=(Json::UInt64)getValueOfFitemid();
    }
    else
    {
        ret["FItemID"]=Json::Value();
    }
    if(getFparentid())
    {
        ret["FParentID"]=(Json::UInt64)getValueOfFparentid();
    }
    else
    {
        ret["FParentID"]=Json::Value();
    }
    if(getFmodel())
    {
        ret["FModel"]=getValueOfFmodel();
    }
    else
    {
        ret["FModel"]=Json::Value();
    }
    if(getFname())
    {
        ret["FName"]=getValueOfFname();
    }
    else
    {
        ret["FName"]=Json::Value();
    }
    if(getFshortnumber())
    {
        ret["FShortNumber"]=getValueOfFshortnumber();
    }
    else
    {
        ret["FShortNumber"]=Json::Value();
    }
    if(getFnumber())
    {
        ret["FNumber"]=getValueOfFnumber();
    }
    else
    {
        ret["FNumber"]=Json::Value();
    }
    if(getFpy())
    {
        ret["FPY"]=getValueOfFpy();
    }
    else
    {
        ret["FPY"]=Json::Value();
    }
    if(getFpinyin())
    {
        ret["FPinYin"]=getValueOfFpinyin();
    }
    else
    {
        ret["FPinYin"]=Json::Value();
    }
    if(getIsDelete())
    {
        ret["is_delete"]=getValueOfIsDelete();
    }
    else
    {
        ret["is_delete"]=Json::Value();
    }
    if(getShopId())
    {
        ret["shop_id"]=(Json::UInt64)getValueOfShopId();
    }
    else
    {
        ret["shop_id"]=Json::Value();
    }
    if(getCreateTime())
    {
        ret["create_time"]=getCreateTime()->toDbStringLocal();
    }
    else
    {
        ret["create_time"]=Json::Value();
    }
    if(getUpdateTime())
    {
        ret["update_time"]=getUpdateTime()->toDbStringLocal();
    }
    else
    {
        ret["update_time"]=Json::Value();
    }
    return ret;
}

bool K3IcitemToProductCates::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("FItemID"))
    {
        if(!validJsonOfField(1, "FItemID", pJson["FItemID"], err, true))
            return false;
    }
    else
    {
        err="The FItemID column cannot be null";
        return false;
    }
    if(pJson.isMember("FParentID"))
    {
        if(!validJsonOfField(2, "FParentID", pJson["FParentID"], err, true))
            return false;
    }
    else
    {
        err="The FParentID column cannot be null";
        return false;
    }
    if(pJson.isMember("FModel"))
    {
        if(!validJsonOfField(3, "FModel", pJson["FModel"], err, true))
            return false;
    }
    if(pJson.isMember("FName"))
    {
        if(!validJsonOfField(4, "FName", pJson["FName"], err, true))
            return false;
    }
    else
    {
        err="The FName column cannot be null";
        return false;
    }
    if(pJson.isMember("FShortNumber"))
    {
        if(!validJsonOfField(5, "FShortNumber", pJson["FShortNumber"], err, true))
            return false;
    }
    else
    {
        err="The FShortNumber column cannot be null";
        return false;
    }
    if(pJson.isMember("FNumber"))
    {
        if(!validJsonOfField(6, "FNumber", pJson["FNumber"], err, true))
            return false;
    }
    else
    {
        err="The FNumber column cannot be null";
        return false;
    }
    if(pJson.isMember("FPY"))
    {
        if(!validJsonOfField(7, "FPY", pJson["FPY"], err, true))
            return false;
    }
    else
    {
        err="The FPY column cannot be null";
        return false;
    }
    if(pJson.isMember("FPinYin"))
    {
        if(!validJsonOfField(8, "FPinYin", pJson["FPinYin"], err, true))
            return false;
    }
    else
    {
        err="The FPinYin column cannot be null";
        return false;
    }
    if(pJson.isMember("is_delete"))
    {
        if(!validJsonOfField(9, "is_delete", pJson["is_delete"], err, true))
            return false;
    }
    if(pJson.isMember("shop_id"))
    {
        if(!validJsonOfField(10, "shop_id", pJson["shop_id"], err, true))
            return false;
    }
    if(pJson.isMember("create_time"))
    {
        if(!validJsonOfField(11, "create_time", pJson["create_time"], err, true))
            return false;
    }
    if(pJson.isMember("update_time"))
    {
        if(!validJsonOfField(12, "update_time", pJson["update_time"], err, true))
            return false;
    }
    return true;
}
bool K3IcitemToProductCates::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                                const std::vector<std::string> &pMasqueradingVector,
                                                                std::string &err)
{
    if(pMasqueradingVector.size() != 13)
    {
        err = "Bad masquerading vector";
        return false;
    }
    if(!pMasqueradingVector[0].empty())
    {
        if(pJson.isMember(pMasqueradingVector[0]))
        {
            if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[1].empty())
    {
        if(pJson.isMember(pMasqueradingVector[1]))
        {
            if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                return false;
        }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
    }
    if(!pMasqueradingVector[2].empty())
    {
        if(pJson.isMember(pMasqueradingVector[2]))
        {
            if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                return false;
        }
        else
        {
            err="The " + pMasqueradingVector[2] + " column cannot be null";
            return false;
        }
    }
    if(!pMasqueradingVector[3].empty())
    {
        if(pJson.isMember(pMasqueradingVector[3]))
        {
            if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[4].empty())
    {
        if(pJson.isMember(pMasqueradingVector[4]))
        {
            if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                return false;
        }
        else
        {
            err="The " + pMasqueradingVector[4] + " column cannot be null";
            return false;
        }
    }
    if(!pMasqueradingVector[5].empty())
    {
        if(pJson.isMember(pMasqueradingVector[5]))
        {
            if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                return false;
        }
        else
        {
            err="The " + pMasqueradingVector[5] + " column cannot be null";
            return false;
        }
    }
    if(!pMasqueradingVector[6].empty())
    {
        if(pJson.isMember(pMasqueradingVector[6]))
        {
            if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                return false;
        }
        else
        {
            err="The " + pMasqueradingVector[6] + " column cannot be null";
            return false;
        }
    }
    if(!pMasqueradingVector[7].empty())
    {
        if(pJson.isMember(pMasqueradingVector[7]))
        {
            if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                return false;
        }
        else
        {
            err="The " + pMasqueradingVector[7] + " column cannot be null";
            return false;
        }
    }
    if(!pMasqueradingVector[8].empty())
    {
        if(pJson.isMember(pMasqueradingVector[8]))
        {
            if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, true))
                return false;
        }
        else
        {
            err="The " + pMasqueradingVector[8] + " column cannot be null";
            return false;
        }
    }
    if(!pMasqueradingVector[9].empty())
    {
        if(pJson.isMember(pMasqueradingVector[9]))
        {
            if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[10].empty())
    {
        if(pJson.isMember(pMasqueradingVector[10]))
        {
            if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[11].empty())
    {
        if(pJson.isMember(pMasqueradingVector[11]))
        {
            if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[12].empty())
    {
        if(pJson.isMember(pMasqueradingVector[12]))
        {
            if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, true))
                return false;
        }
    }
    return true;
}
bool K3IcitemToProductCates::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("FItemID"))
    {
        if(!validJsonOfField(1, "FItemID", pJson["FItemID"], err, false))
            return false;
    }
    if(pJson.isMember("FParentID"))
    {
        if(!validJsonOfField(2, "FParentID", pJson["FParentID"], err, false))
            return false;
    }
    if(pJson.isMember("FModel"))
    {
        if(!validJsonOfField(3, "FModel", pJson["FModel"], err, false))
            return false;
    }
    if(pJson.isMember("FName"))
    {
        if(!validJsonOfField(4, "FName", pJson["FName"], err, false))
            return false;
    }
    if(pJson.isMember("FShortNumber"))
    {
        if(!validJsonOfField(5, "FShortNumber", pJson["FShortNumber"], err, false))
            return false;
    }
    if(pJson.isMember("FNumber"))
    {
        if(!validJsonOfField(6, "FNumber", pJson["FNumber"], err, false))
            return false;
    }
    if(pJson.isMember("FPY"))
    {
        if(!validJsonOfField(7, "FPY", pJson["FPY"], err, false))
            return false;
    }
    if(pJson.isMember("FPinYin"))
    {
        if(!validJsonOfField(8, "FPinYin", pJson["FPinYin"], err, false))
            return false;
    }
    if(pJson.isMember("is_delete"))
    {
        if(!validJsonOfField(9, "is_delete", pJson["is_delete"], err, false))
            return false;
    }
    if(pJson.isMember("shop_id"))
    {
        if(!validJsonOfField(10, "shop_id", pJson["shop_id"], err, false))
            return false;
    }
    if(pJson.isMember("create_time"))
    {
        if(!validJsonOfField(11, "create_time", pJson["create_time"], err, false))
            return false;
    }
    if(pJson.isMember("update_time"))
    {
        if(!validJsonOfField(12, "update_time", pJson["update_time"], err, false))
            return false;
    }
    return true;
}
bool K3IcitemToProductCates::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                              const std::vector<std::string> &pMasqueradingVector,
                                                              std::string &err)
{
    if(pMasqueradingVector.size() != 13)
    {
        err = "Bad masquerading vector";
        return false;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
            return false;
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
            return false;
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
            return false;
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
            return false;
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
            return false;
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
            return false;
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
            return false;
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, false))
            return false;
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, false))
            return false;
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, false))
            return false;
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, false))
            return false;
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, false))
            return false;
    }
    return true;
}
bool K3IcitemToProductCates::validJsonOfField(size_t index,
                                              const std::string &fieldName,
                                              const Json::Value &pJson, 
                                              std::string &err, 
                                              bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }        
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;               
            }

            break;
        case 4:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;               
            }

            break;
        case 5:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 80)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 80)";
                return false;               
            }

            break;
        case 6:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 80)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 80)";
                return false;               
            }

            break;
        case 7:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;               
            }

            break;
        case 8:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;               
            }

            break;
        case 9:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 10:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 11:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 12:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
     
        default:
            err="Internal error in the server";
            return false;
            break;
    }
    return true;
}
