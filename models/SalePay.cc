/**
 *
 *  SalePay.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "SalePay.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::v2;

const std::string SalePay::Cols::_id = "id";
const std::string SalePay::Cols::_create_time = "create_time";
const std::string SalePay::Cols::_update_time = "update_time";
const std::string SalePay::Cols::_remark = "remark";
const std::string SalePay::Cols::_is_delete = "is_delete";
const std::string SalePay::Cols::_shop_id = "shop_id";
const std::string SalePay::Cols::_sale_order_id = "sale_order_id";
const std::string SalePay::Cols::_sale_order_key = "sale_order_key";
const std::string SalePay::Cols::_pay_type = "pay_type";
const std::string SalePay::Cols::_pay_status = "pay_status";
const std::string SalePay::Cols::_amount = "amount";
const std::string SalePay::Cols::_number = "number";
const std::string SalePay::Cols::_paid_amount = "paid_amount";
const std::string SalePay::Cols::_paid_number = "paid_number";
const std::string SalePay::Cols::_is_multiple_pay = "is_multiple_pay";
const std::string SalePay::Cols::_company_bank_card_id = "company_bank_card_id";
const std::string SalePay::Cols::_order_category = "order_category";
const std::string SalePay::primaryKeyName = "id";
const bool SalePay::hasPrimaryKey = true;
const std::string SalePay::tableName = "sale_pay";

const std::vector<typename SalePay::MetaData> SalePay::metaData_={
{"id","uint64_t","bigint(20) unsigned",8,1,1,1},
{"create_time","::trantor::Date","datetime",0,0,0,1},
{"update_time","::trantor::Date","datetime",0,0,0,1},
{"remark","std::string","varchar(200)",200,0,0,0},
{"is_delete","int8_t","tinyint(1)",1,0,0,1},
{"shop_id","uint64_t","bigint(20) unsigned",8,0,0,1},
{"sale_order_id","int64_t","bigint(20)",8,0,0,1},
{"sale_order_key","std::string","varchar(20)",20,0,0,0},
{"pay_type","uint8_t","tinyint(1) unsigned",1,0,0,1},
{"pay_status","uint8_t","tinyint(1) unsigned",1,0,0,1},
{"amount","std::string","decimal(32,2)",0,0,0,1},
{"number","std::string","decimal(32,5)",0,0,0,1},
{"paid_amount","std::string","decimal(32,2)",0,0,0,1},
{"paid_number","std::string","decimal(32,5)",0,0,0,1},
{"is_multiple_pay","uint8_t","tinyint(1) unsigned",1,0,0,1},
{"company_bank_card_id","int64_t","bigint(20)",8,0,0,1},
{"order_category","uint8_t","tinyint(1) unsigned",1,0,0,1}
};
const std::string &SalePay::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
SalePay::SalePay(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<uint64_t>(r["id"].as<uint64_t>());
        }
        if(!r["create_time"].isNull())
        {
            auto timeStr = r["create_time"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        if(!r["update_time"].isNull())
        {
            auto timeStr = r["update_time"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        if(!r["remark"].isNull())
        {
            remark_=std::make_shared<std::string>(r["remark"].as<std::string>());
        }
        if(!r["is_delete"].isNull())
        {
            isDelete_=std::make_shared<int8_t>(r["is_delete"].as<int8_t>());
        }
        if(!r["shop_id"].isNull())
        {
            shopId_=std::make_shared<uint64_t>(r["shop_id"].as<uint64_t>());
        }
        if(!r["sale_order_id"].isNull())
        {
            saleOrderId_=std::make_shared<int64_t>(r["sale_order_id"].as<int64_t>());
        }
        if(!r["sale_order_key"].isNull())
        {
            saleOrderKey_=std::make_shared<std::string>(r["sale_order_key"].as<std::string>());
        }
        if(!r["pay_type"].isNull())
        {
            payType_=std::make_shared<uint8_t>(r["pay_type"].as<uint8_t>());
        }
        if(!r["pay_status"].isNull())
        {
            payStatus_=std::make_shared<uint8_t>(r["pay_status"].as<uint8_t>());
        }
        if(!r["amount"].isNull())
        {
            amount_=std::make_shared<std::string>(r["amount"].as<std::string>());
        }
        if(!r["number"].isNull())
        {
            number_=std::make_shared<std::string>(r["number"].as<std::string>());
        }
        if(!r["paid_amount"].isNull())
        {
            paidAmount_=std::make_shared<std::string>(r["paid_amount"].as<std::string>());
        }
        if(!r["paid_number"].isNull())
        {
            paidNumber_=std::make_shared<std::string>(r["paid_number"].as<std::string>());
        }
        if(!r["is_multiple_pay"].isNull())
        {
            isMultiplePay_=std::make_shared<uint8_t>(r["is_multiple_pay"].as<uint8_t>());
        }
        if(!r["company_bank_card_id"].isNull())
        {
            companyBankCardId_=std::make_shared<int64_t>(r["company_bank_card_id"].as<int64_t>());
        }
        if(!r["order_category"].isNull())
        {
            orderCategory_=std::make_shared<uint8_t>(r["order_category"].as<uint8_t>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 17 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            remark_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            isDelete_=std::make_shared<int8_t>(r[index].as<int8_t>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            shopId_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            saleOrderId_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            saleOrderKey_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 8;
        if(!r[index].isNull())
        {
            payType_=std::make_shared<uint8_t>(r[index].as<uint8_t>());
        }
        index = offset + 9;
        if(!r[index].isNull())
        {
            payStatus_=std::make_shared<uint8_t>(r[index].as<uint8_t>());
        }
        index = offset + 10;
        if(!r[index].isNull())
        {
            amount_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 11;
        if(!r[index].isNull())
        {
            number_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 12;
        if(!r[index].isNull())
        {
            paidAmount_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 13;
        if(!r[index].isNull())
        {
            paidNumber_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 14;
        if(!r[index].isNull())
        {
            isMultiplePay_=std::make_shared<uint8_t>(r[index].as<uint8_t>());
        }
        index = offset + 15;
        if(!r[index].isNull())
        {
            companyBankCardId_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 16;
        if(!r[index].isNull())
        {
            orderCategory_=std::make_shared<uint8_t>(r[index].as<uint8_t>());
        }
    }

}

SalePay::SalePay(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 17)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[1]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[2]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            remark_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            isDelete_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[4]].asInt64());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            shopId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[5]].asUInt64());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            saleOrderId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[6]].asInt64());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            saleOrderKey_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            payType_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[8]].asUInt64());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            payStatus_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[9]].asUInt64());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            amount_=std::make_shared<std::string>(pJson[pMasqueradingVector[10]].asString());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            number_=std::make_shared<std::string>(pJson[pMasqueradingVector[11]].asString());
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            paidAmount_=std::make_shared<std::string>(pJson[pMasqueradingVector[12]].asString());
        }
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        dirtyFlag_[13] = true;
        if(!pJson[pMasqueradingVector[13]].isNull())
        {
            paidNumber_=std::make_shared<std::string>(pJson[pMasqueradingVector[13]].asString());
        }
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        dirtyFlag_[14] = true;
        if(!pJson[pMasqueradingVector[14]].isNull())
        {
            isMultiplePay_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[14]].asUInt64());
        }
    }
    if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
    {
        dirtyFlag_[15] = true;
        if(!pJson[pMasqueradingVector[15]].isNull())
        {
            companyBankCardId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[15]].asInt64());
        }
    }
    if(!pMasqueradingVector[16].empty() && pJson.isMember(pMasqueradingVector[16]))
    {
        dirtyFlag_[16] = true;
        if(!pJson[pMasqueradingVector[16]].isNull())
        {
            orderCategory_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[16]].asUInt64());
        }
    }
}

SalePay::SalePay(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson["id"].asUInt64());
        }
    }
    if(pJson.isMember("create_time"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["create_time"].isNull())
        {
            auto timeStr = pJson["create_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("update_time"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["update_time"].isNull())
        {
            auto timeStr = pJson["update_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("remark"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["remark"].isNull())
        {
            remark_=std::make_shared<std::string>(pJson["remark"].asString());
        }
    }
    if(pJson.isMember("is_delete"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["is_delete"].isNull())
        {
            isDelete_=std::make_shared<int8_t>((int8_t)pJson["is_delete"].asInt64());
        }
    }
    if(pJson.isMember("shop_id"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["shop_id"].isNull())
        {
            shopId_=std::make_shared<uint64_t>((uint64_t)pJson["shop_id"].asUInt64());
        }
    }
    if(pJson.isMember("sale_order_id"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["sale_order_id"].isNull())
        {
            saleOrderId_=std::make_shared<int64_t>((int64_t)pJson["sale_order_id"].asInt64());
        }
    }
    if(pJson.isMember("sale_order_key"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["sale_order_key"].isNull())
        {
            saleOrderKey_=std::make_shared<std::string>(pJson["sale_order_key"].asString());
        }
    }
    if(pJson.isMember("pay_type"))
    {
        dirtyFlag_[8]=true;
        if(!pJson["pay_type"].isNull())
        {
            payType_=std::make_shared<uint8_t>((uint8_t)pJson["pay_type"].asUInt64());
        }
    }
    if(pJson.isMember("pay_status"))
    {
        dirtyFlag_[9]=true;
        if(!pJson["pay_status"].isNull())
        {
            payStatus_=std::make_shared<uint8_t>((uint8_t)pJson["pay_status"].asUInt64());
        }
    }
    if(pJson.isMember("amount"))
    {
        dirtyFlag_[10]=true;
        if(!pJson["amount"].isNull())
        {
            amount_=std::make_shared<std::string>(pJson["amount"].asString());
        }
    }
    if(pJson.isMember("number"))
    {
        dirtyFlag_[11]=true;
        if(!pJson["number"].isNull())
        {
            number_=std::make_shared<std::string>(pJson["number"].asString());
        }
    }
    if(pJson.isMember("paid_amount"))
    {
        dirtyFlag_[12]=true;
        if(!pJson["paid_amount"].isNull())
        {
            paidAmount_=std::make_shared<std::string>(pJson["paid_amount"].asString());
        }
    }
    if(pJson.isMember("paid_number"))
    {
        dirtyFlag_[13]=true;
        if(!pJson["paid_number"].isNull())
        {
            paidNumber_=std::make_shared<std::string>(pJson["paid_number"].asString());
        }
    }
    if(pJson.isMember("is_multiple_pay"))
    {
        dirtyFlag_[14]=true;
        if(!pJson["is_multiple_pay"].isNull())
        {
            isMultiplePay_=std::make_shared<uint8_t>((uint8_t)pJson["is_multiple_pay"].asUInt64());
        }
    }
    if(pJson.isMember("company_bank_card_id"))
    {
        dirtyFlag_[15]=true;
        if(!pJson["company_bank_card_id"].isNull())
        {
            companyBankCardId_=std::make_shared<int64_t>((int64_t)pJson["company_bank_card_id"].asInt64());
        }
    }
    if(pJson.isMember("order_category"))
    {
        dirtyFlag_[16]=true;
        if(!pJson["order_category"].isNull())
        {
            orderCategory_=std::make_shared<uint8_t>((uint8_t)pJson["order_category"].asUInt64());
        }
    }
}

void SalePay::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 17)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[1]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[2]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            remark_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            isDelete_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[4]].asInt64());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            shopId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[5]].asUInt64());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            saleOrderId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[6]].asInt64());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            saleOrderKey_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            payType_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[8]].asUInt64());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            payStatus_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[9]].asUInt64());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            amount_=std::make_shared<std::string>(pJson[pMasqueradingVector[10]].asString());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            number_=std::make_shared<std::string>(pJson[pMasqueradingVector[11]].asString());
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            paidAmount_=std::make_shared<std::string>(pJson[pMasqueradingVector[12]].asString());
        }
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        dirtyFlag_[13] = true;
        if(!pJson[pMasqueradingVector[13]].isNull())
        {
            paidNumber_=std::make_shared<std::string>(pJson[pMasqueradingVector[13]].asString());
        }
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        dirtyFlag_[14] = true;
        if(!pJson[pMasqueradingVector[14]].isNull())
        {
            isMultiplePay_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[14]].asUInt64());
        }
    }
    if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
    {
        dirtyFlag_[15] = true;
        if(!pJson[pMasqueradingVector[15]].isNull())
        {
            companyBankCardId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[15]].asInt64());
        }
    }
    if(!pMasqueradingVector[16].empty() && pJson.isMember(pMasqueradingVector[16]))
    {
        dirtyFlag_[16] = true;
        if(!pJson[pMasqueradingVector[16]].isNull())
        {
            orderCategory_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[16]].asUInt64());
        }
    }
}
                                                                    
void SalePay::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson["id"].asUInt64());
        }
    }
    if(pJson.isMember("create_time"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["create_time"].isNull())
        {
            auto timeStr = pJson["create_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("update_time"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["update_time"].isNull())
        {
            auto timeStr = pJson["update_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("remark"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["remark"].isNull())
        {
            remark_=std::make_shared<std::string>(pJson["remark"].asString());
        }
    }
    if(pJson.isMember("is_delete"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["is_delete"].isNull())
        {
            isDelete_=std::make_shared<int8_t>((int8_t)pJson["is_delete"].asInt64());
        }
    }
    if(pJson.isMember("shop_id"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["shop_id"].isNull())
        {
            shopId_=std::make_shared<uint64_t>((uint64_t)pJson["shop_id"].asUInt64());
        }
    }
    if(pJson.isMember("sale_order_id"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["sale_order_id"].isNull())
        {
            saleOrderId_=std::make_shared<int64_t>((int64_t)pJson["sale_order_id"].asInt64());
        }
    }
    if(pJson.isMember("sale_order_key"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["sale_order_key"].isNull())
        {
            saleOrderKey_=std::make_shared<std::string>(pJson["sale_order_key"].asString());
        }
    }
    if(pJson.isMember("pay_type"))
    {
        dirtyFlag_[8] = true;
        if(!pJson["pay_type"].isNull())
        {
            payType_=std::make_shared<uint8_t>((uint8_t)pJson["pay_type"].asUInt64());
        }
    }
    if(pJson.isMember("pay_status"))
    {
        dirtyFlag_[9] = true;
        if(!pJson["pay_status"].isNull())
        {
            payStatus_=std::make_shared<uint8_t>((uint8_t)pJson["pay_status"].asUInt64());
        }
    }
    if(pJson.isMember("amount"))
    {
        dirtyFlag_[10] = true;
        if(!pJson["amount"].isNull())
        {
            amount_=std::make_shared<std::string>(pJson["amount"].asString());
        }
    }
    if(pJson.isMember("number"))
    {
        dirtyFlag_[11] = true;
        if(!pJson["number"].isNull())
        {
            number_=std::make_shared<std::string>(pJson["number"].asString());
        }
    }
    if(pJson.isMember("paid_amount"))
    {
        dirtyFlag_[12] = true;
        if(!pJson["paid_amount"].isNull())
        {
            paidAmount_=std::make_shared<std::string>(pJson["paid_amount"].asString());
        }
    }
    if(pJson.isMember("paid_number"))
    {
        dirtyFlag_[13] = true;
        if(!pJson["paid_number"].isNull())
        {
            paidNumber_=std::make_shared<std::string>(pJson["paid_number"].asString());
        }
    }
    if(pJson.isMember("is_multiple_pay"))
    {
        dirtyFlag_[14] = true;
        if(!pJson["is_multiple_pay"].isNull())
        {
            isMultiplePay_=std::make_shared<uint8_t>((uint8_t)pJson["is_multiple_pay"].asUInt64());
        }
    }
    if(pJson.isMember("company_bank_card_id"))
    {
        dirtyFlag_[15] = true;
        if(!pJson["company_bank_card_id"].isNull())
        {
            companyBankCardId_=std::make_shared<int64_t>((int64_t)pJson["company_bank_card_id"].asInt64());
        }
    }
    if(pJson.isMember("order_category"))
    {
        dirtyFlag_[16] = true;
        if(!pJson["order_category"].isNull())
        {
            orderCategory_=std::make_shared<uint8_t>((uint8_t)pJson["order_category"].asUInt64());
        }
    }
}

const uint64_t &SalePay::getValueOfId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &SalePay::getId() const noexcept
{
    return id_;
}
void SalePay::setId(const uint64_t &pId) noexcept
{
    id_ = std::make_shared<uint64_t>(pId);
    dirtyFlag_[0] = true;
}



const typename SalePay::PrimaryKeyType & SalePay::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const ::trantor::Date &SalePay::getValueOfCreateTime() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(createTime_)
        return *createTime_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &SalePay::getCreateTime() const noexcept
{
    return createTime_;
}
void SalePay::setCreateTime(const ::trantor::Date &pCreateTime) noexcept
{
    createTime_ = std::make_shared<::trantor::Date>(pCreateTime);
    dirtyFlag_[1] = true;
}




const ::trantor::Date &SalePay::getValueOfUpdateTime() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(updateTime_)
        return *updateTime_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &SalePay::getUpdateTime() const noexcept
{
    return updateTime_;
}
void SalePay::setUpdateTime(const ::trantor::Date &pUpdateTime) noexcept
{
    updateTime_ = std::make_shared<::trantor::Date>(pUpdateTime);
    dirtyFlag_[2] = true;
}




const std::string &SalePay::getValueOfRemark() const noexcept
{
    const static std::string defaultValue = std::string();
    if(remark_)
        return *remark_;
    return defaultValue;
}
const std::shared_ptr<std::string> &SalePay::getRemark() const noexcept
{
    return remark_;
}
void SalePay::setRemark(const std::string &pRemark) noexcept
{
    remark_ = std::make_shared<std::string>(pRemark);
    dirtyFlag_[3] = true;
}
void SalePay::setRemark(std::string &&pRemark) noexcept
{
    remark_ = std::make_shared<std::string>(std::move(pRemark));
    dirtyFlag_[3] = true;
}


void SalePay::setRemarkToNull() noexcept
{
    remark_.reset();
    dirtyFlag_[3] = true;
}


const int8_t &SalePay::getValueOfIsDelete() const noexcept
{
    const static int8_t defaultValue = int8_t();
    if(isDelete_)
        return *isDelete_;
    return defaultValue;
}
const std::shared_ptr<int8_t> &SalePay::getIsDelete() const noexcept
{
    return isDelete_;
}
void SalePay::setIsDelete(const int8_t &pIsDelete) noexcept
{
    isDelete_ = std::make_shared<int8_t>(pIsDelete);
    dirtyFlag_[4] = true;
}




const uint64_t &SalePay::getValueOfShopId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(shopId_)
        return *shopId_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &SalePay::getShopId() const noexcept
{
    return shopId_;
}
void SalePay::setShopId(const uint64_t &pShopId) noexcept
{
    shopId_ = std::make_shared<uint64_t>(pShopId);
    dirtyFlag_[5] = true;
}




const int64_t &SalePay::getValueOfSaleOrderId() const noexcept
{
    const static int64_t defaultValue = int64_t();
    if(saleOrderId_)
        return *saleOrderId_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &SalePay::getSaleOrderId() const noexcept
{
    return saleOrderId_;
}
void SalePay::setSaleOrderId(const int64_t &pSaleOrderId) noexcept
{
    saleOrderId_ = std::make_shared<int64_t>(pSaleOrderId);
    dirtyFlag_[6] = true;
}




const std::string &SalePay::getValueOfSaleOrderKey() const noexcept
{
    const static std::string defaultValue = std::string();
    if(saleOrderKey_)
        return *saleOrderKey_;
    return defaultValue;
}
const std::shared_ptr<std::string> &SalePay::getSaleOrderKey() const noexcept
{
    return saleOrderKey_;
}
void SalePay::setSaleOrderKey(const std::string &pSaleOrderKey) noexcept
{
    saleOrderKey_ = std::make_shared<std::string>(pSaleOrderKey);
    dirtyFlag_[7] = true;
}
void SalePay::setSaleOrderKey(std::string &&pSaleOrderKey) noexcept
{
    saleOrderKey_ = std::make_shared<std::string>(std::move(pSaleOrderKey));
    dirtyFlag_[7] = true;
}


void SalePay::setSaleOrderKeyToNull() noexcept
{
    saleOrderKey_.reset();
    dirtyFlag_[7] = true;
}


const uint8_t &SalePay::getValueOfPayType() const noexcept
{
    const static uint8_t defaultValue = uint8_t();
    if(payType_)
        return *payType_;
    return defaultValue;
}
const std::shared_ptr<uint8_t> &SalePay::getPayType() const noexcept
{
    return payType_;
}
void SalePay::setPayType(const uint8_t &pPayType) noexcept
{
    payType_ = std::make_shared<uint8_t>(pPayType);
    dirtyFlag_[8] = true;
}




const uint8_t &SalePay::getValueOfPayStatus() const noexcept
{
    const static uint8_t defaultValue = uint8_t();
    if(payStatus_)
        return *payStatus_;
    return defaultValue;
}
const std::shared_ptr<uint8_t> &SalePay::getPayStatus() const noexcept
{
    return payStatus_;
}
void SalePay::setPayStatus(const uint8_t &pPayStatus) noexcept
{
    payStatus_ = std::make_shared<uint8_t>(pPayStatus);
    dirtyFlag_[9] = true;
}




const std::string &SalePay::getValueOfAmount() const noexcept
{
    const static std::string defaultValue = std::string();
    if(amount_)
        return *amount_;
    return defaultValue;
}
const std::shared_ptr<std::string> &SalePay::getAmount() const noexcept
{
    return amount_;
}
void SalePay::setAmount(const std::string &pAmount) noexcept
{
    amount_ = std::make_shared<std::string>(pAmount);
    dirtyFlag_[10] = true;
}
void SalePay::setAmount(std::string &&pAmount) noexcept
{
    amount_ = std::make_shared<std::string>(std::move(pAmount));
    dirtyFlag_[10] = true;
}




const std::string &SalePay::getValueOfNumber() const noexcept
{
    const static std::string defaultValue = std::string();
    if(number_)
        return *number_;
    return defaultValue;
}
const std::shared_ptr<std::string> &SalePay::getNumber() const noexcept
{
    return number_;
}
void SalePay::setNumber(const std::string &pNumber) noexcept
{
    number_ = std::make_shared<std::string>(pNumber);
    dirtyFlag_[11] = true;
}
void SalePay::setNumber(std::string &&pNumber) noexcept
{
    number_ = std::make_shared<std::string>(std::move(pNumber));
    dirtyFlag_[11] = true;
}




const std::string &SalePay::getValueOfPaidAmount() const noexcept
{
    const static std::string defaultValue = std::string();
    if(paidAmount_)
        return *paidAmount_;
    return defaultValue;
}
const std::shared_ptr<std::string> &SalePay::getPaidAmount() const noexcept
{
    return paidAmount_;
}
void SalePay::setPaidAmount(const std::string &pPaidAmount) noexcept
{
    paidAmount_ = std::make_shared<std::string>(pPaidAmount);
    dirtyFlag_[12] = true;
}
void SalePay::setPaidAmount(std::string &&pPaidAmount) noexcept
{
    paidAmount_ = std::make_shared<std::string>(std::move(pPaidAmount));
    dirtyFlag_[12] = true;
}




const std::string &SalePay::getValueOfPaidNumber() const noexcept
{
    const static std::string defaultValue = std::string();
    if(paidNumber_)
        return *paidNumber_;
    return defaultValue;
}
const std::shared_ptr<std::string> &SalePay::getPaidNumber() const noexcept
{
    return paidNumber_;
}
void SalePay::setPaidNumber(const std::string &pPaidNumber) noexcept
{
    paidNumber_ = std::make_shared<std::string>(pPaidNumber);
    dirtyFlag_[13] = true;
}
void SalePay::setPaidNumber(std::string &&pPaidNumber) noexcept
{
    paidNumber_ = std::make_shared<std::string>(std::move(pPaidNumber));
    dirtyFlag_[13] = true;
}




const uint8_t &SalePay::getValueOfIsMultiplePay() const noexcept
{
    const static uint8_t defaultValue = uint8_t();
    if(isMultiplePay_)
        return *isMultiplePay_;
    return defaultValue;
}
const std::shared_ptr<uint8_t> &SalePay::getIsMultiplePay() const noexcept
{
    return isMultiplePay_;
}
void SalePay::setIsMultiplePay(const uint8_t &pIsMultiplePay) noexcept
{
    isMultiplePay_ = std::make_shared<uint8_t>(pIsMultiplePay);
    dirtyFlag_[14] = true;
}




const int64_t &SalePay::getValueOfCompanyBankCardId() const noexcept
{
    const static int64_t defaultValue = int64_t();
    if(companyBankCardId_)
        return *companyBankCardId_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &SalePay::getCompanyBankCardId() const noexcept
{
    return companyBankCardId_;
}
void SalePay::setCompanyBankCardId(const int64_t &pCompanyBankCardId) noexcept
{
    companyBankCardId_ = std::make_shared<int64_t>(pCompanyBankCardId);
    dirtyFlag_[15] = true;
}




const uint8_t &SalePay::getValueOfOrderCategory() const noexcept
{
    const static uint8_t defaultValue = uint8_t();
    if(orderCategory_)
        return *orderCategory_;
    return defaultValue;
}
const std::shared_ptr<uint8_t> &SalePay::getOrderCategory() const noexcept
{
    return orderCategory_;
}
void SalePay::setOrderCategory(const uint8_t &pOrderCategory) noexcept
{
    orderCategory_ = std::make_shared<uint8_t>(pOrderCategory);
    dirtyFlag_[16] = true;
}




void SalePay::updateId(const uint64_t id)
{
    id_ = std::make_shared<uint64_t>(id);
}

const std::vector<std::string> &SalePay::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "create_time",
        "update_time",
        "remark",
        "is_delete",
        "shop_id",
        "sale_order_id",
        "sale_order_key",
        "pay_type",
        "pay_status",
        "amount",
        "number",
        "paid_amount",
        "paid_number",
        "is_multiple_pay",
        "company_bank_card_id",
        "order_category"
    };
    return inCols;
}

void SalePay::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getCreateTime())
        {
            binder << getValueOfCreateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getUpdateTime())
        {
            binder << getValueOfUpdateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getRemark())
        {
            binder << getValueOfRemark();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getIsDelete())
        {
            binder << getValueOfIsDelete();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getShopId())
        {
            binder << getValueOfShopId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getSaleOrderId())
        {
            binder << getValueOfSaleOrderId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getSaleOrderKey())
        {
            binder << getValueOfSaleOrderKey();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getPayType())
        {
            binder << getValueOfPayType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getPayStatus())
        {
            binder << getValueOfPayStatus();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getAmount())
        {
            binder << getValueOfAmount();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getNumber())
        {
            binder << getValueOfNumber();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getPaidAmount())
        {
            binder << getValueOfPaidAmount();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[13])
    {
        if(getPaidNumber())
        {
            binder << getValueOfPaidNumber();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[14])
    {
        if(getIsMultiplePay())
        {
            binder << getValueOfIsMultiplePay();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[15])
    {
        if(getCompanyBankCardId())
        {
            binder << getValueOfCompanyBankCardId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[16])
    {
        if(getOrderCategory())
        {
            binder << getValueOfOrderCategory();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> SalePay::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    if(dirtyFlag_[8])
    {
        ret.push_back(getColumnName(8));
    }
    if(dirtyFlag_[9])
    {
        ret.push_back(getColumnName(9));
    }
    if(dirtyFlag_[10])
    {
        ret.push_back(getColumnName(10));
    }
    if(dirtyFlag_[11])
    {
        ret.push_back(getColumnName(11));
    }
    if(dirtyFlag_[12])
    {
        ret.push_back(getColumnName(12));
    }
    if(dirtyFlag_[13])
    {
        ret.push_back(getColumnName(13));
    }
    if(dirtyFlag_[14])
    {
        ret.push_back(getColumnName(14));
    }
    if(dirtyFlag_[15])
    {
        ret.push_back(getColumnName(15));
    }
    if(dirtyFlag_[16])
    {
        ret.push_back(getColumnName(16));
    }
    return ret;
}

void SalePay::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getCreateTime())
        {
            binder << getValueOfCreateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getUpdateTime())
        {
            binder << getValueOfUpdateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getRemark())
        {
            binder << getValueOfRemark();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getIsDelete())
        {
            binder << getValueOfIsDelete();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getShopId())
        {
            binder << getValueOfShopId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getSaleOrderId())
        {
            binder << getValueOfSaleOrderId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getSaleOrderKey())
        {
            binder << getValueOfSaleOrderKey();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getPayType())
        {
            binder << getValueOfPayType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getPayStatus())
        {
            binder << getValueOfPayStatus();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getAmount())
        {
            binder << getValueOfAmount();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getNumber())
        {
            binder << getValueOfNumber();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getPaidAmount())
        {
            binder << getValueOfPaidAmount();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[13])
    {
        if(getPaidNumber())
        {
            binder << getValueOfPaidNumber();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[14])
    {
        if(getIsMultiplePay())
        {
            binder << getValueOfIsMultiplePay();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[15])
    {
        if(getCompanyBankCardId())
        {
            binder << getValueOfCompanyBankCardId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[16])
    {
        if(getOrderCategory())
        {
            binder << getValueOfOrderCategory();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value SalePay::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=(Json::UInt64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getCreateTime())
    {
        ret["create_time"]=getCreateTime()->toDbStringLocal();
    }
    else
    {
        ret["create_time"]=Json::Value();
    }
    if(getUpdateTime())
    {
        ret["update_time"]=getUpdateTime()->toDbStringLocal();
    }
    else
    {
        ret["update_time"]=Json::Value();
    }
    if(getRemark())
    {
        ret["remark"]=getValueOfRemark();
    }
    else
    {
        ret["remark"]=Json::Value();
    }
    if(getIsDelete())
    {
        ret["is_delete"]=getValueOfIsDelete();
    }
    else
    {
        ret["is_delete"]=Json::Value();
    }
    if(getShopId())
    {
        ret["shop_id"]=(Json::UInt64)getValueOfShopId();
    }
    else
    {
        ret["shop_id"]=Json::Value();
    }
    if(getSaleOrderId())
    {
        ret["sale_order_id"]=(Json::Int64)getValueOfSaleOrderId();
    }
    else
    {
        ret["sale_order_id"]=Json::Value();
    }
    if(getSaleOrderKey())
    {
        ret["sale_order_key"]=getValueOfSaleOrderKey();
    }
    else
    {
        ret["sale_order_key"]=Json::Value();
    }
    if(getPayType())
    {
        ret["pay_type"]=getValueOfPayType();
    }
    else
    {
        ret["pay_type"]=Json::Value();
    }
    if(getPayStatus())
    {
        ret["pay_status"]=getValueOfPayStatus();
    }
    else
    {
        ret["pay_status"]=Json::Value();
    }
    if(getAmount())
    {
        ret["amount"]=getValueOfAmount();
    }
    else
    {
        ret["amount"]=Json::Value();
    }
    if(getNumber())
    {
        ret["number"]=getValueOfNumber();
    }
    else
    {
        ret["number"]=Json::Value();
    }
    if(getPaidAmount())
    {
        ret["paid_amount"]=getValueOfPaidAmount();
    }
    else
    {
        ret["paid_amount"]=Json::Value();
    }
    if(getPaidNumber())
    {
        ret["paid_number"]=getValueOfPaidNumber();
    }
    else
    {
        ret["paid_number"]=Json::Value();
    }
    if(getIsMultiplePay())
    {
        ret["is_multiple_pay"]=getValueOfIsMultiplePay();
    }
    else
    {
        ret["is_multiple_pay"]=Json::Value();
    }
    if(getCompanyBankCardId())
    {
        ret["company_bank_card_id"]=(Json::Int64)getValueOfCompanyBankCardId();
    }
    else
    {
        ret["company_bank_card_id"]=Json::Value();
    }
    if(getOrderCategory())
    {
        ret["order_category"]=getValueOfOrderCategory();
    }
    else
    {
        ret["order_category"]=Json::Value();
    }
    return ret;
}

Json::Value SalePay::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 17)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=(Json::UInt64)getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getCreateTime())
            {
                ret[pMasqueradingVector[1]]=getCreateTime()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getUpdateTime())
            {
                ret[pMasqueradingVector[2]]=getUpdateTime()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getRemark())
            {
                ret[pMasqueradingVector[3]]=getValueOfRemark();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getIsDelete())
            {
                ret[pMasqueradingVector[4]]=getValueOfIsDelete();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getShopId())
            {
                ret[pMasqueradingVector[5]]=(Json::UInt64)getValueOfShopId();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getSaleOrderId())
            {
                ret[pMasqueradingVector[6]]=(Json::Int64)getValueOfSaleOrderId();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getSaleOrderKey())
            {
                ret[pMasqueradingVector[7]]=getValueOfSaleOrderKey();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[8].empty())
        {
            if(getPayType())
            {
                ret[pMasqueradingVector[8]]=getValueOfPayType();
            }
            else
            {
                ret[pMasqueradingVector[8]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[9].empty())
        {
            if(getPayStatus())
            {
                ret[pMasqueradingVector[9]]=getValueOfPayStatus();
            }
            else
            {
                ret[pMasqueradingVector[9]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[10].empty())
        {
            if(getAmount())
            {
                ret[pMasqueradingVector[10]]=getValueOfAmount();
            }
            else
            {
                ret[pMasqueradingVector[10]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[11].empty())
        {
            if(getNumber())
            {
                ret[pMasqueradingVector[11]]=getValueOfNumber();
            }
            else
            {
                ret[pMasqueradingVector[11]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[12].empty())
        {
            if(getPaidAmount())
            {
                ret[pMasqueradingVector[12]]=getValueOfPaidAmount();
            }
            else
            {
                ret[pMasqueradingVector[12]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[13].empty())
        {
            if(getPaidNumber())
            {
                ret[pMasqueradingVector[13]]=getValueOfPaidNumber();
            }
            else
            {
                ret[pMasqueradingVector[13]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[14].empty())
        {
            if(getIsMultiplePay())
            {
                ret[pMasqueradingVector[14]]=getValueOfIsMultiplePay();
            }
            else
            {
                ret[pMasqueradingVector[14]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[15].empty())
        {
            if(getCompanyBankCardId())
            {
                ret[pMasqueradingVector[15]]=(Json::Int64)getValueOfCompanyBankCardId();
            }
            else
            {
                ret[pMasqueradingVector[15]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[16].empty())
        {
            if(getOrderCategory())
            {
                ret[pMasqueradingVector[16]]=getValueOfOrderCategory();
            }
            else
            {
                ret[pMasqueradingVector[16]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=(Json::UInt64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getCreateTime())
    {
        ret["create_time"]=getCreateTime()->toDbStringLocal();
    }
    else
    {
        ret["create_time"]=Json::Value();
    }
    if(getUpdateTime())
    {
        ret["update_time"]=getUpdateTime()->toDbStringLocal();
    }
    else
    {
        ret["update_time"]=Json::Value();
    }
    if(getRemark())
    {
        ret["remark"]=getValueOfRemark();
    }
    else
    {
        ret["remark"]=Json::Value();
    }
    if(getIsDelete())
    {
        ret["is_delete"]=getValueOfIsDelete();
    }
    else
    {
        ret["is_delete"]=Json::Value();
    }
    if(getShopId())
    {
        ret["shop_id"]=(Json::UInt64)getValueOfShopId();
    }
    else
    {
        ret["shop_id"]=Json::Value();
    }
    if(getSaleOrderId())
    {
        ret["sale_order_id"]=(Json::Int64)getValueOfSaleOrderId();
    }
    else
    {
        ret["sale_order_id"]=Json::Value();
    }
    if(getSaleOrderKey())
    {
        ret["sale_order_key"]=getValueOfSaleOrderKey();
    }
    else
    {
        ret["sale_order_key"]=Json::Value();
    }
    if(getPayType())
    {
        ret["pay_type"]=getValueOfPayType();
    }
    else
    {
        ret["pay_type"]=Json::Value();
    }
    if(getPayStatus())
    {
        ret["pay_status"]=getValueOfPayStatus();
    }
    else
    {
        ret["pay_status"]=Json::Value();
    }
    if(getAmount())
    {
        ret["amount"]=getValueOfAmount();
    }
    else
    {
        ret["amount"]=Json::Value();
    }
    if(getNumber())
    {
        ret["number"]=getValueOfNumber();
    }
    else
    {
        ret["number"]=Json::Value();
    }
    if(getPaidAmount())
    {
        ret["paid_amount"]=getValueOfPaidAmount();
    }
    else
    {
        ret["paid_amount"]=Json::Value();
    }
    if(getPaidNumber())
    {
        ret["paid_number"]=getValueOfPaidNumber();
    }
    else
    {
        ret["paid_number"]=Json::Value();
    }
    if(getIsMultiplePay())
    {
        ret["is_multiple_pay"]=getValueOfIsMultiplePay();
    }
    else
    {
        ret["is_multiple_pay"]=Json::Value();
    }
    if(getCompanyBankCardId())
    {
        ret["company_bank_card_id"]=(Json::Int64)getValueOfCompanyBankCardId();
    }
    else
    {
        ret["company_bank_card_id"]=Json::Value();
    }
    if(getOrderCategory())
    {
        ret["order_category"]=getValueOfOrderCategory();
    }
    else
    {
        ret["order_category"]=Json::Value();
    }
    return ret;
}

bool SalePay::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("create_time"))
    {
        if(!validJsonOfField(1, "create_time", pJson["create_time"], err, true))
            return false;
    }
    if(pJson.isMember("update_time"))
    {
        if(!validJsonOfField(2, "update_time", pJson["update_time"], err, true))
            return false;
    }
    if(pJson.isMember("remark"))
    {
        if(!validJsonOfField(3, "remark", pJson["remark"], err, true))
            return false;
    }
    if(pJson.isMember("is_delete"))
    {
        if(!validJsonOfField(4, "is_delete", pJson["is_delete"], err, true))
            return false;
    }
    if(pJson.isMember("shop_id"))
    {
        if(!validJsonOfField(5, "shop_id", pJson["shop_id"], err, true))
            return false;
    }
    if(pJson.isMember("sale_order_id"))
    {
        if(!validJsonOfField(6, "sale_order_id", pJson["sale_order_id"], err, true))
            return false;
    }
    if(pJson.isMember("sale_order_key"))
    {
        if(!validJsonOfField(7, "sale_order_key", pJson["sale_order_key"], err, true))
            return false;
    }
    if(pJson.isMember("pay_type"))
    {
        if(!validJsonOfField(8, "pay_type", pJson["pay_type"], err, true))
            return false;
    }
    if(pJson.isMember("pay_status"))
    {
        if(!validJsonOfField(9, "pay_status", pJson["pay_status"], err, true))
            return false;
    }
    if(pJson.isMember("amount"))
    {
        if(!validJsonOfField(10, "amount", pJson["amount"], err, true))
            return false;
    }
    if(pJson.isMember("number"))
    {
        if(!validJsonOfField(11, "number", pJson["number"], err, true))
            return false;
    }
    if(pJson.isMember("paid_amount"))
    {
        if(!validJsonOfField(12, "paid_amount", pJson["paid_amount"], err, true))
            return false;
    }
    if(pJson.isMember("paid_number"))
    {
        if(!validJsonOfField(13, "paid_number", pJson["paid_number"], err, true))
            return false;
    }
    if(pJson.isMember("is_multiple_pay"))
    {
        if(!validJsonOfField(14, "is_multiple_pay", pJson["is_multiple_pay"], err, true))
            return false;
    }
    if(pJson.isMember("company_bank_card_id"))
    {
        if(!validJsonOfField(15, "company_bank_card_id", pJson["company_bank_card_id"], err, true))
            return false;
    }
    if(pJson.isMember("order_category"))
    {
        if(!validJsonOfField(16, "order_category", pJson["order_category"], err, true))
            return false;
    }
    return true;
}
bool SalePay::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                 const std::vector<std::string> &pMasqueradingVector,
                                                 std::string &err)
{
    if(pMasqueradingVector.size() != 17)
    {
        err = "Bad masquerading vector";
        return false;
    }
    if(!pMasqueradingVector[0].empty())
    {
        if(pJson.isMember(pMasqueradingVector[0]))
        {
            if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[1].empty())
    {
        if(pJson.isMember(pMasqueradingVector[1]))
        {
            if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[2].empty())
    {
        if(pJson.isMember(pMasqueradingVector[2]))
        {
            if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[3].empty())
    {
        if(pJson.isMember(pMasqueradingVector[3]))
        {
            if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[4].empty())
    {
        if(pJson.isMember(pMasqueradingVector[4]))
        {
            if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[5].empty())
    {
        if(pJson.isMember(pMasqueradingVector[5]))
        {
            if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[6].empty())
    {
        if(pJson.isMember(pMasqueradingVector[6]))
        {
            if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[7].empty())
    {
        if(pJson.isMember(pMasqueradingVector[7]))
        {
            if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[8].empty())
    {
        if(pJson.isMember(pMasqueradingVector[8]))
        {
            if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[9].empty())
    {
        if(pJson.isMember(pMasqueradingVector[9]))
        {
            if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[10].empty())
    {
        if(pJson.isMember(pMasqueradingVector[10]))
        {
            if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[11].empty())
    {
        if(pJson.isMember(pMasqueradingVector[11]))
        {
            if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[12].empty())
    {
        if(pJson.isMember(pMasqueradingVector[12]))
        {
            if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[13].empty())
    {
        if(pJson.isMember(pMasqueradingVector[13]))
        {
            if(!validJsonOfField(13, pMasqueradingVector[13], pJson[pMasqueradingVector[13]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[14].empty())
    {
        if(pJson.isMember(pMasqueradingVector[14]))
        {
            if(!validJsonOfField(14, pMasqueradingVector[14], pJson[pMasqueradingVector[14]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[15].empty())
    {
        if(pJson.isMember(pMasqueradingVector[15]))
        {
            if(!validJsonOfField(15, pMasqueradingVector[15], pJson[pMasqueradingVector[15]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[16].empty())
    {
        if(pJson.isMember(pMasqueradingVector[16]))
        {
            if(!validJsonOfField(16, pMasqueradingVector[16], pJson[pMasqueradingVector[16]], err, true))
                return false;
        }
    }
    return true;
}
bool SalePay::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("create_time"))
    {
        if(!validJsonOfField(1, "create_time", pJson["create_time"], err, false))
            return false;
    }
    if(pJson.isMember("update_time"))
    {
        if(!validJsonOfField(2, "update_time", pJson["update_time"], err, false))
            return false;
    }
    if(pJson.isMember("remark"))
    {
        if(!validJsonOfField(3, "remark", pJson["remark"], err, false))
            return false;
    }
    if(pJson.isMember("is_delete"))
    {
        if(!validJsonOfField(4, "is_delete", pJson["is_delete"], err, false))
            return false;
    }
    if(pJson.isMember("shop_id"))
    {
        if(!validJsonOfField(5, "shop_id", pJson["shop_id"], err, false))
            return false;
    }
    if(pJson.isMember("sale_order_id"))
    {
        if(!validJsonOfField(6, "sale_order_id", pJson["sale_order_id"], err, false))
            return false;
    }
    if(pJson.isMember("sale_order_key"))
    {
        if(!validJsonOfField(7, "sale_order_key", pJson["sale_order_key"], err, false))
            return false;
    }
    if(pJson.isMember("pay_type"))
    {
        if(!validJsonOfField(8, "pay_type", pJson["pay_type"], err, false))
            return false;
    }
    if(pJson.isMember("pay_status"))
    {
        if(!validJsonOfField(9, "pay_status", pJson["pay_status"], err, false))
            return false;
    }
    if(pJson.isMember("amount"))
    {
        if(!validJsonOfField(10, "amount", pJson["amount"], err, false))
            return false;
    }
    if(pJson.isMember("number"))
    {
        if(!validJsonOfField(11, "number", pJson["number"], err, false))
            return false;
    }
    if(pJson.isMember("paid_amount"))
    {
        if(!validJsonOfField(12, "paid_amount", pJson["paid_amount"], err, false))
            return false;
    }
    if(pJson.isMember("paid_number"))
    {
        if(!validJsonOfField(13, "paid_number", pJson["paid_number"], err, false))
            return false;
    }
    if(pJson.isMember("is_multiple_pay"))
    {
        if(!validJsonOfField(14, "is_multiple_pay", pJson["is_multiple_pay"], err, false))
            return false;
    }
    if(pJson.isMember("company_bank_card_id"))
    {
        if(!validJsonOfField(15, "company_bank_card_id", pJson["company_bank_card_id"], err, false))
            return false;
    }
    if(pJson.isMember("order_category"))
    {
        if(!validJsonOfField(16, "order_category", pJson["order_category"], err, false))
            return false;
    }
    return true;
}
bool SalePay::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                               const std::vector<std::string> &pMasqueradingVector,
                                               std::string &err)
{
    if(pMasqueradingVector.size() != 17)
    {
        err = "Bad masquerading vector";
        return false;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
            return false;
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
            return false;
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
            return false;
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
            return false;
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
            return false;
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
            return false;
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
            return false;
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, false))
            return false;
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, false))
            return false;
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, false))
            return false;
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, false))
            return false;
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, false))
            return false;
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        if(!validJsonOfField(13, pMasqueradingVector[13], pJson[pMasqueradingVector[13]], err, false))
            return false;
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        if(!validJsonOfField(14, pMasqueradingVector[14], pJson[pMasqueradingVector[14]], err, false))
            return false;
    }
    if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
    {
        if(!validJsonOfField(15, pMasqueradingVector[15], pJson[pMasqueradingVector[15]], err, false))
            return false;
    }
    if(!pMasqueradingVector[16].empty() && pJson.isMember(pMasqueradingVector[16]))
    {
        if(!validJsonOfField(16, pMasqueradingVector[16], pJson[pMasqueradingVector[16]], err, false))
            return false;
    }
    return true;
}
bool SalePay::validJsonOfField(size_t index,
                               const std::string &fieldName,
                               const Json::Value &pJson, 
                               std::string &err, 
                               bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }        
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 200)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 200)";
                return false;               
            }

            break;
        case 4:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 5:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 6:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 7:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 20)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 20)";
                return false;               
            }

            break;
        case 8:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 9:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 10:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 11:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 12:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 13:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 14:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 15:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 16:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
     
        default:
            err="Internal error in the server";
            return false;
            break;
    }
    return true;
}
