/**
 *
 *  Guestbook.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Guestbook.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::v2;

const std::string Guestbook::Cols::_id = "id";
const std::string Guestbook::Cols::_create_time = "create_time";
const std::string Guestbook::Cols::_update_time = "update_time";
const std::string Guestbook::Cols::_admin_id = "admin_id";
const std::string Guestbook::Cols::_user_id = "user_id";
const std::string Guestbook::Cols::_type = "type";
const std::string Guestbook::Cols::_company_name = "company_name";
const std::string Guestbook::Cols::_phone = "phone";
const std::string Guestbook::Cols::_mobile = "mobile";
const std::string Guestbook::Cols::_real_name = "real_name";
const std::string Guestbook::Cols::_ip = "ip";
const std::string Guestbook::Cols::_num = "num";
const std::string Guestbook::Cols::_price = "price";
const std::string Guestbook::Cols::_status = "status";
const std::string Guestbook::Cols::_remark = "remark";
const std::string Guestbook::Cols::_explain = "explain";
const std::string Guestbook::Cols::_shop_id = "shop_id";
const std::string Guestbook::Cols::_is_delete = "is_delete";
const std::string Guestbook::primaryKeyName = "id";
const bool Guestbook::hasPrimaryKey = true;
const std::string Guestbook::tableName = "guestbook";

const std::vector<typename Guestbook::MetaData> Guestbook::metaData_={
{"id","int64_t","bigint(20)",8,1,1,1},
{"create_time","::trantor::Date","datetime",0,0,0,0},
{"update_time","::trantor::Date","datetime",0,0,0,0},
{"admin_id","int64_t","bigint(20)",8,0,0,0},
{"user_id","int64_t","bigint(20)",8,0,0,0},
{"type","int8_t","tinyint(1)",1,0,0,0},
{"company_name","std::string","varchar(255)",255,0,0,0},
{"phone","std::string","varchar(64)",64,0,0,0},
{"mobile","std::string","varchar(60)",60,0,0,0},
{"real_name","std::string","varchar(60)",60,0,0,0},
{"ip","std::string","varchar(60)",60,0,0,0},
{"num","std::string","decimal(32,5)",0,0,0,0},
{"price","std::string","decimal(32,2)",0,0,0,0},
{"status","int8_t","tinyint(1)",1,0,0,0},
{"remark","std::string","varchar(255)",255,0,0,0},
{"explain","std::string","text",0,0,0,0},
{"shop_id","int64_t","bigint(20)",8,0,0,0},
{"is_delete","uint8_t","tinyint(1) unsigned",1,0,0,1}
};
const std::string &Guestbook::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Guestbook::Guestbook(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<int64_t>(r["id"].as<int64_t>());
        }
        if(!r["create_time"].isNull())
        {
            auto timeStr = r["create_time"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        if(!r["update_time"].isNull())
        {
            auto timeStr = r["update_time"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        if(!r["admin_id"].isNull())
        {
            adminId_=std::make_shared<int64_t>(r["admin_id"].as<int64_t>());
        }
        if(!r["user_id"].isNull())
        {
            userId_=std::make_shared<int64_t>(r["user_id"].as<int64_t>());
        }
        if(!r["type"].isNull())
        {
            type_=std::make_shared<int8_t>(r["type"].as<int8_t>());
        }
        if(!r["company_name"].isNull())
        {
            companyName_=std::make_shared<std::string>(r["company_name"].as<std::string>());
        }
        if(!r["phone"].isNull())
        {
            phone_=std::make_shared<std::string>(r["phone"].as<std::string>());
        }
        if(!r["mobile"].isNull())
        {
            mobile_=std::make_shared<std::string>(r["mobile"].as<std::string>());
        }
        if(!r["real_name"].isNull())
        {
            realName_=std::make_shared<std::string>(r["real_name"].as<std::string>());
        }
        if(!r["ip"].isNull())
        {
            ip_=std::make_shared<std::string>(r["ip"].as<std::string>());
        }
        if(!r["num"].isNull())
        {
            num_=std::make_shared<std::string>(r["num"].as<std::string>());
        }
        if(!r["price"].isNull())
        {
            price_=std::make_shared<std::string>(r["price"].as<std::string>());
        }
        if(!r["status"].isNull())
        {
            status_=std::make_shared<int8_t>(r["status"].as<int8_t>());
        }
        if(!r["remark"].isNull())
        {
            remark_=std::make_shared<std::string>(r["remark"].as<std::string>());
        }
        if(!r["explain"].isNull())
        {
            explain_=std::make_shared<std::string>(r["explain"].as<std::string>());
        }
        if(!r["shop_id"].isNull())
        {
            shopId_=std::make_shared<int64_t>(r["shop_id"].as<int64_t>());
        }
        if(!r["is_delete"].isNull())
        {
            isDelete_=std::make_shared<uint8_t>(r["is_delete"].as<uint8_t>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 18 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            adminId_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            userId_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            type_=std::make_shared<int8_t>(r[index].as<int8_t>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            companyName_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            phone_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 8;
        if(!r[index].isNull())
        {
            mobile_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 9;
        if(!r[index].isNull())
        {
            realName_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 10;
        if(!r[index].isNull())
        {
            ip_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 11;
        if(!r[index].isNull())
        {
            num_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 12;
        if(!r[index].isNull())
        {
            price_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 13;
        if(!r[index].isNull())
        {
            status_=std::make_shared<int8_t>(r[index].as<int8_t>());
        }
        index = offset + 14;
        if(!r[index].isNull())
        {
            remark_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 15;
        if(!r[index].isNull())
        {
            explain_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 16;
        if(!r[index].isNull())
        {
            shopId_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 17;
        if(!r[index].isNull())
        {
            isDelete_=std::make_shared<uint8_t>(r[index].as<uint8_t>());
        }
    }

}

Guestbook::Guestbook(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 18)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[1]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[2]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            adminId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[3]].asInt64());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            userId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[4]].asInt64());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            type_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[5]].asInt64());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            companyName_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            phone_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            mobile_=std::make_shared<std::string>(pJson[pMasqueradingVector[8]].asString());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            realName_=std::make_shared<std::string>(pJson[pMasqueradingVector[9]].asString());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            ip_=std::make_shared<std::string>(pJson[pMasqueradingVector[10]].asString());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            num_=std::make_shared<std::string>(pJson[pMasqueradingVector[11]].asString());
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            price_=std::make_shared<std::string>(pJson[pMasqueradingVector[12]].asString());
        }
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        dirtyFlag_[13] = true;
        if(!pJson[pMasqueradingVector[13]].isNull())
        {
            status_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[13]].asInt64());
        }
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        dirtyFlag_[14] = true;
        if(!pJson[pMasqueradingVector[14]].isNull())
        {
            remark_=std::make_shared<std::string>(pJson[pMasqueradingVector[14]].asString());
        }
    }
    if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
    {
        dirtyFlag_[15] = true;
        if(!pJson[pMasqueradingVector[15]].isNull())
        {
            explain_=std::make_shared<std::string>(pJson[pMasqueradingVector[15]].asString());
        }
    }
    if(!pMasqueradingVector[16].empty() && pJson.isMember(pMasqueradingVector[16]))
    {
        dirtyFlag_[16] = true;
        if(!pJson[pMasqueradingVector[16]].isNull())
        {
            shopId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[16]].asInt64());
        }
    }
    if(!pMasqueradingVector[17].empty() && pJson.isMember(pMasqueradingVector[17]))
    {
        dirtyFlag_[17] = true;
        if(!pJson[pMasqueradingVector[17]].isNull())
        {
            isDelete_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[17]].asUInt64());
        }
    }
}

Guestbook::Guestbook(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int64_t>((int64_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("create_time"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["create_time"].isNull())
        {
            auto timeStr = pJson["create_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("update_time"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["update_time"].isNull())
        {
            auto timeStr = pJson["update_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("admin_id"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["admin_id"].isNull())
        {
            adminId_=std::make_shared<int64_t>((int64_t)pJson["admin_id"].asInt64());
        }
    }
    if(pJson.isMember("user_id"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["user_id"].isNull())
        {
            userId_=std::make_shared<int64_t>((int64_t)pJson["user_id"].asInt64());
        }
    }
    if(pJson.isMember("type"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["type"].isNull())
        {
            type_=std::make_shared<int8_t>((int8_t)pJson["type"].asInt64());
        }
    }
    if(pJson.isMember("company_name"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["company_name"].isNull())
        {
            companyName_=std::make_shared<std::string>(pJson["company_name"].asString());
        }
    }
    if(pJson.isMember("phone"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["phone"].isNull())
        {
            phone_=std::make_shared<std::string>(pJson["phone"].asString());
        }
    }
    if(pJson.isMember("mobile"))
    {
        dirtyFlag_[8]=true;
        if(!pJson["mobile"].isNull())
        {
            mobile_=std::make_shared<std::string>(pJson["mobile"].asString());
        }
    }
    if(pJson.isMember("real_name"))
    {
        dirtyFlag_[9]=true;
        if(!pJson["real_name"].isNull())
        {
            realName_=std::make_shared<std::string>(pJson["real_name"].asString());
        }
    }
    if(pJson.isMember("ip"))
    {
        dirtyFlag_[10]=true;
        if(!pJson["ip"].isNull())
        {
            ip_=std::make_shared<std::string>(pJson["ip"].asString());
        }
    }
    if(pJson.isMember("num"))
    {
        dirtyFlag_[11]=true;
        if(!pJson["num"].isNull())
        {
            num_=std::make_shared<std::string>(pJson["num"].asString());
        }
    }
    if(pJson.isMember("price"))
    {
        dirtyFlag_[12]=true;
        if(!pJson["price"].isNull())
        {
            price_=std::make_shared<std::string>(pJson["price"].asString());
        }
    }
    if(pJson.isMember("status"))
    {
        dirtyFlag_[13]=true;
        if(!pJson["status"].isNull())
        {
            status_=std::make_shared<int8_t>((int8_t)pJson["status"].asInt64());
        }
    }
    if(pJson.isMember("remark"))
    {
        dirtyFlag_[14]=true;
        if(!pJson["remark"].isNull())
        {
            remark_=std::make_shared<std::string>(pJson["remark"].asString());
        }
    }
    if(pJson.isMember("explain"))
    {
        dirtyFlag_[15]=true;
        if(!pJson["explain"].isNull())
        {
            explain_=std::make_shared<std::string>(pJson["explain"].asString());
        }
    }
    if(pJson.isMember("shop_id"))
    {
        dirtyFlag_[16]=true;
        if(!pJson["shop_id"].isNull())
        {
            shopId_=std::make_shared<int64_t>((int64_t)pJson["shop_id"].asInt64());
        }
    }
    if(pJson.isMember("is_delete"))
    {
        dirtyFlag_[17]=true;
        if(!pJson["is_delete"].isNull())
        {
            isDelete_=std::make_shared<uint8_t>((uint8_t)pJson["is_delete"].asUInt64());
        }
    }
}

void Guestbook::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 18)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[1]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[2]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            adminId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[3]].asInt64());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            userId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[4]].asInt64());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            type_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[5]].asInt64());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            companyName_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            phone_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            mobile_=std::make_shared<std::string>(pJson[pMasqueradingVector[8]].asString());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            realName_=std::make_shared<std::string>(pJson[pMasqueradingVector[9]].asString());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            ip_=std::make_shared<std::string>(pJson[pMasqueradingVector[10]].asString());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            num_=std::make_shared<std::string>(pJson[pMasqueradingVector[11]].asString());
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            price_=std::make_shared<std::string>(pJson[pMasqueradingVector[12]].asString());
        }
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        dirtyFlag_[13] = true;
        if(!pJson[pMasqueradingVector[13]].isNull())
        {
            status_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[13]].asInt64());
        }
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        dirtyFlag_[14] = true;
        if(!pJson[pMasqueradingVector[14]].isNull())
        {
            remark_=std::make_shared<std::string>(pJson[pMasqueradingVector[14]].asString());
        }
    }
    if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
    {
        dirtyFlag_[15] = true;
        if(!pJson[pMasqueradingVector[15]].isNull())
        {
            explain_=std::make_shared<std::string>(pJson[pMasqueradingVector[15]].asString());
        }
    }
    if(!pMasqueradingVector[16].empty() && pJson.isMember(pMasqueradingVector[16]))
    {
        dirtyFlag_[16] = true;
        if(!pJson[pMasqueradingVector[16]].isNull())
        {
            shopId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[16]].asInt64());
        }
    }
    if(!pMasqueradingVector[17].empty() && pJson.isMember(pMasqueradingVector[17]))
    {
        dirtyFlag_[17] = true;
        if(!pJson[pMasqueradingVector[17]].isNull())
        {
            isDelete_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[17]].asUInt64());
        }
    }
}
                                                                    
void Guestbook::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int64_t>((int64_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("create_time"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["create_time"].isNull())
        {
            auto timeStr = pJson["create_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("update_time"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["update_time"].isNull())
        {
            auto timeStr = pJson["update_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("admin_id"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["admin_id"].isNull())
        {
            adminId_=std::make_shared<int64_t>((int64_t)pJson["admin_id"].asInt64());
        }
    }
    if(pJson.isMember("user_id"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["user_id"].isNull())
        {
            userId_=std::make_shared<int64_t>((int64_t)pJson["user_id"].asInt64());
        }
    }
    if(pJson.isMember("type"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["type"].isNull())
        {
            type_=std::make_shared<int8_t>((int8_t)pJson["type"].asInt64());
        }
    }
    if(pJson.isMember("company_name"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["company_name"].isNull())
        {
            companyName_=std::make_shared<std::string>(pJson["company_name"].asString());
        }
    }
    if(pJson.isMember("phone"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["phone"].isNull())
        {
            phone_=std::make_shared<std::string>(pJson["phone"].asString());
        }
    }
    if(pJson.isMember("mobile"))
    {
        dirtyFlag_[8] = true;
        if(!pJson["mobile"].isNull())
        {
            mobile_=std::make_shared<std::string>(pJson["mobile"].asString());
        }
    }
    if(pJson.isMember("real_name"))
    {
        dirtyFlag_[9] = true;
        if(!pJson["real_name"].isNull())
        {
            realName_=std::make_shared<std::string>(pJson["real_name"].asString());
        }
    }
    if(pJson.isMember("ip"))
    {
        dirtyFlag_[10] = true;
        if(!pJson["ip"].isNull())
        {
            ip_=std::make_shared<std::string>(pJson["ip"].asString());
        }
    }
    if(pJson.isMember("num"))
    {
        dirtyFlag_[11] = true;
        if(!pJson["num"].isNull())
        {
            num_=std::make_shared<std::string>(pJson["num"].asString());
        }
    }
    if(pJson.isMember("price"))
    {
        dirtyFlag_[12] = true;
        if(!pJson["price"].isNull())
        {
            price_=std::make_shared<std::string>(pJson["price"].asString());
        }
    }
    if(pJson.isMember("status"))
    {
        dirtyFlag_[13] = true;
        if(!pJson["status"].isNull())
        {
            status_=std::make_shared<int8_t>((int8_t)pJson["status"].asInt64());
        }
    }
    if(pJson.isMember("remark"))
    {
        dirtyFlag_[14] = true;
        if(!pJson["remark"].isNull())
        {
            remark_=std::make_shared<std::string>(pJson["remark"].asString());
        }
    }
    if(pJson.isMember("explain"))
    {
        dirtyFlag_[15] = true;
        if(!pJson["explain"].isNull())
        {
            explain_=std::make_shared<std::string>(pJson["explain"].asString());
        }
    }
    if(pJson.isMember("shop_id"))
    {
        dirtyFlag_[16] = true;
        if(!pJson["shop_id"].isNull())
        {
            shopId_=std::make_shared<int64_t>((int64_t)pJson["shop_id"].asInt64());
        }
    }
    if(pJson.isMember("is_delete"))
    {
        dirtyFlag_[17] = true;
        if(!pJson["is_delete"].isNull())
        {
            isDelete_=std::make_shared<uint8_t>((uint8_t)pJson["is_delete"].asUInt64());
        }
    }
}

const int64_t &Guestbook::getValueOfId() const noexcept
{
    const static int64_t defaultValue = int64_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &Guestbook::getId() const noexcept
{
    return id_;
}
void Guestbook::setId(const int64_t &pId) noexcept
{
    id_ = std::make_shared<int64_t>(pId);
    dirtyFlag_[0] = true;
}



const typename Guestbook::PrimaryKeyType & Guestbook::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const ::trantor::Date &Guestbook::getValueOfCreateTime() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(createTime_)
        return *createTime_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Guestbook::getCreateTime() const noexcept
{
    return createTime_;
}
void Guestbook::setCreateTime(const ::trantor::Date &pCreateTime) noexcept
{
    createTime_ = std::make_shared<::trantor::Date>(pCreateTime);
    dirtyFlag_[1] = true;
}


void Guestbook::setCreateTimeToNull() noexcept
{
    createTime_.reset();
    dirtyFlag_[1] = true;
}


const ::trantor::Date &Guestbook::getValueOfUpdateTime() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(updateTime_)
        return *updateTime_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Guestbook::getUpdateTime() const noexcept
{
    return updateTime_;
}
void Guestbook::setUpdateTime(const ::trantor::Date &pUpdateTime) noexcept
{
    updateTime_ = std::make_shared<::trantor::Date>(pUpdateTime);
    dirtyFlag_[2] = true;
}


void Guestbook::setUpdateTimeToNull() noexcept
{
    updateTime_.reset();
    dirtyFlag_[2] = true;
}


const int64_t &Guestbook::getValueOfAdminId() const noexcept
{
    const static int64_t defaultValue = int64_t();
    if(adminId_)
        return *adminId_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &Guestbook::getAdminId() const noexcept
{
    return adminId_;
}
void Guestbook::setAdminId(const int64_t &pAdminId) noexcept
{
    adminId_ = std::make_shared<int64_t>(pAdminId);
    dirtyFlag_[3] = true;
}


void Guestbook::setAdminIdToNull() noexcept
{
    adminId_.reset();
    dirtyFlag_[3] = true;
}


const int64_t &Guestbook::getValueOfUserId() const noexcept
{
    const static int64_t defaultValue = int64_t();
    if(userId_)
        return *userId_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &Guestbook::getUserId() const noexcept
{
    return userId_;
}
void Guestbook::setUserId(const int64_t &pUserId) noexcept
{
    userId_ = std::make_shared<int64_t>(pUserId);
    dirtyFlag_[4] = true;
}


void Guestbook::setUserIdToNull() noexcept
{
    userId_.reset();
    dirtyFlag_[4] = true;
}


const int8_t &Guestbook::getValueOfType() const noexcept
{
    const static int8_t defaultValue = int8_t();
    if(type_)
        return *type_;
    return defaultValue;
}
const std::shared_ptr<int8_t> &Guestbook::getType() const noexcept
{
    return type_;
}
void Guestbook::setType(const int8_t &pType) noexcept
{
    type_ = std::make_shared<int8_t>(pType);
    dirtyFlag_[5] = true;
}


void Guestbook::setTypeToNull() noexcept
{
    type_.reset();
    dirtyFlag_[5] = true;
}


const std::string &Guestbook::getValueOfCompanyName() const noexcept
{
    const static std::string defaultValue = std::string();
    if(companyName_)
        return *companyName_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Guestbook::getCompanyName() const noexcept
{
    return companyName_;
}
void Guestbook::setCompanyName(const std::string &pCompanyName) noexcept
{
    companyName_ = std::make_shared<std::string>(pCompanyName);
    dirtyFlag_[6] = true;
}
void Guestbook::setCompanyName(std::string &&pCompanyName) noexcept
{
    companyName_ = std::make_shared<std::string>(std::move(pCompanyName));
    dirtyFlag_[6] = true;
}


void Guestbook::setCompanyNameToNull() noexcept
{
    companyName_.reset();
    dirtyFlag_[6] = true;
}


const std::string &Guestbook::getValueOfPhone() const noexcept
{
    const static std::string defaultValue = std::string();
    if(phone_)
        return *phone_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Guestbook::getPhone() const noexcept
{
    return phone_;
}
void Guestbook::setPhone(const std::string &pPhone) noexcept
{
    phone_ = std::make_shared<std::string>(pPhone);
    dirtyFlag_[7] = true;
}
void Guestbook::setPhone(std::string &&pPhone) noexcept
{
    phone_ = std::make_shared<std::string>(std::move(pPhone));
    dirtyFlag_[7] = true;
}


void Guestbook::setPhoneToNull() noexcept
{
    phone_.reset();
    dirtyFlag_[7] = true;
}


const std::string &Guestbook::getValueOfMobile() const noexcept
{
    const static std::string defaultValue = std::string();
    if(mobile_)
        return *mobile_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Guestbook::getMobile() const noexcept
{
    return mobile_;
}
void Guestbook::setMobile(const std::string &pMobile) noexcept
{
    mobile_ = std::make_shared<std::string>(pMobile);
    dirtyFlag_[8] = true;
}
void Guestbook::setMobile(std::string &&pMobile) noexcept
{
    mobile_ = std::make_shared<std::string>(std::move(pMobile));
    dirtyFlag_[8] = true;
}


void Guestbook::setMobileToNull() noexcept
{
    mobile_.reset();
    dirtyFlag_[8] = true;
}


const std::string &Guestbook::getValueOfRealName() const noexcept
{
    const static std::string defaultValue = std::string();
    if(realName_)
        return *realName_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Guestbook::getRealName() const noexcept
{
    return realName_;
}
void Guestbook::setRealName(const std::string &pRealName) noexcept
{
    realName_ = std::make_shared<std::string>(pRealName);
    dirtyFlag_[9] = true;
}
void Guestbook::setRealName(std::string &&pRealName) noexcept
{
    realName_ = std::make_shared<std::string>(std::move(pRealName));
    dirtyFlag_[9] = true;
}


void Guestbook::setRealNameToNull() noexcept
{
    realName_.reset();
    dirtyFlag_[9] = true;
}


const std::string &Guestbook::getValueOfIp() const noexcept
{
    const static std::string defaultValue = std::string();
    if(ip_)
        return *ip_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Guestbook::getIp() const noexcept
{
    return ip_;
}
void Guestbook::setIp(const std::string &pIp) noexcept
{
    ip_ = std::make_shared<std::string>(pIp);
    dirtyFlag_[10] = true;
}
void Guestbook::setIp(std::string &&pIp) noexcept
{
    ip_ = std::make_shared<std::string>(std::move(pIp));
    dirtyFlag_[10] = true;
}


void Guestbook::setIpToNull() noexcept
{
    ip_.reset();
    dirtyFlag_[10] = true;
}


const std::string &Guestbook::getValueOfNum() const noexcept
{
    const static std::string defaultValue = std::string();
    if(num_)
        return *num_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Guestbook::getNum() const noexcept
{
    return num_;
}
void Guestbook::setNum(const std::string &pNum) noexcept
{
    num_ = std::make_shared<std::string>(pNum);
    dirtyFlag_[11] = true;
}
void Guestbook::setNum(std::string &&pNum) noexcept
{
    num_ = std::make_shared<std::string>(std::move(pNum));
    dirtyFlag_[11] = true;
}


void Guestbook::setNumToNull() noexcept
{
    num_.reset();
    dirtyFlag_[11] = true;
}


const std::string &Guestbook::getValueOfPrice() const noexcept
{
    const static std::string defaultValue = std::string();
    if(price_)
        return *price_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Guestbook::getPrice() const noexcept
{
    return price_;
}
void Guestbook::setPrice(const std::string &pPrice) noexcept
{
    price_ = std::make_shared<std::string>(pPrice);
    dirtyFlag_[12] = true;
}
void Guestbook::setPrice(std::string &&pPrice) noexcept
{
    price_ = std::make_shared<std::string>(std::move(pPrice));
    dirtyFlag_[12] = true;
}


void Guestbook::setPriceToNull() noexcept
{
    price_.reset();
    dirtyFlag_[12] = true;
}


const int8_t &Guestbook::getValueOfStatus() const noexcept
{
    const static int8_t defaultValue = int8_t();
    if(status_)
        return *status_;
    return defaultValue;
}
const std::shared_ptr<int8_t> &Guestbook::getStatus() const noexcept
{
    return status_;
}
void Guestbook::setStatus(const int8_t &pStatus) noexcept
{
    status_ = std::make_shared<int8_t>(pStatus);
    dirtyFlag_[13] = true;
}


void Guestbook::setStatusToNull() noexcept
{
    status_.reset();
    dirtyFlag_[13] = true;
}


const std::string &Guestbook::getValueOfRemark() const noexcept
{
    const static std::string defaultValue = std::string();
    if(remark_)
        return *remark_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Guestbook::getRemark() const noexcept
{
    return remark_;
}
void Guestbook::setRemark(const std::string &pRemark) noexcept
{
    remark_ = std::make_shared<std::string>(pRemark);
    dirtyFlag_[14] = true;
}
void Guestbook::setRemark(std::string &&pRemark) noexcept
{
    remark_ = std::make_shared<std::string>(std::move(pRemark));
    dirtyFlag_[14] = true;
}


void Guestbook::setRemarkToNull() noexcept
{
    remark_.reset();
    dirtyFlag_[14] = true;
}


const std::string &Guestbook::getValueOfExplain() const noexcept
{
    const static std::string defaultValue = std::string();
    if(explain_)
        return *explain_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Guestbook::getExplain() const noexcept
{
    return explain_;
}
void Guestbook::setExplain(const std::string &pExplain) noexcept
{
    explain_ = std::make_shared<std::string>(pExplain);
    dirtyFlag_[15] = true;
}
void Guestbook::setExplain(std::string &&pExplain) noexcept
{
    explain_ = std::make_shared<std::string>(std::move(pExplain));
    dirtyFlag_[15] = true;
}


void Guestbook::setExplainToNull() noexcept
{
    explain_.reset();
    dirtyFlag_[15] = true;
}


const int64_t &Guestbook::getValueOfShopId() const noexcept
{
    const static int64_t defaultValue = int64_t();
    if(shopId_)
        return *shopId_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &Guestbook::getShopId() const noexcept
{
    return shopId_;
}
void Guestbook::setShopId(const int64_t &pShopId) noexcept
{
    shopId_ = std::make_shared<int64_t>(pShopId);
    dirtyFlag_[16] = true;
}


void Guestbook::setShopIdToNull() noexcept
{
    shopId_.reset();
    dirtyFlag_[16] = true;
}


const uint8_t &Guestbook::getValueOfIsDelete() const noexcept
{
    const static uint8_t defaultValue = uint8_t();
    if(isDelete_)
        return *isDelete_;
    return defaultValue;
}
const std::shared_ptr<uint8_t> &Guestbook::getIsDelete() const noexcept
{
    return isDelete_;
}
void Guestbook::setIsDelete(const uint8_t &pIsDelete) noexcept
{
    isDelete_ = std::make_shared<uint8_t>(pIsDelete);
    dirtyFlag_[17] = true;
}




void Guestbook::updateId(const uint64_t id)
{
    id_ = std::make_shared<int64_t>(static_cast<int64_t>(id));
}

const std::vector<std::string> &Guestbook::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "create_time",
        "update_time",
        "admin_id",
        "user_id",
        "type",
        "company_name",
        "phone",
        "mobile",
        "real_name",
        "ip",
        "num",
        "price",
        "status",
        "remark",
        "explain",
        "shop_id",
        "is_delete"
    };
    return inCols;
}

void Guestbook::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getCreateTime())
        {
            binder << getValueOfCreateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getUpdateTime())
        {
            binder << getValueOfUpdateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getAdminId())
        {
            binder << getValueOfAdminId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getUserId())
        {
            binder << getValueOfUserId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getType())
        {
            binder << getValueOfType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getCompanyName())
        {
            binder << getValueOfCompanyName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getPhone())
        {
            binder << getValueOfPhone();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getMobile())
        {
            binder << getValueOfMobile();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getRealName())
        {
            binder << getValueOfRealName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getIp())
        {
            binder << getValueOfIp();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getNum())
        {
            binder << getValueOfNum();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getPrice())
        {
            binder << getValueOfPrice();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[13])
    {
        if(getStatus())
        {
            binder << getValueOfStatus();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[14])
    {
        if(getRemark())
        {
            binder << getValueOfRemark();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[15])
    {
        if(getExplain())
        {
            binder << getValueOfExplain();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[16])
    {
        if(getShopId())
        {
            binder << getValueOfShopId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[17])
    {
        if(getIsDelete())
        {
            binder << getValueOfIsDelete();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Guestbook::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    if(dirtyFlag_[8])
    {
        ret.push_back(getColumnName(8));
    }
    if(dirtyFlag_[9])
    {
        ret.push_back(getColumnName(9));
    }
    if(dirtyFlag_[10])
    {
        ret.push_back(getColumnName(10));
    }
    if(dirtyFlag_[11])
    {
        ret.push_back(getColumnName(11));
    }
    if(dirtyFlag_[12])
    {
        ret.push_back(getColumnName(12));
    }
    if(dirtyFlag_[13])
    {
        ret.push_back(getColumnName(13));
    }
    if(dirtyFlag_[14])
    {
        ret.push_back(getColumnName(14));
    }
    if(dirtyFlag_[15])
    {
        ret.push_back(getColumnName(15));
    }
    if(dirtyFlag_[16])
    {
        ret.push_back(getColumnName(16));
    }
    if(dirtyFlag_[17])
    {
        ret.push_back(getColumnName(17));
    }
    return ret;
}

void Guestbook::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getCreateTime())
        {
            binder << getValueOfCreateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getUpdateTime())
        {
            binder << getValueOfUpdateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getAdminId())
        {
            binder << getValueOfAdminId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getUserId())
        {
            binder << getValueOfUserId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getType())
        {
            binder << getValueOfType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getCompanyName())
        {
            binder << getValueOfCompanyName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getPhone())
        {
            binder << getValueOfPhone();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getMobile())
        {
            binder << getValueOfMobile();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getRealName())
        {
            binder << getValueOfRealName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getIp())
        {
            binder << getValueOfIp();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getNum())
        {
            binder << getValueOfNum();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getPrice())
        {
            binder << getValueOfPrice();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[13])
    {
        if(getStatus())
        {
            binder << getValueOfStatus();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[14])
    {
        if(getRemark())
        {
            binder << getValueOfRemark();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[15])
    {
        if(getExplain())
        {
            binder << getValueOfExplain();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[16])
    {
        if(getShopId())
        {
            binder << getValueOfShopId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[17])
    {
        if(getIsDelete())
        {
            binder << getValueOfIsDelete();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Guestbook::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=(Json::Int64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getCreateTime())
    {
        ret["create_time"]=getCreateTime()->toDbStringLocal();
    }
    else
    {
        ret["create_time"]=Json::Value();
    }
    if(getUpdateTime())
    {
        ret["update_time"]=getUpdateTime()->toDbStringLocal();
    }
    else
    {
        ret["update_time"]=Json::Value();
    }
    if(getAdminId())
    {
        ret["admin_id"]=(Json::Int64)getValueOfAdminId();
    }
    else
    {
        ret["admin_id"]=Json::Value();
    }
    if(getUserId())
    {
        ret["user_id"]=(Json::Int64)getValueOfUserId();
    }
    else
    {
        ret["user_id"]=Json::Value();
    }
    if(getType())
    {
        ret["type"]=getValueOfType();
    }
    else
    {
        ret["type"]=Json::Value();
    }
    if(getCompanyName())
    {
        ret["company_name"]=getValueOfCompanyName();
    }
    else
    {
        ret["company_name"]=Json::Value();
    }
    if(getPhone())
    {
        ret["phone"]=getValueOfPhone();
    }
    else
    {
        ret["phone"]=Json::Value();
    }
    if(getMobile())
    {
        ret["mobile"]=getValueOfMobile();
    }
    else
    {
        ret["mobile"]=Json::Value();
    }
    if(getRealName())
    {
        ret["real_name"]=getValueOfRealName();
    }
    else
    {
        ret["real_name"]=Json::Value();
    }
    if(getIp())
    {
        ret["ip"]=getValueOfIp();
    }
    else
    {
        ret["ip"]=Json::Value();
    }
    if(getNum())
    {
        ret["num"]=getValueOfNum();
    }
    else
    {
        ret["num"]=Json::Value();
    }
    if(getPrice())
    {
        ret["price"]=getValueOfPrice();
    }
    else
    {
        ret["price"]=Json::Value();
    }
    if(getStatus())
    {
        ret["status"]=getValueOfStatus();
    }
    else
    {
        ret["status"]=Json::Value();
    }
    if(getRemark())
    {
        ret["remark"]=getValueOfRemark();
    }
    else
    {
        ret["remark"]=Json::Value();
    }
    if(getExplain())
    {
        ret["explain"]=getValueOfExplain();
    }
    else
    {
        ret["explain"]=Json::Value();
    }
    if(getShopId())
    {
        ret["shop_id"]=(Json::Int64)getValueOfShopId();
    }
    else
    {
        ret["shop_id"]=Json::Value();
    }
    if(getIsDelete())
    {
        ret["is_delete"]=getValueOfIsDelete();
    }
    else
    {
        ret["is_delete"]=Json::Value();
    }
    return ret;
}

Json::Value Guestbook::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 18)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=(Json::Int64)getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getCreateTime())
            {
                ret[pMasqueradingVector[1]]=getCreateTime()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getUpdateTime())
            {
                ret[pMasqueradingVector[2]]=getUpdateTime()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getAdminId())
            {
                ret[pMasqueradingVector[3]]=(Json::Int64)getValueOfAdminId();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getUserId())
            {
                ret[pMasqueradingVector[4]]=(Json::Int64)getValueOfUserId();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getType())
            {
                ret[pMasqueradingVector[5]]=getValueOfType();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getCompanyName())
            {
                ret[pMasqueradingVector[6]]=getValueOfCompanyName();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getPhone())
            {
                ret[pMasqueradingVector[7]]=getValueOfPhone();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[8].empty())
        {
            if(getMobile())
            {
                ret[pMasqueradingVector[8]]=getValueOfMobile();
            }
            else
            {
                ret[pMasqueradingVector[8]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[9].empty())
        {
            if(getRealName())
            {
                ret[pMasqueradingVector[9]]=getValueOfRealName();
            }
            else
            {
                ret[pMasqueradingVector[9]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[10].empty())
        {
            if(getIp())
            {
                ret[pMasqueradingVector[10]]=getValueOfIp();
            }
            else
            {
                ret[pMasqueradingVector[10]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[11].empty())
        {
            if(getNum())
            {
                ret[pMasqueradingVector[11]]=getValueOfNum();
            }
            else
            {
                ret[pMasqueradingVector[11]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[12].empty())
        {
            if(getPrice())
            {
                ret[pMasqueradingVector[12]]=getValueOfPrice();
            }
            else
            {
                ret[pMasqueradingVector[12]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[13].empty())
        {
            if(getStatus())
            {
                ret[pMasqueradingVector[13]]=getValueOfStatus();
            }
            else
            {
                ret[pMasqueradingVector[13]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[14].empty())
        {
            if(getRemark())
            {
                ret[pMasqueradingVector[14]]=getValueOfRemark();
            }
            else
            {
                ret[pMasqueradingVector[14]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[15].empty())
        {
            if(getExplain())
            {
                ret[pMasqueradingVector[15]]=getValueOfExplain();
            }
            else
            {
                ret[pMasqueradingVector[15]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[16].empty())
        {
            if(getShopId())
            {
                ret[pMasqueradingVector[16]]=(Json::Int64)getValueOfShopId();
            }
            else
            {
                ret[pMasqueradingVector[16]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[17].empty())
        {
            if(getIsDelete())
            {
                ret[pMasqueradingVector[17]]=getValueOfIsDelete();
            }
            else
            {
                ret[pMasqueradingVector[17]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=(Json::Int64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getCreateTime())
    {
        ret["create_time"]=getCreateTime()->toDbStringLocal();
    }
    else
    {
        ret["create_time"]=Json::Value();
    }
    if(getUpdateTime())
    {
        ret["update_time"]=getUpdateTime()->toDbStringLocal();
    }
    else
    {
        ret["update_time"]=Json::Value();
    }
    if(getAdminId())
    {
        ret["admin_id"]=(Json::Int64)getValueOfAdminId();
    }
    else
    {
        ret["admin_id"]=Json::Value();
    }
    if(getUserId())
    {
        ret["user_id"]=(Json::Int64)getValueOfUserId();
    }
    else
    {
        ret["user_id"]=Json::Value();
    }
    if(getType())
    {
        ret["type"]=getValueOfType();
    }
    else
    {
        ret["type"]=Json::Value();
    }
    if(getCompanyName())
    {
        ret["company_name"]=getValueOfCompanyName();
    }
    else
    {
        ret["company_name"]=Json::Value();
    }
    if(getPhone())
    {
        ret["phone"]=getValueOfPhone();
    }
    else
    {
        ret["phone"]=Json::Value();
    }
    if(getMobile())
    {
        ret["mobile"]=getValueOfMobile();
    }
    else
    {
        ret["mobile"]=Json::Value();
    }
    if(getRealName())
    {
        ret["real_name"]=getValueOfRealName();
    }
    else
    {
        ret["real_name"]=Json::Value();
    }
    if(getIp())
    {
        ret["ip"]=getValueOfIp();
    }
    else
    {
        ret["ip"]=Json::Value();
    }
    if(getNum())
    {
        ret["num"]=getValueOfNum();
    }
    else
    {
        ret["num"]=Json::Value();
    }
    if(getPrice())
    {
        ret["price"]=getValueOfPrice();
    }
    else
    {
        ret["price"]=Json::Value();
    }
    if(getStatus())
    {
        ret["status"]=getValueOfStatus();
    }
    else
    {
        ret["status"]=Json::Value();
    }
    if(getRemark())
    {
        ret["remark"]=getValueOfRemark();
    }
    else
    {
        ret["remark"]=Json::Value();
    }
    if(getExplain())
    {
        ret["explain"]=getValueOfExplain();
    }
    else
    {
        ret["explain"]=Json::Value();
    }
    if(getShopId())
    {
        ret["shop_id"]=(Json::Int64)getValueOfShopId();
    }
    else
    {
        ret["shop_id"]=Json::Value();
    }
    if(getIsDelete())
    {
        ret["is_delete"]=getValueOfIsDelete();
    }
    else
    {
        ret["is_delete"]=Json::Value();
    }
    return ret;
}

bool Guestbook::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("create_time"))
    {
        if(!validJsonOfField(1, "create_time", pJson["create_time"], err, true))
            return false;
    }
    if(pJson.isMember("update_time"))
    {
        if(!validJsonOfField(2, "update_time", pJson["update_time"], err, true))
            return false;
    }
    if(pJson.isMember("admin_id"))
    {
        if(!validJsonOfField(3, "admin_id", pJson["admin_id"], err, true))
            return false;
    }
    if(pJson.isMember("user_id"))
    {
        if(!validJsonOfField(4, "user_id", pJson["user_id"], err, true))
            return false;
    }
    if(pJson.isMember("type"))
    {
        if(!validJsonOfField(5, "type", pJson["type"], err, true))
            return false;
    }
    if(pJson.isMember("company_name"))
    {
        if(!validJsonOfField(6, "company_name", pJson["company_name"], err, true))
            return false;
    }
    if(pJson.isMember("phone"))
    {
        if(!validJsonOfField(7, "phone", pJson["phone"], err, true))
            return false;
    }
    if(pJson.isMember("mobile"))
    {
        if(!validJsonOfField(8, "mobile", pJson["mobile"], err, true))
            return false;
    }
    if(pJson.isMember("real_name"))
    {
        if(!validJsonOfField(9, "real_name", pJson["real_name"], err, true))
            return false;
    }
    if(pJson.isMember("ip"))
    {
        if(!validJsonOfField(10, "ip", pJson["ip"], err, true))
            return false;
    }
    if(pJson.isMember("num"))
    {
        if(!validJsonOfField(11, "num", pJson["num"], err, true))
            return false;
    }
    if(pJson.isMember("price"))
    {
        if(!validJsonOfField(12, "price", pJson["price"], err, true))
            return false;
    }
    if(pJson.isMember("status"))
    {
        if(!validJsonOfField(13, "status", pJson["status"], err, true))
            return false;
    }
    if(pJson.isMember("remark"))
    {
        if(!validJsonOfField(14, "remark", pJson["remark"], err, true))
            return false;
    }
    if(pJson.isMember("explain"))
    {
        if(!validJsonOfField(15, "explain", pJson["explain"], err, true))
            return false;
    }
    if(pJson.isMember("shop_id"))
    {
        if(!validJsonOfField(16, "shop_id", pJson["shop_id"], err, true))
            return false;
    }
    if(pJson.isMember("is_delete"))
    {
        if(!validJsonOfField(17, "is_delete", pJson["is_delete"], err, true))
            return false;
    }
    return true;
}
bool Guestbook::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                   const std::vector<std::string> &pMasqueradingVector,
                                                   std::string &err)
{
    if(pMasqueradingVector.size() != 18)
    {
        err = "Bad masquerading vector";
        return false;
    }
    if(!pMasqueradingVector[0].empty())
    {
        if(pJson.isMember(pMasqueradingVector[0]))
        {
            if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[1].empty())
    {
        if(pJson.isMember(pMasqueradingVector[1]))
        {
            if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[2].empty())
    {
        if(pJson.isMember(pMasqueradingVector[2]))
        {
            if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[3].empty())
    {
        if(pJson.isMember(pMasqueradingVector[3]))
        {
            if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[4].empty())
    {
        if(pJson.isMember(pMasqueradingVector[4]))
        {
            if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[5].empty())
    {
        if(pJson.isMember(pMasqueradingVector[5]))
        {
            if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[6].empty())
    {
        if(pJson.isMember(pMasqueradingVector[6]))
        {
            if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[7].empty())
    {
        if(pJson.isMember(pMasqueradingVector[7]))
        {
            if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[8].empty())
    {
        if(pJson.isMember(pMasqueradingVector[8]))
        {
            if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[9].empty())
    {
        if(pJson.isMember(pMasqueradingVector[9]))
        {
            if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[10].empty())
    {
        if(pJson.isMember(pMasqueradingVector[10]))
        {
            if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[11].empty())
    {
        if(pJson.isMember(pMasqueradingVector[11]))
        {
            if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[12].empty())
    {
        if(pJson.isMember(pMasqueradingVector[12]))
        {
            if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[13].empty())
    {
        if(pJson.isMember(pMasqueradingVector[13]))
        {
            if(!validJsonOfField(13, pMasqueradingVector[13], pJson[pMasqueradingVector[13]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[14].empty())
    {
        if(pJson.isMember(pMasqueradingVector[14]))
        {
            if(!validJsonOfField(14, pMasqueradingVector[14], pJson[pMasqueradingVector[14]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[15].empty())
    {
        if(pJson.isMember(pMasqueradingVector[15]))
        {
            if(!validJsonOfField(15, pMasqueradingVector[15], pJson[pMasqueradingVector[15]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[16].empty())
    {
        if(pJson.isMember(pMasqueradingVector[16]))
        {
            if(!validJsonOfField(16, pMasqueradingVector[16], pJson[pMasqueradingVector[16]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[17].empty())
    {
        if(pJson.isMember(pMasqueradingVector[17]))
        {
            if(!validJsonOfField(17, pMasqueradingVector[17], pJson[pMasqueradingVector[17]], err, true))
                return false;
        }
    }
    return true;
}
bool Guestbook::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("create_time"))
    {
        if(!validJsonOfField(1, "create_time", pJson["create_time"], err, false))
            return false;
    }
    if(pJson.isMember("update_time"))
    {
        if(!validJsonOfField(2, "update_time", pJson["update_time"], err, false))
            return false;
    }
    if(pJson.isMember("admin_id"))
    {
        if(!validJsonOfField(3, "admin_id", pJson["admin_id"], err, false))
            return false;
    }
    if(pJson.isMember("user_id"))
    {
        if(!validJsonOfField(4, "user_id", pJson["user_id"], err, false))
            return false;
    }
    if(pJson.isMember("type"))
    {
        if(!validJsonOfField(5, "type", pJson["type"], err, false))
            return false;
    }
    if(pJson.isMember("company_name"))
    {
        if(!validJsonOfField(6, "company_name", pJson["company_name"], err, false))
            return false;
    }
    if(pJson.isMember("phone"))
    {
        if(!validJsonOfField(7, "phone", pJson["phone"], err, false))
            return false;
    }
    if(pJson.isMember("mobile"))
    {
        if(!validJsonOfField(8, "mobile", pJson["mobile"], err, false))
            return false;
    }
    if(pJson.isMember("real_name"))
    {
        if(!validJsonOfField(9, "real_name", pJson["real_name"], err, false))
            return false;
    }
    if(pJson.isMember("ip"))
    {
        if(!validJsonOfField(10, "ip", pJson["ip"], err, false))
            return false;
    }
    if(pJson.isMember("num"))
    {
        if(!validJsonOfField(11, "num", pJson["num"], err, false))
            return false;
    }
    if(pJson.isMember("price"))
    {
        if(!validJsonOfField(12, "price", pJson["price"], err, false))
            return false;
    }
    if(pJson.isMember("status"))
    {
        if(!validJsonOfField(13, "status", pJson["status"], err, false))
            return false;
    }
    if(pJson.isMember("remark"))
    {
        if(!validJsonOfField(14, "remark", pJson["remark"], err, false))
            return false;
    }
    if(pJson.isMember("explain"))
    {
        if(!validJsonOfField(15, "explain", pJson["explain"], err, false))
            return false;
    }
    if(pJson.isMember("shop_id"))
    {
        if(!validJsonOfField(16, "shop_id", pJson["shop_id"], err, false))
            return false;
    }
    if(pJson.isMember("is_delete"))
    {
        if(!validJsonOfField(17, "is_delete", pJson["is_delete"], err, false))
            return false;
    }
    return true;
}
bool Guestbook::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                 const std::vector<std::string> &pMasqueradingVector,
                                                 std::string &err)
{
    if(pMasqueradingVector.size() != 18)
    {
        err = "Bad masquerading vector";
        return false;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
            return false;
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
            return false;
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
            return false;
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
            return false;
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
            return false;
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
            return false;
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
            return false;
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, false))
            return false;
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, false))
            return false;
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, false))
            return false;
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, false))
            return false;
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, false))
            return false;
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        if(!validJsonOfField(13, pMasqueradingVector[13], pJson[pMasqueradingVector[13]], err, false))
            return false;
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        if(!validJsonOfField(14, pMasqueradingVector[14], pJson[pMasqueradingVector[14]], err, false))
            return false;
    }
    if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
    {
        if(!validJsonOfField(15, pMasqueradingVector[15], pJson[pMasqueradingVector[15]], err, false))
            return false;
    }
    if(!pMasqueradingVector[16].empty() && pJson.isMember(pMasqueradingVector[16]))
    {
        if(!validJsonOfField(16, pMasqueradingVector[16], pJson[pMasqueradingVector[16]], err, false))
            return false;
    }
    if(!pMasqueradingVector[17].empty() && pJson.isMember(pMasqueradingVector[17]))
    {
        if(!validJsonOfField(17, pMasqueradingVector[17], pJson[pMasqueradingVector[17]], err, false))
            return false;
    }
    return true;
}
bool Guestbook::validJsonOfField(size_t index,
                                 const std::string &fieldName,
                                 const Json::Value &pJson, 
                                 std::string &err, 
                                 bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }        
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 5:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 6:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;               
            }

            break;
        case 7:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 64)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 64)";
                return false;               
            }

            break;
        case 8:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 60)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 60)";
                return false;               
            }

            break;
        case 9:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 60)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 60)";
                return false;               
            }

            break;
        case 10:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 60)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 60)";
                return false;               
            }

            break;
        case 11:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 12:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 13:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 14:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;               
            }

            break;
        case 15:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 16:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 17:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
     
        default:
            err="Internal error in the server";
            return false;
            break;
    }
    return true;
}
