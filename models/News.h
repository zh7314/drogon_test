/**
 *
 *  News.h
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#pragma once
#include <drogon/orm/Result.h>
#include <drogon/orm/Row.h>
#include <drogon/orm/Field.h>
#include <drogon/orm/SqlBinder.h>
#include <drogon/orm/Mapper.h>
#include <trantor/utils/Date.h>
#include <trantor/utils/Logger.h>
#include <json/json.h>
#include <string>
#include <memory>
#include <vector>
#include <tuple>
#include <stdint.h>
#include <iostream>

using namespace drogon::orm;
namespace drogon
{
namespace orm
{
class DbClient;
using DbClientPtr = std::shared_ptr<DbClient>;
}
}
namespace drogon_model
{
namespace v2 
{

class News
{
  public:
    struct Cols
    {
        static const std::string _id;
        static const std::string _create_time;
        static const std::string _update_time;
        static const std::string _remark;
        static const std::string _is_delete;
        static const std::string _release_time;
        static const std::string _title;
        static const std::string _tag_name;
        static const std::string _jump_url;
        static const std::string _content;
        static const std::string _summary;
        static const std::string _is_release;
        static const std::string _news_cate_id;
        static const std::string _keywords;
        static const std::string _description;
        static const std::string _image;
        static const std::string _click_num;
        static const std::string _is_crawler;
        static const std::string _info_from;
        static const std::string _show_platform;
        static const std::string _sort;
        static const std::string _shop_id;
        static const std::string _admin_id;
        static const std::string _is_show;
        static const std::string _favour_num;
    };

    const static int primaryKeyNumber;
    const static std::string tableName;
    const static bool hasPrimaryKey;
    const static std::string primaryKeyName;
    using PrimaryKeyType = uint64_t;
    const PrimaryKeyType &getPrimaryKey() const;

    /**
     * @brief constructor
     * @param r One row of records in the SQL query result.
     * @param indexOffset Set the offset to -1 to access all columns by column names, 
     * otherwise access all columns by offsets.
     * @note If the SQL is not a style of 'select * from table_name ...' (select all 
     * columns by an asterisk), please set the offset to -1.
     */
    explicit News(const Row &r, const ssize_t indexOffset = 0) noexcept;

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     */
    explicit News(const Json::Value &pJson) noexcept(false);

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     * @param pMasqueradingVector The aliases of table columns.
     */
    News(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false);

    News() = default;
    
    void updateByJson(const Json::Value &pJson) noexcept(false);
    void updateByMasqueradedJson(const Json::Value &pJson,
                                 const std::vector<std::string> &pMasqueradingVector) noexcept(false);
    static bool validateJsonForCreation(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForCreation(const Json::Value &,
                                                const std::vector<std::string> &pMasqueradingVector,
                                                    std::string &err);
    static bool validateJsonForUpdate(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForUpdate(const Json::Value &,
                                          const std::vector<std::string> &pMasqueradingVector,
                                          std::string &err);
    static bool validJsonOfField(size_t index,
                          const std::string &fieldName,
                          const Json::Value &pJson, 
                          std::string &err, 
                          bool isForCreation);

    /**  For column id  */
    ///Get the value of the column id, returns the default value if the column is null
    const uint64_t &getValueOfId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint64_t> &getId() const noexcept;

    ///Set the value of the column id
    void setId(const uint64_t &pId) noexcept;


    /**  For column create_time  */
    ///Get the value of the column create_time, returns the default value if the column is null
    const ::trantor::Date &getValueOfCreateTime() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getCreateTime() const noexcept;

    ///Set the value of the column create_time
    void setCreateTime(const ::trantor::Date &pCreateTime) noexcept;


    /**  For column update_time  */
    ///Get the value of the column update_time, returns the default value if the column is null
    const ::trantor::Date &getValueOfUpdateTime() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getUpdateTime() const noexcept;

    ///Set the value of the column update_time
    void setUpdateTime(const ::trantor::Date &pUpdateTime) noexcept;


    /**  For column remark  */
    ///Get the value of the column remark, returns the default value if the column is null
    const std::string &getValueOfRemark() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getRemark() const noexcept;

    ///Set the value of the column remark
    void setRemark(const std::string &pRemark) noexcept;
    void setRemark(std::string &&pRemark) noexcept;
    void setRemarkToNull() noexcept;


    /**  For column is_delete  */
    ///Get the value of the column is_delete, returns the default value if the column is null
    const int8_t &getValueOfIsDelete() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int8_t> &getIsDelete() const noexcept;

    ///Set the value of the column is_delete
    void setIsDelete(const int8_t &pIsDelete) noexcept;


    /**  For column release_time  */
    ///Get the value of the column release_time, returns the default value if the column is null
    const ::trantor::Date &getValueOfReleaseTime() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getReleaseTime() const noexcept;

    ///Set the value of the column release_time
    void setReleaseTime(const ::trantor::Date &pReleaseTime) noexcept;


    /**  For column title  */
    ///Get the value of the column title, returns the default value if the column is null
    const std::string &getValueOfTitle() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getTitle() const noexcept;

    ///Set the value of the column title
    void setTitle(const std::string &pTitle) noexcept;
    void setTitle(std::string &&pTitle) noexcept;
    void setTitleToNull() noexcept;


    /**  For column tag_name  */
    ///Get the value of the column tag_name, returns the default value if the column is null
    const std::string &getValueOfTagName() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getTagName() const noexcept;

    ///Set the value of the column tag_name
    void setTagName(const std::string &pTagName) noexcept;
    void setTagName(std::string &&pTagName) noexcept;
    void setTagNameToNull() noexcept;


    /**  For column jump_url  */
    ///Get the value of the column jump_url, returns the default value if the column is null
    const std::string &getValueOfJumpUrl() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getJumpUrl() const noexcept;

    ///Set the value of the column jump_url
    void setJumpUrl(const std::string &pJumpUrl) noexcept;
    void setJumpUrl(std::string &&pJumpUrl) noexcept;
    void setJumpUrlToNull() noexcept;


    /**  For column content  */
    ///Get the value of the column content, returns the default value if the column is null
    const std::string &getValueOfContent() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getContent() const noexcept;

    ///Set the value of the column content
    void setContent(const std::string &pContent) noexcept;
    void setContent(std::string &&pContent) noexcept;
    void setContentToNull() noexcept;


    /**  For column summary  */
    ///Get the value of the column summary, returns the default value if the column is null
    const std::string &getValueOfSummary() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getSummary() const noexcept;

    ///Set the value of the column summary
    void setSummary(const std::string &pSummary) noexcept;
    void setSummary(std::string &&pSummary) noexcept;
    void setSummaryToNull() noexcept;


    /**  For column is_release  */
    ///Get the value of the column is_release, returns the default value if the column is null
    const int8_t &getValueOfIsRelease() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int8_t> &getIsRelease() const noexcept;

    ///Set the value of the column is_release
    void setIsRelease(const int8_t &pIsRelease) noexcept;


    /**  For column news_cate_id  */
    ///Get the value of the column news_cate_id, returns the default value if the column is null
    const int64_t &getValueOfNewsCateId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int64_t> &getNewsCateId() const noexcept;

    ///Set the value of the column news_cate_id
    void setNewsCateId(const int64_t &pNewsCateId) noexcept;


    /**  For column keywords  */
    ///Get the value of the column keywords, returns the default value if the column is null
    const std::string &getValueOfKeywords() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getKeywords() const noexcept;

    ///Set the value of the column keywords
    void setKeywords(const std::string &pKeywords) noexcept;
    void setKeywords(std::string &&pKeywords) noexcept;
    void setKeywordsToNull() noexcept;


    /**  For column description  */
    ///Get the value of the column description, returns the default value if the column is null
    const std::string &getValueOfDescription() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getDescription() const noexcept;

    ///Set the value of the column description
    void setDescription(const std::string &pDescription) noexcept;
    void setDescription(std::string &&pDescription) noexcept;
    void setDescriptionToNull() noexcept;


    /**  For column image  */
    ///Get the value of the column image, returns the default value if the column is null
    const std::string &getValueOfImage() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getImage() const noexcept;

    ///Set the value of the column image
    void setImage(const std::string &pImage) noexcept;
    void setImage(std::string &&pImage) noexcept;
    void setImageToNull() noexcept;


    /**  For column click_num  */
    ///Get the value of the column click_num, returns the default value if the column is null
    const int32_t &getValueOfClickNum() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getClickNum() const noexcept;

    ///Set the value of the column click_num
    void setClickNum(const int32_t &pClickNum) noexcept;


    /**  For column is_crawler  */
    ///Get the value of the column is_crawler, returns the default value if the column is null
    const int8_t &getValueOfIsCrawler() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int8_t> &getIsCrawler() const noexcept;

    ///Set the value of the column is_crawler
    void setIsCrawler(const int8_t &pIsCrawler) noexcept;
    void setIsCrawlerToNull() noexcept;


    /**  For column info_from  */
    ///Get the value of the column info_from, returns the default value if the column is null
    const std::string &getValueOfInfoFrom() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getInfoFrom() const noexcept;

    ///Set the value of the column info_from
    void setInfoFrom(const std::string &pInfoFrom) noexcept;
    void setInfoFrom(std::string &&pInfoFrom) noexcept;
    void setInfoFromToNull() noexcept;


    /**  For column show_platform  */
    ///Get the value of the column show_platform, returns the default value if the column is null
    const int32_t &getValueOfShowPlatform() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getShowPlatform() const noexcept;

    ///Set the value of the column show_platform
    void setShowPlatform(const int32_t &pShowPlatform) noexcept;
    void setShowPlatformToNull() noexcept;


    /**  For column sort  */
    ///Get the value of the column sort, returns the default value if the column is null
    const uint32_t &getValueOfSort() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint32_t> &getSort() const noexcept;

    ///Set the value of the column sort
    void setSort(const uint32_t &pSort) noexcept;


    /**  For column shop_id  */
    ///Get the value of the column shop_id, returns the default value if the column is null
    const int64_t &getValueOfShopId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int64_t> &getShopId() const noexcept;

    ///Set the value of the column shop_id
    void setShopId(const int64_t &pShopId) noexcept;


    /**  For column admin_id  */
    ///Get the value of the column admin_id, returns the default value if the column is null
    const int64_t &getValueOfAdminId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int64_t> &getAdminId() const noexcept;

    ///Set the value of the column admin_id
    void setAdminId(const int64_t &pAdminId) noexcept;


    /**  For column is_show  */
    ///Get the value of the column is_show, returns the default value if the column is null
    const uint8_t &getValueOfIsShow() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint8_t> &getIsShow() const noexcept;

    ///Set the value of the column is_show
    void setIsShow(const uint8_t &pIsShow) noexcept;


    /**  For column favour_num  */
    ///Get the value of the column favour_num, returns the default value if the column is null
    const int32_t &getValueOfFavourNum() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getFavourNum() const noexcept;

    ///Set the value of the column favour_num
    void setFavourNum(const int32_t &pFavourNum) noexcept;
    void setFavourNumToNull() noexcept;



    static size_t getColumnNumber() noexcept {  return 25;  }
    static const std::string &getColumnName(size_t index) noexcept(false);

    Json::Value toJson() const;
    Json::Value toMasqueradedJson(const std::vector<std::string> &pMasqueradingVector) const;
    /// Relationship interfaces
  private:
    friend Mapper<News>;
    static const std::vector<std::string> &insertColumns() noexcept;
    void outputArgs(drogon::orm::internal::SqlBinder &binder) const;
    const std::vector<std::string> updateColumns() const;
    void updateArgs(drogon::orm::internal::SqlBinder &binder) const;
    ///For mysql or sqlite3
    void updateId(const uint64_t id);
    std::shared_ptr<uint64_t> id_;
    std::shared_ptr<::trantor::Date> createTime_;
    std::shared_ptr<::trantor::Date> updateTime_;
    std::shared_ptr<std::string> remark_;
    std::shared_ptr<int8_t> isDelete_;
    std::shared_ptr<::trantor::Date> releaseTime_;
    std::shared_ptr<std::string> title_;
    std::shared_ptr<std::string> tagName_;
    std::shared_ptr<std::string> jumpUrl_;
    std::shared_ptr<std::string> content_;
    std::shared_ptr<std::string> summary_;
    std::shared_ptr<int8_t> isRelease_;
    std::shared_ptr<int64_t> newsCateId_;
    std::shared_ptr<std::string> keywords_;
    std::shared_ptr<std::string> description_;
    std::shared_ptr<std::string> image_;
    std::shared_ptr<int32_t> clickNum_;
    std::shared_ptr<int8_t> isCrawler_;
    std::shared_ptr<std::string> infoFrom_;
    std::shared_ptr<int32_t> showPlatform_;
    std::shared_ptr<uint32_t> sort_;
    std::shared_ptr<int64_t> shopId_;
    std::shared_ptr<int64_t> adminId_;
    std::shared_ptr<uint8_t> isShow_;
    std::shared_ptr<int32_t> favourNum_;
    struct MetaData
    {
        const std::string colName_;
        const std::string colType_;
        const std::string colDatabaseType_;
        const ssize_t colLength_;
        const bool isAutoVal_;
        const bool isPrimaryKey_;
        const bool notNull_;
    };
    static const std::vector<MetaData> metaData_;
    bool dirtyFlag_[25]={ false };
  public:
    static const std::string &sqlForFindingByPrimaryKey()
    {
        static const std::string sql="select * from " + tableName + " where id = ?";
        return sql;                   
    }

    static const std::string &sqlForDeletingByPrimaryKey()
    {
        static const std::string sql="delete from " + tableName + " where id = ?";
        return sql;                   
    }
    std::string sqlForInserting(bool &needSelection) const
    {
        std::string sql="insert into " + tableName + " (";
        size_t parametersCount = 0;
        needSelection = false;
            sql += "id,";
            ++parametersCount;
        sql += "create_time,";
        ++parametersCount;
        if(!dirtyFlag_[1])
        {
            needSelection=true;
        }
        sql += "update_time,";
        ++parametersCount;
        if(!dirtyFlag_[2])
        {
            needSelection=true;
        }
        if(dirtyFlag_[3])
        {
            sql += "remark,";
            ++parametersCount;
        }
        sql += "is_delete,";
        ++parametersCount;
        if(!dirtyFlag_[4])
        {
            needSelection=true;
        }
        sql += "release_time,";
        ++parametersCount;
        if(!dirtyFlag_[5])
        {
            needSelection=true;
        }
        if(dirtyFlag_[6])
        {
            sql += "title,";
            ++parametersCount;
        }
        if(dirtyFlag_[7])
        {
            sql += "tag_name,";
            ++parametersCount;
        }
        if(dirtyFlag_[8])
        {
            sql += "jump_url,";
            ++parametersCount;
        }
        if(dirtyFlag_[9])
        {
            sql += "content,";
            ++parametersCount;
        }
        if(dirtyFlag_[10])
        {
            sql += "summary,";
            ++parametersCount;
        }
        sql += "is_release,";
        ++parametersCount;
        if(!dirtyFlag_[11])
        {
            needSelection=true;
        }
        sql += "news_cate_id,";
        ++parametersCount;
        if(!dirtyFlag_[12])
        {
            needSelection=true;
        }
        if(dirtyFlag_[13])
        {
            sql += "keywords,";
            ++parametersCount;
        }
        if(dirtyFlag_[14])
        {
            sql += "description,";
            ++parametersCount;
        }
        if(dirtyFlag_[15])
        {
            sql += "image,";
            ++parametersCount;
        }
        sql += "click_num,";
        ++parametersCount;
        if(!dirtyFlag_[16])
        {
            needSelection=true;
        }
        sql += "is_crawler,";
        ++parametersCount;
        if(!dirtyFlag_[17])
        {
            needSelection=true;
        }
        if(dirtyFlag_[18])
        {
            sql += "info_from,";
            ++parametersCount;
        }
        sql += "show_platform,";
        ++parametersCount;
        if(!dirtyFlag_[19])
        {
            needSelection=true;
        }
        sql += "sort,";
        ++parametersCount;
        if(!dirtyFlag_[20])
        {
            needSelection=true;
        }
        sql += "shop_id,";
        ++parametersCount;
        if(!dirtyFlag_[21])
        {
            needSelection=true;
        }
        sql += "admin_id,";
        ++parametersCount;
        if(!dirtyFlag_[22])
        {
            needSelection=true;
        }
        sql += "is_show,";
        ++parametersCount;
        if(!dirtyFlag_[23])
        {
            needSelection=true;
        }
        sql += "favour_num,";
        ++parametersCount;
        if(!dirtyFlag_[24])
        {
            needSelection=true;
        }
        needSelection=true;
        if(parametersCount > 0)
        {
            sql[sql.length()-1]=')';
            sql += " values (";
        }
        else
            sql += ") values (";
        
        sql +="default,";
        if(dirtyFlag_[1])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[2])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[3])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[4])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[5])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[6])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[7])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[8])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[9])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[10])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[11])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[12])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[13])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[14])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[15])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[16])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[17])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[18])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[19])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[20])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[21])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[22])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[23])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[24])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(parametersCount > 0)
        {
            sql.resize(sql.length() - 1);
        }
        sql.append(1, ')');
        LOG_TRACE << sql;
        return sql;   
    }
};
} // namespace v2
} // namespace drogon_model
