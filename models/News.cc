/**
 *
 *  News.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "News.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::v2;

const std::string News::Cols::_id = "id";
const std::string News::Cols::_create_time = "create_time";
const std::string News::Cols::_update_time = "update_time";
const std::string News::Cols::_remark = "remark";
const std::string News::Cols::_is_delete = "is_delete";
const std::string News::Cols::_release_time = "release_time";
const std::string News::Cols::_title = "title";
const std::string News::Cols::_tag_name = "tag_name";
const std::string News::Cols::_jump_url = "jump_url";
const std::string News::Cols::_content = "content";
const std::string News::Cols::_summary = "summary";
const std::string News::Cols::_is_release = "is_release";
const std::string News::Cols::_news_cate_id = "news_cate_id";
const std::string News::Cols::_keywords = "keywords";
const std::string News::Cols::_description = "description";
const std::string News::Cols::_image = "image";
const std::string News::Cols::_click_num = "click_num";
const std::string News::Cols::_is_crawler = "is_crawler";
const std::string News::Cols::_info_from = "info_from";
const std::string News::Cols::_show_platform = "show_platform";
const std::string News::Cols::_sort = "sort";
const std::string News::Cols::_shop_id = "shop_id";
const std::string News::Cols::_admin_id = "admin_id";
const std::string News::Cols::_is_show = "is_show";
const std::string News::Cols::_favour_num = "favour_num";
const std::string News::primaryKeyName = "id";
const bool News::hasPrimaryKey = true;
const std::string News::tableName = "news";

const std::vector<typename News::MetaData> News::metaData_={
{"id","uint64_t","bigint(20) unsigned",8,1,1,1},
{"create_time","::trantor::Date","datetime",0,0,0,1},
{"update_time","::trantor::Date","datetime",0,0,0,1},
{"remark","std::string","varchar(200)",200,0,0,0},
{"is_delete","int8_t","tinyint(1)",1,0,0,1},
{"release_time","::trantor::Date","datetime",0,0,0,1},
{"title","std::string","varchar(255)",255,0,0,0},
{"tag_name","std::string","varchar(120)",120,0,0,0},
{"jump_url","std::string","varchar(255)",255,0,0,0},
{"content","std::string","longtext",0,0,0,0},
{"summary","std::string","varchar(200)",200,0,0,0},
{"is_release","int8_t","tinyint(1)",1,0,0,1},
{"news_cate_id","int64_t","bigint(20)",8,0,0,1},
{"keywords","std::string","varchar(255)",255,0,0,0},
{"description","std::string","varchar(255)",255,0,0,0},
{"image","std::string","varchar(255)",255,0,0,0},
{"click_num","int32_t","int(11)",4,0,0,1},
{"is_crawler","int8_t","tinyint(1)",1,0,0,0},
{"info_from","std::string","varchar(20)",20,0,0,0},
{"show_platform","int32_t","int(1)",4,0,0,0},
{"sort","uint32_t","int(11) unsigned",4,0,0,1},
{"shop_id","int64_t","bigint(20)",8,0,0,1},
{"admin_id","int64_t","bigint(20)",8,0,0,1},
{"is_show","uint8_t","tinyint(1) unsigned",1,0,0,1},
{"favour_num","int32_t","int(11)",4,0,0,0}
};
const std::string &News::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
News::News(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<uint64_t>(r["id"].as<uint64_t>());
        }
        if(!r["create_time"].isNull())
        {
            auto timeStr = r["create_time"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        if(!r["update_time"].isNull())
        {
            auto timeStr = r["update_time"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        if(!r["remark"].isNull())
        {
            remark_=std::make_shared<std::string>(r["remark"].as<std::string>());
        }
        if(!r["is_delete"].isNull())
        {
            isDelete_=std::make_shared<int8_t>(r["is_delete"].as<int8_t>());
        }
        if(!r["release_time"].isNull())
        {
            auto timeStr = r["release_time"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            releaseTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        if(!r["title"].isNull())
        {
            title_=std::make_shared<std::string>(r["title"].as<std::string>());
        }
        if(!r["tag_name"].isNull())
        {
            tagName_=std::make_shared<std::string>(r["tag_name"].as<std::string>());
        }
        if(!r["jump_url"].isNull())
        {
            jumpUrl_=std::make_shared<std::string>(r["jump_url"].as<std::string>());
        }
        if(!r["content"].isNull())
        {
            content_=std::make_shared<std::string>(r["content"].as<std::string>());
        }
        if(!r["summary"].isNull())
        {
            summary_=std::make_shared<std::string>(r["summary"].as<std::string>());
        }
        if(!r["is_release"].isNull())
        {
            isRelease_=std::make_shared<int8_t>(r["is_release"].as<int8_t>());
        }
        if(!r["news_cate_id"].isNull())
        {
            newsCateId_=std::make_shared<int64_t>(r["news_cate_id"].as<int64_t>());
        }
        if(!r["keywords"].isNull())
        {
            keywords_=std::make_shared<std::string>(r["keywords"].as<std::string>());
        }
        if(!r["description"].isNull())
        {
            description_=std::make_shared<std::string>(r["description"].as<std::string>());
        }
        if(!r["image"].isNull())
        {
            image_=std::make_shared<std::string>(r["image"].as<std::string>());
        }
        if(!r["click_num"].isNull())
        {
            clickNum_=std::make_shared<int32_t>(r["click_num"].as<int32_t>());
        }
        if(!r["is_crawler"].isNull())
        {
            isCrawler_=std::make_shared<int8_t>(r["is_crawler"].as<int8_t>());
        }
        if(!r["info_from"].isNull())
        {
            infoFrom_=std::make_shared<std::string>(r["info_from"].as<std::string>());
        }
        if(!r["show_platform"].isNull())
        {
            showPlatform_=std::make_shared<int32_t>(r["show_platform"].as<int32_t>());
        }
        if(!r["sort"].isNull())
        {
            sort_=std::make_shared<uint32_t>(r["sort"].as<uint32_t>());
        }
        if(!r["shop_id"].isNull())
        {
            shopId_=std::make_shared<int64_t>(r["shop_id"].as<int64_t>());
        }
        if(!r["admin_id"].isNull())
        {
            adminId_=std::make_shared<int64_t>(r["admin_id"].as<int64_t>());
        }
        if(!r["is_show"].isNull())
        {
            isShow_=std::make_shared<uint8_t>(r["is_show"].as<uint8_t>());
        }
        if(!r["favour_num"].isNull())
        {
            favourNum_=std::make_shared<int32_t>(r["favour_num"].as<int32_t>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 25 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            remark_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            isDelete_=std::make_shared<int8_t>(r[index].as<int8_t>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            releaseTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            title_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            tagName_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 8;
        if(!r[index].isNull())
        {
            jumpUrl_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 9;
        if(!r[index].isNull())
        {
            content_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 10;
        if(!r[index].isNull())
        {
            summary_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 11;
        if(!r[index].isNull())
        {
            isRelease_=std::make_shared<int8_t>(r[index].as<int8_t>());
        }
        index = offset + 12;
        if(!r[index].isNull())
        {
            newsCateId_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 13;
        if(!r[index].isNull())
        {
            keywords_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 14;
        if(!r[index].isNull())
        {
            description_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 15;
        if(!r[index].isNull())
        {
            image_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 16;
        if(!r[index].isNull())
        {
            clickNum_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 17;
        if(!r[index].isNull())
        {
            isCrawler_=std::make_shared<int8_t>(r[index].as<int8_t>());
        }
        index = offset + 18;
        if(!r[index].isNull())
        {
            infoFrom_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 19;
        if(!r[index].isNull())
        {
            showPlatform_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 20;
        if(!r[index].isNull())
        {
            sort_=std::make_shared<uint32_t>(r[index].as<uint32_t>());
        }
        index = offset + 21;
        if(!r[index].isNull())
        {
            shopId_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 22;
        if(!r[index].isNull())
        {
            adminId_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 23;
        if(!r[index].isNull())
        {
            isShow_=std::make_shared<uint8_t>(r[index].as<uint8_t>());
        }
        index = offset + 24;
        if(!r[index].isNull())
        {
            favourNum_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
    }

}

News::News(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 25)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[1]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[2]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            remark_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            isDelete_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[4]].asInt64());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[5]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            releaseTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            title_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            tagName_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            jumpUrl_=std::make_shared<std::string>(pJson[pMasqueradingVector[8]].asString());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            content_=std::make_shared<std::string>(pJson[pMasqueradingVector[9]].asString());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            summary_=std::make_shared<std::string>(pJson[pMasqueradingVector[10]].asString());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            isRelease_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[11]].asInt64());
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            newsCateId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[12]].asInt64());
        }
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        dirtyFlag_[13] = true;
        if(!pJson[pMasqueradingVector[13]].isNull())
        {
            keywords_=std::make_shared<std::string>(pJson[pMasqueradingVector[13]].asString());
        }
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        dirtyFlag_[14] = true;
        if(!pJson[pMasqueradingVector[14]].isNull())
        {
            description_=std::make_shared<std::string>(pJson[pMasqueradingVector[14]].asString());
        }
    }
    if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
    {
        dirtyFlag_[15] = true;
        if(!pJson[pMasqueradingVector[15]].isNull())
        {
            image_=std::make_shared<std::string>(pJson[pMasqueradingVector[15]].asString());
        }
    }
    if(!pMasqueradingVector[16].empty() && pJson.isMember(pMasqueradingVector[16]))
    {
        dirtyFlag_[16] = true;
        if(!pJson[pMasqueradingVector[16]].isNull())
        {
            clickNum_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[16]].asInt64());
        }
    }
    if(!pMasqueradingVector[17].empty() && pJson.isMember(pMasqueradingVector[17]))
    {
        dirtyFlag_[17] = true;
        if(!pJson[pMasqueradingVector[17]].isNull())
        {
            isCrawler_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[17]].asInt64());
        }
    }
    if(!pMasqueradingVector[18].empty() && pJson.isMember(pMasqueradingVector[18]))
    {
        dirtyFlag_[18] = true;
        if(!pJson[pMasqueradingVector[18]].isNull())
        {
            infoFrom_=std::make_shared<std::string>(pJson[pMasqueradingVector[18]].asString());
        }
    }
    if(!pMasqueradingVector[19].empty() && pJson.isMember(pMasqueradingVector[19]))
    {
        dirtyFlag_[19] = true;
        if(!pJson[pMasqueradingVector[19]].isNull())
        {
            showPlatform_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[19]].asInt64());
        }
    }
    if(!pMasqueradingVector[20].empty() && pJson.isMember(pMasqueradingVector[20]))
    {
        dirtyFlag_[20] = true;
        if(!pJson[pMasqueradingVector[20]].isNull())
        {
            sort_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[20]].asUInt64());
        }
    }
    if(!pMasqueradingVector[21].empty() && pJson.isMember(pMasqueradingVector[21]))
    {
        dirtyFlag_[21] = true;
        if(!pJson[pMasqueradingVector[21]].isNull())
        {
            shopId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[21]].asInt64());
        }
    }
    if(!pMasqueradingVector[22].empty() && pJson.isMember(pMasqueradingVector[22]))
    {
        dirtyFlag_[22] = true;
        if(!pJson[pMasqueradingVector[22]].isNull())
        {
            adminId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[22]].asInt64());
        }
    }
    if(!pMasqueradingVector[23].empty() && pJson.isMember(pMasqueradingVector[23]))
    {
        dirtyFlag_[23] = true;
        if(!pJson[pMasqueradingVector[23]].isNull())
        {
            isShow_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[23]].asUInt64());
        }
    }
    if(!pMasqueradingVector[24].empty() && pJson.isMember(pMasqueradingVector[24]))
    {
        dirtyFlag_[24] = true;
        if(!pJson[pMasqueradingVector[24]].isNull())
        {
            favourNum_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[24]].asInt64());
        }
    }
}

News::News(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson["id"].asUInt64());
        }
    }
    if(pJson.isMember("create_time"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["create_time"].isNull())
        {
            auto timeStr = pJson["create_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("update_time"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["update_time"].isNull())
        {
            auto timeStr = pJson["update_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("remark"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["remark"].isNull())
        {
            remark_=std::make_shared<std::string>(pJson["remark"].asString());
        }
    }
    if(pJson.isMember("is_delete"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["is_delete"].isNull())
        {
            isDelete_=std::make_shared<int8_t>((int8_t)pJson["is_delete"].asInt64());
        }
    }
    if(pJson.isMember("release_time"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["release_time"].isNull())
        {
            auto timeStr = pJson["release_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            releaseTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("title"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["title"].isNull())
        {
            title_=std::make_shared<std::string>(pJson["title"].asString());
        }
    }
    if(pJson.isMember("tag_name"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["tag_name"].isNull())
        {
            tagName_=std::make_shared<std::string>(pJson["tag_name"].asString());
        }
    }
    if(pJson.isMember("jump_url"))
    {
        dirtyFlag_[8]=true;
        if(!pJson["jump_url"].isNull())
        {
            jumpUrl_=std::make_shared<std::string>(pJson["jump_url"].asString());
        }
    }
    if(pJson.isMember("content"))
    {
        dirtyFlag_[9]=true;
        if(!pJson["content"].isNull())
        {
            content_=std::make_shared<std::string>(pJson["content"].asString());
        }
    }
    if(pJson.isMember("summary"))
    {
        dirtyFlag_[10]=true;
        if(!pJson["summary"].isNull())
        {
            summary_=std::make_shared<std::string>(pJson["summary"].asString());
        }
    }
    if(pJson.isMember("is_release"))
    {
        dirtyFlag_[11]=true;
        if(!pJson["is_release"].isNull())
        {
            isRelease_=std::make_shared<int8_t>((int8_t)pJson["is_release"].asInt64());
        }
    }
    if(pJson.isMember("news_cate_id"))
    {
        dirtyFlag_[12]=true;
        if(!pJson["news_cate_id"].isNull())
        {
            newsCateId_=std::make_shared<int64_t>((int64_t)pJson["news_cate_id"].asInt64());
        }
    }
    if(pJson.isMember("keywords"))
    {
        dirtyFlag_[13]=true;
        if(!pJson["keywords"].isNull())
        {
            keywords_=std::make_shared<std::string>(pJson["keywords"].asString());
        }
    }
    if(pJson.isMember("description"))
    {
        dirtyFlag_[14]=true;
        if(!pJson["description"].isNull())
        {
            description_=std::make_shared<std::string>(pJson["description"].asString());
        }
    }
    if(pJson.isMember("image"))
    {
        dirtyFlag_[15]=true;
        if(!pJson["image"].isNull())
        {
            image_=std::make_shared<std::string>(pJson["image"].asString());
        }
    }
    if(pJson.isMember("click_num"))
    {
        dirtyFlag_[16]=true;
        if(!pJson["click_num"].isNull())
        {
            clickNum_=std::make_shared<int32_t>((int32_t)pJson["click_num"].asInt64());
        }
    }
    if(pJson.isMember("is_crawler"))
    {
        dirtyFlag_[17]=true;
        if(!pJson["is_crawler"].isNull())
        {
            isCrawler_=std::make_shared<int8_t>((int8_t)pJson["is_crawler"].asInt64());
        }
    }
    if(pJson.isMember("info_from"))
    {
        dirtyFlag_[18]=true;
        if(!pJson["info_from"].isNull())
        {
            infoFrom_=std::make_shared<std::string>(pJson["info_from"].asString());
        }
    }
    if(pJson.isMember("show_platform"))
    {
        dirtyFlag_[19]=true;
        if(!pJson["show_platform"].isNull())
        {
            showPlatform_=std::make_shared<int32_t>((int32_t)pJson["show_platform"].asInt64());
        }
    }
    if(pJson.isMember("sort"))
    {
        dirtyFlag_[20]=true;
        if(!pJson["sort"].isNull())
        {
            sort_=std::make_shared<uint32_t>((uint32_t)pJson["sort"].asUInt64());
        }
    }
    if(pJson.isMember("shop_id"))
    {
        dirtyFlag_[21]=true;
        if(!pJson["shop_id"].isNull())
        {
            shopId_=std::make_shared<int64_t>((int64_t)pJson["shop_id"].asInt64());
        }
    }
    if(pJson.isMember("admin_id"))
    {
        dirtyFlag_[22]=true;
        if(!pJson["admin_id"].isNull())
        {
            adminId_=std::make_shared<int64_t>((int64_t)pJson["admin_id"].asInt64());
        }
    }
    if(pJson.isMember("is_show"))
    {
        dirtyFlag_[23]=true;
        if(!pJson["is_show"].isNull())
        {
            isShow_=std::make_shared<uint8_t>((uint8_t)pJson["is_show"].asUInt64());
        }
    }
    if(pJson.isMember("favour_num"))
    {
        dirtyFlag_[24]=true;
        if(!pJson["favour_num"].isNull())
        {
            favourNum_=std::make_shared<int32_t>((int32_t)pJson["favour_num"].asInt64());
        }
    }
}

void News::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 25)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[1]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[2]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            remark_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            isDelete_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[4]].asInt64());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[5]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            releaseTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            title_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            tagName_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            jumpUrl_=std::make_shared<std::string>(pJson[pMasqueradingVector[8]].asString());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            content_=std::make_shared<std::string>(pJson[pMasqueradingVector[9]].asString());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            summary_=std::make_shared<std::string>(pJson[pMasqueradingVector[10]].asString());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            isRelease_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[11]].asInt64());
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            newsCateId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[12]].asInt64());
        }
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        dirtyFlag_[13] = true;
        if(!pJson[pMasqueradingVector[13]].isNull())
        {
            keywords_=std::make_shared<std::string>(pJson[pMasqueradingVector[13]].asString());
        }
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        dirtyFlag_[14] = true;
        if(!pJson[pMasqueradingVector[14]].isNull())
        {
            description_=std::make_shared<std::string>(pJson[pMasqueradingVector[14]].asString());
        }
    }
    if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
    {
        dirtyFlag_[15] = true;
        if(!pJson[pMasqueradingVector[15]].isNull())
        {
            image_=std::make_shared<std::string>(pJson[pMasqueradingVector[15]].asString());
        }
    }
    if(!pMasqueradingVector[16].empty() && pJson.isMember(pMasqueradingVector[16]))
    {
        dirtyFlag_[16] = true;
        if(!pJson[pMasqueradingVector[16]].isNull())
        {
            clickNum_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[16]].asInt64());
        }
    }
    if(!pMasqueradingVector[17].empty() && pJson.isMember(pMasqueradingVector[17]))
    {
        dirtyFlag_[17] = true;
        if(!pJson[pMasqueradingVector[17]].isNull())
        {
            isCrawler_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[17]].asInt64());
        }
    }
    if(!pMasqueradingVector[18].empty() && pJson.isMember(pMasqueradingVector[18]))
    {
        dirtyFlag_[18] = true;
        if(!pJson[pMasqueradingVector[18]].isNull())
        {
            infoFrom_=std::make_shared<std::string>(pJson[pMasqueradingVector[18]].asString());
        }
    }
    if(!pMasqueradingVector[19].empty() && pJson.isMember(pMasqueradingVector[19]))
    {
        dirtyFlag_[19] = true;
        if(!pJson[pMasqueradingVector[19]].isNull())
        {
            showPlatform_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[19]].asInt64());
        }
    }
    if(!pMasqueradingVector[20].empty() && pJson.isMember(pMasqueradingVector[20]))
    {
        dirtyFlag_[20] = true;
        if(!pJson[pMasqueradingVector[20]].isNull())
        {
            sort_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[20]].asUInt64());
        }
    }
    if(!pMasqueradingVector[21].empty() && pJson.isMember(pMasqueradingVector[21]))
    {
        dirtyFlag_[21] = true;
        if(!pJson[pMasqueradingVector[21]].isNull())
        {
            shopId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[21]].asInt64());
        }
    }
    if(!pMasqueradingVector[22].empty() && pJson.isMember(pMasqueradingVector[22]))
    {
        dirtyFlag_[22] = true;
        if(!pJson[pMasqueradingVector[22]].isNull())
        {
            adminId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[22]].asInt64());
        }
    }
    if(!pMasqueradingVector[23].empty() && pJson.isMember(pMasqueradingVector[23]))
    {
        dirtyFlag_[23] = true;
        if(!pJson[pMasqueradingVector[23]].isNull())
        {
            isShow_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[23]].asUInt64());
        }
    }
    if(!pMasqueradingVector[24].empty() && pJson.isMember(pMasqueradingVector[24]))
    {
        dirtyFlag_[24] = true;
        if(!pJson[pMasqueradingVector[24]].isNull())
        {
            favourNum_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[24]].asInt64());
        }
    }
}
                                                                    
void News::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson["id"].asUInt64());
        }
    }
    if(pJson.isMember("create_time"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["create_time"].isNull())
        {
            auto timeStr = pJson["create_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("update_time"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["update_time"].isNull())
        {
            auto timeStr = pJson["update_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("remark"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["remark"].isNull())
        {
            remark_=std::make_shared<std::string>(pJson["remark"].asString());
        }
    }
    if(pJson.isMember("is_delete"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["is_delete"].isNull())
        {
            isDelete_=std::make_shared<int8_t>((int8_t)pJson["is_delete"].asInt64());
        }
    }
    if(pJson.isMember("release_time"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["release_time"].isNull())
        {
            auto timeStr = pJson["release_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            releaseTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("title"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["title"].isNull())
        {
            title_=std::make_shared<std::string>(pJson["title"].asString());
        }
    }
    if(pJson.isMember("tag_name"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["tag_name"].isNull())
        {
            tagName_=std::make_shared<std::string>(pJson["tag_name"].asString());
        }
    }
    if(pJson.isMember("jump_url"))
    {
        dirtyFlag_[8] = true;
        if(!pJson["jump_url"].isNull())
        {
            jumpUrl_=std::make_shared<std::string>(pJson["jump_url"].asString());
        }
    }
    if(pJson.isMember("content"))
    {
        dirtyFlag_[9] = true;
        if(!pJson["content"].isNull())
        {
            content_=std::make_shared<std::string>(pJson["content"].asString());
        }
    }
    if(pJson.isMember("summary"))
    {
        dirtyFlag_[10] = true;
        if(!pJson["summary"].isNull())
        {
            summary_=std::make_shared<std::string>(pJson["summary"].asString());
        }
    }
    if(pJson.isMember("is_release"))
    {
        dirtyFlag_[11] = true;
        if(!pJson["is_release"].isNull())
        {
            isRelease_=std::make_shared<int8_t>((int8_t)pJson["is_release"].asInt64());
        }
    }
    if(pJson.isMember("news_cate_id"))
    {
        dirtyFlag_[12] = true;
        if(!pJson["news_cate_id"].isNull())
        {
            newsCateId_=std::make_shared<int64_t>((int64_t)pJson["news_cate_id"].asInt64());
        }
    }
    if(pJson.isMember("keywords"))
    {
        dirtyFlag_[13] = true;
        if(!pJson["keywords"].isNull())
        {
            keywords_=std::make_shared<std::string>(pJson["keywords"].asString());
        }
    }
    if(pJson.isMember("description"))
    {
        dirtyFlag_[14] = true;
        if(!pJson["description"].isNull())
        {
            description_=std::make_shared<std::string>(pJson["description"].asString());
        }
    }
    if(pJson.isMember("image"))
    {
        dirtyFlag_[15] = true;
        if(!pJson["image"].isNull())
        {
            image_=std::make_shared<std::string>(pJson["image"].asString());
        }
    }
    if(pJson.isMember("click_num"))
    {
        dirtyFlag_[16] = true;
        if(!pJson["click_num"].isNull())
        {
            clickNum_=std::make_shared<int32_t>((int32_t)pJson["click_num"].asInt64());
        }
    }
    if(pJson.isMember("is_crawler"))
    {
        dirtyFlag_[17] = true;
        if(!pJson["is_crawler"].isNull())
        {
            isCrawler_=std::make_shared<int8_t>((int8_t)pJson["is_crawler"].asInt64());
        }
    }
    if(pJson.isMember("info_from"))
    {
        dirtyFlag_[18] = true;
        if(!pJson["info_from"].isNull())
        {
            infoFrom_=std::make_shared<std::string>(pJson["info_from"].asString());
        }
    }
    if(pJson.isMember("show_platform"))
    {
        dirtyFlag_[19] = true;
        if(!pJson["show_platform"].isNull())
        {
            showPlatform_=std::make_shared<int32_t>((int32_t)pJson["show_platform"].asInt64());
        }
    }
    if(pJson.isMember("sort"))
    {
        dirtyFlag_[20] = true;
        if(!pJson["sort"].isNull())
        {
            sort_=std::make_shared<uint32_t>((uint32_t)pJson["sort"].asUInt64());
        }
    }
    if(pJson.isMember("shop_id"))
    {
        dirtyFlag_[21] = true;
        if(!pJson["shop_id"].isNull())
        {
            shopId_=std::make_shared<int64_t>((int64_t)pJson["shop_id"].asInt64());
        }
    }
    if(pJson.isMember("admin_id"))
    {
        dirtyFlag_[22] = true;
        if(!pJson["admin_id"].isNull())
        {
            adminId_=std::make_shared<int64_t>((int64_t)pJson["admin_id"].asInt64());
        }
    }
    if(pJson.isMember("is_show"))
    {
        dirtyFlag_[23] = true;
        if(!pJson["is_show"].isNull())
        {
            isShow_=std::make_shared<uint8_t>((uint8_t)pJson["is_show"].asUInt64());
        }
    }
    if(pJson.isMember("favour_num"))
    {
        dirtyFlag_[24] = true;
        if(!pJson["favour_num"].isNull())
        {
            favourNum_=std::make_shared<int32_t>((int32_t)pJson["favour_num"].asInt64());
        }
    }
}

const uint64_t &News::getValueOfId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &News::getId() const noexcept
{
    return id_;
}
void News::setId(const uint64_t &pId) noexcept
{
    id_ = std::make_shared<uint64_t>(pId);
    dirtyFlag_[0] = true;
}



const typename News::PrimaryKeyType & News::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const ::trantor::Date &News::getValueOfCreateTime() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(createTime_)
        return *createTime_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &News::getCreateTime() const noexcept
{
    return createTime_;
}
void News::setCreateTime(const ::trantor::Date &pCreateTime) noexcept
{
    createTime_ = std::make_shared<::trantor::Date>(pCreateTime);
    dirtyFlag_[1] = true;
}




const ::trantor::Date &News::getValueOfUpdateTime() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(updateTime_)
        return *updateTime_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &News::getUpdateTime() const noexcept
{
    return updateTime_;
}
void News::setUpdateTime(const ::trantor::Date &pUpdateTime) noexcept
{
    updateTime_ = std::make_shared<::trantor::Date>(pUpdateTime);
    dirtyFlag_[2] = true;
}




const std::string &News::getValueOfRemark() const noexcept
{
    const static std::string defaultValue = std::string();
    if(remark_)
        return *remark_;
    return defaultValue;
}
const std::shared_ptr<std::string> &News::getRemark() const noexcept
{
    return remark_;
}
void News::setRemark(const std::string &pRemark) noexcept
{
    remark_ = std::make_shared<std::string>(pRemark);
    dirtyFlag_[3] = true;
}
void News::setRemark(std::string &&pRemark) noexcept
{
    remark_ = std::make_shared<std::string>(std::move(pRemark));
    dirtyFlag_[3] = true;
}


void News::setRemarkToNull() noexcept
{
    remark_.reset();
    dirtyFlag_[3] = true;
}


const int8_t &News::getValueOfIsDelete() const noexcept
{
    const static int8_t defaultValue = int8_t();
    if(isDelete_)
        return *isDelete_;
    return defaultValue;
}
const std::shared_ptr<int8_t> &News::getIsDelete() const noexcept
{
    return isDelete_;
}
void News::setIsDelete(const int8_t &pIsDelete) noexcept
{
    isDelete_ = std::make_shared<int8_t>(pIsDelete);
    dirtyFlag_[4] = true;
}




const ::trantor::Date &News::getValueOfReleaseTime() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(releaseTime_)
        return *releaseTime_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &News::getReleaseTime() const noexcept
{
    return releaseTime_;
}
void News::setReleaseTime(const ::trantor::Date &pReleaseTime) noexcept
{
    releaseTime_ = std::make_shared<::trantor::Date>(pReleaseTime);
    dirtyFlag_[5] = true;
}




const std::string &News::getValueOfTitle() const noexcept
{
    const static std::string defaultValue = std::string();
    if(title_)
        return *title_;
    return defaultValue;
}
const std::shared_ptr<std::string> &News::getTitle() const noexcept
{
    return title_;
}
void News::setTitle(const std::string &pTitle) noexcept
{
    title_ = std::make_shared<std::string>(pTitle);
    dirtyFlag_[6] = true;
}
void News::setTitle(std::string &&pTitle) noexcept
{
    title_ = std::make_shared<std::string>(std::move(pTitle));
    dirtyFlag_[6] = true;
}


void News::setTitleToNull() noexcept
{
    title_.reset();
    dirtyFlag_[6] = true;
}


const std::string &News::getValueOfTagName() const noexcept
{
    const static std::string defaultValue = std::string();
    if(tagName_)
        return *tagName_;
    return defaultValue;
}
const std::shared_ptr<std::string> &News::getTagName() const noexcept
{
    return tagName_;
}
void News::setTagName(const std::string &pTagName) noexcept
{
    tagName_ = std::make_shared<std::string>(pTagName);
    dirtyFlag_[7] = true;
}
void News::setTagName(std::string &&pTagName) noexcept
{
    tagName_ = std::make_shared<std::string>(std::move(pTagName));
    dirtyFlag_[7] = true;
}


void News::setTagNameToNull() noexcept
{
    tagName_.reset();
    dirtyFlag_[7] = true;
}


const std::string &News::getValueOfJumpUrl() const noexcept
{
    const static std::string defaultValue = std::string();
    if(jumpUrl_)
        return *jumpUrl_;
    return defaultValue;
}
const std::shared_ptr<std::string> &News::getJumpUrl() const noexcept
{
    return jumpUrl_;
}
void News::setJumpUrl(const std::string &pJumpUrl) noexcept
{
    jumpUrl_ = std::make_shared<std::string>(pJumpUrl);
    dirtyFlag_[8] = true;
}
void News::setJumpUrl(std::string &&pJumpUrl) noexcept
{
    jumpUrl_ = std::make_shared<std::string>(std::move(pJumpUrl));
    dirtyFlag_[8] = true;
}


void News::setJumpUrlToNull() noexcept
{
    jumpUrl_.reset();
    dirtyFlag_[8] = true;
}


const std::string &News::getValueOfContent() const noexcept
{
    const static std::string defaultValue = std::string();
    if(content_)
        return *content_;
    return defaultValue;
}
const std::shared_ptr<std::string> &News::getContent() const noexcept
{
    return content_;
}
void News::setContent(const std::string &pContent) noexcept
{
    content_ = std::make_shared<std::string>(pContent);
    dirtyFlag_[9] = true;
}
void News::setContent(std::string &&pContent) noexcept
{
    content_ = std::make_shared<std::string>(std::move(pContent));
    dirtyFlag_[9] = true;
}


void News::setContentToNull() noexcept
{
    content_.reset();
    dirtyFlag_[9] = true;
}


const std::string &News::getValueOfSummary() const noexcept
{
    const static std::string defaultValue = std::string();
    if(summary_)
        return *summary_;
    return defaultValue;
}
const std::shared_ptr<std::string> &News::getSummary() const noexcept
{
    return summary_;
}
void News::setSummary(const std::string &pSummary) noexcept
{
    summary_ = std::make_shared<std::string>(pSummary);
    dirtyFlag_[10] = true;
}
void News::setSummary(std::string &&pSummary) noexcept
{
    summary_ = std::make_shared<std::string>(std::move(pSummary));
    dirtyFlag_[10] = true;
}


void News::setSummaryToNull() noexcept
{
    summary_.reset();
    dirtyFlag_[10] = true;
}


const int8_t &News::getValueOfIsRelease() const noexcept
{
    const static int8_t defaultValue = int8_t();
    if(isRelease_)
        return *isRelease_;
    return defaultValue;
}
const std::shared_ptr<int8_t> &News::getIsRelease() const noexcept
{
    return isRelease_;
}
void News::setIsRelease(const int8_t &pIsRelease) noexcept
{
    isRelease_ = std::make_shared<int8_t>(pIsRelease);
    dirtyFlag_[11] = true;
}




const int64_t &News::getValueOfNewsCateId() const noexcept
{
    const static int64_t defaultValue = int64_t();
    if(newsCateId_)
        return *newsCateId_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &News::getNewsCateId() const noexcept
{
    return newsCateId_;
}
void News::setNewsCateId(const int64_t &pNewsCateId) noexcept
{
    newsCateId_ = std::make_shared<int64_t>(pNewsCateId);
    dirtyFlag_[12] = true;
}




const std::string &News::getValueOfKeywords() const noexcept
{
    const static std::string defaultValue = std::string();
    if(keywords_)
        return *keywords_;
    return defaultValue;
}
const std::shared_ptr<std::string> &News::getKeywords() const noexcept
{
    return keywords_;
}
void News::setKeywords(const std::string &pKeywords) noexcept
{
    keywords_ = std::make_shared<std::string>(pKeywords);
    dirtyFlag_[13] = true;
}
void News::setKeywords(std::string &&pKeywords) noexcept
{
    keywords_ = std::make_shared<std::string>(std::move(pKeywords));
    dirtyFlag_[13] = true;
}


void News::setKeywordsToNull() noexcept
{
    keywords_.reset();
    dirtyFlag_[13] = true;
}


const std::string &News::getValueOfDescription() const noexcept
{
    const static std::string defaultValue = std::string();
    if(description_)
        return *description_;
    return defaultValue;
}
const std::shared_ptr<std::string> &News::getDescription() const noexcept
{
    return description_;
}
void News::setDescription(const std::string &pDescription) noexcept
{
    description_ = std::make_shared<std::string>(pDescription);
    dirtyFlag_[14] = true;
}
void News::setDescription(std::string &&pDescription) noexcept
{
    description_ = std::make_shared<std::string>(std::move(pDescription));
    dirtyFlag_[14] = true;
}


void News::setDescriptionToNull() noexcept
{
    description_.reset();
    dirtyFlag_[14] = true;
}


const std::string &News::getValueOfImage() const noexcept
{
    const static std::string defaultValue = std::string();
    if(image_)
        return *image_;
    return defaultValue;
}
const std::shared_ptr<std::string> &News::getImage() const noexcept
{
    return image_;
}
void News::setImage(const std::string &pImage) noexcept
{
    image_ = std::make_shared<std::string>(pImage);
    dirtyFlag_[15] = true;
}
void News::setImage(std::string &&pImage) noexcept
{
    image_ = std::make_shared<std::string>(std::move(pImage));
    dirtyFlag_[15] = true;
}


void News::setImageToNull() noexcept
{
    image_.reset();
    dirtyFlag_[15] = true;
}


const int32_t &News::getValueOfClickNum() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(clickNum_)
        return *clickNum_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &News::getClickNum() const noexcept
{
    return clickNum_;
}
void News::setClickNum(const int32_t &pClickNum) noexcept
{
    clickNum_ = std::make_shared<int32_t>(pClickNum);
    dirtyFlag_[16] = true;
}




const int8_t &News::getValueOfIsCrawler() const noexcept
{
    const static int8_t defaultValue = int8_t();
    if(isCrawler_)
        return *isCrawler_;
    return defaultValue;
}
const std::shared_ptr<int8_t> &News::getIsCrawler() const noexcept
{
    return isCrawler_;
}
void News::setIsCrawler(const int8_t &pIsCrawler) noexcept
{
    isCrawler_ = std::make_shared<int8_t>(pIsCrawler);
    dirtyFlag_[17] = true;
}


void News::setIsCrawlerToNull() noexcept
{
    isCrawler_.reset();
    dirtyFlag_[17] = true;
}


const std::string &News::getValueOfInfoFrom() const noexcept
{
    const static std::string defaultValue = std::string();
    if(infoFrom_)
        return *infoFrom_;
    return defaultValue;
}
const std::shared_ptr<std::string> &News::getInfoFrom() const noexcept
{
    return infoFrom_;
}
void News::setInfoFrom(const std::string &pInfoFrom) noexcept
{
    infoFrom_ = std::make_shared<std::string>(pInfoFrom);
    dirtyFlag_[18] = true;
}
void News::setInfoFrom(std::string &&pInfoFrom) noexcept
{
    infoFrom_ = std::make_shared<std::string>(std::move(pInfoFrom));
    dirtyFlag_[18] = true;
}


void News::setInfoFromToNull() noexcept
{
    infoFrom_.reset();
    dirtyFlag_[18] = true;
}


const int32_t &News::getValueOfShowPlatform() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(showPlatform_)
        return *showPlatform_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &News::getShowPlatform() const noexcept
{
    return showPlatform_;
}
void News::setShowPlatform(const int32_t &pShowPlatform) noexcept
{
    showPlatform_ = std::make_shared<int32_t>(pShowPlatform);
    dirtyFlag_[19] = true;
}


void News::setShowPlatformToNull() noexcept
{
    showPlatform_.reset();
    dirtyFlag_[19] = true;
}


const uint32_t &News::getValueOfSort() const noexcept
{
    const static uint32_t defaultValue = uint32_t();
    if(sort_)
        return *sort_;
    return defaultValue;
}
const std::shared_ptr<uint32_t> &News::getSort() const noexcept
{
    return sort_;
}
void News::setSort(const uint32_t &pSort) noexcept
{
    sort_ = std::make_shared<uint32_t>(pSort);
    dirtyFlag_[20] = true;
}




const int64_t &News::getValueOfShopId() const noexcept
{
    const static int64_t defaultValue = int64_t();
    if(shopId_)
        return *shopId_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &News::getShopId() const noexcept
{
    return shopId_;
}
void News::setShopId(const int64_t &pShopId) noexcept
{
    shopId_ = std::make_shared<int64_t>(pShopId);
    dirtyFlag_[21] = true;
}




const int64_t &News::getValueOfAdminId() const noexcept
{
    const static int64_t defaultValue = int64_t();
    if(adminId_)
        return *adminId_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &News::getAdminId() const noexcept
{
    return adminId_;
}
void News::setAdminId(const int64_t &pAdminId) noexcept
{
    adminId_ = std::make_shared<int64_t>(pAdminId);
    dirtyFlag_[22] = true;
}




const uint8_t &News::getValueOfIsShow() const noexcept
{
    const static uint8_t defaultValue = uint8_t();
    if(isShow_)
        return *isShow_;
    return defaultValue;
}
const std::shared_ptr<uint8_t> &News::getIsShow() const noexcept
{
    return isShow_;
}
void News::setIsShow(const uint8_t &pIsShow) noexcept
{
    isShow_ = std::make_shared<uint8_t>(pIsShow);
    dirtyFlag_[23] = true;
}




const int32_t &News::getValueOfFavourNum() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(favourNum_)
        return *favourNum_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &News::getFavourNum() const noexcept
{
    return favourNum_;
}
void News::setFavourNum(const int32_t &pFavourNum) noexcept
{
    favourNum_ = std::make_shared<int32_t>(pFavourNum);
    dirtyFlag_[24] = true;
}


void News::setFavourNumToNull() noexcept
{
    favourNum_.reset();
    dirtyFlag_[24] = true;
}


void News::updateId(const uint64_t id)
{
    id_ = std::make_shared<uint64_t>(id);
}

const std::vector<std::string> &News::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "create_time",
        "update_time",
        "remark",
        "is_delete",
        "release_time",
        "title",
        "tag_name",
        "jump_url",
        "content",
        "summary",
        "is_release",
        "news_cate_id",
        "keywords",
        "description",
        "image",
        "click_num",
        "is_crawler",
        "info_from",
        "show_platform",
        "sort",
        "shop_id",
        "admin_id",
        "is_show",
        "favour_num"
    };
    return inCols;
}

void News::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getCreateTime())
        {
            binder << getValueOfCreateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getUpdateTime())
        {
            binder << getValueOfUpdateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getRemark())
        {
            binder << getValueOfRemark();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getIsDelete())
        {
            binder << getValueOfIsDelete();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getReleaseTime())
        {
            binder << getValueOfReleaseTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getTitle())
        {
            binder << getValueOfTitle();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getTagName())
        {
            binder << getValueOfTagName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getJumpUrl())
        {
            binder << getValueOfJumpUrl();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getContent())
        {
            binder << getValueOfContent();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getSummary())
        {
            binder << getValueOfSummary();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getIsRelease())
        {
            binder << getValueOfIsRelease();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getNewsCateId())
        {
            binder << getValueOfNewsCateId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[13])
    {
        if(getKeywords())
        {
            binder << getValueOfKeywords();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[14])
    {
        if(getDescription())
        {
            binder << getValueOfDescription();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[15])
    {
        if(getImage())
        {
            binder << getValueOfImage();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[16])
    {
        if(getClickNum())
        {
            binder << getValueOfClickNum();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[17])
    {
        if(getIsCrawler())
        {
            binder << getValueOfIsCrawler();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[18])
    {
        if(getInfoFrom())
        {
            binder << getValueOfInfoFrom();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[19])
    {
        if(getShowPlatform())
        {
            binder << getValueOfShowPlatform();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[20])
    {
        if(getSort())
        {
            binder << getValueOfSort();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[21])
    {
        if(getShopId())
        {
            binder << getValueOfShopId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[22])
    {
        if(getAdminId())
        {
            binder << getValueOfAdminId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[23])
    {
        if(getIsShow())
        {
            binder << getValueOfIsShow();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[24])
    {
        if(getFavourNum())
        {
            binder << getValueOfFavourNum();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> News::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    if(dirtyFlag_[8])
    {
        ret.push_back(getColumnName(8));
    }
    if(dirtyFlag_[9])
    {
        ret.push_back(getColumnName(9));
    }
    if(dirtyFlag_[10])
    {
        ret.push_back(getColumnName(10));
    }
    if(dirtyFlag_[11])
    {
        ret.push_back(getColumnName(11));
    }
    if(dirtyFlag_[12])
    {
        ret.push_back(getColumnName(12));
    }
    if(dirtyFlag_[13])
    {
        ret.push_back(getColumnName(13));
    }
    if(dirtyFlag_[14])
    {
        ret.push_back(getColumnName(14));
    }
    if(dirtyFlag_[15])
    {
        ret.push_back(getColumnName(15));
    }
    if(dirtyFlag_[16])
    {
        ret.push_back(getColumnName(16));
    }
    if(dirtyFlag_[17])
    {
        ret.push_back(getColumnName(17));
    }
    if(dirtyFlag_[18])
    {
        ret.push_back(getColumnName(18));
    }
    if(dirtyFlag_[19])
    {
        ret.push_back(getColumnName(19));
    }
    if(dirtyFlag_[20])
    {
        ret.push_back(getColumnName(20));
    }
    if(dirtyFlag_[21])
    {
        ret.push_back(getColumnName(21));
    }
    if(dirtyFlag_[22])
    {
        ret.push_back(getColumnName(22));
    }
    if(dirtyFlag_[23])
    {
        ret.push_back(getColumnName(23));
    }
    if(dirtyFlag_[24])
    {
        ret.push_back(getColumnName(24));
    }
    return ret;
}

void News::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getCreateTime())
        {
            binder << getValueOfCreateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getUpdateTime())
        {
            binder << getValueOfUpdateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getRemark())
        {
            binder << getValueOfRemark();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getIsDelete())
        {
            binder << getValueOfIsDelete();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getReleaseTime())
        {
            binder << getValueOfReleaseTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getTitle())
        {
            binder << getValueOfTitle();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getTagName())
        {
            binder << getValueOfTagName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getJumpUrl())
        {
            binder << getValueOfJumpUrl();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getContent())
        {
            binder << getValueOfContent();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getSummary())
        {
            binder << getValueOfSummary();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getIsRelease())
        {
            binder << getValueOfIsRelease();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getNewsCateId())
        {
            binder << getValueOfNewsCateId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[13])
    {
        if(getKeywords())
        {
            binder << getValueOfKeywords();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[14])
    {
        if(getDescription())
        {
            binder << getValueOfDescription();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[15])
    {
        if(getImage())
        {
            binder << getValueOfImage();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[16])
    {
        if(getClickNum())
        {
            binder << getValueOfClickNum();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[17])
    {
        if(getIsCrawler())
        {
            binder << getValueOfIsCrawler();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[18])
    {
        if(getInfoFrom())
        {
            binder << getValueOfInfoFrom();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[19])
    {
        if(getShowPlatform())
        {
            binder << getValueOfShowPlatform();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[20])
    {
        if(getSort())
        {
            binder << getValueOfSort();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[21])
    {
        if(getShopId())
        {
            binder << getValueOfShopId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[22])
    {
        if(getAdminId())
        {
            binder << getValueOfAdminId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[23])
    {
        if(getIsShow())
        {
            binder << getValueOfIsShow();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[24])
    {
        if(getFavourNum())
        {
            binder << getValueOfFavourNum();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value News::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=(Json::UInt64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getCreateTime())
    {
        ret["create_time"]=getCreateTime()->toDbStringLocal();
    }
    else
    {
        ret["create_time"]=Json::Value();
    }
    if(getUpdateTime())
    {
        ret["update_time"]=getUpdateTime()->toDbStringLocal();
    }
    else
    {
        ret["update_time"]=Json::Value();
    }
    if(getRemark())
    {
        ret["remark"]=getValueOfRemark();
    }
    else
    {
        ret["remark"]=Json::Value();
    }
    if(getIsDelete())
    {
        ret["is_delete"]=getValueOfIsDelete();
    }
    else
    {
        ret["is_delete"]=Json::Value();
    }
    if(getReleaseTime())
    {
        ret["release_time"]=getReleaseTime()->toDbStringLocal();
    }
    else
    {
        ret["release_time"]=Json::Value();
    }
    if(getTitle())
    {
        ret["title"]=getValueOfTitle();
    }
    else
    {
        ret["title"]=Json::Value();
    }
    if(getTagName())
    {
        ret["tag_name"]=getValueOfTagName();
    }
    else
    {
        ret["tag_name"]=Json::Value();
    }
    if(getJumpUrl())
    {
        ret["jump_url"]=getValueOfJumpUrl();
    }
    else
    {
        ret["jump_url"]=Json::Value();
    }
    if(getContent())
    {
        ret["content"]=getValueOfContent();
    }
    else
    {
        ret["content"]=Json::Value();
    }
    if(getSummary())
    {
        ret["summary"]=getValueOfSummary();
    }
    else
    {
        ret["summary"]=Json::Value();
    }
    if(getIsRelease())
    {
        ret["is_release"]=getValueOfIsRelease();
    }
    else
    {
        ret["is_release"]=Json::Value();
    }
    if(getNewsCateId())
    {
        ret["news_cate_id"]=(Json::Int64)getValueOfNewsCateId();
    }
    else
    {
        ret["news_cate_id"]=Json::Value();
    }
    if(getKeywords())
    {
        ret["keywords"]=getValueOfKeywords();
    }
    else
    {
        ret["keywords"]=Json::Value();
    }
    if(getDescription())
    {
        ret["description"]=getValueOfDescription();
    }
    else
    {
        ret["description"]=Json::Value();
    }
    if(getImage())
    {
        ret["image"]=getValueOfImage();
    }
    else
    {
        ret["image"]=Json::Value();
    }
    if(getClickNum())
    {
        ret["click_num"]=getValueOfClickNum();
    }
    else
    {
        ret["click_num"]=Json::Value();
    }
    if(getIsCrawler())
    {
        ret["is_crawler"]=getValueOfIsCrawler();
    }
    else
    {
        ret["is_crawler"]=Json::Value();
    }
    if(getInfoFrom())
    {
        ret["info_from"]=getValueOfInfoFrom();
    }
    else
    {
        ret["info_from"]=Json::Value();
    }
    if(getShowPlatform())
    {
        ret["show_platform"]=getValueOfShowPlatform();
    }
    else
    {
        ret["show_platform"]=Json::Value();
    }
    if(getSort())
    {
        ret["sort"]=getValueOfSort();
    }
    else
    {
        ret["sort"]=Json::Value();
    }
    if(getShopId())
    {
        ret["shop_id"]=(Json::Int64)getValueOfShopId();
    }
    else
    {
        ret["shop_id"]=Json::Value();
    }
    if(getAdminId())
    {
        ret["admin_id"]=(Json::Int64)getValueOfAdminId();
    }
    else
    {
        ret["admin_id"]=Json::Value();
    }
    if(getIsShow())
    {
        ret["is_show"]=getValueOfIsShow();
    }
    else
    {
        ret["is_show"]=Json::Value();
    }
    if(getFavourNum())
    {
        ret["favour_num"]=getValueOfFavourNum();
    }
    else
    {
        ret["favour_num"]=Json::Value();
    }
    return ret;
}

Json::Value News::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 25)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=(Json::UInt64)getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getCreateTime())
            {
                ret[pMasqueradingVector[1]]=getCreateTime()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getUpdateTime())
            {
                ret[pMasqueradingVector[2]]=getUpdateTime()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getRemark())
            {
                ret[pMasqueradingVector[3]]=getValueOfRemark();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getIsDelete())
            {
                ret[pMasqueradingVector[4]]=getValueOfIsDelete();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getReleaseTime())
            {
                ret[pMasqueradingVector[5]]=getReleaseTime()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getTitle())
            {
                ret[pMasqueradingVector[6]]=getValueOfTitle();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getTagName())
            {
                ret[pMasqueradingVector[7]]=getValueOfTagName();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[8].empty())
        {
            if(getJumpUrl())
            {
                ret[pMasqueradingVector[8]]=getValueOfJumpUrl();
            }
            else
            {
                ret[pMasqueradingVector[8]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[9].empty())
        {
            if(getContent())
            {
                ret[pMasqueradingVector[9]]=getValueOfContent();
            }
            else
            {
                ret[pMasqueradingVector[9]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[10].empty())
        {
            if(getSummary())
            {
                ret[pMasqueradingVector[10]]=getValueOfSummary();
            }
            else
            {
                ret[pMasqueradingVector[10]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[11].empty())
        {
            if(getIsRelease())
            {
                ret[pMasqueradingVector[11]]=getValueOfIsRelease();
            }
            else
            {
                ret[pMasqueradingVector[11]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[12].empty())
        {
            if(getNewsCateId())
            {
                ret[pMasqueradingVector[12]]=(Json::Int64)getValueOfNewsCateId();
            }
            else
            {
                ret[pMasqueradingVector[12]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[13].empty())
        {
            if(getKeywords())
            {
                ret[pMasqueradingVector[13]]=getValueOfKeywords();
            }
            else
            {
                ret[pMasqueradingVector[13]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[14].empty())
        {
            if(getDescription())
            {
                ret[pMasqueradingVector[14]]=getValueOfDescription();
            }
            else
            {
                ret[pMasqueradingVector[14]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[15].empty())
        {
            if(getImage())
            {
                ret[pMasqueradingVector[15]]=getValueOfImage();
            }
            else
            {
                ret[pMasqueradingVector[15]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[16].empty())
        {
            if(getClickNum())
            {
                ret[pMasqueradingVector[16]]=getValueOfClickNum();
            }
            else
            {
                ret[pMasqueradingVector[16]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[17].empty())
        {
            if(getIsCrawler())
            {
                ret[pMasqueradingVector[17]]=getValueOfIsCrawler();
            }
            else
            {
                ret[pMasqueradingVector[17]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[18].empty())
        {
            if(getInfoFrom())
            {
                ret[pMasqueradingVector[18]]=getValueOfInfoFrom();
            }
            else
            {
                ret[pMasqueradingVector[18]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[19].empty())
        {
            if(getShowPlatform())
            {
                ret[pMasqueradingVector[19]]=getValueOfShowPlatform();
            }
            else
            {
                ret[pMasqueradingVector[19]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[20].empty())
        {
            if(getSort())
            {
                ret[pMasqueradingVector[20]]=getValueOfSort();
            }
            else
            {
                ret[pMasqueradingVector[20]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[21].empty())
        {
            if(getShopId())
            {
                ret[pMasqueradingVector[21]]=(Json::Int64)getValueOfShopId();
            }
            else
            {
                ret[pMasqueradingVector[21]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[22].empty())
        {
            if(getAdminId())
            {
                ret[pMasqueradingVector[22]]=(Json::Int64)getValueOfAdminId();
            }
            else
            {
                ret[pMasqueradingVector[22]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[23].empty())
        {
            if(getIsShow())
            {
                ret[pMasqueradingVector[23]]=getValueOfIsShow();
            }
            else
            {
                ret[pMasqueradingVector[23]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[24].empty())
        {
            if(getFavourNum())
            {
                ret[pMasqueradingVector[24]]=getValueOfFavourNum();
            }
            else
            {
                ret[pMasqueradingVector[24]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=(Json::UInt64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getCreateTime())
    {
        ret["create_time"]=getCreateTime()->toDbStringLocal();
    }
    else
    {
        ret["create_time"]=Json::Value();
    }
    if(getUpdateTime())
    {
        ret["update_time"]=getUpdateTime()->toDbStringLocal();
    }
    else
    {
        ret["update_time"]=Json::Value();
    }
    if(getRemark())
    {
        ret["remark"]=getValueOfRemark();
    }
    else
    {
        ret["remark"]=Json::Value();
    }
    if(getIsDelete())
    {
        ret["is_delete"]=getValueOfIsDelete();
    }
    else
    {
        ret["is_delete"]=Json::Value();
    }
    if(getReleaseTime())
    {
        ret["release_time"]=getReleaseTime()->toDbStringLocal();
    }
    else
    {
        ret["release_time"]=Json::Value();
    }
    if(getTitle())
    {
        ret["title"]=getValueOfTitle();
    }
    else
    {
        ret["title"]=Json::Value();
    }
    if(getTagName())
    {
        ret["tag_name"]=getValueOfTagName();
    }
    else
    {
        ret["tag_name"]=Json::Value();
    }
    if(getJumpUrl())
    {
        ret["jump_url"]=getValueOfJumpUrl();
    }
    else
    {
        ret["jump_url"]=Json::Value();
    }
    if(getContent())
    {
        ret["content"]=getValueOfContent();
    }
    else
    {
        ret["content"]=Json::Value();
    }
    if(getSummary())
    {
        ret["summary"]=getValueOfSummary();
    }
    else
    {
        ret["summary"]=Json::Value();
    }
    if(getIsRelease())
    {
        ret["is_release"]=getValueOfIsRelease();
    }
    else
    {
        ret["is_release"]=Json::Value();
    }
    if(getNewsCateId())
    {
        ret["news_cate_id"]=(Json::Int64)getValueOfNewsCateId();
    }
    else
    {
        ret["news_cate_id"]=Json::Value();
    }
    if(getKeywords())
    {
        ret["keywords"]=getValueOfKeywords();
    }
    else
    {
        ret["keywords"]=Json::Value();
    }
    if(getDescription())
    {
        ret["description"]=getValueOfDescription();
    }
    else
    {
        ret["description"]=Json::Value();
    }
    if(getImage())
    {
        ret["image"]=getValueOfImage();
    }
    else
    {
        ret["image"]=Json::Value();
    }
    if(getClickNum())
    {
        ret["click_num"]=getValueOfClickNum();
    }
    else
    {
        ret["click_num"]=Json::Value();
    }
    if(getIsCrawler())
    {
        ret["is_crawler"]=getValueOfIsCrawler();
    }
    else
    {
        ret["is_crawler"]=Json::Value();
    }
    if(getInfoFrom())
    {
        ret["info_from"]=getValueOfInfoFrom();
    }
    else
    {
        ret["info_from"]=Json::Value();
    }
    if(getShowPlatform())
    {
        ret["show_platform"]=getValueOfShowPlatform();
    }
    else
    {
        ret["show_platform"]=Json::Value();
    }
    if(getSort())
    {
        ret["sort"]=getValueOfSort();
    }
    else
    {
        ret["sort"]=Json::Value();
    }
    if(getShopId())
    {
        ret["shop_id"]=(Json::Int64)getValueOfShopId();
    }
    else
    {
        ret["shop_id"]=Json::Value();
    }
    if(getAdminId())
    {
        ret["admin_id"]=(Json::Int64)getValueOfAdminId();
    }
    else
    {
        ret["admin_id"]=Json::Value();
    }
    if(getIsShow())
    {
        ret["is_show"]=getValueOfIsShow();
    }
    else
    {
        ret["is_show"]=Json::Value();
    }
    if(getFavourNum())
    {
        ret["favour_num"]=getValueOfFavourNum();
    }
    else
    {
        ret["favour_num"]=Json::Value();
    }
    return ret;
}

bool News::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("create_time"))
    {
        if(!validJsonOfField(1, "create_time", pJson["create_time"], err, true))
            return false;
    }
    if(pJson.isMember("update_time"))
    {
        if(!validJsonOfField(2, "update_time", pJson["update_time"], err, true))
            return false;
    }
    if(pJson.isMember("remark"))
    {
        if(!validJsonOfField(3, "remark", pJson["remark"], err, true))
            return false;
    }
    if(pJson.isMember("is_delete"))
    {
        if(!validJsonOfField(4, "is_delete", pJson["is_delete"], err, true))
            return false;
    }
    if(pJson.isMember("release_time"))
    {
        if(!validJsonOfField(5, "release_time", pJson["release_time"], err, true))
            return false;
    }
    if(pJson.isMember("title"))
    {
        if(!validJsonOfField(6, "title", pJson["title"], err, true))
            return false;
    }
    if(pJson.isMember("tag_name"))
    {
        if(!validJsonOfField(7, "tag_name", pJson["tag_name"], err, true))
            return false;
    }
    if(pJson.isMember("jump_url"))
    {
        if(!validJsonOfField(8, "jump_url", pJson["jump_url"], err, true))
            return false;
    }
    if(pJson.isMember("content"))
    {
        if(!validJsonOfField(9, "content", pJson["content"], err, true))
            return false;
    }
    if(pJson.isMember("summary"))
    {
        if(!validJsonOfField(10, "summary", pJson["summary"], err, true))
            return false;
    }
    if(pJson.isMember("is_release"))
    {
        if(!validJsonOfField(11, "is_release", pJson["is_release"], err, true))
            return false;
    }
    if(pJson.isMember("news_cate_id"))
    {
        if(!validJsonOfField(12, "news_cate_id", pJson["news_cate_id"], err, true))
            return false;
    }
    if(pJson.isMember("keywords"))
    {
        if(!validJsonOfField(13, "keywords", pJson["keywords"], err, true))
            return false;
    }
    if(pJson.isMember("description"))
    {
        if(!validJsonOfField(14, "description", pJson["description"], err, true))
            return false;
    }
    if(pJson.isMember("image"))
    {
        if(!validJsonOfField(15, "image", pJson["image"], err, true))
            return false;
    }
    if(pJson.isMember("click_num"))
    {
        if(!validJsonOfField(16, "click_num", pJson["click_num"], err, true))
            return false;
    }
    if(pJson.isMember("is_crawler"))
    {
        if(!validJsonOfField(17, "is_crawler", pJson["is_crawler"], err, true))
            return false;
    }
    if(pJson.isMember("info_from"))
    {
        if(!validJsonOfField(18, "info_from", pJson["info_from"], err, true))
            return false;
    }
    if(pJson.isMember("show_platform"))
    {
        if(!validJsonOfField(19, "show_platform", pJson["show_platform"], err, true))
            return false;
    }
    if(pJson.isMember("sort"))
    {
        if(!validJsonOfField(20, "sort", pJson["sort"], err, true))
            return false;
    }
    if(pJson.isMember("shop_id"))
    {
        if(!validJsonOfField(21, "shop_id", pJson["shop_id"], err, true))
            return false;
    }
    if(pJson.isMember("admin_id"))
    {
        if(!validJsonOfField(22, "admin_id", pJson["admin_id"], err, true))
            return false;
    }
    if(pJson.isMember("is_show"))
    {
        if(!validJsonOfField(23, "is_show", pJson["is_show"], err, true))
            return false;
    }
    if(pJson.isMember("favour_num"))
    {
        if(!validJsonOfField(24, "favour_num", pJson["favour_num"], err, true))
            return false;
    }
    return true;
}
bool News::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                              const std::vector<std::string> &pMasqueradingVector,
                                              std::string &err)
{
    if(pMasqueradingVector.size() != 25)
    {
        err = "Bad masquerading vector";
        return false;
    }
    if(!pMasqueradingVector[0].empty())
    {
        if(pJson.isMember(pMasqueradingVector[0]))
        {
            if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[1].empty())
    {
        if(pJson.isMember(pMasqueradingVector[1]))
        {
            if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[2].empty())
    {
        if(pJson.isMember(pMasqueradingVector[2]))
        {
            if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[3].empty())
    {
        if(pJson.isMember(pMasqueradingVector[3]))
        {
            if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[4].empty())
    {
        if(pJson.isMember(pMasqueradingVector[4]))
        {
            if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[5].empty())
    {
        if(pJson.isMember(pMasqueradingVector[5]))
        {
            if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[6].empty())
    {
        if(pJson.isMember(pMasqueradingVector[6]))
        {
            if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[7].empty())
    {
        if(pJson.isMember(pMasqueradingVector[7]))
        {
            if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[8].empty())
    {
        if(pJson.isMember(pMasqueradingVector[8]))
        {
            if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[9].empty())
    {
        if(pJson.isMember(pMasqueradingVector[9]))
        {
            if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[10].empty())
    {
        if(pJson.isMember(pMasqueradingVector[10]))
        {
            if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[11].empty())
    {
        if(pJson.isMember(pMasqueradingVector[11]))
        {
            if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[12].empty())
    {
        if(pJson.isMember(pMasqueradingVector[12]))
        {
            if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[13].empty())
    {
        if(pJson.isMember(pMasqueradingVector[13]))
        {
            if(!validJsonOfField(13, pMasqueradingVector[13], pJson[pMasqueradingVector[13]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[14].empty())
    {
        if(pJson.isMember(pMasqueradingVector[14]))
        {
            if(!validJsonOfField(14, pMasqueradingVector[14], pJson[pMasqueradingVector[14]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[15].empty())
    {
        if(pJson.isMember(pMasqueradingVector[15]))
        {
            if(!validJsonOfField(15, pMasqueradingVector[15], pJson[pMasqueradingVector[15]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[16].empty())
    {
        if(pJson.isMember(pMasqueradingVector[16]))
        {
            if(!validJsonOfField(16, pMasqueradingVector[16], pJson[pMasqueradingVector[16]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[17].empty())
    {
        if(pJson.isMember(pMasqueradingVector[17]))
        {
            if(!validJsonOfField(17, pMasqueradingVector[17], pJson[pMasqueradingVector[17]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[18].empty())
    {
        if(pJson.isMember(pMasqueradingVector[18]))
        {
            if(!validJsonOfField(18, pMasqueradingVector[18], pJson[pMasqueradingVector[18]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[19].empty())
    {
        if(pJson.isMember(pMasqueradingVector[19]))
        {
            if(!validJsonOfField(19, pMasqueradingVector[19], pJson[pMasqueradingVector[19]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[20].empty())
    {
        if(pJson.isMember(pMasqueradingVector[20]))
        {
            if(!validJsonOfField(20, pMasqueradingVector[20], pJson[pMasqueradingVector[20]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[21].empty())
    {
        if(pJson.isMember(pMasqueradingVector[21]))
        {
            if(!validJsonOfField(21, pMasqueradingVector[21], pJson[pMasqueradingVector[21]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[22].empty())
    {
        if(pJson.isMember(pMasqueradingVector[22]))
        {
            if(!validJsonOfField(22, pMasqueradingVector[22], pJson[pMasqueradingVector[22]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[23].empty())
    {
        if(pJson.isMember(pMasqueradingVector[23]))
        {
            if(!validJsonOfField(23, pMasqueradingVector[23], pJson[pMasqueradingVector[23]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[24].empty())
    {
        if(pJson.isMember(pMasqueradingVector[24]))
        {
            if(!validJsonOfField(24, pMasqueradingVector[24], pJson[pMasqueradingVector[24]], err, true))
                return false;
        }
    }
    return true;
}
bool News::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("create_time"))
    {
        if(!validJsonOfField(1, "create_time", pJson["create_time"], err, false))
            return false;
    }
    if(pJson.isMember("update_time"))
    {
        if(!validJsonOfField(2, "update_time", pJson["update_time"], err, false))
            return false;
    }
    if(pJson.isMember("remark"))
    {
        if(!validJsonOfField(3, "remark", pJson["remark"], err, false))
            return false;
    }
    if(pJson.isMember("is_delete"))
    {
        if(!validJsonOfField(4, "is_delete", pJson["is_delete"], err, false))
            return false;
    }
    if(pJson.isMember("release_time"))
    {
        if(!validJsonOfField(5, "release_time", pJson["release_time"], err, false))
            return false;
    }
    if(pJson.isMember("title"))
    {
        if(!validJsonOfField(6, "title", pJson["title"], err, false))
            return false;
    }
    if(pJson.isMember("tag_name"))
    {
        if(!validJsonOfField(7, "tag_name", pJson["tag_name"], err, false))
            return false;
    }
    if(pJson.isMember("jump_url"))
    {
        if(!validJsonOfField(8, "jump_url", pJson["jump_url"], err, false))
            return false;
    }
    if(pJson.isMember("content"))
    {
        if(!validJsonOfField(9, "content", pJson["content"], err, false))
            return false;
    }
    if(pJson.isMember("summary"))
    {
        if(!validJsonOfField(10, "summary", pJson["summary"], err, false))
            return false;
    }
    if(pJson.isMember("is_release"))
    {
        if(!validJsonOfField(11, "is_release", pJson["is_release"], err, false))
            return false;
    }
    if(pJson.isMember("news_cate_id"))
    {
        if(!validJsonOfField(12, "news_cate_id", pJson["news_cate_id"], err, false))
            return false;
    }
    if(pJson.isMember("keywords"))
    {
        if(!validJsonOfField(13, "keywords", pJson["keywords"], err, false))
            return false;
    }
    if(pJson.isMember("description"))
    {
        if(!validJsonOfField(14, "description", pJson["description"], err, false))
            return false;
    }
    if(pJson.isMember("image"))
    {
        if(!validJsonOfField(15, "image", pJson["image"], err, false))
            return false;
    }
    if(pJson.isMember("click_num"))
    {
        if(!validJsonOfField(16, "click_num", pJson["click_num"], err, false))
            return false;
    }
    if(pJson.isMember("is_crawler"))
    {
        if(!validJsonOfField(17, "is_crawler", pJson["is_crawler"], err, false))
            return false;
    }
    if(pJson.isMember("info_from"))
    {
        if(!validJsonOfField(18, "info_from", pJson["info_from"], err, false))
            return false;
    }
    if(pJson.isMember("show_platform"))
    {
        if(!validJsonOfField(19, "show_platform", pJson["show_platform"], err, false))
            return false;
    }
    if(pJson.isMember("sort"))
    {
        if(!validJsonOfField(20, "sort", pJson["sort"], err, false))
            return false;
    }
    if(pJson.isMember("shop_id"))
    {
        if(!validJsonOfField(21, "shop_id", pJson["shop_id"], err, false))
            return false;
    }
    if(pJson.isMember("admin_id"))
    {
        if(!validJsonOfField(22, "admin_id", pJson["admin_id"], err, false))
            return false;
    }
    if(pJson.isMember("is_show"))
    {
        if(!validJsonOfField(23, "is_show", pJson["is_show"], err, false))
            return false;
    }
    if(pJson.isMember("favour_num"))
    {
        if(!validJsonOfField(24, "favour_num", pJson["favour_num"], err, false))
            return false;
    }
    return true;
}
bool News::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector,
                                            std::string &err)
{
    if(pMasqueradingVector.size() != 25)
    {
        err = "Bad masquerading vector";
        return false;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
            return false;
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
            return false;
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
            return false;
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
            return false;
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
            return false;
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
            return false;
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
            return false;
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, false))
            return false;
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, false))
            return false;
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, false))
            return false;
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, false))
            return false;
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, false))
            return false;
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        if(!validJsonOfField(13, pMasqueradingVector[13], pJson[pMasqueradingVector[13]], err, false))
            return false;
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        if(!validJsonOfField(14, pMasqueradingVector[14], pJson[pMasqueradingVector[14]], err, false))
            return false;
    }
    if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
    {
        if(!validJsonOfField(15, pMasqueradingVector[15], pJson[pMasqueradingVector[15]], err, false))
            return false;
    }
    if(!pMasqueradingVector[16].empty() && pJson.isMember(pMasqueradingVector[16]))
    {
        if(!validJsonOfField(16, pMasqueradingVector[16], pJson[pMasqueradingVector[16]], err, false))
            return false;
    }
    if(!pMasqueradingVector[17].empty() && pJson.isMember(pMasqueradingVector[17]))
    {
        if(!validJsonOfField(17, pMasqueradingVector[17], pJson[pMasqueradingVector[17]], err, false))
            return false;
    }
    if(!pMasqueradingVector[18].empty() && pJson.isMember(pMasqueradingVector[18]))
    {
        if(!validJsonOfField(18, pMasqueradingVector[18], pJson[pMasqueradingVector[18]], err, false))
            return false;
    }
    if(!pMasqueradingVector[19].empty() && pJson.isMember(pMasqueradingVector[19]))
    {
        if(!validJsonOfField(19, pMasqueradingVector[19], pJson[pMasqueradingVector[19]], err, false))
            return false;
    }
    if(!pMasqueradingVector[20].empty() && pJson.isMember(pMasqueradingVector[20]))
    {
        if(!validJsonOfField(20, pMasqueradingVector[20], pJson[pMasqueradingVector[20]], err, false))
            return false;
    }
    if(!pMasqueradingVector[21].empty() && pJson.isMember(pMasqueradingVector[21]))
    {
        if(!validJsonOfField(21, pMasqueradingVector[21], pJson[pMasqueradingVector[21]], err, false))
            return false;
    }
    if(!pMasqueradingVector[22].empty() && pJson.isMember(pMasqueradingVector[22]))
    {
        if(!validJsonOfField(22, pMasqueradingVector[22], pJson[pMasqueradingVector[22]], err, false))
            return false;
    }
    if(!pMasqueradingVector[23].empty() && pJson.isMember(pMasqueradingVector[23]))
    {
        if(!validJsonOfField(23, pMasqueradingVector[23], pJson[pMasqueradingVector[23]], err, false))
            return false;
    }
    if(!pMasqueradingVector[24].empty() && pJson.isMember(pMasqueradingVector[24]))
    {
        if(!validJsonOfField(24, pMasqueradingVector[24], pJson[pMasqueradingVector[24]], err, false))
            return false;
    }
    return true;
}
bool News::validJsonOfField(size_t index,
                            const std::string &fieldName,
                            const Json::Value &pJson, 
                            std::string &err, 
                            bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }        
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 200)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 200)";
                return false;               
            }

            break;
        case 4:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 5:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 6:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;               
            }

            break;
        case 7:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 120)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 120)";
                return false;               
            }

            break;
        case 8:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;               
            }

            break;
        case 9:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 10:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 200)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 200)";
                return false;               
            }

            break;
        case 11:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 12:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 13:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;               
            }

            break;
        case 14:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;               
            }

            break;
        case 15:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;               
            }

            break;
        case 16:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 17:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 18:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 20)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 20)";
                return false;               
            }

            break;
        case 19:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 20:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 21:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 22:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 23:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 24:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
     
        default:
            err="Internal error in the server";
            return false;
            break;
    }
    return true;
}
