/**
 *
 *  SaleOutStorage.h
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#pragma once
#include <drogon/orm/Result.h>
#include <drogon/orm/Row.h>
#include <drogon/orm/Field.h>
#include <drogon/orm/SqlBinder.h>
#include <drogon/orm/Mapper.h>
#include <trantor/utils/Date.h>
#include <trantor/utils/Logger.h>
#include <json/json.h>
#include <string>
#include <memory>
#include <vector>
#include <tuple>
#include <stdint.h>
#include <iostream>

using namespace drogon::orm;
namespace drogon
{
namespace orm
{
class DbClient;
using DbClientPtr = std::shared_ptr<DbClient>;
}
}
namespace drogon_model
{
namespace v2 
{

class SaleOutStorage
{
  public:
    struct Cols
    {
        static const std::string _id;
        static const std::string _sale_order_id;
        static const std::string _sale_order_key;
        static const std::string _shop_id;
        static const std::string _admin_id;
        static const std::string _storage_image;
        static const std::string _storage_date;
        static const std::string _create_time;
        static const std::string _update_time;
        static const std::string _is_delete;
        static const std::string _remark;
        static const std::string _storage_status;
        static const std::string _audit_remark;
        static const std::string _express_key;
        static const std::string _express_status;
        static const std::string _sale_out_number;
        static const std::string _storage_type;
        static const std::string _order_return_id;
        static const std::string _check_admin_id;
        static const std::string _storage_amount_percent;
    };

    const static int primaryKeyNumber;
    const static std::string tableName;
    const static bool hasPrimaryKey;
    const static std::string primaryKeyName;
    using PrimaryKeyType = uint64_t;
    const PrimaryKeyType &getPrimaryKey() const;

    /**
     * @brief constructor
     * @param r One row of records in the SQL query result.
     * @param indexOffset Set the offset to -1 to access all columns by column names, 
     * otherwise access all columns by offsets.
     * @note If the SQL is not a style of 'select * from table_name ...' (select all 
     * columns by an asterisk), please set the offset to -1.
     */
    explicit SaleOutStorage(const Row &r, const ssize_t indexOffset = 0) noexcept;

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     */
    explicit SaleOutStorage(const Json::Value &pJson) noexcept(false);

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     * @param pMasqueradingVector The aliases of table columns.
     */
    SaleOutStorage(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false);

    SaleOutStorage() = default;
    
    void updateByJson(const Json::Value &pJson) noexcept(false);
    void updateByMasqueradedJson(const Json::Value &pJson,
                                 const std::vector<std::string> &pMasqueradingVector) noexcept(false);
    static bool validateJsonForCreation(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForCreation(const Json::Value &,
                                                const std::vector<std::string> &pMasqueradingVector,
                                                    std::string &err);
    static bool validateJsonForUpdate(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForUpdate(const Json::Value &,
                                          const std::vector<std::string> &pMasqueradingVector,
                                          std::string &err);
    static bool validJsonOfField(size_t index,
                          const std::string &fieldName,
                          const Json::Value &pJson, 
                          std::string &err, 
                          bool isForCreation);

    /**  For column id  */
    ///Get the value of the column id, returns the default value if the column is null
    const uint64_t &getValueOfId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint64_t> &getId() const noexcept;

    ///Set the value of the column id
    void setId(const uint64_t &pId) noexcept;


    /**  For column sale_order_id  */
    ///Get the value of the column sale_order_id, returns the default value if the column is null
    const uint64_t &getValueOfSaleOrderId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint64_t> &getSaleOrderId() const noexcept;

    ///Set the value of the column sale_order_id
    void setSaleOrderId(const uint64_t &pSaleOrderId) noexcept;


    /**  For column sale_order_key  */
    ///Get the value of the column sale_order_key, returns the default value if the column is null
    const std::string &getValueOfSaleOrderKey() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getSaleOrderKey() const noexcept;

    ///Set the value of the column sale_order_key
    void setSaleOrderKey(const std::string &pSaleOrderKey) noexcept;
    void setSaleOrderKey(std::string &&pSaleOrderKey) noexcept;
    void setSaleOrderKeyToNull() noexcept;


    /**  For column shop_id  */
    ///Get the value of the column shop_id, returns the default value if the column is null
    const uint64_t &getValueOfShopId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint64_t> &getShopId() const noexcept;

    ///Set the value of the column shop_id
    void setShopId(const uint64_t &pShopId) noexcept;


    /**  For column admin_id  */
    ///Get the value of the column admin_id, returns the default value if the column is null
    const uint64_t &getValueOfAdminId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint64_t> &getAdminId() const noexcept;

    ///Set the value of the column admin_id
    void setAdminId(const uint64_t &pAdminId) noexcept;


    /**  For column storage_image  */
    ///Get the value of the column storage_image, returns the default value if the column is null
    const std::string &getValueOfStorageImage() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getStorageImage() const noexcept;

    ///Set the value of the column storage_image
    void setStorageImage(const std::string &pStorageImage) noexcept;
    void setStorageImage(std::string &&pStorageImage) noexcept;
    void setStorageImageToNull() noexcept;


    /**  For column storage_date  */
    ///Get the value of the column storage_date, returns the default value if the column is null
    const ::trantor::Date &getValueOfStorageDate() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getStorageDate() const noexcept;

    ///Set the value of the column storage_date
    void setStorageDate(const ::trantor::Date &pStorageDate) noexcept;
    void setStorageDateToNull() noexcept;


    /**  For column create_time  */
    ///Get the value of the column create_time, returns the default value if the column is null
    const ::trantor::Date &getValueOfCreateTime() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getCreateTime() const noexcept;

    ///Set the value of the column create_time
    void setCreateTime(const ::trantor::Date &pCreateTime) noexcept;


    /**  For column update_time  */
    ///Get the value of the column update_time, returns the default value if the column is null
    const ::trantor::Date &getValueOfUpdateTime() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getUpdateTime() const noexcept;

    ///Set the value of the column update_time
    void setUpdateTime(const ::trantor::Date &pUpdateTime) noexcept;


    /**  For column is_delete  */
    ///Get the value of the column is_delete, returns the default value if the column is null
    const uint8_t &getValueOfIsDelete() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint8_t> &getIsDelete() const noexcept;

    ///Set the value of the column is_delete
    void setIsDelete(const uint8_t &pIsDelete) noexcept;


    /**  For column remark  */
    ///Get the value of the column remark, returns the default value if the column is null
    const std::string &getValueOfRemark() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getRemark() const noexcept;

    ///Set the value of the column remark
    void setRemark(const std::string &pRemark) noexcept;
    void setRemark(std::string &&pRemark) noexcept;
    void setRemarkToNull() noexcept;


    /**  For column storage_status  */
    ///Get the value of the column storage_status, returns the default value if the column is null
    const int8_t &getValueOfStorageStatus() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int8_t> &getStorageStatus() const noexcept;

    ///Set the value of the column storage_status
    void setStorageStatus(const int8_t &pStorageStatus) noexcept;


    /**  For column audit_remark  */
    ///Get the value of the column audit_remark, returns the default value if the column is null
    const std::string &getValueOfAuditRemark() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getAuditRemark() const noexcept;

    ///Set the value of the column audit_remark
    void setAuditRemark(const std::string &pAuditRemark) noexcept;
    void setAuditRemark(std::string &&pAuditRemark) noexcept;
    void setAuditRemarkToNull() noexcept;


    /**  For column express_key  */
    ///Get the value of the column express_key, returns the default value if the column is null
    const std::string &getValueOfExpressKey() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getExpressKey() const noexcept;

    ///Set the value of the column express_key
    void setExpressKey(const std::string &pExpressKey) noexcept;
    void setExpressKey(std::string &&pExpressKey) noexcept;
    void setExpressKeyToNull() noexcept;


    /**  For column express_status  */
    ///Get the value of the column express_status, returns the default value if the column is null
    const uint8_t &getValueOfExpressStatus() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint8_t> &getExpressStatus() const noexcept;

    ///Set the value of the column express_status
    void setExpressStatus(const uint8_t &pExpressStatus) noexcept;


    /**  For column sale_out_number  */
    ///Get the value of the column sale_out_number, returns the default value if the column is null
    const std::string &getValueOfSaleOutNumber() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getSaleOutNumber() const noexcept;

    ///Set the value of the column sale_out_number
    void setSaleOutNumber(const std::string &pSaleOutNumber) noexcept;
    void setSaleOutNumber(std::string &&pSaleOutNumber) noexcept;
    void setSaleOutNumberToNull() noexcept;


    /**  For column storage_type  */
    ///Get the value of the column storage_type, returns the default value if the column is null
    const uint8_t &getValueOfStorageType() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint8_t> &getStorageType() const noexcept;

    ///Set the value of the column storage_type
    void setStorageType(const uint8_t &pStorageType) noexcept;


    /**  For column order_return_id  */
    ///Get the value of the column order_return_id, returns the default value if the column is null
    const uint64_t &getValueOfOrderReturnId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint64_t> &getOrderReturnId() const noexcept;

    ///Set the value of the column order_return_id
    void setOrderReturnId(const uint64_t &pOrderReturnId) noexcept;


    /**  For column check_admin_id  */
    ///Get the value of the column check_admin_id, returns the default value if the column is null
    const uint64_t &getValueOfCheckAdminId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint64_t> &getCheckAdminId() const noexcept;

    ///Set the value of the column check_admin_id
    void setCheckAdminId(const uint64_t &pCheckAdminId) noexcept;
    void setCheckAdminIdToNull() noexcept;


    /**  For column storage_amount_percent  */
    ///Get the value of the column storage_amount_percent, returns the default value if the column is null
    const std::string &getValueOfStorageAmountPercent() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getStorageAmountPercent() const noexcept;

    ///Set the value of the column storage_amount_percent
    void setStorageAmountPercent(const std::string &pStorageAmountPercent) noexcept;
    void setStorageAmountPercent(std::string &&pStorageAmountPercent) noexcept;



    static size_t getColumnNumber() noexcept {  return 20;  }
    static const std::string &getColumnName(size_t index) noexcept(false);

    Json::Value toJson() const;
    Json::Value toMasqueradedJson(const std::vector<std::string> &pMasqueradingVector) const;
    /// Relationship interfaces
  private:
    friend Mapper<SaleOutStorage>;
    static const std::vector<std::string> &insertColumns() noexcept;
    void outputArgs(drogon::orm::internal::SqlBinder &binder) const;
    const std::vector<std::string> updateColumns() const;
    void updateArgs(drogon::orm::internal::SqlBinder &binder) const;
    ///For mysql or sqlite3
    void updateId(const uint64_t id);
    std::shared_ptr<uint64_t> id_;
    std::shared_ptr<uint64_t> saleOrderId_;
    std::shared_ptr<std::string> saleOrderKey_;
    std::shared_ptr<uint64_t> shopId_;
    std::shared_ptr<uint64_t> adminId_;
    std::shared_ptr<std::string> storageImage_;
    std::shared_ptr<::trantor::Date> storageDate_;
    std::shared_ptr<::trantor::Date> createTime_;
    std::shared_ptr<::trantor::Date> updateTime_;
    std::shared_ptr<uint8_t> isDelete_;
    std::shared_ptr<std::string> remark_;
    std::shared_ptr<int8_t> storageStatus_;
    std::shared_ptr<std::string> auditRemark_;
    std::shared_ptr<std::string> expressKey_;
    std::shared_ptr<uint8_t> expressStatus_;
    std::shared_ptr<std::string> saleOutNumber_;
    std::shared_ptr<uint8_t> storageType_;
    std::shared_ptr<uint64_t> orderReturnId_;
    std::shared_ptr<uint64_t> checkAdminId_;
    std::shared_ptr<std::string> storageAmountPercent_;
    struct MetaData
    {
        const std::string colName_;
        const std::string colType_;
        const std::string colDatabaseType_;
        const ssize_t colLength_;
        const bool isAutoVal_;
        const bool isPrimaryKey_;
        const bool notNull_;
    };
    static const std::vector<MetaData> metaData_;
    bool dirtyFlag_[20]={ false };
  public:
    static const std::string &sqlForFindingByPrimaryKey()
    {
        static const std::string sql="select * from " + tableName + " where id = ?";
        return sql;                   
    }

    static const std::string &sqlForDeletingByPrimaryKey()
    {
        static const std::string sql="delete from " + tableName + " where id = ?";
        return sql;                   
    }
    std::string sqlForInserting(bool &needSelection) const
    {
        std::string sql="insert into " + tableName + " (";
        size_t parametersCount = 0;
        needSelection = false;
            sql += "id,";
            ++parametersCount;
        sql += "sale_order_id,";
        ++parametersCount;
        if(!dirtyFlag_[1])
        {
            needSelection=true;
        }
        if(dirtyFlag_[2])
        {
            sql += "sale_order_key,";
            ++parametersCount;
        }
        sql += "shop_id,";
        ++parametersCount;
        if(!dirtyFlag_[3])
        {
            needSelection=true;
        }
        sql += "admin_id,";
        ++parametersCount;
        if(!dirtyFlag_[4])
        {
            needSelection=true;
        }
        if(dirtyFlag_[5])
        {
            sql += "storage_image,";
            ++parametersCount;
        }
        sql += "storage_date,";
        ++parametersCount;
        if(!dirtyFlag_[6])
        {
            needSelection=true;
        }
        sql += "create_time,";
        ++parametersCount;
        if(!dirtyFlag_[7])
        {
            needSelection=true;
        }
        sql += "update_time,";
        ++parametersCount;
        if(!dirtyFlag_[8])
        {
            needSelection=true;
        }
        sql += "is_delete,";
        ++parametersCount;
        if(!dirtyFlag_[9])
        {
            needSelection=true;
        }
        if(dirtyFlag_[10])
        {
            sql += "remark,";
            ++parametersCount;
        }
        sql += "storage_status,";
        ++parametersCount;
        if(!dirtyFlag_[11])
        {
            needSelection=true;
        }
        if(dirtyFlag_[12])
        {
            sql += "audit_remark,";
            ++parametersCount;
        }
        if(dirtyFlag_[13])
        {
            sql += "express_key,";
            ++parametersCount;
        }
        sql += "express_status,";
        ++parametersCount;
        if(!dirtyFlag_[14])
        {
            needSelection=true;
        }
        if(dirtyFlag_[15])
        {
            sql += "sale_out_number,";
            ++parametersCount;
        }
        sql += "storage_type,";
        ++parametersCount;
        if(!dirtyFlag_[16])
        {
            needSelection=true;
        }
        sql += "order_return_id,";
        ++parametersCount;
        if(!dirtyFlag_[17])
        {
            needSelection=true;
        }
        sql += "check_admin_id,";
        ++parametersCount;
        if(!dirtyFlag_[18])
        {
            needSelection=true;
        }
        sql += "storage_amount_percent,";
        ++parametersCount;
        if(!dirtyFlag_[19])
        {
            needSelection=true;
        }
        needSelection=true;
        if(parametersCount > 0)
        {
            sql[sql.length()-1]=')';
            sql += " values (";
        }
        else
            sql += ") values (";
        
        sql +="default,";
        if(dirtyFlag_[1])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[2])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[3])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[4])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[5])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[6])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[7])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[8])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[9])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[10])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[11])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[12])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[13])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[14])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[15])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[16])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[17])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[18])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[19])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(parametersCount > 0)
        {
            sql.resize(sql.length() - 1);
        }
        sql.append(1, ')');
        LOG_TRACE << sql;
        return sql;   
    }
};
} // namespace v2
} // namespace drogon_model
