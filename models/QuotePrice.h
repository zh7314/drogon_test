/**
 *
 *  QuotePrice.h
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#pragma once
#include <drogon/orm/Result.h>
#include <drogon/orm/Row.h>
#include <drogon/orm/Field.h>
#include <drogon/orm/SqlBinder.h>
#include <drogon/orm/Mapper.h>
#include <trantor/utils/Date.h>
#include <trantor/utils/Logger.h>
#include <json/json.h>
#include <string>
#include <memory>
#include <vector>
#include <tuple>
#include <stdint.h>
#include <iostream>

using namespace drogon::orm;
namespace drogon
{
namespace orm
{
class DbClient;
using DbClientPtr = std::shared_ptr<DbClient>;
}
}
namespace drogon_model
{
namespace v2 
{

class QuotePrice
{
  public:
    struct Cols
    {
        static const std::string _id;
        static const std::string _create_time;
        static const std::string _update_time;
        static const std::string _remark;
        static const std::string _is_delete;
        static const std::string _shop_id;
        static const std::string _admin_id;
        static const std::string _company_id;
        static const std::string _source;
        static const std::string _quote_price_type;
        static const std::string _period_type;
        static const std::string _service_id;
        static const std::string _delivery_method;
        static const std::string _currency_type;
        static const std::string _quote_price;
        static const std::string _lifting_water;
        static const std::string _processing_fee;
        static const std::string _sell_out_number;
        static const std::string _quote_price_info;
        static const std::string _product_id;
        static const std::string _product_category_id;
        static const std::string _product_model_id;
        static const std::string _product_brand_id;
        static const std::string _is_cancel;
        static const std::string _delivery_place;
        static const std::string _sort;
        static const std::string _province_id;
        static const std::string _city_id;
        static const std::string _area_id;
        static const std::string _address;
        static const std::string _payment_method;
        static const std::string _delivery_date;
        static const std::string _point_price_type;
        static const std::string _cash_on_delivery_days;
        static const std::string _is_show;
        static const std::string _quote_date;
    };

    const static int primaryKeyNumber;
    const static std::string tableName;
    const static bool hasPrimaryKey;
    const static std::string primaryKeyName;
    using PrimaryKeyType = uint64_t;
    const PrimaryKeyType &getPrimaryKey() const;

    /**
     * @brief constructor
     * @param r One row of records in the SQL query result.
     * @param indexOffset Set the offset to -1 to access all columns by column names, 
     * otherwise access all columns by offsets.
     * @note If the SQL is not a style of 'select * from table_name ...' (select all 
     * columns by an asterisk), please set the offset to -1.
     */
    explicit QuotePrice(const Row &r, const ssize_t indexOffset = 0) noexcept;

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     */
    explicit QuotePrice(const Json::Value &pJson) noexcept(false);

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     * @param pMasqueradingVector The aliases of table columns.
     */
    QuotePrice(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false);

    QuotePrice() = default;
    
    void updateByJson(const Json::Value &pJson) noexcept(false);
    void updateByMasqueradedJson(const Json::Value &pJson,
                                 const std::vector<std::string> &pMasqueradingVector) noexcept(false);
    static bool validateJsonForCreation(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForCreation(const Json::Value &,
                                                const std::vector<std::string> &pMasqueradingVector,
                                                    std::string &err);
    static bool validateJsonForUpdate(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForUpdate(const Json::Value &,
                                          const std::vector<std::string> &pMasqueradingVector,
                                          std::string &err);
    static bool validJsonOfField(size_t index,
                          const std::string &fieldName,
                          const Json::Value &pJson, 
                          std::string &err, 
                          bool isForCreation);

    /**  For column id  */
    ///Get the value of the column id, returns the default value if the column is null
    const uint64_t &getValueOfId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint64_t> &getId() const noexcept;

    ///Set the value of the column id
    void setId(const uint64_t &pId) noexcept;


    /**  For column create_time  */
    ///Get the value of the column create_time, returns the default value if the column is null
    const ::trantor::Date &getValueOfCreateTime() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getCreateTime() const noexcept;

    ///Set the value of the column create_time
    void setCreateTime(const ::trantor::Date &pCreateTime) noexcept;


    /**  For column update_time  */
    ///Get the value of the column update_time, returns the default value if the column is null
    const ::trantor::Date &getValueOfUpdateTime() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getUpdateTime() const noexcept;

    ///Set the value of the column update_time
    void setUpdateTime(const ::trantor::Date &pUpdateTime) noexcept;


    /**  For column remark  */
    ///Get the value of the column remark, returns the default value if the column is null
    const std::string &getValueOfRemark() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getRemark() const noexcept;

    ///Set the value of the column remark
    void setRemark(const std::string &pRemark) noexcept;
    void setRemark(std::string &&pRemark) noexcept;
    void setRemarkToNull() noexcept;


    /**  For column is_delete  */
    ///Get the value of the column is_delete, returns the default value if the column is null
    const int8_t &getValueOfIsDelete() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int8_t> &getIsDelete() const noexcept;

    ///Set the value of the column is_delete
    void setIsDelete(const int8_t &pIsDelete) noexcept;


    /**  For column shop_id  */
    ///Get the value of the column shop_id, returns the default value if the column is null
    const uint64_t &getValueOfShopId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint64_t> &getShopId() const noexcept;

    ///Set the value of the column shop_id
    void setShopId(const uint64_t &pShopId) noexcept;
    void setShopIdToNull() noexcept;


    /**  For column admin_id  */
    ///Get the value of the column admin_id, returns the default value if the column is null
    const uint64_t &getValueOfAdminId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint64_t> &getAdminId() const noexcept;

    ///Set the value of the column admin_id
    void setAdminId(const uint64_t &pAdminId) noexcept;


    /**  For column company_id  */
    ///Get the value of the column company_id, returns the default value if the column is null
    const uint64_t &getValueOfCompanyId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint64_t> &getCompanyId() const noexcept;

    ///Set the value of the column company_id
    void setCompanyId(const uint64_t &pCompanyId) noexcept;


    /**  For column source  */
    ///Get the value of the column source, returns the default value if the column is null
    const std::string &getValueOfSource() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getSource() const noexcept;

    ///Set the value of the column source
    void setSource(const std::string &pSource) noexcept;
    void setSource(std::string &&pSource) noexcept;
    void setSourceToNull() noexcept;


    /**  For column quote_price_type  */
    ///Get the value of the column quote_price_type, returns the default value if the column is null
    const uint8_t &getValueOfQuotePriceType() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint8_t> &getQuotePriceType() const noexcept;

    ///Set the value of the column quote_price_type
    void setQuotePriceType(const uint8_t &pQuotePriceType) noexcept;


    /**  For column period_type  */
    ///Get the value of the column period_type, returns the default value if the column is null
    const uint8_t &getValueOfPeriodType() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint8_t> &getPeriodType() const noexcept;

    ///Set the value of the column period_type
    void setPeriodType(const uint8_t &pPeriodType) noexcept;


    /**  For column service_id  */
    ///Get the value of the column service_id, returns the default value if the column is null
    const uint64_t &getValueOfServiceId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint64_t> &getServiceId() const noexcept;

    ///Set the value of the column service_id
    void setServiceId(const uint64_t &pServiceId) noexcept;


    /**  For column delivery_method  */
    ///Get the value of the column delivery_method, returns the default value if the column is null
    const uint8_t &getValueOfDeliveryMethod() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint8_t> &getDeliveryMethod() const noexcept;

    ///Set the value of the column delivery_method
    void setDeliveryMethod(const uint8_t &pDeliveryMethod) noexcept;


    /**  For column currency_type  */
    ///Get the value of the column currency_type, returns the default value if the column is null
    const uint8_t &getValueOfCurrencyType() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint8_t> &getCurrencyType() const noexcept;

    ///Set the value of the column currency_type
    void setCurrencyType(const uint8_t &pCurrencyType) noexcept;


    /**  For column quote_price  */
    ///Get the value of the column quote_price, returns the default value if the column is null
    const std::string &getValueOfQuotePrice() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getQuotePrice() const noexcept;

    ///Set the value of the column quote_price
    void setQuotePrice(const std::string &pQuotePrice) noexcept;
    void setQuotePrice(std::string &&pQuotePrice) noexcept;


    /**  For column lifting_water  */
    ///Get the value of the column lifting_water, returns the default value if the column is null
    const std::string &getValueOfLiftingWater() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getLiftingWater() const noexcept;

    ///Set the value of the column lifting_water
    void setLiftingWater(const std::string &pLiftingWater) noexcept;
    void setLiftingWater(std::string &&pLiftingWater) noexcept;


    /**  For column processing_fee  */
    ///Get the value of the column processing_fee, returns the default value if the column is null
    const std::string &getValueOfProcessingFee() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getProcessingFee() const noexcept;

    ///Set the value of the column processing_fee
    void setProcessingFee(const std::string &pProcessingFee) noexcept;
    void setProcessingFee(std::string &&pProcessingFee) noexcept;


    /**  For column sell_out_number  */
    ///Get the value of the column sell_out_number, returns the default value if the column is null
    const std::string &getValueOfSellOutNumber() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getSellOutNumber() const noexcept;

    ///Set the value of the column sell_out_number
    void setSellOutNumber(const std::string &pSellOutNumber) noexcept;
    void setSellOutNumber(std::string &&pSellOutNumber) noexcept;


    /**  For column quote_price_info  */
    ///Get the value of the column quote_price_info, returns the default value if the column is null
    const std::string &getValueOfQuotePriceInfo() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getQuotePriceInfo() const noexcept;

    ///Set the value of the column quote_price_info
    void setQuotePriceInfo(const std::string &pQuotePriceInfo) noexcept;
    void setQuotePriceInfo(std::string &&pQuotePriceInfo) noexcept;
    void setQuotePriceInfoToNull() noexcept;


    /**  For column product_id  */
    ///Get the value of the column product_id, returns the default value if the column is null
    const uint64_t &getValueOfProductId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint64_t> &getProductId() const noexcept;

    ///Set the value of the column product_id
    void setProductId(const uint64_t &pProductId) noexcept;


    /**  For column product_category_id  */
    ///Get the value of the column product_category_id, returns the default value if the column is null
    const uint64_t &getValueOfProductCategoryId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint64_t> &getProductCategoryId() const noexcept;

    ///Set the value of the column product_category_id
    void setProductCategoryId(const uint64_t &pProductCategoryId) noexcept;


    /**  For column product_model_id  */
    ///Get the value of the column product_model_id, returns the default value if the column is null
    const uint64_t &getValueOfProductModelId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint64_t> &getProductModelId() const noexcept;

    ///Set the value of the column product_model_id
    void setProductModelId(const uint64_t &pProductModelId) noexcept;


    /**  For column product_brand_id  */
    ///Get the value of the column product_brand_id, returns the default value if the column is null
    const uint64_t &getValueOfProductBrandId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint64_t> &getProductBrandId() const noexcept;

    ///Set the value of the column product_brand_id
    void setProductBrandId(const uint64_t &pProductBrandId) noexcept;


    /**  For column is_cancel  */
    ///Get the value of the column is_cancel, returns the default value if the column is null
    const uint8_t &getValueOfIsCancel() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint8_t> &getIsCancel() const noexcept;

    ///Set the value of the column is_cancel
    void setIsCancel(const uint8_t &pIsCancel) noexcept;


    /**  For column delivery_place  */
    ///Get the value of the column delivery_place, returns the default value if the column is null
    const std::string &getValueOfDeliveryPlace() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getDeliveryPlace() const noexcept;

    ///Set the value of the column delivery_place
    void setDeliveryPlace(const std::string &pDeliveryPlace) noexcept;
    void setDeliveryPlace(std::string &&pDeliveryPlace) noexcept;
    void setDeliveryPlaceToNull() noexcept;


    /**  For column sort  */
    ///Get the value of the column sort, returns the default value if the column is null
    const int32_t &getValueOfSort() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getSort() const noexcept;

    ///Set the value of the column sort
    void setSort(const int32_t &pSort) noexcept;


    /**  For column province_id  */
    ///Get the value of the column province_id, returns the default value if the column is null
    const int64_t &getValueOfProvinceId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int64_t> &getProvinceId() const noexcept;

    ///Set the value of the column province_id
    void setProvinceId(const int64_t &pProvinceId) noexcept;


    /**  For column city_id  */
    ///Get the value of the column city_id, returns the default value if the column is null
    const int64_t &getValueOfCityId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int64_t> &getCityId() const noexcept;

    ///Set the value of the column city_id
    void setCityId(const int64_t &pCityId) noexcept;


    /**  For column area_id  */
    ///Get the value of the column area_id, returns the default value if the column is null
    const int64_t &getValueOfAreaId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int64_t> &getAreaId() const noexcept;

    ///Set the value of the column area_id
    void setAreaId(const int64_t &pAreaId) noexcept;


    /**  For column address  */
    ///Get the value of the column address, returns the default value if the column is null
    const std::string &getValueOfAddress() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getAddress() const noexcept;

    ///Set the value of the column address
    void setAddress(const std::string &pAddress) noexcept;
    void setAddress(std::string &&pAddress) noexcept;
    void setAddressToNull() noexcept;


    /**  For column payment_method  */
    ///Get the value of the column payment_method, returns the default value if the column is null
    const int8_t &getValueOfPaymentMethod() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int8_t> &getPaymentMethod() const noexcept;

    ///Set the value of the column payment_method
    void setPaymentMethod(const int8_t &pPaymentMethod) noexcept;
    void setPaymentMethodToNull() noexcept;


    /**  For column delivery_date  */
    ///Get the value of the column delivery_date, returns the default value if the column is null
    const ::trantor::Date &getValueOfDeliveryDate() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getDeliveryDate() const noexcept;

    ///Set the value of the column delivery_date
    void setDeliveryDate(const ::trantor::Date &pDeliveryDate) noexcept;
    void setDeliveryDateToNull() noexcept;


    /**  For column point_price_type  */
    ///Get the value of the column point_price_type, returns the default value if the column is null
    const int8_t &getValueOfPointPriceType() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int8_t> &getPointPriceType() const noexcept;

    ///Set the value of the column point_price_type
    void setPointPriceType(const int8_t &pPointPriceType) noexcept;


    /**  For column cash_on_delivery_days  */
    ///Get the value of the column cash_on_delivery_days, returns the default value if the column is null
    const int8_t &getValueOfCashOnDeliveryDays() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int8_t> &getCashOnDeliveryDays() const noexcept;

    ///Set the value of the column cash_on_delivery_days
    void setCashOnDeliveryDays(const int8_t &pCashOnDeliveryDays) noexcept;


    /**  For column is_show  */
    ///Get the value of the column is_show, returns the default value if the column is null
    const uint8_t &getValueOfIsShow() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint8_t> &getIsShow() const noexcept;

    ///Set the value of the column is_show
    void setIsShow(const uint8_t &pIsShow) noexcept;


    /**  For column quote_date  */
    ///Get the value of the column quote_date, returns the default value if the column is null
    const ::trantor::Date &getValueOfQuoteDate() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getQuoteDate() const noexcept;

    ///Set the value of the column quote_date
    void setQuoteDate(const ::trantor::Date &pQuoteDate) noexcept;
    void setQuoteDateToNull() noexcept;



    static size_t getColumnNumber() noexcept {  return 36;  }
    static const std::string &getColumnName(size_t index) noexcept(false);

    Json::Value toJson() const;
    Json::Value toMasqueradedJson(const std::vector<std::string> &pMasqueradingVector) const;
    /// Relationship interfaces
  private:
    friend Mapper<QuotePrice>;
    static const std::vector<std::string> &insertColumns() noexcept;
    void outputArgs(drogon::orm::internal::SqlBinder &binder) const;
    const std::vector<std::string> updateColumns() const;
    void updateArgs(drogon::orm::internal::SqlBinder &binder) const;
    ///For mysql or sqlite3
    void updateId(const uint64_t id);
    std::shared_ptr<uint64_t> id_;
    std::shared_ptr<::trantor::Date> createTime_;
    std::shared_ptr<::trantor::Date> updateTime_;
    std::shared_ptr<std::string> remark_;
    std::shared_ptr<int8_t> isDelete_;
    std::shared_ptr<uint64_t> shopId_;
    std::shared_ptr<uint64_t> adminId_;
    std::shared_ptr<uint64_t> companyId_;
    std::shared_ptr<std::string> source_;
    std::shared_ptr<uint8_t> quotePriceType_;
    std::shared_ptr<uint8_t> periodType_;
    std::shared_ptr<uint64_t> serviceId_;
    std::shared_ptr<uint8_t> deliveryMethod_;
    std::shared_ptr<uint8_t> currencyType_;
    std::shared_ptr<std::string> quotePrice_;
    std::shared_ptr<std::string> liftingWater_;
    std::shared_ptr<std::string> processingFee_;
    std::shared_ptr<std::string> sellOutNumber_;
    std::shared_ptr<std::string> quotePriceInfo_;
    std::shared_ptr<uint64_t> productId_;
    std::shared_ptr<uint64_t> productCategoryId_;
    std::shared_ptr<uint64_t> productModelId_;
    std::shared_ptr<uint64_t> productBrandId_;
    std::shared_ptr<uint8_t> isCancel_;
    std::shared_ptr<std::string> deliveryPlace_;
    std::shared_ptr<int32_t> sort_;
    std::shared_ptr<int64_t> provinceId_;
    std::shared_ptr<int64_t> cityId_;
    std::shared_ptr<int64_t> areaId_;
    std::shared_ptr<std::string> address_;
    std::shared_ptr<int8_t> paymentMethod_;
    std::shared_ptr<::trantor::Date> deliveryDate_;
    std::shared_ptr<int8_t> pointPriceType_;
    std::shared_ptr<int8_t> cashOnDeliveryDays_;
    std::shared_ptr<uint8_t> isShow_;
    std::shared_ptr<::trantor::Date> quoteDate_;
    struct MetaData
    {
        const std::string colName_;
        const std::string colType_;
        const std::string colDatabaseType_;
        const ssize_t colLength_;
        const bool isAutoVal_;
        const bool isPrimaryKey_;
        const bool notNull_;
    };
    static const std::vector<MetaData> metaData_;
    bool dirtyFlag_[36]={ false };
  public:
    static const std::string &sqlForFindingByPrimaryKey()
    {
        static const std::string sql="select * from " + tableName + " where id = ?";
        return sql;                   
    }

    static const std::string &sqlForDeletingByPrimaryKey()
    {
        static const std::string sql="delete from " + tableName + " where id = ?";
        return sql;                   
    }
    std::string sqlForInserting(bool &needSelection) const
    {
        std::string sql="insert into " + tableName + " (";
        size_t parametersCount = 0;
        needSelection = false;
            sql += "id,";
            ++parametersCount;
        sql += "create_time,";
        ++parametersCount;
        if(!dirtyFlag_[1])
        {
            needSelection=true;
        }
        sql += "update_time,";
        ++parametersCount;
        if(!dirtyFlag_[2])
        {
            needSelection=true;
        }
        if(dirtyFlag_[3])
        {
            sql += "remark,";
            ++parametersCount;
        }
        sql += "is_delete,";
        ++parametersCount;
        if(!dirtyFlag_[4])
        {
            needSelection=true;
        }
        sql += "shop_id,";
        ++parametersCount;
        if(!dirtyFlag_[5])
        {
            needSelection=true;
        }
        sql += "admin_id,";
        ++parametersCount;
        if(!dirtyFlag_[6])
        {
            needSelection=true;
        }
        sql += "company_id,";
        ++parametersCount;
        if(!dirtyFlag_[7])
        {
            needSelection=true;
        }
        if(dirtyFlag_[8])
        {
            sql += "source,";
            ++parametersCount;
        }
        sql += "quote_price_type,";
        ++parametersCount;
        if(!dirtyFlag_[9])
        {
            needSelection=true;
        }
        sql += "period_type,";
        ++parametersCount;
        if(!dirtyFlag_[10])
        {
            needSelection=true;
        }
        sql += "service_id,";
        ++parametersCount;
        if(!dirtyFlag_[11])
        {
            needSelection=true;
        }
        sql += "delivery_method,";
        ++parametersCount;
        if(!dirtyFlag_[12])
        {
            needSelection=true;
        }
        sql += "currency_type,";
        ++parametersCount;
        if(!dirtyFlag_[13])
        {
            needSelection=true;
        }
        sql += "quote_price,";
        ++parametersCount;
        if(!dirtyFlag_[14])
        {
            needSelection=true;
        }
        sql += "lifting_water,";
        ++parametersCount;
        if(!dirtyFlag_[15])
        {
            needSelection=true;
        }
        sql += "processing_fee,";
        ++parametersCount;
        if(!dirtyFlag_[16])
        {
            needSelection=true;
        }
        sql += "sell_out_number,";
        ++parametersCount;
        if(!dirtyFlag_[17])
        {
            needSelection=true;
        }
        if(dirtyFlag_[18])
        {
            sql += "quote_price_info,";
            ++parametersCount;
        }
        sql += "product_id,";
        ++parametersCount;
        if(!dirtyFlag_[19])
        {
            needSelection=true;
        }
        sql += "product_category_id,";
        ++parametersCount;
        if(!dirtyFlag_[20])
        {
            needSelection=true;
        }
        sql += "product_model_id,";
        ++parametersCount;
        if(!dirtyFlag_[21])
        {
            needSelection=true;
        }
        sql += "product_brand_id,";
        ++parametersCount;
        if(!dirtyFlag_[22])
        {
            needSelection=true;
        }
        sql += "is_cancel,";
        ++parametersCount;
        if(!dirtyFlag_[23])
        {
            needSelection=true;
        }
        if(dirtyFlag_[24])
        {
            sql += "delivery_place,";
            ++parametersCount;
        }
        sql += "sort,";
        ++parametersCount;
        if(!dirtyFlag_[25])
        {
            needSelection=true;
        }
        sql += "province_id,";
        ++parametersCount;
        if(!dirtyFlag_[26])
        {
            needSelection=true;
        }
        sql += "city_id,";
        ++parametersCount;
        if(!dirtyFlag_[27])
        {
            needSelection=true;
        }
        sql += "area_id,";
        ++parametersCount;
        if(!dirtyFlag_[28])
        {
            needSelection=true;
        }
        if(dirtyFlag_[29])
        {
            sql += "address,";
            ++parametersCount;
        }
        sql += "payment_method,";
        ++parametersCount;
        if(!dirtyFlag_[30])
        {
            needSelection=true;
        }
        if(dirtyFlag_[31])
        {
            sql += "delivery_date,";
            ++parametersCount;
        }
        sql += "point_price_type,";
        ++parametersCount;
        if(!dirtyFlag_[32])
        {
            needSelection=true;
        }
        sql += "cash_on_delivery_days,";
        ++parametersCount;
        if(!dirtyFlag_[33])
        {
            needSelection=true;
        }
        sql += "is_show,";
        ++parametersCount;
        if(!dirtyFlag_[34])
        {
            needSelection=true;
        }
        if(dirtyFlag_[35])
        {
            sql += "quote_date,";
            ++parametersCount;
        }
        needSelection=true;
        if(parametersCount > 0)
        {
            sql[sql.length()-1]=')';
            sql += " values (";
        }
        else
            sql += ") values (";
        
        sql +="default,";
        if(dirtyFlag_[1])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[2])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[3])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[4])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[5])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[6])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[7])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[8])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[9])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[10])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[11])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[12])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[13])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[14])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[15])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[16])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[17])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[18])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[19])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[20])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[21])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[22])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[23])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[24])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[25])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[26])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[27])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[28])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[29])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[30])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[31])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[32])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[33])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[34])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[35])
        {
            sql.append("?,");

        } 
        if(parametersCount > 0)
        {
            sql.resize(sql.length() - 1);
        }
        sql.append(1, ')');
        LOG_TRACE << sql;
        return sql;   
    }
};
} // namespace v2
} // namespace drogon_model
