/**
 *
 *  SaleOutStorage.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "SaleOutStorage.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::v2;

const std::string SaleOutStorage::Cols::_id = "id";
const std::string SaleOutStorage::Cols::_sale_order_id = "sale_order_id";
const std::string SaleOutStorage::Cols::_sale_order_key = "sale_order_key";
const std::string SaleOutStorage::Cols::_shop_id = "shop_id";
const std::string SaleOutStorage::Cols::_admin_id = "admin_id";
const std::string SaleOutStorage::Cols::_storage_image = "storage_image";
const std::string SaleOutStorage::Cols::_storage_date = "storage_date";
const std::string SaleOutStorage::Cols::_create_time = "create_time";
const std::string SaleOutStorage::Cols::_update_time = "update_time";
const std::string SaleOutStorage::Cols::_is_delete = "is_delete";
const std::string SaleOutStorage::Cols::_remark = "remark";
const std::string SaleOutStorage::Cols::_storage_status = "storage_status";
const std::string SaleOutStorage::Cols::_audit_remark = "audit_remark";
const std::string SaleOutStorage::Cols::_express_key = "express_key";
const std::string SaleOutStorage::Cols::_express_status = "express_status";
const std::string SaleOutStorage::Cols::_sale_out_number = "sale_out_number";
const std::string SaleOutStorage::Cols::_storage_type = "storage_type";
const std::string SaleOutStorage::Cols::_order_return_id = "order_return_id";
const std::string SaleOutStorage::Cols::_check_admin_id = "check_admin_id";
const std::string SaleOutStorage::Cols::_storage_amount_percent = "storage_amount_percent";
const std::string SaleOutStorage::primaryKeyName = "id";
const bool SaleOutStorage::hasPrimaryKey = true;
const std::string SaleOutStorage::tableName = "sale_out_storage";

const std::vector<typename SaleOutStorage::MetaData> SaleOutStorage::metaData_={
{"id","uint64_t","bigint(20) unsigned",8,1,1,1},
{"sale_order_id","uint64_t","bigint(20) unsigned",8,0,0,1},
{"sale_order_key","std::string","varchar(20)",20,0,0,0},
{"shop_id","uint64_t","bigint(20) unsigned",8,0,0,1},
{"admin_id","uint64_t","bigint(20) unsigned",8,0,0,1},
{"storage_image","std::string","text",0,0,0,0},
{"storage_date","::trantor::Date","date",0,0,0,0},
{"create_time","::trantor::Date","datetime",0,0,0,1},
{"update_time","::trantor::Date","datetime",0,0,0,1},
{"is_delete","uint8_t","tinyint(1) unsigned",1,0,0,1},
{"remark","std::string","varchar(255)",255,0,0,0},
{"storage_status","int8_t","tinyint(1)",1,0,0,1},
{"audit_remark","std::string","varchar(255)",255,0,0,0},
{"express_key","std::string","varchar(50)",50,0,0,0},
{"express_status","uint8_t","tinyint(1) unsigned",1,0,0,1},
{"sale_out_number","std::string","varchar(50)",50,0,0,0},
{"storage_type","uint8_t","tinyint(1) unsigned",1,0,0,1},
{"order_return_id","uint64_t","bigint(20) unsigned",8,0,0,1},
{"check_admin_id","uint64_t","bigint(20) unsigned",8,0,0,0},
{"storage_amount_percent","std::string","decimal(32,2)",0,0,0,1}
};
const std::string &SaleOutStorage::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
SaleOutStorage::SaleOutStorage(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<uint64_t>(r["id"].as<uint64_t>());
        }
        if(!r["sale_order_id"].isNull())
        {
            saleOrderId_=std::make_shared<uint64_t>(r["sale_order_id"].as<uint64_t>());
        }
        if(!r["sale_order_key"].isNull())
        {
            saleOrderKey_=std::make_shared<std::string>(r["sale_order_key"].as<std::string>());
        }
        if(!r["shop_id"].isNull())
        {
            shopId_=std::make_shared<uint64_t>(r["shop_id"].as<uint64_t>());
        }
        if(!r["admin_id"].isNull())
        {
            adminId_=std::make_shared<uint64_t>(r["admin_id"].as<uint64_t>());
        }
        if(!r["storage_image"].isNull())
        {
            storageImage_=std::make_shared<std::string>(r["storage_image"].as<std::string>());
        }
        if(!r["storage_date"].isNull())
        {
            auto daysStr = r["storage_date"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            storageDate_=std::make_shared<::trantor::Date>(t*1000000);
        }
        if(!r["create_time"].isNull())
        {
            auto timeStr = r["create_time"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        if(!r["update_time"].isNull())
        {
            auto timeStr = r["update_time"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        if(!r["is_delete"].isNull())
        {
            isDelete_=std::make_shared<uint8_t>(r["is_delete"].as<uint8_t>());
        }
        if(!r["remark"].isNull())
        {
            remark_=std::make_shared<std::string>(r["remark"].as<std::string>());
        }
        if(!r["storage_status"].isNull())
        {
            storageStatus_=std::make_shared<int8_t>(r["storage_status"].as<int8_t>());
        }
        if(!r["audit_remark"].isNull())
        {
            auditRemark_=std::make_shared<std::string>(r["audit_remark"].as<std::string>());
        }
        if(!r["express_key"].isNull())
        {
            expressKey_=std::make_shared<std::string>(r["express_key"].as<std::string>());
        }
        if(!r["express_status"].isNull())
        {
            expressStatus_=std::make_shared<uint8_t>(r["express_status"].as<uint8_t>());
        }
        if(!r["sale_out_number"].isNull())
        {
            saleOutNumber_=std::make_shared<std::string>(r["sale_out_number"].as<std::string>());
        }
        if(!r["storage_type"].isNull())
        {
            storageType_=std::make_shared<uint8_t>(r["storage_type"].as<uint8_t>());
        }
        if(!r["order_return_id"].isNull())
        {
            orderReturnId_=std::make_shared<uint64_t>(r["order_return_id"].as<uint64_t>());
        }
        if(!r["check_admin_id"].isNull())
        {
            checkAdminId_=std::make_shared<uint64_t>(r["check_admin_id"].as<uint64_t>());
        }
        if(!r["storage_amount_percent"].isNull())
        {
            storageAmountPercent_=std::make_shared<std::string>(r["storage_amount_percent"].as<std::string>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 20 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            saleOrderId_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            saleOrderKey_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            shopId_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            adminId_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            storageImage_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            auto daysStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            storageDate_=std::make_shared<::trantor::Date>(t*1000000);
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        index = offset + 8;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        index = offset + 9;
        if(!r[index].isNull())
        {
            isDelete_=std::make_shared<uint8_t>(r[index].as<uint8_t>());
        }
        index = offset + 10;
        if(!r[index].isNull())
        {
            remark_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 11;
        if(!r[index].isNull())
        {
            storageStatus_=std::make_shared<int8_t>(r[index].as<int8_t>());
        }
        index = offset + 12;
        if(!r[index].isNull())
        {
            auditRemark_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 13;
        if(!r[index].isNull())
        {
            expressKey_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 14;
        if(!r[index].isNull())
        {
            expressStatus_=std::make_shared<uint8_t>(r[index].as<uint8_t>());
        }
        index = offset + 15;
        if(!r[index].isNull())
        {
            saleOutNumber_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 16;
        if(!r[index].isNull())
        {
            storageType_=std::make_shared<uint8_t>(r[index].as<uint8_t>());
        }
        index = offset + 17;
        if(!r[index].isNull())
        {
            orderReturnId_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 18;
        if(!r[index].isNull())
        {
            checkAdminId_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 19;
        if(!r[index].isNull())
        {
            storageAmountPercent_=std::make_shared<std::string>(r[index].as<std::string>());
        }
    }

}

SaleOutStorage::SaleOutStorage(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 20)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            saleOrderId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[1]].asUInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            saleOrderKey_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            shopId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[3]].asUInt64());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            adminId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[4]].asUInt64());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            storageImage_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            auto daysStr = pJson[pMasqueradingVector[6]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            storageDate_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[7]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[8]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            isDelete_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[9]].asUInt64());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            remark_=std::make_shared<std::string>(pJson[pMasqueradingVector[10]].asString());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            storageStatus_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[11]].asInt64());
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            auditRemark_=std::make_shared<std::string>(pJson[pMasqueradingVector[12]].asString());
        }
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        dirtyFlag_[13] = true;
        if(!pJson[pMasqueradingVector[13]].isNull())
        {
            expressKey_=std::make_shared<std::string>(pJson[pMasqueradingVector[13]].asString());
        }
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        dirtyFlag_[14] = true;
        if(!pJson[pMasqueradingVector[14]].isNull())
        {
            expressStatus_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[14]].asUInt64());
        }
    }
    if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
    {
        dirtyFlag_[15] = true;
        if(!pJson[pMasqueradingVector[15]].isNull())
        {
            saleOutNumber_=std::make_shared<std::string>(pJson[pMasqueradingVector[15]].asString());
        }
    }
    if(!pMasqueradingVector[16].empty() && pJson.isMember(pMasqueradingVector[16]))
    {
        dirtyFlag_[16] = true;
        if(!pJson[pMasqueradingVector[16]].isNull())
        {
            storageType_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[16]].asUInt64());
        }
    }
    if(!pMasqueradingVector[17].empty() && pJson.isMember(pMasqueradingVector[17]))
    {
        dirtyFlag_[17] = true;
        if(!pJson[pMasqueradingVector[17]].isNull())
        {
            orderReturnId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[17]].asUInt64());
        }
    }
    if(!pMasqueradingVector[18].empty() && pJson.isMember(pMasqueradingVector[18]))
    {
        dirtyFlag_[18] = true;
        if(!pJson[pMasqueradingVector[18]].isNull())
        {
            checkAdminId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[18]].asUInt64());
        }
    }
    if(!pMasqueradingVector[19].empty() && pJson.isMember(pMasqueradingVector[19]))
    {
        dirtyFlag_[19] = true;
        if(!pJson[pMasqueradingVector[19]].isNull())
        {
            storageAmountPercent_=std::make_shared<std::string>(pJson[pMasqueradingVector[19]].asString());
        }
    }
}

SaleOutStorage::SaleOutStorage(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson["id"].asUInt64());
        }
    }
    if(pJson.isMember("sale_order_id"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["sale_order_id"].isNull())
        {
            saleOrderId_=std::make_shared<uint64_t>((uint64_t)pJson["sale_order_id"].asUInt64());
        }
    }
    if(pJson.isMember("sale_order_key"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["sale_order_key"].isNull())
        {
            saleOrderKey_=std::make_shared<std::string>(pJson["sale_order_key"].asString());
        }
    }
    if(pJson.isMember("shop_id"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["shop_id"].isNull())
        {
            shopId_=std::make_shared<uint64_t>((uint64_t)pJson["shop_id"].asUInt64());
        }
    }
    if(pJson.isMember("admin_id"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["admin_id"].isNull())
        {
            adminId_=std::make_shared<uint64_t>((uint64_t)pJson["admin_id"].asUInt64());
        }
    }
    if(pJson.isMember("storage_image"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["storage_image"].isNull())
        {
            storageImage_=std::make_shared<std::string>(pJson["storage_image"].asString());
        }
    }
    if(pJson.isMember("storage_date"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["storage_date"].isNull())
        {
            auto daysStr = pJson["storage_date"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            storageDate_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    if(pJson.isMember("create_time"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["create_time"].isNull())
        {
            auto timeStr = pJson["create_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("update_time"))
    {
        dirtyFlag_[8]=true;
        if(!pJson["update_time"].isNull())
        {
            auto timeStr = pJson["update_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("is_delete"))
    {
        dirtyFlag_[9]=true;
        if(!pJson["is_delete"].isNull())
        {
            isDelete_=std::make_shared<uint8_t>((uint8_t)pJson["is_delete"].asUInt64());
        }
    }
    if(pJson.isMember("remark"))
    {
        dirtyFlag_[10]=true;
        if(!pJson["remark"].isNull())
        {
            remark_=std::make_shared<std::string>(pJson["remark"].asString());
        }
    }
    if(pJson.isMember("storage_status"))
    {
        dirtyFlag_[11]=true;
        if(!pJson["storage_status"].isNull())
        {
            storageStatus_=std::make_shared<int8_t>((int8_t)pJson["storage_status"].asInt64());
        }
    }
    if(pJson.isMember("audit_remark"))
    {
        dirtyFlag_[12]=true;
        if(!pJson["audit_remark"].isNull())
        {
            auditRemark_=std::make_shared<std::string>(pJson["audit_remark"].asString());
        }
    }
    if(pJson.isMember("express_key"))
    {
        dirtyFlag_[13]=true;
        if(!pJson["express_key"].isNull())
        {
            expressKey_=std::make_shared<std::string>(pJson["express_key"].asString());
        }
    }
    if(pJson.isMember("express_status"))
    {
        dirtyFlag_[14]=true;
        if(!pJson["express_status"].isNull())
        {
            expressStatus_=std::make_shared<uint8_t>((uint8_t)pJson["express_status"].asUInt64());
        }
    }
    if(pJson.isMember("sale_out_number"))
    {
        dirtyFlag_[15]=true;
        if(!pJson["sale_out_number"].isNull())
        {
            saleOutNumber_=std::make_shared<std::string>(pJson["sale_out_number"].asString());
        }
    }
    if(pJson.isMember("storage_type"))
    {
        dirtyFlag_[16]=true;
        if(!pJson["storage_type"].isNull())
        {
            storageType_=std::make_shared<uint8_t>((uint8_t)pJson["storage_type"].asUInt64());
        }
    }
    if(pJson.isMember("order_return_id"))
    {
        dirtyFlag_[17]=true;
        if(!pJson["order_return_id"].isNull())
        {
            orderReturnId_=std::make_shared<uint64_t>((uint64_t)pJson["order_return_id"].asUInt64());
        }
    }
    if(pJson.isMember("check_admin_id"))
    {
        dirtyFlag_[18]=true;
        if(!pJson["check_admin_id"].isNull())
        {
            checkAdminId_=std::make_shared<uint64_t>((uint64_t)pJson["check_admin_id"].asUInt64());
        }
    }
    if(pJson.isMember("storage_amount_percent"))
    {
        dirtyFlag_[19]=true;
        if(!pJson["storage_amount_percent"].isNull())
        {
            storageAmountPercent_=std::make_shared<std::string>(pJson["storage_amount_percent"].asString());
        }
    }
}

void SaleOutStorage::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 20)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            saleOrderId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[1]].asUInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            saleOrderKey_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            shopId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[3]].asUInt64());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            adminId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[4]].asUInt64());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            storageImage_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            auto daysStr = pJson[pMasqueradingVector[6]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            storageDate_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[7]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[8]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            isDelete_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[9]].asUInt64());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            remark_=std::make_shared<std::string>(pJson[pMasqueradingVector[10]].asString());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            storageStatus_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[11]].asInt64());
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            auditRemark_=std::make_shared<std::string>(pJson[pMasqueradingVector[12]].asString());
        }
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        dirtyFlag_[13] = true;
        if(!pJson[pMasqueradingVector[13]].isNull())
        {
            expressKey_=std::make_shared<std::string>(pJson[pMasqueradingVector[13]].asString());
        }
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        dirtyFlag_[14] = true;
        if(!pJson[pMasqueradingVector[14]].isNull())
        {
            expressStatus_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[14]].asUInt64());
        }
    }
    if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
    {
        dirtyFlag_[15] = true;
        if(!pJson[pMasqueradingVector[15]].isNull())
        {
            saleOutNumber_=std::make_shared<std::string>(pJson[pMasqueradingVector[15]].asString());
        }
    }
    if(!pMasqueradingVector[16].empty() && pJson.isMember(pMasqueradingVector[16]))
    {
        dirtyFlag_[16] = true;
        if(!pJson[pMasqueradingVector[16]].isNull())
        {
            storageType_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[16]].asUInt64());
        }
    }
    if(!pMasqueradingVector[17].empty() && pJson.isMember(pMasqueradingVector[17]))
    {
        dirtyFlag_[17] = true;
        if(!pJson[pMasqueradingVector[17]].isNull())
        {
            orderReturnId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[17]].asUInt64());
        }
    }
    if(!pMasqueradingVector[18].empty() && pJson.isMember(pMasqueradingVector[18]))
    {
        dirtyFlag_[18] = true;
        if(!pJson[pMasqueradingVector[18]].isNull())
        {
            checkAdminId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[18]].asUInt64());
        }
    }
    if(!pMasqueradingVector[19].empty() && pJson.isMember(pMasqueradingVector[19]))
    {
        dirtyFlag_[19] = true;
        if(!pJson[pMasqueradingVector[19]].isNull())
        {
            storageAmountPercent_=std::make_shared<std::string>(pJson[pMasqueradingVector[19]].asString());
        }
    }
}
                                                                    
void SaleOutStorage::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson["id"].asUInt64());
        }
    }
    if(pJson.isMember("sale_order_id"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["sale_order_id"].isNull())
        {
            saleOrderId_=std::make_shared<uint64_t>((uint64_t)pJson["sale_order_id"].asUInt64());
        }
    }
    if(pJson.isMember("sale_order_key"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["sale_order_key"].isNull())
        {
            saleOrderKey_=std::make_shared<std::string>(pJson["sale_order_key"].asString());
        }
    }
    if(pJson.isMember("shop_id"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["shop_id"].isNull())
        {
            shopId_=std::make_shared<uint64_t>((uint64_t)pJson["shop_id"].asUInt64());
        }
    }
    if(pJson.isMember("admin_id"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["admin_id"].isNull())
        {
            adminId_=std::make_shared<uint64_t>((uint64_t)pJson["admin_id"].asUInt64());
        }
    }
    if(pJson.isMember("storage_image"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["storage_image"].isNull())
        {
            storageImage_=std::make_shared<std::string>(pJson["storage_image"].asString());
        }
    }
    if(pJson.isMember("storage_date"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["storage_date"].isNull())
        {
            auto daysStr = pJson["storage_date"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            storageDate_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    if(pJson.isMember("create_time"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["create_time"].isNull())
        {
            auto timeStr = pJson["create_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("update_time"))
    {
        dirtyFlag_[8] = true;
        if(!pJson["update_time"].isNull())
        {
            auto timeStr = pJson["update_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("is_delete"))
    {
        dirtyFlag_[9] = true;
        if(!pJson["is_delete"].isNull())
        {
            isDelete_=std::make_shared<uint8_t>((uint8_t)pJson["is_delete"].asUInt64());
        }
    }
    if(pJson.isMember("remark"))
    {
        dirtyFlag_[10] = true;
        if(!pJson["remark"].isNull())
        {
            remark_=std::make_shared<std::string>(pJson["remark"].asString());
        }
    }
    if(pJson.isMember("storage_status"))
    {
        dirtyFlag_[11] = true;
        if(!pJson["storage_status"].isNull())
        {
            storageStatus_=std::make_shared<int8_t>((int8_t)pJson["storage_status"].asInt64());
        }
    }
    if(pJson.isMember("audit_remark"))
    {
        dirtyFlag_[12] = true;
        if(!pJson["audit_remark"].isNull())
        {
            auditRemark_=std::make_shared<std::string>(pJson["audit_remark"].asString());
        }
    }
    if(pJson.isMember("express_key"))
    {
        dirtyFlag_[13] = true;
        if(!pJson["express_key"].isNull())
        {
            expressKey_=std::make_shared<std::string>(pJson["express_key"].asString());
        }
    }
    if(pJson.isMember("express_status"))
    {
        dirtyFlag_[14] = true;
        if(!pJson["express_status"].isNull())
        {
            expressStatus_=std::make_shared<uint8_t>((uint8_t)pJson["express_status"].asUInt64());
        }
    }
    if(pJson.isMember("sale_out_number"))
    {
        dirtyFlag_[15] = true;
        if(!pJson["sale_out_number"].isNull())
        {
            saleOutNumber_=std::make_shared<std::string>(pJson["sale_out_number"].asString());
        }
    }
    if(pJson.isMember("storage_type"))
    {
        dirtyFlag_[16] = true;
        if(!pJson["storage_type"].isNull())
        {
            storageType_=std::make_shared<uint8_t>((uint8_t)pJson["storage_type"].asUInt64());
        }
    }
    if(pJson.isMember("order_return_id"))
    {
        dirtyFlag_[17] = true;
        if(!pJson["order_return_id"].isNull())
        {
            orderReturnId_=std::make_shared<uint64_t>((uint64_t)pJson["order_return_id"].asUInt64());
        }
    }
    if(pJson.isMember("check_admin_id"))
    {
        dirtyFlag_[18] = true;
        if(!pJson["check_admin_id"].isNull())
        {
            checkAdminId_=std::make_shared<uint64_t>((uint64_t)pJson["check_admin_id"].asUInt64());
        }
    }
    if(pJson.isMember("storage_amount_percent"))
    {
        dirtyFlag_[19] = true;
        if(!pJson["storage_amount_percent"].isNull())
        {
            storageAmountPercent_=std::make_shared<std::string>(pJson["storage_amount_percent"].asString());
        }
    }
}

const uint64_t &SaleOutStorage::getValueOfId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &SaleOutStorage::getId() const noexcept
{
    return id_;
}
void SaleOutStorage::setId(const uint64_t &pId) noexcept
{
    id_ = std::make_shared<uint64_t>(pId);
    dirtyFlag_[0] = true;
}



const typename SaleOutStorage::PrimaryKeyType & SaleOutStorage::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const uint64_t &SaleOutStorage::getValueOfSaleOrderId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(saleOrderId_)
        return *saleOrderId_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &SaleOutStorage::getSaleOrderId() const noexcept
{
    return saleOrderId_;
}
void SaleOutStorage::setSaleOrderId(const uint64_t &pSaleOrderId) noexcept
{
    saleOrderId_ = std::make_shared<uint64_t>(pSaleOrderId);
    dirtyFlag_[1] = true;
}




const std::string &SaleOutStorage::getValueOfSaleOrderKey() const noexcept
{
    const static std::string defaultValue = std::string();
    if(saleOrderKey_)
        return *saleOrderKey_;
    return defaultValue;
}
const std::shared_ptr<std::string> &SaleOutStorage::getSaleOrderKey() const noexcept
{
    return saleOrderKey_;
}
void SaleOutStorage::setSaleOrderKey(const std::string &pSaleOrderKey) noexcept
{
    saleOrderKey_ = std::make_shared<std::string>(pSaleOrderKey);
    dirtyFlag_[2] = true;
}
void SaleOutStorage::setSaleOrderKey(std::string &&pSaleOrderKey) noexcept
{
    saleOrderKey_ = std::make_shared<std::string>(std::move(pSaleOrderKey));
    dirtyFlag_[2] = true;
}


void SaleOutStorage::setSaleOrderKeyToNull() noexcept
{
    saleOrderKey_.reset();
    dirtyFlag_[2] = true;
}


const uint64_t &SaleOutStorage::getValueOfShopId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(shopId_)
        return *shopId_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &SaleOutStorage::getShopId() const noexcept
{
    return shopId_;
}
void SaleOutStorage::setShopId(const uint64_t &pShopId) noexcept
{
    shopId_ = std::make_shared<uint64_t>(pShopId);
    dirtyFlag_[3] = true;
}




const uint64_t &SaleOutStorage::getValueOfAdminId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(adminId_)
        return *adminId_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &SaleOutStorage::getAdminId() const noexcept
{
    return adminId_;
}
void SaleOutStorage::setAdminId(const uint64_t &pAdminId) noexcept
{
    adminId_ = std::make_shared<uint64_t>(pAdminId);
    dirtyFlag_[4] = true;
}




const std::string &SaleOutStorage::getValueOfStorageImage() const noexcept
{
    const static std::string defaultValue = std::string();
    if(storageImage_)
        return *storageImage_;
    return defaultValue;
}
const std::shared_ptr<std::string> &SaleOutStorage::getStorageImage() const noexcept
{
    return storageImage_;
}
void SaleOutStorage::setStorageImage(const std::string &pStorageImage) noexcept
{
    storageImage_ = std::make_shared<std::string>(pStorageImage);
    dirtyFlag_[5] = true;
}
void SaleOutStorage::setStorageImage(std::string &&pStorageImage) noexcept
{
    storageImage_ = std::make_shared<std::string>(std::move(pStorageImage));
    dirtyFlag_[5] = true;
}


void SaleOutStorage::setStorageImageToNull() noexcept
{
    storageImage_.reset();
    dirtyFlag_[5] = true;
}


const ::trantor::Date &SaleOutStorage::getValueOfStorageDate() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(storageDate_)
        return *storageDate_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &SaleOutStorage::getStorageDate() const noexcept
{
    return storageDate_;
}
void SaleOutStorage::setStorageDate(const ::trantor::Date &pStorageDate) noexcept
{
    storageDate_ = std::make_shared<::trantor::Date>(pStorageDate.roundDay());
    dirtyFlag_[6] = true;
}


void SaleOutStorage::setStorageDateToNull() noexcept
{
    storageDate_.reset();
    dirtyFlag_[6] = true;
}


const ::trantor::Date &SaleOutStorage::getValueOfCreateTime() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(createTime_)
        return *createTime_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &SaleOutStorage::getCreateTime() const noexcept
{
    return createTime_;
}
void SaleOutStorage::setCreateTime(const ::trantor::Date &pCreateTime) noexcept
{
    createTime_ = std::make_shared<::trantor::Date>(pCreateTime);
    dirtyFlag_[7] = true;
}




const ::trantor::Date &SaleOutStorage::getValueOfUpdateTime() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(updateTime_)
        return *updateTime_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &SaleOutStorage::getUpdateTime() const noexcept
{
    return updateTime_;
}
void SaleOutStorage::setUpdateTime(const ::trantor::Date &pUpdateTime) noexcept
{
    updateTime_ = std::make_shared<::trantor::Date>(pUpdateTime);
    dirtyFlag_[8] = true;
}




const uint8_t &SaleOutStorage::getValueOfIsDelete() const noexcept
{
    const static uint8_t defaultValue = uint8_t();
    if(isDelete_)
        return *isDelete_;
    return defaultValue;
}
const std::shared_ptr<uint8_t> &SaleOutStorage::getIsDelete() const noexcept
{
    return isDelete_;
}
void SaleOutStorage::setIsDelete(const uint8_t &pIsDelete) noexcept
{
    isDelete_ = std::make_shared<uint8_t>(pIsDelete);
    dirtyFlag_[9] = true;
}




const std::string &SaleOutStorage::getValueOfRemark() const noexcept
{
    const static std::string defaultValue = std::string();
    if(remark_)
        return *remark_;
    return defaultValue;
}
const std::shared_ptr<std::string> &SaleOutStorage::getRemark() const noexcept
{
    return remark_;
}
void SaleOutStorage::setRemark(const std::string &pRemark) noexcept
{
    remark_ = std::make_shared<std::string>(pRemark);
    dirtyFlag_[10] = true;
}
void SaleOutStorage::setRemark(std::string &&pRemark) noexcept
{
    remark_ = std::make_shared<std::string>(std::move(pRemark));
    dirtyFlag_[10] = true;
}


void SaleOutStorage::setRemarkToNull() noexcept
{
    remark_.reset();
    dirtyFlag_[10] = true;
}


const int8_t &SaleOutStorage::getValueOfStorageStatus() const noexcept
{
    const static int8_t defaultValue = int8_t();
    if(storageStatus_)
        return *storageStatus_;
    return defaultValue;
}
const std::shared_ptr<int8_t> &SaleOutStorage::getStorageStatus() const noexcept
{
    return storageStatus_;
}
void SaleOutStorage::setStorageStatus(const int8_t &pStorageStatus) noexcept
{
    storageStatus_ = std::make_shared<int8_t>(pStorageStatus);
    dirtyFlag_[11] = true;
}




const std::string &SaleOutStorage::getValueOfAuditRemark() const noexcept
{
    const static std::string defaultValue = std::string();
    if(auditRemark_)
        return *auditRemark_;
    return defaultValue;
}
const std::shared_ptr<std::string> &SaleOutStorage::getAuditRemark() const noexcept
{
    return auditRemark_;
}
void SaleOutStorage::setAuditRemark(const std::string &pAuditRemark) noexcept
{
    auditRemark_ = std::make_shared<std::string>(pAuditRemark);
    dirtyFlag_[12] = true;
}
void SaleOutStorage::setAuditRemark(std::string &&pAuditRemark) noexcept
{
    auditRemark_ = std::make_shared<std::string>(std::move(pAuditRemark));
    dirtyFlag_[12] = true;
}


void SaleOutStorage::setAuditRemarkToNull() noexcept
{
    auditRemark_.reset();
    dirtyFlag_[12] = true;
}


const std::string &SaleOutStorage::getValueOfExpressKey() const noexcept
{
    const static std::string defaultValue = std::string();
    if(expressKey_)
        return *expressKey_;
    return defaultValue;
}
const std::shared_ptr<std::string> &SaleOutStorage::getExpressKey() const noexcept
{
    return expressKey_;
}
void SaleOutStorage::setExpressKey(const std::string &pExpressKey) noexcept
{
    expressKey_ = std::make_shared<std::string>(pExpressKey);
    dirtyFlag_[13] = true;
}
void SaleOutStorage::setExpressKey(std::string &&pExpressKey) noexcept
{
    expressKey_ = std::make_shared<std::string>(std::move(pExpressKey));
    dirtyFlag_[13] = true;
}


void SaleOutStorage::setExpressKeyToNull() noexcept
{
    expressKey_.reset();
    dirtyFlag_[13] = true;
}


const uint8_t &SaleOutStorage::getValueOfExpressStatus() const noexcept
{
    const static uint8_t defaultValue = uint8_t();
    if(expressStatus_)
        return *expressStatus_;
    return defaultValue;
}
const std::shared_ptr<uint8_t> &SaleOutStorage::getExpressStatus() const noexcept
{
    return expressStatus_;
}
void SaleOutStorage::setExpressStatus(const uint8_t &pExpressStatus) noexcept
{
    expressStatus_ = std::make_shared<uint8_t>(pExpressStatus);
    dirtyFlag_[14] = true;
}




const std::string &SaleOutStorage::getValueOfSaleOutNumber() const noexcept
{
    const static std::string defaultValue = std::string();
    if(saleOutNumber_)
        return *saleOutNumber_;
    return defaultValue;
}
const std::shared_ptr<std::string> &SaleOutStorage::getSaleOutNumber() const noexcept
{
    return saleOutNumber_;
}
void SaleOutStorage::setSaleOutNumber(const std::string &pSaleOutNumber) noexcept
{
    saleOutNumber_ = std::make_shared<std::string>(pSaleOutNumber);
    dirtyFlag_[15] = true;
}
void SaleOutStorage::setSaleOutNumber(std::string &&pSaleOutNumber) noexcept
{
    saleOutNumber_ = std::make_shared<std::string>(std::move(pSaleOutNumber));
    dirtyFlag_[15] = true;
}


void SaleOutStorage::setSaleOutNumberToNull() noexcept
{
    saleOutNumber_.reset();
    dirtyFlag_[15] = true;
}


const uint8_t &SaleOutStorage::getValueOfStorageType() const noexcept
{
    const static uint8_t defaultValue = uint8_t();
    if(storageType_)
        return *storageType_;
    return defaultValue;
}
const std::shared_ptr<uint8_t> &SaleOutStorage::getStorageType() const noexcept
{
    return storageType_;
}
void SaleOutStorage::setStorageType(const uint8_t &pStorageType) noexcept
{
    storageType_ = std::make_shared<uint8_t>(pStorageType);
    dirtyFlag_[16] = true;
}




const uint64_t &SaleOutStorage::getValueOfOrderReturnId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(orderReturnId_)
        return *orderReturnId_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &SaleOutStorage::getOrderReturnId() const noexcept
{
    return orderReturnId_;
}
void SaleOutStorage::setOrderReturnId(const uint64_t &pOrderReturnId) noexcept
{
    orderReturnId_ = std::make_shared<uint64_t>(pOrderReturnId);
    dirtyFlag_[17] = true;
}




const uint64_t &SaleOutStorage::getValueOfCheckAdminId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(checkAdminId_)
        return *checkAdminId_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &SaleOutStorage::getCheckAdminId() const noexcept
{
    return checkAdminId_;
}
void SaleOutStorage::setCheckAdminId(const uint64_t &pCheckAdminId) noexcept
{
    checkAdminId_ = std::make_shared<uint64_t>(pCheckAdminId);
    dirtyFlag_[18] = true;
}


void SaleOutStorage::setCheckAdminIdToNull() noexcept
{
    checkAdminId_.reset();
    dirtyFlag_[18] = true;
}


const std::string &SaleOutStorage::getValueOfStorageAmountPercent() const noexcept
{
    const static std::string defaultValue = std::string();
    if(storageAmountPercent_)
        return *storageAmountPercent_;
    return defaultValue;
}
const std::shared_ptr<std::string> &SaleOutStorage::getStorageAmountPercent() const noexcept
{
    return storageAmountPercent_;
}
void SaleOutStorage::setStorageAmountPercent(const std::string &pStorageAmountPercent) noexcept
{
    storageAmountPercent_ = std::make_shared<std::string>(pStorageAmountPercent);
    dirtyFlag_[19] = true;
}
void SaleOutStorage::setStorageAmountPercent(std::string &&pStorageAmountPercent) noexcept
{
    storageAmountPercent_ = std::make_shared<std::string>(std::move(pStorageAmountPercent));
    dirtyFlag_[19] = true;
}




void SaleOutStorage::updateId(const uint64_t id)
{
    id_ = std::make_shared<uint64_t>(id);
}

const std::vector<std::string> &SaleOutStorage::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "sale_order_id",
        "sale_order_key",
        "shop_id",
        "admin_id",
        "storage_image",
        "storage_date",
        "create_time",
        "update_time",
        "is_delete",
        "remark",
        "storage_status",
        "audit_remark",
        "express_key",
        "express_status",
        "sale_out_number",
        "storage_type",
        "order_return_id",
        "check_admin_id",
        "storage_amount_percent"
    };
    return inCols;
}

void SaleOutStorage::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getSaleOrderId())
        {
            binder << getValueOfSaleOrderId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getSaleOrderKey())
        {
            binder << getValueOfSaleOrderKey();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getShopId())
        {
            binder << getValueOfShopId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getAdminId())
        {
            binder << getValueOfAdminId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getStorageImage())
        {
            binder << getValueOfStorageImage();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getStorageDate())
        {
            binder << getValueOfStorageDate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getCreateTime())
        {
            binder << getValueOfCreateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getUpdateTime())
        {
            binder << getValueOfUpdateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getIsDelete())
        {
            binder << getValueOfIsDelete();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getRemark())
        {
            binder << getValueOfRemark();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getStorageStatus())
        {
            binder << getValueOfStorageStatus();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getAuditRemark())
        {
            binder << getValueOfAuditRemark();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[13])
    {
        if(getExpressKey())
        {
            binder << getValueOfExpressKey();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[14])
    {
        if(getExpressStatus())
        {
            binder << getValueOfExpressStatus();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[15])
    {
        if(getSaleOutNumber())
        {
            binder << getValueOfSaleOutNumber();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[16])
    {
        if(getStorageType())
        {
            binder << getValueOfStorageType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[17])
    {
        if(getOrderReturnId())
        {
            binder << getValueOfOrderReturnId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[18])
    {
        if(getCheckAdminId())
        {
            binder << getValueOfCheckAdminId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[19])
    {
        if(getStorageAmountPercent())
        {
            binder << getValueOfStorageAmountPercent();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> SaleOutStorage::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    if(dirtyFlag_[8])
    {
        ret.push_back(getColumnName(8));
    }
    if(dirtyFlag_[9])
    {
        ret.push_back(getColumnName(9));
    }
    if(dirtyFlag_[10])
    {
        ret.push_back(getColumnName(10));
    }
    if(dirtyFlag_[11])
    {
        ret.push_back(getColumnName(11));
    }
    if(dirtyFlag_[12])
    {
        ret.push_back(getColumnName(12));
    }
    if(dirtyFlag_[13])
    {
        ret.push_back(getColumnName(13));
    }
    if(dirtyFlag_[14])
    {
        ret.push_back(getColumnName(14));
    }
    if(dirtyFlag_[15])
    {
        ret.push_back(getColumnName(15));
    }
    if(dirtyFlag_[16])
    {
        ret.push_back(getColumnName(16));
    }
    if(dirtyFlag_[17])
    {
        ret.push_back(getColumnName(17));
    }
    if(dirtyFlag_[18])
    {
        ret.push_back(getColumnName(18));
    }
    if(dirtyFlag_[19])
    {
        ret.push_back(getColumnName(19));
    }
    return ret;
}

void SaleOutStorage::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getSaleOrderId())
        {
            binder << getValueOfSaleOrderId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getSaleOrderKey())
        {
            binder << getValueOfSaleOrderKey();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getShopId())
        {
            binder << getValueOfShopId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getAdminId())
        {
            binder << getValueOfAdminId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getStorageImage())
        {
            binder << getValueOfStorageImage();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getStorageDate())
        {
            binder << getValueOfStorageDate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getCreateTime())
        {
            binder << getValueOfCreateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getUpdateTime())
        {
            binder << getValueOfUpdateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getIsDelete())
        {
            binder << getValueOfIsDelete();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getRemark())
        {
            binder << getValueOfRemark();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getStorageStatus())
        {
            binder << getValueOfStorageStatus();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getAuditRemark())
        {
            binder << getValueOfAuditRemark();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[13])
    {
        if(getExpressKey())
        {
            binder << getValueOfExpressKey();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[14])
    {
        if(getExpressStatus())
        {
            binder << getValueOfExpressStatus();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[15])
    {
        if(getSaleOutNumber())
        {
            binder << getValueOfSaleOutNumber();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[16])
    {
        if(getStorageType())
        {
            binder << getValueOfStorageType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[17])
    {
        if(getOrderReturnId())
        {
            binder << getValueOfOrderReturnId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[18])
    {
        if(getCheckAdminId())
        {
            binder << getValueOfCheckAdminId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[19])
    {
        if(getStorageAmountPercent())
        {
            binder << getValueOfStorageAmountPercent();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value SaleOutStorage::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=(Json::UInt64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getSaleOrderId())
    {
        ret["sale_order_id"]=(Json::UInt64)getValueOfSaleOrderId();
    }
    else
    {
        ret["sale_order_id"]=Json::Value();
    }
    if(getSaleOrderKey())
    {
        ret["sale_order_key"]=getValueOfSaleOrderKey();
    }
    else
    {
        ret["sale_order_key"]=Json::Value();
    }
    if(getShopId())
    {
        ret["shop_id"]=(Json::UInt64)getValueOfShopId();
    }
    else
    {
        ret["shop_id"]=Json::Value();
    }
    if(getAdminId())
    {
        ret["admin_id"]=(Json::UInt64)getValueOfAdminId();
    }
    else
    {
        ret["admin_id"]=Json::Value();
    }
    if(getStorageImage())
    {
        ret["storage_image"]=getValueOfStorageImage();
    }
    else
    {
        ret["storage_image"]=Json::Value();
    }
    if(getStorageDate())
    {
        ret["storage_date"]=getStorageDate()->toDbStringLocal();
    }
    else
    {
        ret["storage_date"]=Json::Value();
    }
    if(getCreateTime())
    {
        ret["create_time"]=getCreateTime()->toDbStringLocal();
    }
    else
    {
        ret["create_time"]=Json::Value();
    }
    if(getUpdateTime())
    {
        ret["update_time"]=getUpdateTime()->toDbStringLocal();
    }
    else
    {
        ret["update_time"]=Json::Value();
    }
    if(getIsDelete())
    {
        ret["is_delete"]=getValueOfIsDelete();
    }
    else
    {
        ret["is_delete"]=Json::Value();
    }
    if(getRemark())
    {
        ret["remark"]=getValueOfRemark();
    }
    else
    {
        ret["remark"]=Json::Value();
    }
    if(getStorageStatus())
    {
        ret["storage_status"]=getValueOfStorageStatus();
    }
    else
    {
        ret["storage_status"]=Json::Value();
    }
    if(getAuditRemark())
    {
        ret["audit_remark"]=getValueOfAuditRemark();
    }
    else
    {
        ret["audit_remark"]=Json::Value();
    }
    if(getExpressKey())
    {
        ret["express_key"]=getValueOfExpressKey();
    }
    else
    {
        ret["express_key"]=Json::Value();
    }
    if(getExpressStatus())
    {
        ret["express_status"]=getValueOfExpressStatus();
    }
    else
    {
        ret["express_status"]=Json::Value();
    }
    if(getSaleOutNumber())
    {
        ret["sale_out_number"]=getValueOfSaleOutNumber();
    }
    else
    {
        ret["sale_out_number"]=Json::Value();
    }
    if(getStorageType())
    {
        ret["storage_type"]=getValueOfStorageType();
    }
    else
    {
        ret["storage_type"]=Json::Value();
    }
    if(getOrderReturnId())
    {
        ret["order_return_id"]=(Json::UInt64)getValueOfOrderReturnId();
    }
    else
    {
        ret["order_return_id"]=Json::Value();
    }
    if(getCheckAdminId())
    {
        ret["check_admin_id"]=(Json::UInt64)getValueOfCheckAdminId();
    }
    else
    {
        ret["check_admin_id"]=Json::Value();
    }
    if(getStorageAmountPercent())
    {
        ret["storage_amount_percent"]=getValueOfStorageAmountPercent();
    }
    else
    {
        ret["storage_amount_percent"]=Json::Value();
    }
    return ret;
}

Json::Value SaleOutStorage::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 20)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=(Json::UInt64)getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getSaleOrderId())
            {
                ret[pMasqueradingVector[1]]=(Json::UInt64)getValueOfSaleOrderId();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getSaleOrderKey())
            {
                ret[pMasqueradingVector[2]]=getValueOfSaleOrderKey();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getShopId())
            {
                ret[pMasqueradingVector[3]]=(Json::UInt64)getValueOfShopId();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getAdminId())
            {
                ret[pMasqueradingVector[4]]=(Json::UInt64)getValueOfAdminId();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getStorageImage())
            {
                ret[pMasqueradingVector[5]]=getValueOfStorageImage();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getStorageDate())
            {
                ret[pMasqueradingVector[6]]=getStorageDate()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getCreateTime())
            {
                ret[pMasqueradingVector[7]]=getCreateTime()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[8].empty())
        {
            if(getUpdateTime())
            {
                ret[pMasqueradingVector[8]]=getUpdateTime()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[8]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[9].empty())
        {
            if(getIsDelete())
            {
                ret[pMasqueradingVector[9]]=getValueOfIsDelete();
            }
            else
            {
                ret[pMasqueradingVector[9]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[10].empty())
        {
            if(getRemark())
            {
                ret[pMasqueradingVector[10]]=getValueOfRemark();
            }
            else
            {
                ret[pMasqueradingVector[10]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[11].empty())
        {
            if(getStorageStatus())
            {
                ret[pMasqueradingVector[11]]=getValueOfStorageStatus();
            }
            else
            {
                ret[pMasqueradingVector[11]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[12].empty())
        {
            if(getAuditRemark())
            {
                ret[pMasqueradingVector[12]]=getValueOfAuditRemark();
            }
            else
            {
                ret[pMasqueradingVector[12]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[13].empty())
        {
            if(getExpressKey())
            {
                ret[pMasqueradingVector[13]]=getValueOfExpressKey();
            }
            else
            {
                ret[pMasqueradingVector[13]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[14].empty())
        {
            if(getExpressStatus())
            {
                ret[pMasqueradingVector[14]]=getValueOfExpressStatus();
            }
            else
            {
                ret[pMasqueradingVector[14]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[15].empty())
        {
            if(getSaleOutNumber())
            {
                ret[pMasqueradingVector[15]]=getValueOfSaleOutNumber();
            }
            else
            {
                ret[pMasqueradingVector[15]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[16].empty())
        {
            if(getStorageType())
            {
                ret[pMasqueradingVector[16]]=getValueOfStorageType();
            }
            else
            {
                ret[pMasqueradingVector[16]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[17].empty())
        {
            if(getOrderReturnId())
            {
                ret[pMasqueradingVector[17]]=(Json::UInt64)getValueOfOrderReturnId();
            }
            else
            {
                ret[pMasqueradingVector[17]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[18].empty())
        {
            if(getCheckAdminId())
            {
                ret[pMasqueradingVector[18]]=(Json::UInt64)getValueOfCheckAdminId();
            }
            else
            {
                ret[pMasqueradingVector[18]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[19].empty())
        {
            if(getStorageAmountPercent())
            {
                ret[pMasqueradingVector[19]]=getValueOfStorageAmountPercent();
            }
            else
            {
                ret[pMasqueradingVector[19]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=(Json::UInt64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getSaleOrderId())
    {
        ret["sale_order_id"]=(Json::UInt64)getValueOfSaleOrderId();
    }
    else
    {
        ret["sale_order_id"]=Json::Value();
    }
    if(getSaleOrderKey())
    {
        ret["sale_order_key"]=getValueOfSaleOrderKey();
    }
    else
    {
        ret["sale_order_key"]=Json::Value();
    }
    if(getShopId())
    {
        ret["shop_id"]=(Json::UInt64)getValueOfShopId();
    }
    else
    {
        ret["shop_id"]=Json::Value();
    }
    if(getAdminId())
    {
        ret["admin_id"]=(Json::UInt64)getValueOfAdminId();
    }
    else
    {
        ret["admin_id"]=Json::Value();
    }
    if(getStorageImage())
    {
        ret["storage_image"]=getValueOfStorageImage();
    }
    else
    {
        ret["storage_image"]=Json::Value();
    }
    if(getStorageDate())
    {
        ret["storage_date"]=getStorageDate()->toDbStringLocal();
    }
    else
    {
        ret["storage_date"]=Json::Value();
    }
    if(getCreateTime())
    {
        ret["create_time"]=getCreateTime()->toDbStringLocal();
    }
    else
    {
        ret["create_time"]=Json::Value();
    }
    if(getUpdateTime())
    {
        ret["update_time"]=getUpdateTime()->toDbStringLocal();
    }
    else
    {
        ret["update_time"]=Json::Value();
    }
    if(getIsDelete())
    {
        ret["is_delete"]=getValueOfIsDelete();
    }
    else
    {
        ret["is_delete"]=Json::Value();
    }
    if(getRemark())
    {
        ret["remark"]=getValueOfRemark();
    }
    else
    {
        ret["remark"]=Json::Value();
    }
    if(getStorageStatus())
    {
        ret["storage_status"]=getValueOfStorageStatus();
    }
    else
    {
        ret["storage_status"]=Json::Value();
    }
    if(getAuditRemark())
    {
        ret["audit_remark"]=getValueOfAuditRemark();
    }
    else
    {
        ret["audit_remark"]=Json::Value();
    }
    if(getExpressKey())
    {
        ret["express_key"]=getValueOfExpressKey();
    }
    else
    {
        ret["express_key"]=Json::Value();
    }
    if(getExpressStatus())
    {
        ret["express_status"]=getValueOfExpressStatus();
    }
    else
    {
        ret["express_status"]=Json::Value();
    }
    if(getSaleOutNumber())
    {
        ret["sale_out_number"]=getValueOfSaleOutNumber();
    }
    else
    {
        ret["sale_out_number"]=Json::Value();
    }
    if(getStorageType())
    {
        ret["storage_type"]=getValueOfStorageType();
    }
    else
    {
        ret["storage_type"]=Json::Value();
    }
    if(getOrderReturnId())
    {
        ret["order_return_id"]=(Json::UInt64)getValueOfOrderReturnId();
    }
    else
    {
        ret["order_return_id"]=Json::Value();
    }
    if(getCheckAdminId())
    {
        ret["check_admin_id"]=(Json::UInt64)getValueOfCheckAdminId();
    }
    else
    {
        ret["check_admin_id"]=Json::Value();
    }
    if(getStorageAmountPercent())
    {
        ret["storage_amount_percent"]=getValueOfStorageAmountPercent();
    }
    else
    {
        ret["storage_amount_percent"]=Json::Value();
    }
    return ret;
}

bool SaleOutStorage::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("sale_order_id"))
    {
        if(!validJsonOfField(1, "sale_order_id", pJson["sale_order_id"], err, true))
            return false;
    }
    if(pJson.isMember("sale_order_key"))
    {
        if(!validJsonOfField(2, "sale_order_key", pJson["sale_order_key"], err, true))
            return false;
    }
    if(pJson.isMember("shop_id"))
    {
        if(!validJsonOfField(3, "shop_id", pJson["shop_id"], err, true))
            return false;
    }
    if(pJson.isMember("admin_id"))
    {
        if(!validJsonOfField(4, "admin_id", pJson["admin_id"], err, true))
            return false;
    }
    if(pJson.isMember("storage_image"))
    {
        if(!validJsonOfField(5, "storage_image", pJson["storage_image"], err, true))
            return false;
    }
    if(pJson.isMember("storage_date"))
    {
        if(!validJsonOfField(6, "storage_date", pJson["storage_date"], err, true))
            return false;
    }
    if(pJson.isMember("create_time"))
    {
        if(!validJsonOfField(7, "create_time", pJson["create_time"], err, true))
            return false;
    }
    if(pJson.isMember("update_time"))
    {
        if(!validJsonOfField(8, "update_time", pJson["update_time"], err, true))
            return false;
    }
    if(pJson.isMember("is_delete"))
    {
        if(!validJsonOfField(9, "is_delete", pJson["is_delete"], err, true))
            return false;
    }
    if(pJson.isMember("remark"))
    {
        if(!validJsonOfField(10, "remark", pJson["remark"], err, true))
            return false;
    }
    if(pJson.isMember("storage_status"))
    {
        if(!validJsonOfField(11, "storage_status", pJson["storage_status"], err, true))
            return false;
    }
    if(pJson.isMember("audit_remark"))
    {
        if(!validJsonOfField(12, "audit_remark", pJson["audit_remark"], err, true))
            return false;
    }
    if(pJson.isMember("express_key"))
    {
        if(!validJsonOfField(13, "express_key", pJson["express_key"], err, true))
            return false;
    }
    if(pJson.isMember("express_status"))
    {
        if(!validJsonOfField(14, "express_status", pJson["express_status"], err, true))
            return false;
    }
    if(pJson.isMember("sale_out_number"))
    {
        if(!validJsonOfField(15, "sale_out_number", pJson["sale_out_number"], err, true))
            return false;
    }
    if(pJson.isMember("storage_type"))
    {
        if(!validJsonOfField(16, "storage_type", pJson["storage_type"], err, true))
            return false;
    }
    if(pJson.isMember("order_return_id"))
    {
        if(!validJsonOfField(17, "order_return_id", pJson["order_return_id"], err, true))
            return false;
    }
    if(pJson.isMember("check_admin_id"))
    {
        if(!validJsonOfField(18, "check_admin_id", pJson["check_admin_id"], err, true))
            return false;
    }
    if(pJson.isMember("storage_amount_percent"))
    {
        if(!validJsonOfField(19, "storage_amount_percent", pJson["storage_amount_percent"], err, true))
            return false;
    }
    return true;
}
bool SaleOutStorage::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                        const std::vector<std::string> &pMasqueradingVector,
                                                        std::string &err)
{
    if(pMasqueradingVector.size() != 20)
    {
        err = "Bad masquerading vector";
        return false;
    }
    if(!pMasqueradingVector[0].empty())
    {
        if(pJson.isMember(pMasqueradingVector[0]))
        {
            if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[1].empty())
    {
        if(pJson.isMember(pMasqueradingVector[1]))
        {
            if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[2].empty())
    {
        if(pJson.isMember(pMasqueradingVector[2]))
        {
            if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[3].empty())
    {
        if(pJson.isMember(pMasqueradingVector[3]))
        {
            if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[4].empty())
    {
        if(pJson.isMember(pMasqueradingVector[4]))
        {
            if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[5].empty())
    {
        if(pJson.isMember(pMasqueradingVector[5]))
        {
            if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[6].empty())
    {
        if(pJson.isMember(pMasqueradingVector[6]))
        {
            if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[7].empty())
    {
        if(pJson.isMember(pMasqueradingVector[7]))
        {
            if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[8].empty())
    {
        if(pJson.isMember(pMasqueradingVector[8]))
        {
            if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[9].empty())
    {
        if(pJson.isMember(pMasqueradingVector[9]))
        {
            if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[10].empty())
    {
        if(pJson.isMember(pMasqueradingVector[10]))
        {
            if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[11].empty())
    {
        if(pJson.isMember(pMasqueradingVector[11]))
        {
            if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[12].empty())
    {
        if(pJson.isMember(pMasqueradingVector[12]))
        {
            if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[13].empty())
    {
        if(pJson.isMember(pMasqueradingVector[13]))
        {
            if(!validJsonOfField(13, pMasqueradingVector[13], pJson[pMasqueradingVector[13]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[14].empty())
    {
        if(pJson.isMember(pMasqueradingVector[14]))
        {
            if(!validJsonOfField(14, pMasqueradingVector[14], pJson[pMasqueradingVector[14]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[15].empty())
    {
        if(pJson.isMember(pMasqueradingVector[15]))
        {
            if(!validJsonOfField(15, pMasqueradingVector[15], pJson[pMasqueradingVector[15]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[16].empty())
    {
        if(pJson.isMember(pMasqueradingVector[16]))
        {
            if(!validJsonOfField(16, pMasqueradingVector[16], pJson[pMasqueradingVector[16]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[17].empty())
    {
        if(pJson.isMember(pMasqueradingVector[17]))
        {
            if(!validJsonOfField(17, pMasqueradingVector[17], pJson[pMasqueradingVector[17]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[18].empty())
    {
        if(pJson.isMember(pMasqueradingVector[18]))
        {
            if(!validJsonOfField(18, pMasqueradingVector[18], pJson[pMasqueradingVector[18]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[19].empty())
    {
        if(pJson.isMember(pMasqueradingVector[19]))
        {
            if(!validJsonOfField(19, pMasqueradingVector[19], pJson[pMasqueradingVector[19]], err, true))
                return false;
        }
    }
    return true;
}
bool SaleOutStorage::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("sale_order_id"))
    {
        if(!validJsonOfField(1, "sale_order_id", pJson["sale_order_id"], err, false))
            return false;
    }
    if(pJson.isMember("sale_order_key"))
    {
        if(!validJsonOfField(2, "sale_order_key", pJson["sale_order_key"], err, false))
            return false;
    }
    if(pJson.isMember("shop_id"))
    {
        if(!validJsonOfField(3, "shop_id", pJson["shop_id"], err, false))
            return false;
    }
    if(pJson.isMember("admin_id"))
    {
        if(!validJsonOfField(4, "admin_id", pJson["admin_id"], err, false))
            return false;
    }
    if(pJson.isMember("storage_image"))
    {
        if(!validJsonOfField(5, "storage_image", pJson["storage_image"], err, false))
            return false;
    }
    if(pJson.isMember("storage_date"))
    {
        if(!validJsonOfField(6, "storage_date", pJson["storage_date"], err, false))
            return false;
    }
    if(pJson.isMember("create_time"))
    {
        if(!validJsonOfField(7, "create_time", pJson["create_time"], err, false))
            return false;
    }
    if(pJson.isMember("update_time"))
    {
        if(!validJsonOfField(8, "update_time", pJson["update_time"], err, false))
            return false;
    }
    if(pJson.isMember("is_delete"))
    {
        if(!validJsonOfField(9, "is_delete", pJson["is_delete"], err, false))
            return false;
    }
    if(pJson.isMember("remark"))
    {
        if(!validJsonOfField(10, "remark", pJson["remark"], err, false))
            return false;
    }
    if(pJson.isMember("storage_status"))
    {
        if(!validJsonOfField(11, "storage_status", pJson["storage_status"], err, false))
            return false;
    }
    if(pJson.isMember("audit_remark"))
    {
        if(!validJsonOfField(12, "audit_remark", pJson["audit_remark"], err, false))
            return false;
    }
    if(pJson.isMember("express_key"))
    {
        if(!validJsonOfField(13, "express_key", pJson["express_key"], err, false))
            return false;
    }
    if(pJson.isMember("express_status"))
    {
        if(!validJsonOfField(14, "express_status", pJson["express_status"], err, false))
            return false;
    }
    if(pJson.isMember("sale_out_number"))
    {
        if(!validJsonOfField(15, "sale_out_number", pJson["sale_out_number"], err, false))
            return false;
    }
    if(pJson.isMember("storage_type"))
    {
        if(!validJsonOfField(16, "storage_type", pJson["storage_type"], err, false))
            return false;
    }
    if(pJson.isMember("order_return_id"))
    {
        if(!validJsonOfField(17, "order_return_id", pJson["order_return_id"], err, false))
            return false;
    }
    if(pJson.isMember("check_admin_id"))
    {
        if(!validJsonOfField(18, "check_admin_id", pJson["check_admin_id"], err, false))
            return false;
    }
    if(pJson.isMember("storage_amount_percent"))
    {
        if(!validJsonOfField(19, "storage_amount_percent", pJson["storage_amount_percent"], err, false))
            return false;
    }
    return true;
}
bool SaleOutStorage::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                      const std::vector<std::string> &pMasqueradingVector,
                                                      std::string &err)
{
    if(pMasqueradingVector.size() != 20)
    {
        err = "Bad masquerading vector";
        return false;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
            return false;
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
            return false;
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
            return false;
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
            return false;
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
            return false;
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
            return false;
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
            return false;
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, false))
            return false;
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, false))
            return false;
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, false))
            return false;
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, false))
            return false;
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, false))
            return false;
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        if(!validJsonOfField(13, pMasqueradingVector[13], pJson[pMasqueradingVector[13]], err, false))
            return false;
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        if(!validJsonOfField(14, pMasqueradingVector[14], pJson[pMasqueradingVector[14]], err, false))
            return false;
    }
    if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
    {
        if(!validJsonOfField(15, pMasqueradingVector[15], pJson[pMasqueradingVector[15]], err, false))
            return false;
    }
    if(!pMasqueradingVector[16].empty() && pJson.isMember(pMasqueradingVector[16]))
    {
        if(!validJsonOfField(16, pMasqueradingVector[16], pJson[pMasqueradingVector[16]], err, false))
            return false;
    }
    if(!pMasqueradingVector[17].empty() && pJson.isMember(pMasqueradingVector[17]))
    {
        if(!validJsonOfField(17, pMasqueradingVector[17], pJson[pMasqueradingVector[17]], err, false))
            return false;
    }
    if(!pMasqueradingVector[18].empty() && pJson.isMember(pMasqueradingVector[18]))
    {
        if(!validJsonOfField(18, pMasqueradingVector[18], pJson[pMasqueradingVector[18]], err, false))
            return false;
    }
    if(!pMasqueradingVector[19].empty() && pJson.isMember(pMasqueradingVector[19]))
    {
        if(!validJsonOfField(19, pMasqueradingVector[19], pJson[pMasqueradingVector[19]], err, false))
            return false;
    }
    return true;
}
bool SaleOutStorage::validJsonOfField(size_t index,
                                      const std::string &fieldName,
                                      const Json::Value &pJson, 
                                      std::string &err, 
                                      bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }        
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 20)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 20)";
                return false;               
            }

            break;
        case 3:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 5:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 6:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 7:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 8:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 9:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 10:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;               
            }

            break;
        case 11:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 12:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;               
            }

            break;
        case 13:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 50)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 50)";
                return false;               
            }

            break;
        case 14:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 15:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 50)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 50)";
                return false;               
            }

            break;
        case 16:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 17:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 18:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 19:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
     
        default:
            err="Internal error in the server";
            return false;
            break;
    }
    return true;
}
