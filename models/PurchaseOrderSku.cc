/**
 *
 *  PurchaseOrderSku.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "PurchaseOrderSku.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::v2;

const std::string PurchaseOrderSku::Cols::_id = "id";
const std::string PurchaseOrderSku::Cols::_remark = "remark";
const std::string PurchaseOrderSku::Cols::_is_delete = "is_delete";
const std::string PurchaseOrderSku::Cols::_shop_id = "shop_id";
const std::string PurchaseOrderSku::Cols::_purchase_order_id = "purchase_order_id";
const std::string PurchaseOrderSku::Cols::_purchase_order_key = "purchase_order_key";
const std::string PurchaseOrderSku::Cols::_product_history_info = "product_history_info";
const std::string PurchaseOrderSku::Cols::_product_brand_id = "product_brand_id";
const std::string PurchaseOrderSku::Cols::_product_id = "product_id";
const std::string PurchaseOrderSku::Cols::_product_category_id = "product_category_id";
const std::string PurchaseOrderSku::Cols::_product_model_id = "product_model_id";
const std::string PurchaseOrderSku::Cols::_purchase_price = "purchase_price";
const std::string PurchaseOrderSku::Cols::_purchase_num = "purchase_num";
const std::string PurchaseOrderSku::Cols::_admin_id = "admin_id";
const std::string PurchaseOrderSku::Cols::_last_number = "last_number";
const std::string PurchaseOrderSku::Cols::_point_price_number = "point_price_number";
const std::string PurchaseOrderSku::Cols::_create_time = "create_time";
const std::string PurchaseOrderSku::Cols::_update_time = "update_time";
const std::string PurchaseOrderSku::Cols::_sku_status = "sku_status";
const std::string PurchaseOrderSku::primaryKeyName = "id";
const bool PurchaseOrderSku::hasPrimaryKey = true;
const std::string PurchaseOrderSku::tableName = "purchase_order_sku";

const std::vector<typename PurchaseOrderSku::MetaData> PurchaseOrderSku::metaData_={
{"id","uint64_t","bigint(20) unsigned",8,1,1,1},
{"remark","std::string","varchar(45)",45,0,0,0},
{"is_delete","int8_t","tinyint(1)",1,0,0,1},
{"shop_id","uint64_t","bigint(20) unsigned",8,0,0,1},
{"purchase_order_id","uint64_t","bigint(20) unsigned",8,0,0,1},
{"purchase_order_key","std::string","varchar(45)",45,0,0,0},
{"product_history_info","std::string","text",0,0,0,0},
{"product_brand_id","int64_t","bigint(20)",8,0,0,1},
{"product_id","int64_t","bigint(20)",8,0,0,1},
{"product_category_id","int64_t","bigint(20)",8,0,0,1},
{"product_model_id","int64_t","bigint(20)",8,0,0,1},
{"purchase_price","std::string","decimal(32,5)",0,0,0,1},
{"purchase_num","std::string","decimal(32,5)",0,0,0,1},
{"admin_id","int64_t","bigint(20)",8,0,0,1},
{"last_number","std::string","decimal(32,5)",0,0,0,1},
{"point_price_number","std::string","decimal(32,5)",0,0,0,1},
{"create_time","::trantor::Date","datetime",0,0,0,0},
{"update_time","::trantor::Date","datetime",0,0,0,0},
{"sku_status","uint8_t","tinyint(10) unsigned",1,0,0,1}
};
const std::string &PurchaseOrderSku::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
PurchaseOrderSku::PurchaseOrderSku(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<uint64_t>(r["id"].as<uint64_t>());
        }
        if(!r["remark"].isNull())
        {
            remark_=std::make_shared<std::string>(r["remark"].as<std::string>());
        }
        if(!r["is_delete"].isNull())
        {
            isDelete_=std::make_shared<int8_t>(r["is_delete"].as<int8_t>());
        }
        if(!r["shop_id"].isNull())
        {
            shopId_=std::make_shared<uint64_t>(r["shop_id"].as<uint64_t>());
        }
        if(!r["purchase_order_id"].isNull())
        {
            purchaseOrderId_=std::make_shared<uint64_t>(r["purchase_order_id"].as<uint64_t>());
        }
        if(!r["purchase_order_key"].isNull())
        {
            purchaseOrderKey_=std::make_shared<std::string>(r["purchase_order_key"].as<std::string>());
        }
        if(!r["product_history_info"].isNull())
        {
            productHistoryInfo_=std::make_shared<std::string>(r["product_history_info"].as<std::string>());
        }
        if(!r["product_brand_id"].isNull())
        {
            productBrandId_=std::make_shared<int64_t>(r["product_brand_id"].as<int64_t>());
        }
        if(!r["product_id"].isNull())
        {
            productId_=std::make_shared<int64_t>(r["product_id"].as<int64_t>());
        }
        if(!r["product_category_id"].isNull())
        {
            productCategoryId_=std::make_shared<int64_t>(r["product_category_id"].as<int64_t>());
        }
        if(!r["product_model_id"].isNull())
        {
            productModelId_=std::make_shared<int64_t>(r["product_model_id"].as<int64_t>());
        }
        if(!r["purchase_price"].isNull())
        {
            purchasePrice_=std::make_shared<std::string>(r["purchase_price"].as<std::string>());
        }
        if(!r["purchase_num"].isNull())
        {
            purchaseNum_=std::make_shared<std::string>(r["purchase_num"].as<std::string>());
        }
        if(!r["admin_id"].isNull())
        {
            adminId_=std::make_shared<int64_t>(r["admin_id"].as<int64_t>());
        }
        if(!r["last_number"].isNull())
        {
            lastNumber_=std::make_shared<std::string>(r["last_number"].as<std::string>());
        }
        if(!r["point_price_number"].isNull())
        {
            pointPriceNumber_=std::make_shared<std::string>(r["point_price_number"].as<std::string>());
        }
        if(!r["create_time"].isNull())
        {
            auto timeStr = r["create_time"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        if(!r["update_time"].isNull())
        {
            auto timeStr = r["update_time"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        if(!r["sku_status"].isNull())
        {
            skuStatus_=std::make_shared<uint8_t>(r["sku_status"].as<uint8_t>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 19 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            remark_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            isDelete_=std::make_shared<int8_t>(r[index].as<int8_t>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            shopId_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            purchaseOrderId_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            purchaseOrderKey_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            productHistoryInfo_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            productBrandId_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 8;
        if(!r[index].isNull())
        {
            productId_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 9;
        if(!r[index].isNull())
        {
            productCategoryId_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 10;
        if(!r[index].isNull())
        {
            productModelId_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 11;
        if(!r[index].isNull())
        {
            purchasePrice_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 12;
        if(!r[index].isNull())
        {
            purchaseNum_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 13;
        if(!r[index].isNull())
        {
            adminId_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 14;
        if(!r[index].isNull())
        {
            lastNumber_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 15;
        if(!r[index].isNull())
        {
            pointPriceNumber_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 16;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        index = offset + 17;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        index = offset + 18;
        if(!r[index].isNull())
        {
            skuStatus_=std::make_shared<uint8_t>(r[index].as<uint8_t>());
        }
    }

}

PurchaseOrderSku::PurchaseOrderSku(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 19)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            remark_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            isDelete_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[2]].asInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            shopId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[3]].asUInt64());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            purchaseOrderId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[4]].asUInt64());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            purchaseOrderKey_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            productHistoryInfo_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            productBrandId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[7]].asInt64());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            productId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[8]].asInt64());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            productCategoryId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[9]].asInt64());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            productModelId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[10]].asInt64());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            purchasePrice_=std::make_shared<std::string>(pJson[pMasqueradingVector[11]].asString());
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            purchaseNum_=std::make_shared<std::string>(pJson[pMasqueradingVector[12]].asString());
        }
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        dirtyFlag_[13] = true;
        if(!pJson[pMasqueradingVector[13]].isNull())
        {
            adminId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[13]].asInt64());
        }
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        dirtyFlag_[14] = true;
        if(!pJson[pMasqueradingVector[14]].isNull())
        {
            lastNumber_=std::make_shared<std::string>(pJson[pMasqueradingVector[14]].asString());
        }
    }
    if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
    {
        dirtyFlag_[15] = true;
        if(!pJson[pMasqueradingVector[15]].isNull())
        {
            pointPriceNumber_=std::make_shared<std::string>(pJson[pMasqueradingVector[15]].asString());
        }
    }
    if(!pMasqueradingVector[16].empty() && pJson.isMember(pMasqueradingVector[16]))
    {
        dirtyFlag_[16] = true;
        if(!pJson[pMasqueradingVector[16]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[16]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[17].empty() && pJson.isMember(pMasqueradingVector[17]))
    {
        dirtyFlag_[17] = true;
        if(!pJson[pMasqueradingVector[17]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[17]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[18].empty() && pJson.isMember(pMasqueradingVector[18]))
    {
        dirtyFlag_[18] = true;
        if(!pJson[pMasqueradingVector[18]].isNull())
        {
            skuStatus_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[18]].asUInt64());
        }
    }
}

PurchaseOrderSku::PurchaseOrderSku(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson["id"].asUInt64());
        }
    }
    if(pJson.isMember("remark"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["remark"].isNull())
        {
            remark_=std::make_shared<std::string>(pJson["remark"].asString());
        }
    }
    if(pJson.isMember("is_delete"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["is_delete"].isNull())
        {
            isDelete_=std::make_shared<int8_t>((int8_t)pJson["is_delete"].asInt64());
        }
    }
    if(pJson.isMember("shop_id"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["shop_id"].isNull())
        {
            shopId_=std::make_shared<uint64_t>((uint64_t)pJson["shop_id"].asUInt64());
        }
    }
    if(pJson.isMember("purchase_order_id"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["purchase_order_id"].isNull())
        {
            purchaseOrderId_=std::make_shared<uint64_t>((uint64_t)pJson["purchase_order_id"].asUInt64());
        }
    }
    if(pJson.isMember("purchase_order_key"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["purchase_order_key"].isNull())
        {
            purchaseOrderKey_=std::make_shared<std::string>(pJson["purchase_order_key"].asString());
        }
    }
    if(pJson.isMember("product_history_info"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["product_history_info"].isNull())
        {
            productHistoryInfo_=std::make_shared<std::string>(pJson["product_history_info"].asString());
        }
    }
    if(pJson.isMember("product_brand_id"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["product_brand_id"].isNull())
        {
            productBrandId_=std::make_shared<int64_t>((int64_t)pJson["product_brand_id"].asInt64());
        }
    }
    if(pJson.isMember("product_id"))
    {
        dirtyFlag_[8]=true;
        if(!pJson["product_id"].isNull())
        {
            productId_=std::make_shared<int64_t>((int64_t)pJson["product_id"].asInt64());
        }
    }
    if(pJson.isMember("product_category_id"))
    {
        dirtyFlag_[9]=true;
        if(!pJson["product_category_id"].isNull())
        {
            productCategoryId_=std::make_shared<int64_t>((int64_t)pJson["product_category_id"].asInt64());
        }
    }
    if(pJson.isMember("product_model_id"))
    {
        dirtyFlag_[10]=true;
        if(!pJson["product_model_id"].isNull())
        {
            productModelId_=std::make_shared<int64_t>((int64_t)pJson["product_model_id"].asInt64());
        }
    }
    if(pJson.isMember("purchase_price"))
    {
        dirtyFlag_[11]=true;
        if(!pJson["purchase_price"].isNull())
        {
            purchasePrice_=std::make_shared<std::string>(pJson["purchase_price"].asString());
        }
    }
    if(pJson.isMember("purchase_num"))
    {
        dirtyFlag_[12]=true;
        if(!pJson["purchase_num"].isNull())
        {
            purchaseNum_=std::make_shared<std::string>(pJson["purchase_num"].asString());
        }
    }
    if(pJson.isMember("admin_id"))
    {
        dirtyFlag_[13]=true;
        if(!pJson["admin_id"].isNull())
        {
            adminId_=std::make_shared<int64_t>((int64_t)pJson["admin_id"].asInt64());
        }
    }
    if(pJson.isMember("last_number"))
    {
        dirtyFlag_[14]=true;
        if(!pJson["last_number"].isNull())
        {
            lastNumber_=std::make_shared<std::string>(pJson["last_number"].asString());
        }
    }
    if(pJson.isMember("point_price_number"))
    {
        dirtyFlag_[15]=true;
        if(!pJson["point_price_number"].isNull())
        {
            pointPriceNumber_=std::make_shared<std::string>(pJson["point_price_number"].asString());
        }
    }
    if(pJson.isMember("create_time"))
    {
        dirtyFlag_[16]=true;
        if(!pJson["create_time"].isNull())
        {
            auto timeStr = pJson["create_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("update_time"))
    {
        dirtyFlag_[17]=true;
        if(!pJson["update_time"].isNull())
        {
            auto timeStr = pJson["update_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("sku_status"))
    {
        dirtyFlag_[18]=true;
        if(!pJson["sku_status"].isNull())
        {
            skuStatus_=std::make_shared<uint8_t>((uint8_t)pJson["sku_status"].asUInt64());
        }
    }
}

void PurchaseOrderSku::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 19)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            remark_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            isDelete_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[2]].asInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            shopId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[3]].asUInt64());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            purchaseOrderId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[4]].asUInt64());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            purchaseOrderKey_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            productHistoryInfo_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            productBrandId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[7]].asInt64());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            productId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[8]].asInt64());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            productCategoryId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[9]].asInt64());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            productModelId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[10]].asInt64());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            purchasePrice_=std::make_shared<std::string>(pJson[pMasqueradingVector[11]].asString());
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            purchaseNum_=std::make_shared<std::string>(pJson[pMasqueradingVector[12]].asString());
        }
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        dirtyFlag_[13] = true;
        if(!pJson[pMasqueradingVector[13]].isNull())
        {
            adminId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[13]].asInt64());
        }
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        dirtyFlag_[14] = true;
        if(!pJson[pMasqueradingVector[14]].isNull())
        {
            lastNumber_=std::make_shared<std::string>(pJson[pMasqueradingVector[14]].asString());
        }
    }
    if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
    {
        dirtyFlag_[15] = true;
        if(!pJson[pMasqueradingVector[15]].isNull())
        {
            pointPriceNumber_=std::make_shared<std::string>(pJson[pMasqueradingVector[15]].asString());
        }
    }
    if(!pMasqueradingVector[16].empty() && pJson.isMember(pMasqueradingVector[16]))
    {
        dirtyFlag_[16] = true;
        if(!pJson[pMasqueradingVector[16]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[16]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[17].empty() && pJson.isMember(pMasqueradingVector[17]))
    {
        dirtyFlag_[17] = true;
        if(!pJson[pMasqueradingVector[17]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[17]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[18].empty() && pJson.isMember(pMasqueradingVector[18]))
    {
        dirtyFlag_[18] = true;
        if(!pJson[pMasqueradingVector[18]].isNull())
        {
            skuStatus_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[18]].asUInt64());
        }
    }
}
                                                                    
void PurchaseOrderSku::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson["id"].asUInt64());
        }
    }
    if(pJson.isMember("remark"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["remark"].isNull())
        {
            remark_=std::make_shared<std::string>(pJson["remark"].asString());
        }
    }
    if(pJson.isMember("is_delete"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["is_delete"].isNull())
        {
            isDelete_=std::make_shared<int8_t>((int8_t)pJson["is_delete"].asInt64());
        }
    }
    if(pJson.isMember("shop_id"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["shop_id"].isNull())
        {
            shopId_=std::make_shared<uint64_t>((uint64_t)pJson["shop_id"].asUInt64());
        }
    }
    if(pJson.isMember("purchase_order_id"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["purchase_order_id"].isNull())
        {
            purchaseOrderId_=std::make_shared<uint64_t>((uint64_t)pJson["purchase_order_id"].asUInt64());
        }
    }
    if(pJson.isMember("purchase_order_key"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["purchase_order_key"].isNull())
        {
            purchaseOrderKey_=std::make_shared<std::string>(pJson["purchase_order_key"].asString());
        }
    }
    if(pJson.isMember("product_history_info"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["product_history_info"].isNull())
        {
            productHistoryInfo_=std::make_shared<std::string>(pJson["product_history_info"].asString());
        }
    }
    if(pJson.isMember("product_brand_id"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["product_brand_id"].isNull())
        {
            productBrandId_=std::make_shared<int64_t>((int64_t)pJson["product_brand_id"].asInt64());
        }
    }
    if(pJson.isMember("product_id"))
    {
        dirtyFlag_[8] = true;
        if(!pJson["product_id"].isNull())
        {
            productId_=std::make_shared<int64_t>((int64_t)pJson["product_id"].asInt64());
        }
    }
    if(pJson.isMember("product_category_id"))
    {
        dirtyFlag_[9] = true;
        if(!pJson["product_category_id"].isNull())
        {
            productCategoryId_=std::make_shared<int64_t>((int64_t)pJson["product_category_id"].asInt64());
        }
    }
    if(pJson.isMember("product_model_id"))
    {
        dirtyFlag_[10] = true;
        if(!pJson["product_model_id"].isNull())
        {
            productModelId_=std::make_shared<int64_t>((int64_t)pJson["product_model_id"].asInt64());
        }
    }
    if(pJson.isMember("purchase_price"))
    {
        dirtyFlag_[11] = true;
        if(!pJson["purchase_price"].isNull())
        {
            purchasePrice_=std::make_shared<std::string>(pJson["purchase_price"].asString());
        }
    }
    if(pJson.isMember("purchase_num"))
    {
        dirtyFlag_[12] = true;
        if(!pJson["purchase_num"].isNull())
        {
            purchaseNum_=std::make_shared<std::string>(pJson["purchase_num"].asString());
        }
    }
    if(pJson.isMember("admin_id"))
    {
        dirtyFlag_[13] = true;
        if(!pJson["admin_id"].isNull())
        {
            adminId_=std::make_shared<int64_t>((int64_t)pJson["admin_id"].asInt64());
        }
    }
    if(pJson.isMember("last_number"))
    {
        dirtyFlag_[14] = true;
        if(!pJson["last_number"].isNull())
        {
            lastNumber_=std::make_shared<std::string>(pJson["last_number"].asString());
        }
    }
    if(pJson.isMember("point_price_number"))
    {
        dirtyFlag_[15] = true;
        if(!pJson["point_price_number"].isNull())
        {
            pointPriceNumber_=std::make_shared<std::string>(pJson["point_price_number"].asString());
        }
    }
    if(pJson.isMember("create_time"))
    {
        dirtyFlag_[16] = true;
        if(!pJson["create_time"].isNull())
        {
            auto timeStr = pJson["create_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("update_time"))
    {
        dirtyFlag_[17] = true;
        if(!pJson["update_time"].isNull())
        {
            auto timeStr = pJson["update_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("sku_status"))
    {
        dirtyFlag_[18] = true;
        if(!pJson["sku_status"].isNull())
        {
            skuStatus_=std::make_shared<uint8_t>((uint8_t)pJson["sku_status"].asUInt64());
        }
    }
}

const uint64_t &PurchaseOrderSku::getValueOfId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &PurchaseOrderSku::getId() const noexcept
{
    return id_;
}
void PurchaseOrderSku::setId(const uint64_t &pId) noexcept
{
    id_ = std::make_shared<uint64_t>(pId);
    dirtyFlag_[0] = true;
}



const typename PurchaseOrderSku::PrimaryKeyType & PurchaseOrderSku::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const std::string &PurchaseOrderSku::getValueOfRemark() const noexcept
{
    const static std::string defaultValue = std::string();
    if(remark_)
        return *remark_;
    return defaultValue;
}
const std::shared_ptr<std::string> &PurchaseOrderSku::getRemark() const noexcept
{
    return remark_;
}
void PurchaseOrderSku::setRemark(const std::string &pRemark) noexcept
{
    remark_ = std::make_shared<std::string>(pRemark);
    dirtyFlag_[1] = true;
}
void PurchaseOrderSku::setRemark(std::string &&pRemark) noexcept
{
    remark_ = std::make_shared<std::string>(std::move(pRemark));
    dirtyFlag_[1] = true;
}


void PurchaseOrderSku::setRemarkToNull() noexcept
{
    remark_.reset();
    dirtyFlag_[1] = true;
}


const int8_t &PurchaseOrderSku::getValueOfIsDelete() const noexcept
{
    const static int8_t defaultValue = int8_t();
    if(isDelete_)
        return *isDelete_;
    return defaultValue;
}
const std::shared_ptr<int8_t> &PurchaseOrderSku::getIsDelete() const noexcept
{
    return isDelete_;
}
void PurchaseOrderSku::setIsDelete(const int8_t &pIsDelete) noexcept
{
    isDelete_ = std::make_shared<int8_t>(pIsDelete);
    dirtyFlag_[2] = true;
}




const uint64_t &PurchaseOrderSku::getValueOfShopId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(shopId_)
        return *shopId_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &PurchaseOrderSku::getShopId() const noexcept
{
    return shopId_;
}
void PurchaseOrderSku::setShopId(const uint64_t &pShopId) noexcept
{
    shopId_ = std::make_shared<uint64_t>(pShopId);
    dirtyFlag_[3] = true;
}




const uint64_t &PurchaseOrderSku::getValueOfPurchaseOrderId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(purchaseOrderId_)
        return *purchaseOrderId_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &PurchaseOrderSku::getPurchaseOrderId() const noexcept
{
    return purchaseOrderId_;
}
void PurchaseOrderSku::setPurchaseOrderId(const uint64_t &pPurchaseOrderId) noexcept
{
    purchaseOrderId_ = std::make_shared<uint64_t>(pPurchaseOrderId);
    dirtyFlag_[4] = true;
}




const std::string &PurchaseOrderSku::getValueOfPurchaseOrderKey() const noexcept
{
    const static std::string defaultValue = std::string();
    if(purchaseOrderKey_)
        return *purchaseOrderKey_;
    return defaultValue;
}
const std::shared_ptr<std::string> &PurchaseOrderSku::getPurchaseOrderKey() const noexcept
{
    return purchaseOrderKey_;
}
void PurchaseOrderSku::setPurchaseOrderKey(const std::string &pPurchaseOrderKey) noexcept
{
    purchaseOrderKey_ = std::make_shared<std::string>(pPurchaseOrderKey);
    dirtyFlag_[5] = true;
}
void PurchaseOrderSku::setPurchaseOrderKey(std::string &&pPurchaseOrderKey) noexcept
{
    purchaseOrderKey_ = std::make_shared<std::string>(std::move(pPurchaseOrderKey));
    dirtyFlag_[5] = true;
}


void PurchaseOrderSku::setPurchaseOrderKeyToNull() noexcept
{
    purchaseOrderKey_.reset();
    dirtyFlag_[5] = true;
}


const std::string &PurchaseOrderSku::getValueOfProductHistoryInfo() const noexcept
{
    const static std::string defaultValue = std::string();
    if(productHistoryInfo_)
        return *productHistoryInfo_;
    return defaultValue;
}
const std::shared_ptr<std::string> &PurchaseOrderSku::getProductHistoryInfo() const noexcept
{
    return productHistoryInfo_;
}
void PurchaseOrderSku::setProductHistoryInfo(const std::string &pProductHistoryInfo) noexcept
{
    productHistoryInfo_ = std::make_shared<std::string>(pProductHistoryInfo);
    dirtyFlag_[6] = true;
}
void PurchaseOrderSku::setProductHistoryInfo(std::string &&pProductHistoryInfo) noexcept
{
    productHistoryInfo_ = std::make_shared<std::string>(std::move(pProductHistoryInfo));
    dirtyFlag_[6] = true;
}


void PurchaseOrderSku::setProductHistoryInfoToNull() noexcept
{
    productHistoryInfo_.reset();
    dirtyFlag_[6] = true;
}


const int64_t &PurchaseOrderSku::getValueOfProductBrandId() const noexcept
{
    const static int64_t defaultValue = int64_t();
    if(productBrandId_)
        return *productBrandId_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &PurchaseOrderSku::getProductBrandId() const noexcept
{
    return productBrandId_;
}
void PurchaseOrderSku::setProductBrandId(const int64_t &pProductBrandId) noexcept
{
    productBrandId_ = std::make_shared<int64_t>(pProductBrandId);
    dirtyFlag_[7] = true;
}




const int64_t &PurchaseOrderSku::getValueOfProductId() const noexcept
{
    const static int64_t defaultValue = int64_t();
    if(productId_)
        return *productId_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &PurchaseOrderSku::getProductId() const noexcept
{
    return productId_;
}
void PurchaseOrderSku::setProductId(const int64_t &pProductId) noexcept
{
    productId_ = std::make_shared<int64_t>(pProductId);
    dirtyFlag_[8] = true;
}




const int64_t &PurchaseOrderSku::getValueOfProductCategoryId() const noexcept
{
    const static int64_t defaultValue = int64_t();
    if(productCategoryId_)
        return *productCategoryId_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &PurchaseOrderSku::getProductCategoryId() const noexcept
{
    return productCategoryId_;
}
void PurchaseOrderSku::setProductCategoryId(const int64_t &pProductCategoryId) noexcept
{
    productCategoryId_ = std::make_shared<int64_t>(pProductCategoryId);
    dirtyFlag_[9] = true;
}




const int64_t &PurchaseOrderSku::getValueOfProductModelId() const noexcept
{
    const static int64_t defaultValue = int64_t();
    if(productModelId_)
        return *productModelId_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &PurchaseOrderSku::getProductModelId() const noexcept
{
    return productModelId_;
}
void PurchaseOrderSku::setProductModelId(const int64_t &pProductModelId) noexcept
{
    productModelId_ = std::make_shared<int64_t>(pProductModelId);
    dirtyFlag_[10] = true;
}




const std::string &PurchaseOrderSku::getValueOfPurchasePrice() const noexcept
{
    const static std::string defaultValue = std::string();
    if(purchasePrice_)
        return *purchasePrice_;
    return defaultValue;
}
const std::shared_ptr<std::string> &PurchaseOrderSku::getPurchasePrice() const noexcept
{
    return purchasePrice_;
}
void PurchaseOrderSku::setPurchasePrice(const std::string &pPurchasePrice) noexcept
{
    purchasePrice_ = std::make_shared<std::string>(pPurchasePrice);
    dirtyFlag_[11] = true;
}
void PurchaseOrderSku::setPurchasePrice(std::string &&pPurchasePrice) noexcept
{
    purchasePrice_ = std::make_shared<std::string>(std::move(pPurchasePrice));
    dirtyFlag_[11] = true;
}




const std::string &PurchaseOrderSku::getValueOfPurchaseNum() const noexcept
{
    const static std::string defaultValue = std::string();
    if(purchaseNum_)
        return *purchaseNum_;
    return defaultValue;
}
const std::shared_ptr<std::string> &PurchaseOrderSku::getPurchaseNum() const noexcept
{
    return purchaseNum_;
}
void PurchaseOrderSku::setPurchaseNum(const std::string &pPurchaseNum) noexcept
{
    purchaseNum_ = std::make_shared<std::string>(pPurchaseNum);
    dirtyFlag_[12] = true;
}
void PurchaseOrderSku::setPurchaseNum(std::string &&pPurchaseNum) noexcept
{
    purchaseNum_ = std::make_shared<std::string>(std::move(pPurchaseNum));
    dirtyFlag_[12] = true;
}




const int64_t &PurchaseOrderSku::getValueOfAdminId() const noexcept
{
    const static int64_t defaultValue = int64_t();
    if(adminId_)
        return *adminId_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &PurchaseOrderSku::getAdminId() const noexcept
{
    return adminId_;
}
void PurchaseOrderSku::setAdminId(const int64_t &pAdminId) noexcept
{
    adminId_ = std::make_shared<int64_t>(pAdminId);
    dirtyFlag_[13] = true;
}




const std::string &PurchaseOrderSku::getValueOfLastNumber() const noexcept
{
    const static std::string defaultValue = std::string();
    if(lastNumber_)
        return *lastNumber_;
    return defaultValue;
}
const std::shared_ptr<std::string> &PurchaseOrderSku::getLastNumber() const noexcept
{
    return lastNumber_;
}
void PurchaseOrderSku::setLastNumber(const std::string &pLastNumber) noexcept
{
    lastNumber_ = std::make_shared<std::string>(pLastNumber);
    dirtyFlag_[14] = true;
}
void PurchaseOrderSku::setLastNumber(std::string &&pLastNumber) noexcept
{
    lastNumber_ = std::make_shared<std::string>(std::move(pLastNumber));
    dirtyFlag_[14] = true;
}




const std::string &PurchaseOrderSku::getValueOfPointPriceNumber() const noexcept
{
    const static std::string defaultValue = std::string();
    if(pointPriceNumber_)
        return *pointPriceNumber_;
    return defaultValue;
}
const std::shared_ptr<std::string> &PurchaseOrderSku::getPointPriceNumber() const noexcept
{
    return pointPriceNumber_;
}
void PurchaseOrderSku::setPointPriceNumber(const std::string &pPointPriceNumber) noexcept
{
    pointPriceNumber_ = std::make_shared<std::string>(pPointPriceNumber);
    dirtyFlag_[15] = true;
}
void PurchaseOrderSku::setPointPriceNumber(std::string &&pPointPriceNumber) noexcept
{
    pointPriceNumber_ = std::make_shared<std::string>(std::move(pPointPriceNumber));
    dirtyFlag_[15] = true;
}




const ::trantor::Date &PurchaseOrderSku::getValueOfCreateTime() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(createTime_)
        return *createTime_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &PurchaseOrderSku::getCreateTime() const noexcept
{
    return createTime_;
}
void PurchaseOrderSku::setCreateTime(const ::trantor::Date &pCreateTime) noexcept
{
    createTime_ = std::make_shared<::trantor::Date>(pCreateTime);
    dirtyFlag_[16] = true;
}


void PurchaseOrderSku::setCreateTimeToNull() noexcept
{
    createTime_.reset();
    dirtyFlag_[16] = true;
}


const ::trantor::Date &PurchaseOrderSku::getValueOfUpdateTime() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(updateTime_)
        return *updateTime_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &PurchaseOrderSku::getUpdateTime() const noexcept
{
    return updateTime_;
}
void PurchaseOrderSku::setUpdateTime(const ::trantor::Date &pUpdateTime) noexcept
{
    updateTime_ = std::make_shared<::trantor::Date>(pUpdateTime);
    dirtyFlag_[17] = true;
}


void PurchaseOrderSku::setUpdateTimeToNull() noexcept
{
    updateTime_.reset();
    dirtyFlag_[17] = true;
}


const uint8_t &PurchaseOrderSku::getValueOfSkuStatus() const noexcept
{
    const static uint8_t defaultValue = uint8_t();
    if(skuStatus_)
        return *skuStatus_;
    return defaultValue;
}
const std::shared_ptr<uint8_t> &PurchaseOrderSku::getSkuStatus() const noexcept
{
    return skuStatus_;
}
void PurchaseOrderSku::setSkuStatus(const uint8_t &pSkuStatus) noexcept
{
    skuStatus_ = std::make_shared<uint8_t>(pSkuStatus);
    dirtyFlag_[18] = true;
}




void PurchaseOrderSku::updateId(const uint64_t id)
{
    id_ = std::make_shared<uint64_t>(id);
}

const std::vector<std::string> &PurchaseOrderSku::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "remark",
        "is_delete",
        "shop_id",
        "purchase_order_id",
        "purchase_order_key",
        "product_history_info",
        "product_brand_id",
        "product_id",
        "product_category_id",
        "product_model_id",
        "purchase_price",
        "purchase_num",
        "admin_id",
        "last_number",
        "point_price_number",
        "create_time",
        "update_time",
        "sku_status"
    };
    return inCols;
}

void PurchaseOrderSku::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getRemark())
        {
            binder << getValueOfRemark();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getIsDelete())
        {
            binder << getValueOfIsDelete();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getShopId())
        {
            binder << getValueOfShopId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getPurchaseOrderId())
        {
            binder << getValueOfPurchaseOrderId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getPurchaseOrderKey())
        {
            binder << getValueOfPurchaseOrderKey();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getProductHistoryInfo())
        {
            binder << getValueOfProductHistoryInfo();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getProductBrandId())
        {
            binder << getValueOfProductBrandId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getProductId())
        {
            binder << getValueOfProductId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getProductCategoryId())
        {
            binder << getValueOfProductCategoryId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getProductModelId())
        {
            binder << getValueOfProductModelId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getPurchasePrice())
        {
            binder << getValueOfPurchasePrice();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getPurchaseNum())
        {
            binder << getValueOfPurchaseNum();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[13])
    {
        if(getAdminId())
        {
            binder << getValueOfAdminId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[14])
    {
        if(getLastNumber())
        {
            binder << getValueOfLastNumber();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[15])
    {
        if(getPointPriceNumber())
        {
            binder << getValueOfPointPriceNumber();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[16])
    {
        if(getCreateTime())
        {
            binder << getValueOfCreateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[17])
    {
        if(getUpdateTime())
        {
            binder << getValueOfUpdateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[18])
    {
        if(getSkuStatus())
        {
            binder << getValueOfSkuStatus();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> PurchaseOrderSku::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    if(dirtyFlag_[8])
    {
        ret.push_back(getColumnName(8));
    }
    if(dirtyFlag_[9])
    {
        ret.push_back(getColumnName(9));
    }
    if(dirtyFlag_[10])
    {
        ret.push_back(getColumnName(10));
    }
    if(dirtyFlag_[11])
    {
        ret.push_back(getColumnName(11));
    }
    if(dirtyFlag_[12])
    {
        ret.push_back(getColumnName(12));
    }
    if(dirtyFlag_[13])
    {
        ret.push_back(getColumnName(13));
    }
    if(dirtyFlag_[14])
    {
        ret.push_back(getColumnName(14));
    }
    if(dirtyFlag_[15])
    {
        ret.push_back(getColumnName(15));
    }
    if(dirtyFlag_[16])
    {
        ret.push_back(getColumnName(16));
    }
    if(dirtyFlag_[17])
    {
        ret.push_back(getColumnName(17));
    }
    if(dirtyFlag_[18])
    {
        ret.push_back(getColumnName(18));
    }
    return ret;
}

void PurchaseOrderSku::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getRemark())
        {
            binder << getValueOfRemark();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getIsDelete())
        {
            binder << getValueOfIsDelete();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getShopId())
        {
            binder << getValueOfShopId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getPurchaseOrderId())
        {
            binder << getValueOfPurchaseOrderId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getPurchaseOrderKey())
        {
            binder << getValueOfPurchaseOrderKey();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getProductHistoryInfo())
        {
            binder << getValueOfProductHistoryInfo();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getProductBrandId())
        {
            binder << getValueOfProductBrandId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getProductId())
        {
            binder << getValueOfProductId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getProductCategoryId())
        {
            binder << getValueOfProductCategoryId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getProductModelId())
        {
            binder << getValueOfProductModelId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getPurchasePrice())
        {
            binder << getValueOfPurchasePrice();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getPurchaseNum())
        {
            binder << getValueOfPurchaseNum();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[13])
    {
        if(getAdminId())
        {
            binder << getValueOfAdminId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[14])
    {
        if(getLastNumber())
        {
            binder << getValueOfLastNumber();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[15])
    {
        if(getPointPriceNumber())
        {
            binder << getValueOfPointPriceNumber();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[16])
    {
        if(getCreateTime())
        {
            binder << getValueOfCreateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[17])
    {
        if(getUpdateTime())
        {
            binder << getValueOfUpdateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[18])
    {
        if(getSkuStatus())
        {
            binder << getValueOfSkuStatus();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value PurchaseOrderSku::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=(Json::UInt64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getRemark())
    {
        ret["remark"]=getValueOfRemark();
    }
    else
    {
        ret["remark"]=Json::Value();
    }
    if(getIsDelete())
    {
        ret["is_delete"]=getValueOfIsDelete();
    }
    else
    {
        ret["is_delete"]=Json::Value();
    }
    if(getShopId())
    {
        ret["shop_id"]=(Json::UInt64)getValueOfShopId();
    }
    else
    {
        ret["shop_id"]=Json::Value();
    }
    if(getPurchaseOrderId())
    {
        ret["purchase_order_id"]=(Json::UInt64)getValueOfPurchaseOrderId();
    }
    else
    {
        ret["purchase_order_id"]=Json::Value();
    }
    if(getPurchaseOrderKey())
    {
        ret["purchase_order_key"]=getValueOfPurchaseOrderKey();
    }
    else
    {
        ret["purchase_order_key"]=Json::Value();
    }
    if(getProductHistoryInfo())
    {
        ret["product_history_info"]=getValueOfProductHistoryInfo();
    }
    else
    {
        ret["product_history_info"]=Json::Value();
    }
    if(getProductBrandId())
    {
        ret["product_brand_id"]=(Json::Int64)getValueOfProductBrandId();
    }
    else
    {
        ret["product_brand_id"]=Json::Value();
    }
    if(getProductId())
    {
        ret["product_id"]=(Json::Int64)getValueOfProductId();
    }
    else
    {
        ret["product_id"]=Json::Value();
    }
    if(getProductCategoryId())
    {
        ret["product_category_id"]=(Json::Int64)getValueOfProductCategoryId();
    }
    else
    {
        ret["product_category_id"]=Json::Value();
    }
    if(getProductModelId())
    {
        ret["product_model_id"]=(Json::Int64)getValueOfProductModelId();
    }
    else
    {
        ret["product_model_id"]=Json::Value();
    }
    if(getPurchasePrice())
    {
        ret["purchase_price"]=getValueOfPurchasePrice();
    }
    else
    {
        ret["purchase_price"]=Json::Value();
    }
    if(getPurchaseNum())
    {
        ret["purchase_num"]=getValueOfPurchaseNum();
    }
    else
    {
        ret["purchase_num"]=Json::Value();
    }
    if(getAdminId())
    {
        ret["admin_id"]=(Json::Int64)getValueOfAdminId();
    }
    else
    {
        ret["admin_id"]=Json::Value();
    }
    if(getLastNumber())
    {
        ret["last_number"]=getValueOfLastNumber();
    }
    else
    {
        ret["last_number"]=Json::Value();
    }
    if(getPointPriceNumber())
    {
        ret["point_price_number"]=getValueOfPointPriceNumber();
    }
    else
    {
        ret["point_price_number"]=Json::Value();
    }
    if(getCreateTime())
    {
        ret["create_time"]=getCreateTime()->toDbStringLocal();
    }
    else
    {
        ret["create_time"]=Json::Value();
    }
    if(getUpdateTime())
    {
        ret["update_time"]=getUpdateTime()->toDbStringLocal();
    }
    else
    {
        ret["update_time"]=Json::Value();
    }
    if(getSkuStatus())
    {
        ret["sku_status"]=getValueOfSkuStatus();
    }
    else
    {
        ret["sku_status"]=Json::Value();
    }
    return ret;
}

Json::Value PurchaseOrderSku::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 19)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=(Json::UInt64)getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getRemark())
            {
                ret[pMasqueradingVector[1]]=getValueOfRemark();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getIsDelete())
            {
                ret[pMasqueradingVector[2]]=getValueOfIsDelete();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getShopId())
            {
                ret[pMasqueradingVector[3]]=(Json::UInt64)getValueOfShopId();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getPurchaseOrderId())
            {
                ret[pMasqueradingVector[4]]=(Json::UInt64)getValueOfPurchaseOrderId();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getPurchaseOrderKey())
            {
                ret[pMasqueradingVector[5]]=getValueOfPurchaseOrderKey();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getProductHistoryInfo())
            {
                ret[pMasqueradingVector[6]]=getValueOfProductHistoryInfo();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getProductBrandId())
            {
                ret[pMasqueradingVector[7]]=(Json::Int64)getValueOfProductBrandId();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[8].empty())
        {
            if(getProductId())
            {
                ret[pMasqueradingVector[8]]=(Json::Int64)getValueOfProductId();
            }
            else
            {
                ret[pMasqueradingVector[8]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[9].empty())
        {
            if(getProductCategoryId())
            {
                ret[pMasqueradingVector[9]]=(Json::Int64)getValueOfProductCategoryId();
            }
            else
            {
                ret[pMasqueradingVector[9]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[10].empty())
        {
            if(getProductModelId())
            {
                ret[pMasqueradingVector[10]]=(Json::Int64)getValueOfProductModelId();
            }
            else
            {
                ret[pMasqueradingVector[10]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[11].empty())
        {
            if(getPurchasePrice())
            {
                ret[pMasqueradingVector[11]]=getValueOfPurchasePrice();
            }
            else
            {
                ret[pMasqueradingVector[11]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[12].empty())
        {
            if(getPurchaseNum())
            {
                ret[pMasqueradingVector[12]]=getValueOfPurchaseNum();
            }
            else
            {
                ret[pMasqueradingVector[12]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[13].empty())
        {
            if(getAdminId())
            {
                ret[pMasqueradingVector[13]]=(Json::Int64)getValueOfAdminId();
            }
            else
            {
                ret[pMasqueradingVector[13]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[14].empty())
        {
            if(getLastNumber())
            {
                ret[pMasqueradingVector[14]]=getValueOfLastNumber();
            }
            else
            {
                ret[pMasqueradingVector[14]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[15].empty())
        {
            if(getPointPriceNumber())
            {
                ret[pMasqueradingVector[15]]=getValueOfPointPriceNumber();
            }
            else
            {
                ret[pMasqueradingVector[15]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[16].empty())
        {
            if(getCreateTime())
            {
                ret[pMasqueradingVector[16]]=getCreateTime()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[16]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[17].empty())
        {
            if(getUpdateTime())
            {
                ret[pMasqueradingVector[17]]=getUpdateTime()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[17]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[18].empty())
        {
            if(getSkuStatus())
            {
                ret[pMasqueradingVector[18]]=getValueOfSkuStatus();
            }
            else
            {
                ret[pMasqueradingVector[18]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=(Json::UInt64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getRemark())
    {
        ret["remark"]=getValueOfRemark();
    }
    else
    {
        ret["remark"]=Json::Value();
    }
    if(getIsDelete())
    {
        ret["is_delete"]=getValueOfIsDelete();
    }
    else
    {
        ret["is_delete"]=Json::Value();
    }
    if(getShopId())
    {
        ret["shop_id"]=(Json::UInt64)getValueOfShopId();
    }
    else
    {
        ret["shop_id"]=Json::Value();
    }
    if(getPurchaseOrderId())
    {
        ret["purchase_order_id"]=(Json::UInt64)getValueOfPurchaseOrderId();
    }
    else
    {
        ret["purchase_order_id"]=Json::Value();
    }
    if(getPurchaseOrderKey())
    {
        ret["purchase_order_key"]=getValueOfPurchaseOrderKey();
    }
    else
    {
        ret["purchase_order_key"]=Json::Value();
    }
    if(getProductHistoryInfo())
    {
        ret["product_history_info"]=getValueOfProductHistoryInfo();
    }
    else
    {
        ret["product_history_info"]=Json::Value();
    }
    if(getProductBrandId())
    {
        ret["product_brand_id"]=(Json::Int64)getValueOfProductBrandId();
    }
    else
    {
        ret["product_brand_id"]=Json::Value();
    }
    if(getProductId())
    {
        ret["product_id"]=(Json::Int64)getValueOfProductId();
    }
    else
    {
        ret["product_id"]=Json::Value();
    }
    if(getProductCategoryId())
    {
        ret["product_category_id"]=(Json::Int64)getValueOfProductCategoryId();
    }
    else
    {
        ret["product_category_id"]=Json::Value();
    }
    if(getProductModelId())
    {
        ret["product_model_id"]=(Json::Int64)getValueOfProductModelId();
    }
    else
    {
        ret["product_model_id"]=Json::Value();
    }
    if(getPurchasePrice())
    {
        ret["purchase_price"]=getValueOfPurchasePrice();
    }
    else
    {
        ret["purchase_price"]=Json::Value();
    }
    if(getPurchaseNum())
    {
        ret["purchase_num"]=getValueOfPurchaseNum();
    }
    else
    {
        ret["purchase_num"]=Json::Value();
    }
    if(getAdminId())
    {
        ret["admin_id"]=(Json::Int64)getValueOfAdminId();
    }
    else
    {
        ret["admin_id"]=Json::Value();
    }
    if(getLastNumber())
    {
        ret["last_number"]=getValueOfLastNumber();
    }
    else
    {
        ret["last_number"]=Json::Value();
    }
    if(getPointPriceNumber())
    {
        ret["point_price_number"]=getValueOfPointPriceNumber();
    }
    else
    {
        ret["point_price_number"]=Json::Value();
    }
    if(getCreateTime())
    {
        ret["create_time"]=getCreateTime()->toDbStringLocal();
    }
    else
    {
        ret["create_time"]=Json::Value();
    }
    if(getUpdateTime())
    {
        ret["update_time"]=getUpdateTime()->toDbStringLocal();
    }
    else
    {
        ret["update_time"]=Json::Value();
    }
    if(getSkuStatus())
    {
        ret["sku_status"]=getValueOfSkuStatus();
    }
    else
    {
        ret["sku_status"]=Json::Value();
    }
    return ret;
}

bool PurchaseOrderSku::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("remark"))
    {
        if(!validJsonOfField(1, "remark", pJson["remark"], err, true))
            return false;
    }
    if(pJson.isMember("is_delete"))
    {
        if(!validJsonOfField(2, "is_delete", pJson["is_delete"], err, true))
            return false;
    }
    if(pJson.isMember("shop_id"))
    {
        if(!validJsonOfField(3, "shop_id", pJson["shop_id"], err, true))
            return false;
    }
    if(pJson.isMember("purchase_order_id"))
    {
        if(!validJsonOfField(4, "purchase_order_id", pJson["purchase_order_id"], err, true))
            return false;
    }
    if(pJson.isMember("purchase_order_key"))
    {
        if(!validJsonOfField(5, "purchase_order_key", pJson["purchase_order_key"], err, true))
            return false;
    }
    if(pJson.isMember("product_history_info"))
    {
        if(!validJsonOfField(6, "product_history_info", pJson["product_history_info"], err, true))
            return false;
    }
    if(pJson.isMember("product_brand_id"))
    {
        if(!validJsonOfField(7, "product_brand_id", pJson["product_brand_id"], err, true))
            return false;
    }
    if(pJson.isMember("product_id"))
    {
        if(!validJsonOfField(8, "product_id", pJson["product_id"], err, true))
            return false;
    }
    if(pJson.isMember("product_category_id"))
    {
        if(!validJsonOfField(9, "product_category_id", pJson["product_category_id"], err, true))
            return false;
    }
    if(pJson.isMember("product_model_id"))
    {
        if(!validJsonOfField(10, "product_model_id", pJson["product_model_id"], err, true))
            return false;
    }
    if(pJson.isMember("purchase_price"))
    {
        if(!validJsonOfField(11, "purchase_price", pJson["purchase_price"], err, true))
            return false;
    }
    if(pJson.isMember("purchase_num"))
    {
        if(!validJsonOfField(12, "purchase_num", pJson["purchase_num"], err, true))
            return false;
    }
    if(pJson.isMember("admin_id"))
    {
        if(!validJsonOfField(13, "admin_id", pJson["admin_id"], err, true))
            return false;
    }
    if(pJson.isMember("last_number"))
    {
        if(!validJsonOfField(14, "last_number", pJson["last_number"], err, true))
            return false;
    }
    if(pJson.isMember("point_price_number"))
    {
        if(!validJsonOfField(15, "point_price_number", pJson["point_price_number"], err, true))
            return false;
    }
    if(pJson.isMember("create_time"))
    {
        if(!validJsonOfField(16, "create_time", pJson["create_time"], err, true))
            return false;
    }
    if(pJson.isMember("update_time"))
    {
        if(!validJsonOfField(17, "update_time", pJson["update_time"], err, true))
            return false;
    }
    if(pJson.isMember("sku_status"))
    {
        if(!validJsonOfField(18, "sku_status", pJson["sku_status"], err, true))
            return false;
    }
    return true;
}
bool PurchaseOrderSku::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                          const std::vector<std::string> &pMasqueradingVector,
                                                          std::string &err)
{
    if(pMasqueradingVector.size() != 19)
    {
        err = "Bad masquerading vector";
        return false;
    }
    if(!pMasqueradingVector[0].empty())
    {
        if(pJson.isMember(pMasqueradingVector[0]))
        {
            if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[1].empty())
    {
        if(pJson.isMember(pMasqueradingVector[1]))
        {
            if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[2].empty())
    {
        if(pJson.isMember(pMasqueradingVector[2]))
        {
            if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[3].empty())
    {
        if(pJson.isMember(pMasqueradingVector[3]))
        {
            if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[4].empty())
    {
        if(pJson.isMember(pMasqueradingVector[4]))
        {
            if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[5].empty())
    {
        if(pJson.isMember(pMasqueradingVector[5]))
        {
            if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[6].empty())
    {
        if(pJson.isMember(pMasqueradingVector[6]))
        {
            if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[7].empty())
    {
        if(pJson.isMember(pMasqueradingVector[7]))
        {
            if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[8].empty())
    {
        if(pJson.isMember(pMasqueradingVector[8]))
        {
            if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[9].empty())
    {
        if(pJson.isMember(pMasqueradingVector[9]))
        {
            if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[10].empty())
    {
        if(pJson.isMember(pMasqueradingVector[10]))
        {
            if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[11].empty())
    {
        if(pJson.isMember(pMasqueradingVector[11]))
        {
            if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[12].empty())
    {
        if(pJson.isMember(pMasqueradingVector[12]))
        {
            if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[13].empty())
    {
        if(pJson.isMember(pMasqueradingVector[13]))
        {
            if(!validJsonOfField(13, pMasqueradingVector[13], pJson[pMasqueradingVector[13]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[14].empty())
    {
        if(pJson.isMember(pMasqueradingVector[14]))
        {
            if(!validJsonOfField(14, pMasqueradingVector[14], pJson[pMasqueradingVector[14]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[15].empty())
    {
        if(pJson.isMember(pMasqueradingVector[15]))
        {
            if(!validJsonOfField(15, pMasqueradingVector[15], pJson[pMasqueradingVector[15]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[16].empty())
    {
        if(pJson.isMember(pMasqueradingVector[16]))
        {
            if(!validJsonOfField(16, pMasqueradingVector[16], pJson[pMasqueradingVector[16]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[17].empty())
    {
        if(pJson.isMember(pMasqueradingVector[17]))
        {
            if(!validJsonOfField(17, pMasqueradingVector[17], pJson[pMasqueradingVector[17]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[18].empty())
    {
        if(pJson.isMember(pMasqueradingVector[18]))
        {
            if(!validJsonOfField(18, pMasqueradingVector[18], pJson[pMasqueradingVector[18]], err, true))
                return false;
        }
    }
    return true;
}
bool PurchaseOrderSku::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("remark"))
    {
        if(!validJsonOfField(1, "remark", pJson["remark"], err, false))
            return false;
    }
    if(pJson.isMember("is_delete"))
    {
        if(!validJsonOfField(2, "is_delete", pJson["is_delete"], err, false))
            return false;
    }
    if(pJson.isMember("shop_id"))
    {
        if(!validJsonOfField(3, "shop_id", pJson["shop_id"], err, false))
            return false;
    }
    if(pJson.isMember("purchase_order_id"))
    {
        if(!validJsonOfField(4, "purchase_order_id", pJson["purchase_order_id"], err, false))
            return false;
    }
    if(pJson.isMember("purchase_order_key"))
    {
        if(!validJsonOfField(5, "purchase_order_key", pJson["purchase_order_key"], err, false))
            return false;
    }
    if(pJson.isMember("product_history_info"))
    {
        if(!validJsonOfField(6, "product_history_info", pJson["product_history_info"], err, false))
            return false;
    }
    if(pJson.isMember("product_brand_id"))
    {
        if(!validJsonOfField(7, "product_brand_id", pJson["product_brand_id"], err, false))
            return false;
    }
    if(pJson.isMember("product_id"))
    {
        if(!validJsonOfField(8, "product_id", pJson["product_id"], err, false))
            return false;
    }
    if(pJson.isMember("product_category_id"))
    {
        if(!validJsonOfField(9, "product_category_id", pJson["product_category_id"], err, false))
            return false;
    }
    if(pJson.isMember("product_model_id"))
    {
        if(!validJsonOfField(10, "product_model_id", pJson["product_model_id"], err, false))
            return false;
    }
    if(pJson.isMember("purchase_price"))
    {
        if(!validJsonOfField(11, "purchase_price", pJson["purchase_price"], err, false))
            return false;
    }
    if(pJson.isMember("purchase_num"))
    {
        if(!validJsonOfField(12, "purchase_num", pJson["purchase_num"], err, false))
            return false;
    }
    if(pJson.isMember("admin_id"))
    {
        if(!validJsonOfField(13, "admin_id", pJson["admin_id"], err, false))
            return false;
    }
    if(pJson.isMember("last_number"))
    {
        if(!validJsonOfField(14, "last_number", pJson["last_number"], err, false))
            return false;
    }
    if(pJson.isMember("point_price_number"))
    {
        if(!validJsonOfField(15, "point_price_number", pJson["point_price_number"], err, false))
            return false;
    }
    if(pJson.isMember("create_time"))
    {
        if(!validJsonOfField(16, "create_time", pJson["create_time"], err, false))
            return false;
    }
    if(pJson.isMember("update_time"))
    {
        if(!validJsonOfField(17, "update_time", pJson["update_time"], err, false))
            return false;
    }
    if(pJson.isMember("sku_status"))
    {
        if(!validJsonOfField(18, "sku_status", pJson["sku_status"], err, false))
            return false;
    }
    return true;
}
bool PurchaseOrderSku::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                        const std::vector<std::string> &pMasqueradingVector,
                                                        std::string &err)
{
    if(pMasqueradingVector.size() != 19)
    {
        err = "Bad masquerading vector";
        return false;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
            return false;
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
            return false;
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
            return false;
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
            return false;
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
            return false;
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
            return false;
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
            return false;
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, false))
            return false;
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, false))
            return false;
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, false))
            return false;
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, false))
            return false;
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, false))
            return false;
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        if(!validJsonOfField(13, pMasqueradingVector[13], pJson[pMasqueradingVector[13]], err, false))
            return false;
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        if(!validJsonOfField(14, pMasqueradingVector[14], pJson[pMasqueradingVector[14]], err, false))
            return false;
    }
    if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
    {
        if(!validJsonOfField(15, pMasqueradingVector[15], pJson[pMasqueradingVector[15]], err, false))
            return false;
    }
    if(!pMasqueradingVector[16].empty() && pJson.isMember(pMasqueradingVector[16]))
    {
        if(!validJsonOfField(16, pMasqueradingVector[16], pJson[pMasqueradingVector[16]], err, false))
            return false;
    }
    if(!pMasqueradingVector[17].empty() && pJson.isMember(pMasqueradingVector[17]))
    {
        if(!validJsonOfField(17, pMasqueradingVector[17], pJson[pMasqueradingVector[17]], err, false))
            return false;
    }
    if(!pMasqueradingVector[18].empty() && pJson.isMember(pMasqueradingVector[18]))
    {
        if(!validJsonOfField(18, pMasqueradingVector[18], pJson[pMasqueradingVector[18]], err, false))
            return false;
    }
    return true;
}
bool PurchaseOrderSku::validJsonOfField(size_t index,
                                        const std::string &fieldName,
                                        const Json::Value &pJson, 
                                        std::string &err, 
                                        bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }        
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 45)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 45)";
                return false;               
            }

            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 5:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 45)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 45)";
                return false;               
            }

            break;
        case 6:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 7:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 8:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 9:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 10:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 11:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 12:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 13:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 14:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 15:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 16:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 17:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 18:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
     
        default:
            err="Internal error in the server";
            return false;
            break;
    }
    return true;
}
