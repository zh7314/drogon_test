/**
 *
 *  ClientCompany.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "ClientCompany.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::v2;

const std::string ClientCompany::Cols::_id = "id";
const std::string ClientCompany::Cols::_client_company_name = "client_company_name";
const std::string ClientCompany::Cols::_create_time = "create_time";
const std::string ClientCompany::Cols::_update_time = "update_time";
const std::string ClientCompany::Cols::_contacts = "contacts";
const std::string ClientCompany::Cols::_contacts_phone = "contacts_phone";
const std::string ClientCompany::Cols::_admins_id = "admins_id";
const std::string ClientCompany::primaryKeyName = "id";
const bool ClientCompany::hasPrimaryKey = true;
const std::string ClientCompany::tableName = "client_company";

const std::vector<typename ClientCompany::MetaData> ClientCompany::metaData_={
{"id","uint32_t","int(11) unsigned",4,1,1,1},
{"client_company_name","std::string","varchar(50)",50,0,0,1},
{"create_time","::trantor::Date","datetime",0,0,0,1},
{"update_time","::trantor::Date","datetime",0,0,0,1},
{"contacts","std::string","varchar(20)",20,0,0,0},
{"contacts_phone","std::string","varchar(20)",20,0,0,0},
{"admins_id","int32_t","int(11)",4,0,0,1}
};
const std::string &ClientCompany::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
ClientCompany::ClientCompany(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<uint32_t>(r["id"].as<uint32_t>());
        }
        if(!r["client_company_name"].isNull())
        {
            clientCompanyName_=std::make_shared<std::string>(r["client_company_name"].as<std::string>());
        }
        if(!r["create_time"].isNull())
        {
            auto timeStr = r["create_time"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        if(!r["update_time"].isNull())
        {
            auto timeStr = r["update_time"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        if(!r["contacts"].isNull())
        {
            contacts_=std::make_shared<std::string>(r["contacts"].as<std::string>());
        }
        if(!r["contacts_phone"].isNull())
        {
            contactsPhone_=std::make_shared<std::string>(r["contacts_phone"].as<std::string>());
        }
        if(!r["admins_id"].isNull())
        {
            adminsId_=std::make_shared<int32_t>(r["admins_id"].as<int32_t>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 7 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<uint32_t>(r[index].as<uint32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            clientCompanyName_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            contacts_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            contactsPhone_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            adminsId_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
    }

}

ClientCompany::ClientCompany(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 7)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            clientCompanyName_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[2]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[3]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            contacts_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            contactsPhone_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            adminsId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[6]].asInt64());
        }
    }
}

ClientCompany::ClientCompany(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<uint32_t>((uint32_t)pJson["id"].asUInt64());
        }
    }
    if(pJson.isMember("client_company_name"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["client_company_name"].isNull())
        {
            clientCompanyName_=std::make_shared<std::string>(pJson["client_company_name"].asString());
        }
    }
    if(pJson.isMember("create_time"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["create_time"].isNull())
        {
            auto timeStr = pJson["create_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("update_time"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["update_time"].isNull())
        {
            auto timeStr = pJson["update_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("contacts"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["contacts"].isNull())
        {
            contacts_=std::make_shared<std::string>(pJson["contacts"].asString());
        }
    }
    if(pJson.isMember("contacts_phone"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["contacts_phone"].isNull())
        {
            contactsPhone_=std::make_shared<std::string>(pJson["contacts_phone"].asString());
        }
    }
    if(pJson.isMember("admins_id"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["admins_id"].isNull())
        {
            adminsId_=std::make_shared<int32_t>((int32_t)pJson["admins_id"].asInt64());
        }
    }
}

void ClientCompany::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 7)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            clientCompanyName_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[2]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[3]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            contacts_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            contactsPhone_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            adminsId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[6]].asInt64());
        }
    }
}
                                                                    
void ClientCompany::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<uint32_t>((uint32_t)pJson["id"].asUInt64());
        }
    }
    if(pJson.isMember("client_company_name"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["client_company_name"].isNull())
        {
            clientCompanyName_=std::make_shared<std::string>(pJson["client_company_name"].asString());
        }
    }
    if(pJson.isMember("create_time"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["create_time"].isNull())
        {
            auto timeStr = pJson["create_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("update_time"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["update_time"].isNull())
        {
            auto timeStr = pJson["update_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("contacts"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["contacts"].isNull())
        {
            contacts_=std::make_shared<std::string>(pJson["contacts"].asString());
        }
    }
    if(pJson.isMember("contacts_phone"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["contacts_phone"].isNull())
        {
            contactsPhone_=std::make_shared<std::string>(pJson["contacts_phone"].asString());
        }
    }
    if(pJson.isMember("admins_id"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["admins_id"].isNull())
        {
            adminsId_=std::make_shared<int32_t>((int32_t)pJson["admins_id"].asInt64());
        }
    }
}

const uint32_t &ClientCompany::getValueOfId() const noexcept
{
    const static uint32_t defaultValue = uint32_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<uint32_t> &ClientCompany::getId() const noexcept
{
    return id_;
}
void ClientCompany::setId(const uint32_t &pId) noexcept
{
    id_ = std::make_shared<uint32_t>(pId);
    dirtyFlag_[0] = true;
}



const typename ClientCompany::PrimaryKeyType & ClientCompany::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const std::string &ClientCompany::getValueOfClientCompanyName() const noexcept
{
    const static std::string defaultValue = std::string();
    if(clientCompanyName_)
        return *clientCompanyName_;
    return defaultValue;
}
const std::shared_ptr<std::string> &ClientCompany::getClientCompanyName() const noexcept
{
    return clientCompanyName_;
}
void ClientCompany::setClientCompanyName(const std::string &pClientCompanyName) noexcept
{
    clientCompanyName_ = std::make_shared<std::string>(pClientCompanyName);
    dirtyFlag_[1] = true;
}
void ClientCompany::setClientCompanyName(std::string &&pClientCompanyName) noexcept
{
    clientCompanyName_ = std::make_shared<std::string>(std::move(pClientCompanyName));
    dirtyFlag_[1] = true;
}




const ::trantor::Date &ClientCompany::getValueOfCreateTime() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(createTime_)
        return *createTime_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &ClientCompany::getCreateTime() const noexcept
{
    return createTime_;
}
void ClientCompany::setCreateTime(const ::trantor::Date &pCreateTime) noexcept
{
    createTime_ = std::make_shared<::trantor::Date>(pCreateTime);
    dirtyFlag_[2] = true;
}




const ::trantor::Date &ClientCompany::getValueOfUpdateTime() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(updateTime_)
        return *updateTime_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &ClientCompany::getUpdateTime() const noexcept
{
    return updateTime_;
}
void ClientCompany::setUpdateTime(const ::trantor::Date &pUpdateTime) noexcept
{
    updateTime_ = std::make_shared<::trantor::Date>(pUpdateTime);
    dirtyFlag_[3] = true;
}




const std::string &ClientCompany::getValueOfContacts() const noexcept
{
    const static std::string defaultValue = std::string();
    if(contacts_)
        return *contacts_;
    return defaultValue;
}
const std::shared_ptr<std::string> &ClientCompany::getContacts() const noexcept
{
    return contacts_;
}
void ClientCompany::setContacts(const std::string &pContacts) noexcept
{
    contacts_ = std::make_shared<std::string>(pContacts);
    dirtyFlag_[4] = true;
}
void ClientCompany::setContacts(std::string &&pContacts) noexcept
{
    contacts_ = std::make_shared<std::string>(std::move(pContacts));
    dirtyFlag_[4] = true;
}


void ClientCompany::setContactsToNull() noexcept
{
    contacts_.reset();
    dirtyFlag_[4] = true;
}


const std::string &ClientCompany::getValueOfContactsPhone() const noexcept
{
    const static std::string defaultValue = std::string();
    if(contactsPhone_)
        return *contactsPhone_;
    return defaultValue;
}
const std::shared_ptr<std::string> &ClientCompany::getContactsPhone() const noexcept
{
    return contactsPhone_;
}
void ClientCompany::setContactsPhone(const std::string &pContactsPhone) noexcept
{
    contactsPhone_ = std::make_shared<std::string>(pContactsPhone);
    dirtyFlag_[5] = true;
}
void ClientCompany::setContactsPhone(std::string &&pContactsPhone) noexcept
{
    contactsPhone_ = std::make_shared<std::string>(std::move(pContactsPhone));
    dirtyFlag_[5] = true;
}


void ClientCompany::setContactsPhoneToNull() noexcept
{
    contactsPhone_.reset();
    dirtyFlag_[5] = true;
}


const int32_t &ClientCompany::getValueOfAdminsId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(adminsId_)
        return *adminsId_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &ClientCompany::getAdminsId() const noexcept
{
    return adminsId_;
}
void ClientCompany::setAdminsId(const int32_t &pAdminsId) noexcept
{
    adminsId_ = std::make_shared<int32_t>(pAdminsId);
    dirtyFlag_[6] = true;
}




void ClientCompany::updateId(const uint64_t id)
{
    id_ = std::make_shared<uint32_t>(static_cast<uint32_t>(id));
}

const std::vector<std::string> &ClientCompany::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "client_company_name",
        "create_time",
        "update_time",
        "contacts",
        "contacts_phone",
        "admins_id"
    };
    return inCols;
}

void ClientCompany::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getClientCompanyName())
        {
            binder << getValueOfClientCompanyName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getCreateTime())
        {
            binder << getValueOfCreateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getUpdateTime())
        {
            binder << getValueOfUpdateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getContacts())
        {
            binder << getValueOfContacts();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getContactsPhone())
        {
            binder << getValueOfContactsPhone();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getAdminsId())
        {
            binder << getValueOfAdminsId();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> ClientCompany::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    return ret;
}

void ClientCompany::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getClientCompanyName())
        {
            binder << getValueOfClientCompanyName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getCreateTime())
        {
            binder << getValueOfCreateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getUpdateTime())
        {
            binder << getValueOfUpdateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getContacts())
        {
            binder << getValueOfContacts();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getContactsPhone())
        {
            binder << getValueOfContactsPhone();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getAdminsId())
        {
            binder << getValueOfAdminsId();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value ClientCompany::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getClientCompanyName())
    {
        ret["client_company_name"]=getValueOfClientCompanyName();
    }
    else
    {
        ret["client_company_name"]=Json::Value();
    }
    if(getCreateTime())
    {
        ret["create_time"]=getCreateTime()->toDbStringLocal();
    }
    else
    {
        ret["create_time"]=Json::Value();
    }
    if(getUpdateTime())
    {
        ret["update_time"]=getUpdateTime()->toDbStringLocal();
    }
    else
    {
        ret["update_time"]=Json::Value();
    }
    if(getContacts())
    {
        ret["contacts"]=getValueOfContacts();
    }
    else
    {
        ret["contacts"]=Json::Value();
    }
    if(getContactsPhone())
    {
        ret["contacts_phone"]=getValueOfContactsPhone();
    }
    else
    {
        ret["contacts_phone"]=Json::Value();
    }
    if(getAdminsId())
    {
        ret["admins_id"]=getValueOfAdminsId();
    }
    else
    {
        ret["admins_id"]=Json::Value();
    }
    return ret;
}

Json::Value ClientCompany::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 7)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getClientCompanyName())
            {
                ret[pMasqueradingVector[1]]=getValueOfClientCompanyName();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getCreateTime())
            {
                ret[pMasqueradingVector[2]]=getCreateTime()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getUpdateTime())
            {
                ret[pMasqueradingVector[3]]=getUpdateTime()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getContacts())
            {
                ret[pMasqueradingVector[4]]=getValueOfContacts();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getContactsPhone())
            {
                ret[pMasqueradingVector[5]]=getValueOfContactsPhone();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getAdminsId())
            {
                ret[pMasqueradingVector[6]]=getValueOfAdminsId();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getClientCompanyName())
    {
        ret["client_company_name"]=getValueOfClientCompanyName();
    }
    else
    {
        ret["client_company_name"]=Json::Value();
    }
    if(getCreateTime())
    {
        ret["create_time"]=getCreateTime()->toDbStringLocal();
    }
    else
    {
        ret["create_time"]=Json::Value();
    }
    if(getUpdateTime())
    {
        ret["update_time"]=getUpdateTime()->toDbStringLocal();
    }
    else
    {
        ret["update_time"]=Json::Value();
    }
    if(getContacts())
    {
        ret["contacts"]=getValueOfContacts();
    }
    else
    {
        ret["contacts"]=Json::Value();
    }
    if(getContactsPhone())
    {
        ret["contacts_phone"]=getValueOfContactsPhone();
    }
    else
    {
        ret["contacts_phone"]=Json::Value();
    }
    if(getAdminsId())
    {
        ret["admins_id"]=getValueOfAdminsId();
    }
    else
    {
        ret["admins_id"]=Json::Value();
    }
    return ret;
}

bool ClientCompany::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("client_company_name"))
    {
        if(!validJsonOfField(1, "client_company_name", pJson["client_company_name"], err, true))
            return false;
    }
    else
    {
        err="The client_company_name column cannot be null";
        return false;
    }
    if(pJson.isMember("create_time"))
    {
        if(!validJsonOfField(2, "create_time", pJson["create_time"], err, true))
            return false;
    }
    if(pJson.isMember("update_time"))
    {
        if(!validJsonOfField(3, "update_time", pJson["update_time"], err, true))
            return false;
    }
    if(pJson.isMember("contacts"))
    {
        if(!validJsonOfField(4, "contacts", pJson["contacts"], err, true))
            return false;
    }
    if(pJson.isMember("contacts_phone"))
    {
        if(!validJsonOfField(5, "contacts_phone", pJson["contacts_phone"], err, true))
            return false;
    }
    if(pJson.isMember("admins_id"))
    {
        if(!validJsonOfField(6, "admins_id", pJson["admins_id"], err, true))
            return false;
    }
    return true;
}
bool ClientCompany::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                       const std::vector<std::string> &pMasqueradingVector,
                                                       std::string &err)
{
    if(pMasqueradingVector.size() != 7)
    {
        err = "Bad masquerading vector";
        return false;
    }
    if(!pMasqueradingVector[0].empty())
    {
        if(pJson.isMember(pMasqueradingVector[0]))
        {
            if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[1].empty())
    {
        if(pJson.isMember(pMasqueradingVector[1]))
        {
            if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                return false;
        }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
    }
    if(!pMasqueradingVector[2].empty())
    {
        if(pJson.isMember(pMasqueradingVector[2]))
        {
            if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[3].empty())
    {
        if(pJson.isMember(pMasqueradingVector[3]))
        {
            if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[4].empty())
    {
        if(pJson.isMember(pMasqueradingVector[4]))
        {
            if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[5].empty())
    {
        if(pJson.isMember(pMasqueradingVector[5]))
        {
            if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[6].empty())
    {
        if(pJson.isMember(pMasqueradingVector[6]))
        {
            if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                return false;
        }
    }
    return true;
}
bool ClientCompany::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("client_company_name"))
    {
        if(!validJsonOfField(1, "client_company_name", pJson["client_company_name"], err, false))
            return false;
    }
    if(pJson.isMember("create_time"))
    {
        if(!validJsonOfField(2, "create_time", pJson["create_time"], err, false))
            return false;
    }
    if(pJson.isMember("update_time"))
    {
        if(!validJsonOfField(3, "update_time", pJson["update_time"], err, false))
            return false;
    }
    if(pJson.isMember("contacts"))
    {
        if(!validJsonOfField(4, "contacts", pJson["contacts"], err, false))
            return false;
    }
    if(pJson.isMember("contacts_phone"))
    {
        if(!validJsonOfField(5, "contacts_phone", pJson["contacts_phone"], err, false))
            return false;
    }
    if(pJson.isMember("admins_id"))
    {
        if(!validJsonOfField(6, "admins_id", pJson["admins_id"], err, false))
            return false;
    }
    return true;
}
bool ClientCompany::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                     const std::vector<std::string> &pMasqueradingVector,
                                                     std::string &err)
{
    if(pMasqueradingVector.size() != 7)
    {
        err = "Bad masquerading vector";
        return false;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
            return false;
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
            return false;
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
            return false;
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
            return false;
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
            return false;
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
            return false;
    }
    return true;
}
bool ClientCompany::validJsonOfField(size_t index,
                                     const std::string &fieldName,
                                     const Json::Value &pJson, 
                                     std::string &err, 
                                     bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }        
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 50)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 50)";
                return false;               
            }

            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 20)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 20)";
                return false;               
            }

            break;
        case 5:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 20)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 20)";
                return false;               
            }

            break;
        case 6:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
     
        default:
            err="Internal error in the server";
            return false;
            break;
    }
    return true;
}
