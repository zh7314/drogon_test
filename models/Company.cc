/**
 *
 *  Company.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Company.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::v2;

const std::string Company::Cols::_id = "id";
const std::string Company::Cols::_create_time = "create_time";
const std::string Company::Cols::_update_time = "update_time";
const std::string Company::Cols::_company_name = "company_name";
const std::string Company::Cols::_company_short_name = "company_short_name";
const std::string Company::Cols::_company_type = "company_type";
const std::string Company::Cols::_shop_id = "shop_id";
const std::string Company::Cols::_user_id = "user_id";
const std::string Company::Cols::_company_status = "company_status";
const std::string Company::Cols::_remark = "remark";
const std::string Company::Cols::_company_fax = "company_fax";
const std::string Company::Cols::_company_qq = "company_qq";
const std::string Company::Cols::_company_email = "company_email";
const std::string Company::Cols::_company_trade_type = "company_trade_type";
const std::string Company::Cols::_is_lock = "is_lock";
const std::string Company::Cols::_company_logo = "company_logo";
const std::string Company::Cols::_company_tax_number = "company_tax_number";
const std::string Company::Cols::_company_billing_address = "company_billing_address";
const std::string Company::Cols::_company_billing_phone = "company_billing_phone";
const std::string Company::Cols::_is_default = "is_default";
const std::string Company::Cols::_company_representative = "company_representative";
const std::string Company::Cols::_is_delete = "is_delete";
const std::string Company::Cols::_sort = "sort";
const std::string Company::Cols::_account_balance = "account_balance";
const std::string Company::Cols::_company_business_license = "company_business_license";
const std::string Company::Cols::_company_mail_address = "company_mail_address";
const std::string Company::Cols::_province_id = "province_id";
const std::string Company::Cols::_city_id = "city_id";
const std::string Company::Cols::_area_id = "area_id";
const std::string Company::Cols::_address = "address";
const std::string Company::Cols::_company_phone = "company_phone";
const std::string Company::Cols::_company_opening_bank = "company_opening_bank";
const std::string Company::Cols::_company_bank_account = "company_bank_account";
const std::string Company::Cols::_supplier_level = "supplier_level";
const std::string Company::Cols::_k3_supplier_id = "k3_supplier_id";
const std::string Company::Cols::_admin_id = "admin_id";
const std::string Company::Cols::_score = "score";
const std::string Company::Cols::_score_json = "score_json";
const std::string Company::Cols::_score_status = "score_status";
const std::string Company::primaryKeyName = "id";
const bool Company::hasPrimaryKey = true;
const std::string Company::tableName = "company";

const std::vector<typename Company::MetaData> Company::metaData_={
{"id","uint64_t","bigint(20) unsigned",8,1,1,1},
{"create_time","::trantor::Date","datetime",0,0,0,1},
{"update_time","::trantor::Date","datetime",0,0,0,1},
{"company_name","std::string","varchar(30)",30,0,0,1},
{"company_short_name","std::string","varchar(30)",30,0,0,0},
{"company_type","uint8_t","tinyint(1) unsigned",1,0,0,1},
{"shop_id","uint64_t","bigint(20) unsigned",8,0,0,1},
{"user_id","uint64_t","bigint(20) unsigned",8,0,0,1},
{"company_status","int8_t","tinyint(1)",1,0,0,1},
{"remark","std::string","varchar(200)",200,0,0,0},
{"company_fax","std::string","varchar(20)",20,0,0,0},
{"company_qq","std::string","varchar(20)",20,0,0,0},
{"company_email","std::string","varchar(100)",100,0,0,0},
{"company_trade_type","uint8_t","tinyint(1) unsigned",1,0,0,1},
{"is_lock","uint8_t","tinyint(1) unsigned",1,0,0,1},
{"company_logo","std::string","varchar(300)",300,0,0,0},
{"company_tax_number","std::string","varchar(50)",50,0,0,0},
{"company_billing_address","std::string","varchar(100)",100,0,0,0},
{"company_billing_phone","std::string","varchar(50)",50,0,0,1},
{"is_default","uint8_t","tinyint(1) unsigned",1,0,0,1},
{"company_representative","std::string","varchar(20)",20,0,0,0},
{"is_delete","uint8_t","tinyint(1) unsigned",1,0,0,1},
{"sort","uint8_t","tinyint(1) unsigned",1,0,0,1},
{"account_balance","std::string","decimal(32,2)",0,0,0,1},
{"company_business_license","std::string","varchar(200)",200,0,0,0},
{"company_mail_address","std::string","varchar(50)",50,0,0,0},
{"province_id","int64_t","bigint(20)",8,0,0,1},
{"city_id","int64_t","bigint(20)",8,0,0,1},
{"area_id","int64_t","bigint(20)",8,0,0,1},
{"address","std::string","varchar(200)",200,0,0,0},
{"company_phone","std::string","varchar(20)",20,0,0,0},
{"company_opening_bank","std::string","varchar(50)",50,0,0,0},
{"company_bank_account","std::string","varchar(50)",50,0,0,0},
{"supplier_level","uint8_t","tinyint(1) unsigned",1,0,0,1},
{"k3_supplier_id","int32_t","int(11)",4,0,0,1},
{"admin_id","uint64_t","bigint(20) unsigned",8,0,0,1},
{"score","std::string","decimal(10,2)",0,0,0,1},
{"score_json","std::string","text",0,0,0,0},
{"score_status","uint8_t","tinyint(1) unsigned",1,0,0,1}
};
const std::string &Company::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Company::Company(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<uint64_t>(r["id"].as<uint64_t>());
        }
        if(!r["create_time"].isNull())
        {
            auto timeStr = r["create_time"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        if(!r["update_time"].isNull())
        {
            auto timeStr = r["update_time"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        if(!r["company_name"].isNull())
        {
            companyName_=std::make_shared<std::string>(r["company_name"].as<std::string>());
        }
        if(!r["company_short_name"].isNull())
        {
            companyShortName_=std::make_shared<std::string>(r["company_short_name"].as<std::string>());
        }
        if(!r["company_type"].isNull())
        {
            companyType_=std::make_shared<uint8_t>(r["company_type"].as<uint8_t>());
        }
        if(!r["shop_id"].isNull())
        {
            shopId_=std::make_shared<uint64_t>(r["shop_id"].as<uint64_t>());
        }
        if(!r["user_id"].isNull())
        {
            userId_=std::make_shared<uint64_t>(r["user_id"].as<uint64_t>());
        }
        if(!r["company_status"].isNull())
        {
            companyStatus_=std::make_shared<int8_t>(r["company_status"].as<int8_t>());
        }
        if(!r["remark"].isNull())
        {
            remark_=std::make_shared<std::string>(r["remark"].as<std::string>());
        }
        if(!r["company_fax"].isNull())
        {
            companyFax_=std::make_shared<std::string>(r["company_fax"].as<std::string>());
        }
        if(!r["company_qq"].isNull())
        {
            companyQq_=std::make_shared<std::string>(r["company_qq"].as<std::string>());
        }
        if(!r["company_email"].isNull())
        {
            companyEmail_=std::make_shared<std::string>(r["company_email"].as<std::string>());
        }
        if(!r["company_trade_type"].isNull())
        {
            companyTradeType_=std::make_shared<uint8_t>(r["company_trade_type"].as<uint8_t>());
        }
        if(!r["is_lock"].isNull())
        {
            isLock_=std::make_shared<uint8_t>(r["is_lock"].as<uint8_t>());
        }
        if(!r["company_logo"].isNull())
        {
            companyLogo_=std::make_shared<std::string>(r["company_logo"].as<std::string>());
        }
        if(!r["company_tax_number"].isNull())
        {
            companyTaxNumber_=std::make_shared<std::string>(r["company_tax_number"].as<std::string>());
        }
        if(!r["company_billing_address"].isNull())
        {
            companyBillingAddress_=std::make_shared<std::string>(r["company_billing_address"].as<std::string>());
        }
        if(!r["company_billing_phone"].isNull())
        {
            companyBillingPhone_=std::make_shared<std::string>(r["company_billing_phone"].as<std::string>());
        }
        if(!r["is_default"].isNull())
        {
            isDefault_=std::make_shared<uint8_t>(r["is_default"].as<uint8_t>());
        }
        if(!r["company_representative"].isNull())
        {
            companyRepresentative_=std::make_shared<std::string>(r["company_representative"].as<std::string>());
        }
        if(!r["is_delete"].isNull())
        {
            isDelete_=std::make_shared<uint8_t>(r["is_delete"].as<uint8_t>());
        }
        if(!r["sort"].isNull())
        {
            sort_=std::make_shared<uint8_t>(r["sort"].as<uint8_t>());
        }
        if(!r["account_balance"].isNull())
        {
            accountBalance_=std::make_shared<std::string>(r["account_balance"].as<std::string>());
        }
        if(!r["company_business_license"].isNull())
        {
            companyBusinessLicense_=std::make_shared<std::string>(r["company_business_license"].as<std::string>());
        }
        if(!r["company_mail_address"].isNull())
        {
            companyMailAddress_=std::make_shared<std::string>(r["company_mail_address"].as<std::string>());
        }
        if(!r["province_id"].isNull())
        {
            provinceId_=std::make_shared<int64_t>(r["province_id"].as<int64_t>());
        }
        if(!r["city_id"].isNull())
        {
            cityId_=std::make_shared<int64_t>(r["city_id"].as<int64_t>());
        }
        if(!r["area_id"].isNull())
        {
            areaId_=std::make_shared<int64_t>(r["area_id"].as<int64_t>());
        }
        if(!r["address"].isNull())
        {
            address_=std::make_shared<std::string>(r["address"].as<std::string>());
        }
        if(!r["company_phone"].isNull())
        {
            companyPhone_=std::make_shared<std::string>(r["company_phone"].as<std::string>());
        }
        if(!r["company_opening_bank"].isNull())
        {
            companyOpeningBank_=std::make_shared<std::string>(r["company_opening_bank"].as<std::string>());
        }
        if(!r["company_bank_account"].isNull())
        {
            companyBankAccount_=std::make_shared<std::string>(r["company_bank_account"].as<std::string>());
        }
        if(!r["supplier_level"].isNull())
        {
            supplierLevel_=std::make_shared<uint8_t>(r["supplier_level"].as<uint8_t>());
        }
        if(!r["k3_supplier_id"].isNull())
        {
            k3SupplierId_=std::make_shared<int32_t>(r["k3_supplier_id"].as<int32_t>());
        }
        if(!r["admin_id"].isNull())
        {
            adminId_=std::make_shared<uint64_t>(r["admin_id"].as<uint64_t>());
        }
        if(!r["score"].isNull())
        {
            score_=std::make_shared<std::string>(r["score"].as<std::string>());
        }
        if(!r["score_json"].isNull())
        {
            scoreJson_=std::make_shared<std::string>(r["score_json"].as<std::string>());
        }
        if(!r["score_status"].isNull())
        {
            scoreStatus_=std::make_shared<uint8_t>(r["score_status"].as<uint8_t>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 39 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            companyName_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            companyShortName_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            companyType_=std::make_shared<uint8_t>(r[index].as<uint8_t>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            shopId_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            userId_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 8;
        if(!r[index].isNull())
        {
            companyStatus_=std::make_shared<int8_t>(r[index].as<int8_t>());
        }
        index = offset + 9;
        if(!r[index].isNull())
        {
            remark_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 10;
        if(!r[index].isNull())
        {
            companyFax_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 11;
        if(!r[index].isNull())
        {
            companyQq_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 12;
        if(!r[index].isNull())
        {
            companyEmail_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 13;
        if(!r[index].isNull())
        {
            companyTradeType_=std::make_shared<uint8_t>(r[index].as<uint8_t>());
        }
        index = offset + 14;
        if(!r[index].isNull())
        {
            isLock_=std::make_shared<uint8_t>(r[index].as<uint8_t>());
        }
        index = offset + 15;
        if(!r[index].isNull())
        {
            companyLogo_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 16;
        if(!r[index].isNull())
        {
            companyTaxNumber_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 17;
        if(!r[index].isNull())
        {
            companyBillingAddress_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 18;
        if(!r[index].isNull())
        {
            companyBillingPhone_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 19;
        if(!r[index].isNull())
        {
            isDefault_=std::make_shared<uint8_t>(r[index].as<uint8_t>());
        }
        index = offset + 20;
        if(!r[index].isNull())
        {
            companyRepresentative_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 21;
        if(!r[index].isNull())
        {
            isDelete_=std::make_shared<uint8_t>(r[index].as<uint8_t>());
        }
        index = offset + 22;
        if(!r[index].isNull())
        {
            sort_=std::make_shared<uint8_t>(r[index].as<uint8_t>());
        }
        index = offset + 23;
        if(!r[index].isNull())
        {
            accountBalance_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 24;
        if(!r[index].isNull())
        {
            companyBusinessLicense_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 25;
        if(!r[index].isNull())
        {
            companyMailAddress_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 26;
        if(!r[index].isNull())
        {
            provinceId_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 27;
        if(!r[index].isNull())
        {
            cityId_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 28;
        if(!r[index].isNull())
        {
            areaId_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 29;
        if(!r[index].isNull())
        {
            address_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 30;
        if(!r[index].isNull())
        {
            companyPhone_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 31;
        if(!r[index].isNull())
        {
            companyOpeningBank_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 32;
        if(!r[index].isNull())
        {
            companyBankAccount_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 33;
        if(!r[index].isNull())
        {
            supplierLevel_=std::make_shared<uint8_t>(r[index].as<uint8_t>());
        }
        index = offset + 34;
        if(!r[index].isNull())
        {
            k3SupplierId_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 35;
        if(!r[index].isNull())
        {
            adminId_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 36;
        if(!r[index].isNull())
        {
            score_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 37;
        if(!r[index].isNull())
        {
            scoreJson_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 38;
        if(!r[index].isNull())
        {
            scoreStatus_=std::make_shared<uint8_t>(r[index].as<uint8_t>());
        }
    }

}

Company::Company(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 39)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[1]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[2]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            companyName_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            companyShortName_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            companyType_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[5]].asUInt64());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            shopId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[6]].asUInt64());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            userId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[7]].asUInt64());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            companyStatus_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[8]].asInt64());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            remark_=std::make_shared<std::string>(pJson[pMasqueradingVector[9]].asString());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            companyFax_=std::make_shared<std::string>(pJson[pMasqueradingVector[10]].asString());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            companyQq_=std::make_shared<std::string>(pJson[pMasqueradingVector[11]].asString());
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            companyEmail_=std::make_shared<std::string>(pJson[pMasqueradingVector[12]].asString());
        }
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        dirtyFlag_[13] = true;
        if(!pJson[pMasqueradingVector[13]].isNull())
        {
            companyTradeType_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[13]].asUInt64());
        }
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        dirtyFlag_[14] = true;
        if(!pJson[pMasqueradingVector[14]].isNull())
        {
            isLock_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[14]].asUInt64());
        }
    }
    if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
    {
        dirtyFlag_[15] = true;
        if(!pJson[pMasqueradingVector[15]].isNull())
        {
            companyLogo_=std::make_shared<std::string>(pJson[pMasqueradingVector[15]].asString());
        }
    }
    if(!pMasqueradingVector[16].empty() && pJson.isMember(pMasqueradingVector[16]))
    {
        dirtyFlag_[16] = true;
        if(!pJson[pMasqueradingVector[16]].isNull())
        {
            companyTaxNumber_=std::make_shared<std::string>(pJson[pMasqueradingVector[16]].asString());
        }
    }
    if(!pMasqueradingVector[17].empty() && pJson.isMember(pMasqueradingVector[17]))
    {
        dirtyFlag_[17] = true;
        if(!pJson[pMasqueradingVector[17]].isNull())
        {
            companyBillingAddress_=std::make_shared<std::string>(pJson[pMasqueradingVector[17]].asString());
        }
    }
    if(!pMasqueradingVector[18].empty() && pJson.isMember(pMasqueradingVector[18]))
    {
        dirtyFlag_[18] = true;
        if(!pJson[pMasqueradingVector[18]].isNull())
        {
            companyBillingPhone_=std::make_shared<std::string>(pJson[pMasqueradingVector[18]].asString());
        }
    }
    if(!pMasqueradingVector[19].empty() && pJson.isMember(pMasqueradingVector[19]))
    {
        dirtyFlag_[19] = true;
        if(!pJson[pMasqueradingVector[19]].isNull())
        {
            isDefault_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[19]].asUInt64());
        }
    }
    if(!pMasqueradingVector[20].empty() && pJson.isMember(pMasqueradingVector[20]))
    {
        dirtyFlag_[20] = true;
        if(!pJson[pMasqueradingVector[20]].isNull())
        {
            companyRepresentative_=std::make_shared<std::string>(pJson[pMasqueradingVector[20]].asString());
        }
    }
    if(!pMasqueradingVector[21].empty() && pJson.isMember(pMasqueradingVector[21]))
    {
        dirtyFlag_[21] = true;
        if(!pJson[pMasqueradingVector[21]].isNull())
        {
            isDelete_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[21]].asUInt64());
        }
    }
    if(!pMasqueradingVector[22].empty() && pJson.isMember(pMasqueradingVector[22]))
    {
        dirtyFlag_[22] = true;
        if(!pJson[pMasqueradingVector[22]].isNull())
        {
            sort_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[22]].asUInt64());
        }
    }
    if(!pMasqueradingVector[23].empty() && pJson.isMember(pMasqueradingVector[23]))
    {
        dirtyFlag_[23] = true;
        if(!pJson[pMasqueradingVector[23]].isNull())
        {
            accountBalance_=std::make_shared<std::string>(pJson[pMasqueradingVector[23]].asString());
        }
    }
    if(!pMasqueradingVector[24].empty() && pJson.isMember(pMasqueradingVector[24]))
    {
        dirtyFlag_[24] = true;
        if(!pJson[pMasqueradingVector[24]].isNull())
        {
            companyBusinessLicense_=std::make_shared<std::string>(pJson[pMasqueradingVector[24]].asString());
        }
    }
    if(!pMasqueradingVector[25].empty() && pJson.isMember(pMasqueradingVector[25]))
    {
        dirtyFlag_[25] = true;
        if(!pJson[pMasqueradingVector[25]].isNull())
        {
            companyMailAddress_=std::make_shared<std::string>(pJson[pMasqueradingVector[25]].asString());
        }
    }
    if(!pMasqueradingVector[26].empty() && pJson.isMember(pMasqueradingVector[26]))
    {
        dirtyFlag_[26] = true;
        if(!pJson[pMasqueradingVector[26]].isNull())
        {
            provinceId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[26]].asInt64());
        }
    }
    if(!pMasqueradingVector[27].empty() && pJson.isMember(pMasqueradingVector[27]))
    {
        dirtyFlag_[27] = true;
        if(!pJson[pMasqueradingVector[27]].isNull())
        {
            cityId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[27]].asInt64());
        }
    }
    if(!pMasqueradingVector[28].empty() && pJson.isMember(pMasqueradingVector[28]))
    {
        dirtyFlag_[28] = true;
        if(!pJson[pMasqueradingVector[28]].isNull())
        {
            areaId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[28]].asInt64());
        }
    }
    if(!pMasqueradingVector[29].empty() && pJson.isMember(pMasqueradingVector[29]))
    {
        dirtyFlag_[29] = true;
        if(!pJson[pMasqueradingVector[29]].isNull())
        {
            address_=std::make_shared<std::string>(pJson[pMasqueradingVector[29]].asString());
        }
    }
    if(!pMasqueradingVector[30].empty() && pJson.isMember(pMasqueradingVector[30]))
    {
        dirtyFlag_[30] = true;
        if(!pJson[pMasqueradingVector[30]].isNull())
        {
            companyPhone_=std::make_shared<std::string>(pJson[pMasqueradingVector[30]].asString());
        }
    }
    if(!pMasqueradingVector[31].empty() && pJson.isMember(pMasqueradingVector[31]))
    {
        dirtyFlag_[31] = true;
        if(!pJson[pMasqueradingVector[31]].isNull())
        {
            companyOpeningBank_=std::make_shared<std::string>(pJson[pMasqueradingVector[31]].asString());
        }
    }
    if(!pMasqueradingVector[32].empty() && pJson.isMember(pMasqueradingVector[32]))
    {
        dirtyFlag_[32] = true;
        if(!pJson[pMasqueradingVector[32]].isNull())
        {
            companyBankAccount_=std::make_shared<std::string>(pJson[pMasqueradingVector[32]].asString());
        }
    }
    if(!pMasqueradingVector[33].empty() && pJson.isMember(pMasqueradingVector[33]))
    {
        dirtyFlag_[33] = true;
        if(!pJson[pMasqueradingVector[33]].isNull())
        {
            supplierLevel_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[33]].asUInt64());
        }
    }
    if(!pMasqueradingVector[34].empty() && pJson.isMember(pMasqueradingVector[34]))
    {
        dirtyFlag_[34] = true;
        if(!pJson[pMasqueradingVector[34]].isNull())
        {
            k3SupplierId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[34]].asInt64());
        }
    }
    if(!pMasqueradingVector[35].empty() && pJson.isMember(pMasqueradingVector[35]))
    {
        dirtyFlag_[35] = true;
        if(!pJson[pMasqueradingVector[35]].isNull())
        {
            adminId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[35]].asUInt64());
        }
    }
    if(!pMasqueradingVector[36].empty() && pJson.isMember(pMasqueradingVector[36]))
    {
        dirtyFlag_[36] = true;
        if(!pJson[pMasqueradingVector[36]].isNull())
        {
            score_=std::make_shared<std::string>(pJson[pMasqueradingVector[36]].asString());
        }
    }
    if(!pMasqueradingVector[37].empty() && pJson.isMember(pMasqueradingVector[37]))
    {
        dirtyFlag_[37] = true;
        if(!pJson[pMasqueradingVector[37]].isNull())
        {
            scoreJson_=std::make_shared<std::string>(pJson[pMasqueradingVector[37]].asString());
        }
    }
    if(!pMasqueradingVector[38].empty() && pJson.isMember(pMasqueradingVector[38]))
    {
        dirtyFlag_[38] = true;
        if(!pJson[pMasqueradingVector[38]].isNull())
        {
            scoreStatus_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[38]].asUInt64());
        }
    }
}

Company::Company(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson["id"].asUInt64());
        }
    }
    if(pJson.isMember("create_time"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["create_time"].isNull())
        {
            auto timeStr = pJson["create_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("update_time"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["update_time"].isNull())
        {
            auto timeStr = pJson["update_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("company_name"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["company_name"].isNull())
        {
            companyName_=std::make_shared<std::string>(pJson["company_name"].asString());
        }
    }
    if(pJson.isMember("company_short_name"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["company_short_name"].isNull())
        {
            companyShortName_=std::make_shared<std::string>(pJson["company_short_name"].asString());
        }
    }
    if(pJson.isMember("company_type"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["company_type"].isNull())
        {
            companyType_=std::make_shared<uint8_t>((uint8_t)pJson["company_type"].asUInt64());
        }
    }
    if(pJson.isMember("shop_id"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["shop_id"].isNull())
        {
            shopId_=std::make_shared<uint64_t>((uint64_t)pJson["shop_id"].asUInt64());
        }
    }
    if(pJson.isMember("user_id"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["user_id"].isNull())
        {
            userId_=std::make_shared<uint64_t>((uint64_t)pJson["user_id"].asUInt64());
        }
    }
    if(pJson.isMember("company_status"))
    {
        dirtyFlag_[8]=true;
        if(!pJson["company_status"].isNull())
        {
            companyStatus_=std::make_shared<int8_t>((int8_t)pJson["company_status"].asInt64());
        }
    }
    if(pJson.isMember("remark"))
    {
        dirtyFlag_[9]=true;
        if(!pJson["remark"].isNull())
        {
            remark_=std::make_shared<std::string>(pJson["remark"].asString());
        }
    }
    if(pJson.isMember("company_fax"))
    {
        dirtyFlag_[10]=true;
        if(!pJson["company_fax"].isNull())
        {
            companyFax_=std::make_shared<std::string>(pJson["company_fax"].asString());
        }
    }
    if(pJson.isMember("company_qq"))
    {
        dirtyFlag_[11]=true;
        if(!pJson["company_qq"].isNull())
        {
            companyQq_=std::make_shared<std::string>(pJson["company_qq"].asString());
        }
    }
    if(pJson.isMember("company_email"))
    {
        dirtyFlag_[12]=true;
        if(!pJson["company_email"].isNull())
        {
            companyEmail_=std::make_shared<std::string>(pJson["company_email"].asString());
        }
    }
    if(pJson.isMember("company_trade_type"))
    {
        dirtyFlag_[13]=true;
        if(!pJson["company_trade_type"].isNull())
        {
            companyTradeType_=std::make_shared<uint8_t>((uint8_t)pJson["company_trade_type"].asUInt64());
        }
    }
    if(pJson.isMember("is_lock"))
    {
        dirtyFlag_[14]=true;
        if(!pJson["is_lock"].isNull())
        {
            isLock_=std::make_shared<uint8_t>((uint8_t)pJson["is_lock"].asUInt64());
        }
    }
    if(pJson.isMember("company_logo"))
    {
        dirtyFlag_[15]=true;
        if(!pJson["company_logo"].isNull())
        {
            companyLogo_=std::make_shared<std::string>(pJson["company_logo"].asString());
        }
    }
    if(pJson.isMember("company_tax_number"))
    {
        dirtyFlag_[16]=true;
        if(!pJson["company_tax_number"].isNull())
        {
            companyTaxNumber_=std::make_shared<std::string>(pJson["company_tax_number"].asString());
        }
    }
    if(pJson.isMember("company_billing_address"))
    {
        dirtyFlag_[17]=true;
        if(!pJson["company_billing_address"].isNull())
        {
            companyBillingAddress_=std::make_shared<std::string>(pJson["company_billing_address"].asString());
        }
    }
    if(pJson.isMember("company_billing_phone"))
    {
        dirtyFlag_[18]=true;
        if(!pJson["company_billing_phone"].isNull())
        {
            companyBillingPhone_=std::make_shared<std::string>(pJson["company_billing_phone"].asString());
        }
    }
    if(pJson.isMember("is_default"))
    {
        dirtyFlag_[19]=true;
        if(!pJson["is_default"].isNull())
        {
            isDefault_=std::make_shared<uint8_t>((uint8_t)pJson["is_default"].asUInt64());
        }
    }
    if(pJson.isMember("company_representative"))
    {
        dirtyFlag_[20]=true;
        if(!pJson["company_representative"].isNull())
        {
            companyRepresentative_=std::make_shared<std::string>(pJson["company_representative"].asString());
        }
    }
    if(pJson.isMember("is_delete"))
    {
        dirtyFlag_[21]=true;
        if(!pJson["is_delete"].isNull())
        {
            isDelete_=std::make_shared<uint8_t>((uint8_t)pJson["is_delete"].asUInt64());
        }
    }
    if(pJson.isMember("sort"))
    {
        dirtyFlag_[22]=true;
        if(!pJson["sort"].isNull())
        {
            sort_=std::make_shared<uint8_t>((uint8_t)pJson["sort"].asUInt64());
        }
    }
    if(pJson.isMember("account_balance"))
    {
        dirtyFlag_[23]=true;
        if(!pJson["account_balance"].isNull())
        {
            accountBalance_=std::make_shared<std::string>(pJson["account_balance"].asString());
        }
    }
    if(pJson.isMember("company_business_license"))
    {
        dirtyFlag_[24]=true;
        if(!pJson["company_business_license"].isNull())
        {
            companyBusinessLicense_=std::make_shared<std::string>(pJson["company_business_license"].asString());
        }
    }
    if(pJson.isMember("company_mail_address"))
    {
        dirtyFlag_[25]=true;
        if(!pJson["company_mail_address"].isNull())
        {
            companyMailAddress_=std::make_shared<std::string>(pJson["company_mail_address"].asString());
        }
    }
    if(pJson.isMember("province_id"))
    {
        dirtyFlag_[26]=true;
        if(!pJson["province_id"].isNull())
        {
            provinceId_=std::make_shared<int64_t>((int64_t)pJson["province_id"].asInt64());
        }
    }
    if(pJson.isMember("city_id"))
    {
        dirtyFlag_[27]=true;
        if(!pJson["city_id"].isNull())
        {
            cityId_=std::make_shared<int64_t>((int64_t)pJson["city_id"].asInt64());
        }
    }
    if(pJson.isMember("area_id"))
    {
        dirtyFlag_[28]=true;
        if(!pJson["area_id"].isNull())
        {
            areaId_=std::make_shared<int64_t>((int64_t)pJson["area_id"].asInt64());
        }
    }
    if(pJson.isMember("address"))
    {
        dirtyFlag_[29]=true;
        if(!pJson["address"].isNull())
        {
            address_=std::make_shared<std::string>(pJson["address"].asString());
        }
    }
    if(pJson.isMember("company_phone"))
    {
        dirtyFlag_[30]=true;
        if(!pJson["company_phone"].isNull())
        {
            companyPhone_=std::make_shared<std::string>(pJson["company_phone"].asString());
        }
    }
    if(pJson.isMember("company_opening_bank"))
    {
        dirtyFlag_[31]=true;
        if(!pJson["company_opening_bank"].isNull())
        {
            companyOpeningBank_=std::make_shared<std::string>(pJson["company_opening_bank"].asString());
        }
    }
    if(pJson.isMember("company_bank_account"))
    {
        dirtyFlag_[32]=true;
        if(!pJson["company_bank_account"].isNull())
        {
            companyBankAccount_=std::make_shared<std::string>(pJson["company_bank_account"].asString());
        }
    }
    if(pJson.isMember("supplier_level"))
    {
        dirtyFlag_[33]=true;
        if(!pJson["supplier_level"].isNull())
        {
            supplierLevel_=std::make_shared<uint8_t>((uint8_t)pJson["supplier_level"].asUInt64());
        }
    }
    if(pJson.isMember("k3_supplier_id"))
    {
        dirtyFlag_[34]=true;
        if(!pJson["k3_supplier_id"].isNull())
        {
            k3SupplierId_=std::make_shared<int32_t>((int32_t)pJson["k3_supplier_id"].asInt64());
        }
    }
    if(pJson.isMember("admin_id"))
    {
        dirtyFlag_[35]=true;
        if(!pJson["admin_id"].isNull())
        {
            adminId_=std::make_shared<uint64_t>((uint64_t)pJson["admin_id"].asUInt64());
        }
    }
    if(pJson.isMember("score"))
    {
        dirtyFlag_[36]=true;
        if(!pJson["score"].isNull())
        {
            score_=std::make_shared<std::string>(pJson["score"].asString());
        }
    }
    if(pJson.isMember("score_json"))
    {
        dirtyFlag_[37]=true;
        if(!pJson["score_json"].isNull())
        {
            scoreJson_=std::make_shared<std::string>(pJson["score_json"].asString());
        }
    }
    if(pJson.isMember("score_status"))
    {
        dirtyFlag_[38]=true;
        if(!pJson["score_status"].isNull())
        {
            scoreStatus_=std::make_shared<uint8_t>((uint8_t)pJson["score_status"].asUInt64());
        }
    }
}

void Company::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 39)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[1]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[2]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            companyName_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            companyShortName_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            companyType_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[5]].asUInt64());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            shopId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[6]].asUInt64());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            userId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[7]].asUInt64());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            companyStatus_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[8]].asInt64());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            remark_=std::make_shared<std::string>(pJson[pMasqueradingVector[9]].asString());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            companyFax_=std::make_shared<std::string>(pJson[pMasqueradingVector[10]].asString());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            companyQq_=std::make_shared<std::string>(pJson[pMasqueradingVector[11]].asString());
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            companyEmail_=std::make_shared<std::string>(pJson[pMasqueradingVector[12]].asString());
        }
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        dirtyFlag_[13] = true;
        if(!pJson[pMasqueradingVector[13]].isNull())
        {
            companyTradeType_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[13]].asUInt64());
        }
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        dirtyFlag_[14] = true;
        if(!pJson[pMasqueradingVector[14]].isNull())
        {
            isLock_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[14]].asUInt64());
        }
    }
    if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
    {
        dirtyFlag_[15] = true;
        if(!pJson[pMasqueradingVector[15]].isNull())
        {
            companyLogo_=std::make_shared<std::string>(pJson[pMasqueradingVector[15]].asString());
        }
    }
    if(!pMasqueradingVector[16].empty() && pJson.isMember(pMasqueradingVector[16]))
    {
        dirtyFlag_[16] = true;
        if(!pJson[pMasqueradingVector[16]].isNull())
        {
            companyTaxNumber_=std::make_shared<std::string>(pJson[pMasqueradingVector[16]].asString());
        }
    }
    if(!pMasqueradingVector[17].empty() && pJson.isMember(pMasqueradingVector[17]))
    {
        dirtyFlag_[17] = true;
        if(!pJson[pMasqueradingVector[17]].isNull())
        {
            companyBillingAddress_=std::make_shared<std::string>(pJson[pMasqueradingVector[17]].asString());
        }
    }
    if(!pMasqueradingVector[18].empty() && pJson.isMember(pMasqueradingVector[18]))
    {
        dirtyFlag_[18] = true;
        if(!pJson[pMasqueradingVector[18]].isNull())
        {
            companyBillingPhone_=std::make_shared<std::string>(pJson[pMasqueradingVector[18]].asString());
        }
    }
    if(!pMasqueradingVector[19].empty() && pJson.isMember(pMasqueradingVector[19]))
    {
        dirtyFlag_[19] = true;
        if(!pJson[pMasqueradingVector[19]].isNull())
        {
            isDefault_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[19]].asUInt64());
        }
    }
    if(!pMasqueradingVector[20].empty() && pJson.isMember(pMasqueradingVector[20]))
    {
        dirtyFlag_[20] = true;
        if(!pJson[pMasqueradingVector[20]].isNull())
        {
            companyRepresentative_=std::make_shared<std::string>(pJson[pMasqueradingVector[20]].asString());
        }
    }
    if(!pMasqueradingVector[21].empty() && pJson.isMember(pMasqueradingVector[21]))
    {
        dirtyFlag_[21] = true;
        if(!pJson[pMasqueradingVector[21]].isNull())
        {
            isDelete_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[21]].asUInt64());
        }
    }
    if(!pMasqueradingVector[22].empty() && pJson.isMember(pMasqueradingVector[22]))
    {
        dirtyFlag_[22] = true;
        if(!pJson[pMasqueradingVector[22]].isNull())
        {
            sort_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[22]].asUInt64());
        }
    }
    if(!pMasqueradingVector[23].empty() && pJson.isMember(pMasqueradingVector[23]))
    {
        dirtyFlag_[23] = true;
        if(!pJson[pMasqueradingVector[23]].isNull())
        {
            accountBalance_=std::make_shared<std::string>(pJson[pMasqueradingVector[23]].asString());
        }
    }
    if(!pMasqueradingVector[24].empty() && pJson.isMember(pMasqueradingVector[24]))
    {
        dirtyFlag_[24] = true;
        if(!pJson[pMasqueradingVector[24]].isNull())
        {
            companyBusinessLicense_=std::make_shared<std::string>(pJson[pMasqueradingVector[24]].asString());
        }
    }
    if(!pMasqueradingVector[25].empty() && pJson.isMember(pMasqueradingVector[25]))
    {
        dirtyFlag_[25] = true;
        if(!pJson[pMasqueradingVector[25]].isNull())
        {
            companyMailAddress_=std::make_shared<std::string>(pJson[pMasqueradingVector[25]].asString());
        }
    }
    if(!pMasqueradingVector[26].empty() && pJson.isMember(pMasqueradingVector[26]))
    {
        dirtyFlag_[26] = true;
        if(!pJson[pMasqueradingVector[26]].isNull())
        {
            provinceId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[26]].asInt64());
        }
    }
    if(!pMasqueradingVector[27].empty() && pJson.isMember(pMasqueradingVector[27]))
    {
        dirtyFlag_[27] = true;
        if(!pJson[pMasqueradingVector[27]].isNull())
        {
            cityId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[27]].asInt64());
        }
    }
    if(!pMasqueradingVector[28].empty() && pJson.isMember(pMasqueradingVector[28]))
    {
        dirtyFlag_[28] = true;
        if(!pJson[pMasqueradingVector[28]].isNull())
        {
            areaId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[28]].asInt64());
        }
    }
    if(!pMasqueradingVector[29].empty() && pJson.isMember(pMasqueradingVector[29]))
    {
        dirtyFlag_[29] = true;
        if(!pJson[pMasqueradingVector[29]].isNull())
        {
            address_=std::make_shared<std::string>(pJson[pMasqueradingVector[29]].asString());
        }
    }
    if(!pMasqueradingVector[30].empty() && pJson.isMember(pMasqueradingVector[30]))
    {
        dirtyFlag_[30] = true;
        if(!pJson[pMasqueradingVector[30]].isNull())
        {
            companyPhone_=std::make_shared<std::string>(pJson[pMasqueradingVector[30]].asString());
        }
    }
    if(!pMasqueradingVector[31].empty() && pJson.isMember(pMasqueradingVector[31]))
    {
        dirtyFlag_[31] = true;
        if(!pJson[pMasqueradingVector[31]].isNull())
        {
            companyOpeningBank_=std::make_shared<std::string>(pJson[pMasqueradingVector[31]].asString());
        }
    }
    if(!pMasqueradingVector[32].empty() && pJson.isMember(pMasqueradingVector[32]))
    {
        dirtyFlag_[32] = true;
        if(!pJson[pMasqueradingVector[32]].isNull())
        {
            companyBankAccount_=std::make_shared<std::string>(pJson[pMasqueradingVector[32]].asString());
        }
    }
    if(!pMasqueradingVector[33].empty() && pJson.isMember(pMasqueradingVector[33]))
    {
        dirtyFlag_[33] = true;
        if(!pJson[pMasqueradingVector[33]].isNull())
        {
            supplierLevel_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[33]].asUInt64());
        }
    }
    if(!pMasqueradingVector[34].empty() && pJson.isMember(pMasqueradingVector[34]))
    {
        dirtyFlag_[34] = true;
        if(!pJson[pMasqueradingVector[34]].isNull())
        {
            k3SupplierId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[34]].asInt64());
        }
    }
    if(!pMasqueradingVector[35].empty() && pJson.isMember(pMasqueradingVector[35]))
    {
        dirtyFlag_[35] = true;
        if(!pJson[pMasqueradingVector[35]].isNull())
        {
            adminId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[35]].asUInt64());
        }
    }
    if(!pMasqueradingVector[36].empty() && pJson.isMember(pMasqueradingVector[36]))
    {
        dirtyFlag_[36] = true;
        if(!pJson[pMasqueradingVector[36]].isNull())
        {
            score_=std::make_shared<std::string>(pJson[pMasqueradingVector[36]].asString());
        }
    }
    if(!pMasqueradingVector[37].empty() && pJson.isMember(pMasqueradingVector[37]))
    {
        dirtyFlag_[37] = true;
        if(!pJson[pMasqueradingVector[37]].isNull())
        {
            scoreJson_=std::make_shared<std::string>(pJson[pMasqueradingVector[37]].asString());
        }
    }
    if(!pMasqueradingVector[38].empty() && pJson.isMember(pMasqueradingVector[38]))
    {
        dirtyFlag_[38] = true;
        if(!pJson[pMasqueradingVector[38]].isNull())
        {
            scoreStatus_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[38]].asUInt64());
        }
    }
}
                                                                    
void Company::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson["id"].asUInt64());
        }
    }
    if(pJson.isMember("create_time"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["create_time"].isNull())
        {
            auto timeStr = pJson["create_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("update_time"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["update_time"].isNull())
        {
            auto timeStr = pJson["update_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("company_name"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["company_name"].isNull())
        {
            companyName_=std::make_shared<std::string>(pJson["company_name"].asString());
        }
    }
    if(pJson.isMember("company_short_name"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["company_short_name"].isNull())
        {
            companyShortName_=std::make_shared<std::string>(pJson["company_short_name"].asString());
        }
    }
    if(pJson.isMember("company_type"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["company_type"].isNull())
        {
            companyType_=std::make_shared<uint8_t>((uint8_t)pJson["company_type"].asUInt64());
        }
    }
    if(pJson.isMember("shop_id"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["shop_id"].isNull())
        {
            shopId_=std::make_shared<uint64_t>((uint64_t)pJson["shop_id"].asUInt64());
        }
    }
    if(pJson.isMember("user_id"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["user_id"].isNull())
        {
            userId_=std::make_shared<uint64_t>((uint64_t)pJson["user_id"].asUInt64());
        }
    }
    if(pJson.isMember("company_status"))
    {
        dirtyFlag_[8] = true;
        if(!pJson["company_status"].isNull())
        {
            companyStatus_=std::make_shared<int8_t>((int8_t)pJson["company_status"].asInt64());
        }
    }
    if(pJson.isMember("remark"))
    {
        dirtyFlag_[9] = true;
        if(!pJson["remark"].isNull())
        {
            remark_=std::make_shared<std::string>(pJson["remark"].asString());
        }
    }
    if(pJson.isMember("company_fax"))
    {
        dirtyFlag_[10] = true;
        if(!pJson["company_fax"].isNull())
        {
            companyFax_=std::make_shared<std::string>(pJson["company_fax"].asString());
        }
    }
    if(pJson.isMember("company_qq"))
    {
        dirtyFlag_[11] = true;
        if(!pJson["company_qq"].isNull())
        {
            companyQq_=std::make_shared<std::string>(pJson["company_qq"].asString());
        }
    }
    if(pJson.isMember("company_email"))
    {
        dirtyFlag_[12] = true;
        if(!pJson["company_email"].isNull())
        {
            companyEmail_=std::make_shared<std::string>(pJson["company_email"].asString());
        }
    }
    if(pJson.isMember("company_trade_type"))
    {
        dirtyFlag_[13] = true;
        if(!pJson["company_trade_type"].isNull())
        {
            companyTradeType_=std::make_shared<uint8_t>((uint8_t)pJson["company_trade_type"].asUInt64());
        }
    }
    if(pJson.isMember("is_lock"))
    {
        dirtyFlag_[14] = true;
        if(!pJson["is_lock"].isNull())
        {
            isLock_=std::make_shared<uint8_t>((uint8_t)pJson["is_lock"].asUInt64());
        }
    }
    if(pJson.isMember("company_logo"))
    {
        dirtyFlag_[15] = true;
        if(!pJson["company_logo"].isNull())
        {
            companyLogo_=std::make_shared<std::string>(pJson["company_logo"].asString());
        }
    }
    if(pJson.isMember("company_tax_number"))
    {
        dirtyFlag_[16] = true;
        if(!pJson["company_tax_number"].isNull())
        {
            companyTaxNumber_=std::make_shared<std::string>(pJson["company_tax_number"].asString());
        }
    }
    if(pJson.isMember("company_billing_address"))
    {
        dirtyFlag_[17] = true;
        if(!pJson["company_billing_address"].isNull())
        {
            companyBillingAddress_=std::make_shared<std::string>(pJson["company_billing_address"].asString());
        }
    }
    if(pJson.isMember("company_billing_phone"))
    {
        dirtyFlag_[18] = true;
        if(!pJson["company_billing_phone"].isNull())
        {
            companyBillingPhone_=std::make_shared<std::string>(pJson["company_billing_phone"].asString());
        }
    }
    if(pJson.isMember("is_default"))
    {
        dirtyFlag_[19] = true;
        if(!pJson["is_default"].isNull())
        {
            isDefault_=std::make_shared<uint8_t>((uint8_t)pJson["is_default"].asUInt64());
        }
    }
    if(pJson.isMember("company_representative"))
    {
        dirtyFlag_[20] = true;
        if(!pJson["company_representative"].isNull())
        {
            companyRepresentative_=std::make_shared<std::string>(pJson["company_representative"].asString());
        }
    }
    if(pJson.isMember("is_delete"))
    {
        dirtyFlag_[21] = true;
        if(!pJson["is_delete"].isNull())
        {
            isDelete_=std::make_shared<uint8_t>((uint8_t)pJson["is_delete"].asUInt64());
        }
    }
    if(pJson.isMember("sort"))
    {
        dirtyFlag_[22] = true;
        if(!pJson["sort"].isNull())
        {
            sort_=std::make_shared<uint8_t>((uint8_t)pJson["sort"].asUInt64());
        }
    }
    if(pJson.isMember("account_balance"))
    {
        dirtyFlag_[23] = true;
        if(!pJson["account_balance"].isNull())
        {
            accountBalance_=std::make_shared<std::string>(pJson["account_balance"].asString());
        }
    }
    if(pJson.isMember("company_business_license"))
    {
        dirtyFlag_[24] = true;
        if(!pJson["company_business_license"].isNull())
        {
            companyBusinessLicense_=std::make_shared<std::string>(pJson["company_business_license"].asString());
        }
    }
    if(pJson.isMember("company_mail_address"))
    {
        dirtyFlag_[25] = true;
        if(!pJson["company_mail_address"].isNull())
        {
            companyMailAddress_=std::make_shared<std::string>(pJson["company_mail_address"].asString());
        }
    }
    if(pJson.isMember("province_id"))
    {
        dirtyFlag_[26] = true;
        if(!pJson["province_id"].isNull())
        {
            provinceId_=std::make_shared<int64_t>((int64_t)pJson["province_id"].asInt64());
        }
    }
    if(pJson.isMember("city_id"))
    {
        dirtyFlag_[27] = true;
        if(!pJson["city_id"].isNull())
        {
            cityId_=std::make_shared<int64_t>((int64_t)pJson["city_id"].asInt64());
        }
    }
    if(pJson.isMember("area_id"))
    {
        dirtyFlag_[28] = true;
        if(!pJson["area_id"].isNull())
        {
            areaId_=std::make_shared<int64_t>((int64_t)pJson["area_id"].asInt64());
        }
    }
    if(pJson.isMember("address"))
    {
        dirtyFlag_[29] = true;
        if(!pJson["address"].isNull())
        {
            address_=std::make_shared<std::string>(pJson["address"].asString());
        }
    }
    if(pJson.isMember("company_phone"))
    {
        dirtyFlag_[30] = true;
        if(!pJson["company_phone"].isNull())
        {
            companyPhone_=std::make_shared<std::string>(pJson["company_phone"].asString());
        }
    }
    if(pJson.isMember("company_opening_bank"))
    {
        dirtyFlag_[31] = true;
        if(!pJson["company_opening_bank"].isNull())
        {
            companyOpeningBank_=std::make_shared<std::string>(pJson["company_opening_bank"].asString());
        }
    }
    if(pJson.isMember("company_bank_account"))
    {
        dirtyFlag_[32] = true;
        if(!pJson["company_bank_account"].isNull())
        {
            companyBankAccount_=std::make_shared<std::string>(pJson["company_bank_account"].asString());
        }
    }
    if(pJson.isMember("supplier_level"))
    {
        dirtyFlag_[33] = true;
        if(!pJson["supplier_level"].isNull())
        {
            supplierLevel_=std::make_shared<uint8_t>((uint8_t)pJson["supplier_level"].asUInt64());
        }
    }
    if(pJson.isMember("k3_supplier_id"))
    {
        dirtyFlag_[34] = true;
        if(!pJson["k3_supplier_id"].isNull())
        {
            k3SupplierId_=std::make_shared<int32_t>((int32_t)pJson["k3_supplier_id"].asInt64());
        }
    }
    if(pJson.isMember("admin_id"))
    {
        dirtyFlag_[35] = true;
        if(!pJson["admin_id"].isNull())
        {
            adminId_=std::make_shared<uint64_t>((uint64_t)pJson["admin_id"].asUInt64());
        }
    }
    if(pJson.isMember("score"))
    {
        dirtyFlag_[36] = true;
        if(!pJson["score"].isNull())
        {
            score_=std::make_shared<std::string>(pJson["score"].asString());
        }
    }
    if(pJson.isMember("score_json"))
    {
        dirtyFlag_[37] = true;
        if(!pJson["score_json"].isNull())
        {
            scoreJson_=std::make_shared<std::string>(pJson["score_json"].asString());
        }
    }
    if(pJson.isMember("score_status"))
    {
        dirtyFlag_[38] = true;
        if(!pJson["score_status"].isNull())
        {
            scoreStatus_=std::make_shared<uint8_t>((uint8_t)pJson["score_status"].asUInt64());
        }
    }
}

const uint64_t &Company::getValueOfId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &Company::getId() const noexcept
{
    return id_;
}
void Company::setId(const uint64_t &pId) noexcept
{
    id_ = std::make_shared<uint64_t>(pId);
    dirtyFlag_[0] = true;
}



const typename Company::PrimaryKeyType & Company::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const ::trantor::Date &Company::getValueOfCreateTime() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(createTime_)
        return *createTime_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Company::getCreateTime() const noexcept
{
    return createTime_;
}
void Company::setCreateTime(const ::trantor::Date &pCreateTime) noexcept
{
    createTime_ = std::make_shared<::trantor::Date>(pCreateTime);
    dirtyFlag_[1] = true;
}




const ::trantor::Date &Company::getValueOfUpdateTime() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(updateTime_)
        return *updateTime_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Company::getUpdateTime() const noexcept
{
    return updateTime_;
}
void Company::setUpdateTime(const ::trantor::Date &pUpdateTime) noexcept
{
    updateTime_ = std::make_shared<::trantor::Date>(pUpdateTime);
    dirtyFlag_[2] = true;
}




const std::string &Company::getValueOfCompanyName() const noexcept
{
    const static std::string defaultValue = std::string();
    if(companyName_)
        return *companyName_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Company::getCompanyName() const noexcept
{
    return companyName_;
}
void Company::setCompanyName(const std::string &pCompanyName) noexcept
{
    companyName_ = std::make_shared<std::string>(pCompanyName);
    dirtyFlag_[3] = true;
}
void Company::setCompanyName(std::string &&pCompanyName) noexcept
{
    companyName_ = std::make_shared<std::string>(std::move(pCompanyName));
    dirtyFlag_[3] = true;
}




const std::string &Company::getValueOfCompanyShortName() const noexcept
{
    const static std::string defaultValue = std::string();
    if(companyShortName_)
        return *companyShortName_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Company::getCompanyShortName() const noexcept
{
    return companyShortName_;
}
void Company::setCompanyShortName(const std::string &pCompanyShortName) noexcept
{
    companyShortName_ = std::make_shared<std::string>(pCompanyShortName);
    dirtyFlag_[4] = true;
}
void Company::setCompanyShortName(std::string &&pCompanyShortName) noexcept
{
    companyShortName_ = std::make_shared<std::string>(std::move(pCompanyShortName));
    dirtyFlag_[4] = true;
}


void Company::setCompanyShortNameToNull() noexcept
{
    companyShortName_.reset();
    dirtyFlag_[4] = true;
}


const uint8_t &Company::getValueOfCompanyType() const noexcept
{
    const static uint8_t defaultValue = uint8_t();
    if(companyType_)
        return *companyType_;
    return defaultValue;
}
const std::shared_ptr<uint8_t> &Company::getCompanyType() const noexcept
{
    return companyType_;
}
void Company::setCompanyType(const uint8_t &pCompanyType) noexcept
{
    companyType_ = std::make_shared<uint8_t>(pCompanyType);
    dirtyFlag_[5] = true;
}




const uint64_t &Company::getValueOfShopId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(shopId_)
        return *shopId_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &Company::getShopId() const noexcept
{
    return shopId_;
}
void Company::setShopId(const uint64_t &pShopId) noexcept
{
    shopId_ = std::make_shared<uint64_t>(pShopId);
    dirtyFlag_[6] = true;
}




const uint64_t &Company::getValueOfUserId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(userId_)
        return *userId_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &Company::getUserId() const noexcept
{
    return userId_;
}
void Company::setUserId(const uint64_t &pUserId) noexcept
{
    userId_ = std::make_shared<uint64_t>(pUserId);
    dirtyFlag_[7] = true;
}




const int8_t &Company::getValueOfCompanyStatus() const noexcept
{
    const static int8_t defaultValue = int8_t();
    if(companyStatus_)
        return *companyStatus_;
    return defaultValue;
}
const std::shared_ptr<int8_t> &Company::getCompanyStatus() const noexcept
{
    return companyStatus_;
}
void Company::setCompanyStatus(const int8_t &pCompanyStatus) noexcept
{
    companyStatus_ = std::make_shared<int8_t>(pCompanyStatus);
    dirtyFlag_[8] = true;
}




const std::string &Company::getValueOfRemark() const noexcept
{
    const static std::string defaultValue = std::string();
    if(remark_)
        return *remark_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Company::getRemark() const noexcept
{
    return remark_;
}
void Company::setRemark(const std::string &pRemark) noexcept
{
    remark_ = std::make_shared<std::string>(pRemark);
    dirtyFlag_[9] = true;
}
void Company::setRemark(std::string &&pRemark) noexcept
{
    remark_ = std::make_shared<std::string>(std::move(pRemark));
    dirtyFlag_[9] = true;
}


void Company::setRemarkToNull() noexcept
{
    remark_.reset();
    dirtyFlag_[9] = true;
}


const std::string &Company::getValueOfCompanyFax() const noexcept
{
    const static std::string defaultValue = std::string();
    if(companyFax_)
        return *companyFax_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Company::getCompanyFax() const noexcept
{
    return companyFax_;
}
void Company::setCompanyFax(const std::string &pCompanyFax) noexcept
{
    companyFax_ = std::make_shared<std::string>(pCompanyFax);
    dirtyFlag_[10] = true;
}
void Company::setCompanyFax(std::string &&pCompanyFax) noexcept
{
    companyFax_ = std::make_shared<std::string>(std::move(pCompanyFax));
    dirtyFlag_[10] = true;
}


void Company::setCompanyFaxToNull() noexcept
{
    companyFax_.reset();
    dirtyFlag_[10] = true;
}


const std::string &Company::getValueOfCompanyQq() const noexcept
{
    const static std::string defaultValue = std::string();
    if(companyQq_)
        return *companyQq_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Company::getCompanyQq() const noexcept
{
    return companyQq_;
}
void Company::setCompanyQq(const std::string &pCompanyQq) noexcept
{
    companyQq_ = std::make_shared<std::string>(pCompanyQq);
    dirtyFlag_[11] = true;
}
void Company::setCompanyQq(std::string &&pCompanyQq) noexcept
{
    companyQq_ = std::make_shared<std::string>(std::move(pCompanyQq));
    dirtyFlag_[11] = true;
}


void Company::setCompanyQqToNull() noexcept
{
    companyQq_.reset();
    dirtyFlag_[11] = true;
}


const std::string &Company::getValueOfCompanyEmail() const noexcept
{
    const static std::string defaultValue = std::string();
    if(companyEmail_)
        return *companyEmail_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Company::getCompanyEmail() const noexcept
{
    return companyEmail_;
}
void Company::setCompanyEmail(const std::string &pCompanyEmail) noexcept
{
    companyEmail_ = std::make_shared<std::string>(pCompanyEmail);
    dirtyFlag_[12] = true;
}
void Company::setCompanyEmail(std::string &&pCompanyEmail) noexcept
{
    companyEmail_ = std::make_shared<std::string>(std::move(pCompanyEmail));
    dirtyFlag_[12] = true;
}


void Company::setCompanyEmailToNull() noexcept
{
    companyEmail_.reset();
    dirtyFlag_[12] = true;
}


const uint8_t &Company::getValueOfCompanyTradeType() const noexcept
{
    const static uint8_t defaultValue = uint8_t();
    if(companyTradeType_)
        return *companyTradeType_;
    return defaultValue;
}
const std::shared_ptr<uint8_t> &Company::getCompanyTradeType() const noexcept
{
    return companyTradeType_;
}
void Company::setCompanyTradeType(const uint8_t &pCompanyTradeType) noexcept
{
    companyTradeType_ = std::make_shared<uint8_t>(pCompanyTradeType);
    dirtyFlag_[13] = true;
}




const uint8_t &Company::getValueOfIsLock() const noexcept
{
    const static uint8_t defaultValue = uint8_t();
    if(isLock_)
        return *isLock_;
    return defaultValue;
}
const std::shared_ptr<uint8_t> &Company::getIsLock() const noexcept
{
    return isLock_;
}
void Company::setIsLock(const uint8_t &pIsLock) noexcept
{
    isLock_ = std::make_shared<uint8_t>(pIsLock);
    dirtyFlag_[14] = true;
}




const std::string &Company::getValueOfCompanyLogo() const noexcept
{
    const static std::string defaultValue = std::string();
    if(companyLogo_)
        return *companyLogo_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Company::getCompanyLogo() const noexcept
{
    return companyLogo_;
}
void Company::setCompanyLogo(const std::string &pCompanyLogo) noexcept
{
    companyLogo_ = std::make_shared<std::string>(pCompanyLogo);
    dirtyFlag_[15] = true;
}
void Company::setCompanyLogo(std::string &&pCompanyLogo) noexcept
{
    companyLogo_ = std::make_shared<std::string>(std::move(pCompanyLogo));
    dirtyFlag_[15] = true;
}


void Company::setCompanyLogoToNull() noexcept
{
    companyLogo_.reset();
    dirtyFlag_[15] = true;
}


const std::string &Company::getValueOfCompanyTaxNumber() const noexcept
{
    const static std::string defaultValue = std::string();
    if(companyTaxNumber_)
        return *companyTaxNumber_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Company::getCompanyTaxNumber() const noexcept
{
    return companyTaxNumber_;
}
void Company::setCompanyTaxNumber(const std::string &pCompanyTaxNumber) noexcept
{
    companyTaxNumber_ = std::make_shared<std::string>(pCompanyTaxNumber);
    dirtyFlag_[16] = true;
}
void Company::setCompanyTaxNumber(std::string &&pCompanyTaxNumber) noexcept
{
    companyTaxNumber_ = std::make_shared<std::string>(std::move(pCompanyTaxNumber));
    dirtyFlag_[16] = true;
}


void Company::setCompanyTaxNumberToNull() noexcept
{
    companyTaxNumber_.reset();
    dirtyFlag_[16] = true;
}


const std::string &Company::getValueOfCompanyBillingAddress() const noexcept
{
    const static std::string defaultValue = std::string();
    if(companyBillingAddress_)
        return *companyBillingAddress_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Company::getCompanyBillingAddress() const noexcept
{
    return companyBillingAddress_;
}
void Company::setCompanyBillingAddress(const std::string &pCompanyBillingAddress) noexcept
{
    companyBillingAddress_ = std::make_shared<std::string>(pCompanyBillingAddress);
    dirtyFlag_[17] = true;
}
void Company::setCompanyBillingAddress(std::string &&pCompanyBillingAddress) noexcept
{
    companyBillingAddress_ = std::make_shared<std::string>(std::move(pCompanyBillingAddress));
    dirtyFlag_[17] = true;
}


void Company::setCompanyBillingAddressToNull() noexcept
{
    companyBillingAddress_.reset();
    dirtyFlag_[17] = true;
}


const std::string &Company::getValueOfCompanyBillingPhone() const noexcept
{
    const static std::string defaultValue = std::string();
    if(companyBillingPhone_)
        return *companyBillingPhone_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Company::getCompanyBillingPhone() const noexcept
{
    return companyBillingPhone_;
}
void Company::setCompanyBillingPhone(const std::string &pCompanyBillingPhone) noexcept
{
    companyBillingPhone_ = std::make_shared<std::string>(pCompanyBillingPhone);
    dirtyFlag_[18] = true;
}
void Company::setCompanyBillingPhone(std::string &&pCompanyBillingPhone) noexcept
{
    companyBillingPhone_ = std::make_shared<std::string>(std::move(pCompanyBillingPhone));
    dirtyFlag_[18] = true;
}




const uint8_t &Company::getValueOfIsDefault() const noexcept
{
    const static uint8_t defaultValue = uint8_t();
    if(isDefault_)
        return *isDefault_;
    return defaultValue;
}
const std::shared_ptr<uint8_t> &Company::getIsDefault() const noexcept
{
    return isDefault_;
}
void Company::setIsDefault(const uint8_t &pIsDefault) noexcept
{
    isDefault_ = std::make_shared<uint8_t>(pIsDefault);
    dirtyFlag_[19] = true;
}




const std::string &Company::getValueOfCompanyRepresentative() const noexcept
{
    const static std::string defaultValue = std::string();
    if(companyRepresentative_)
        return *companyRepresentative_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Company::getCompanyRepresentative() const noexcept
{
    return companyRepresentative_;
}
void Company::setCompanyRepresentative(const std::string &pCompanyRepresentative) noexcept
{
    companyRepresentative_ = std::make_shared<std::string>(pCompanyRepresentative);
    dirtyFlag_[20] = true;
}
void Company::setCompanyRepresentative(std::string &&pCompanyRepresentative) noexcept
{
    companyRepresentative_ = std::make_shared<std::string>(std::move(pCompanyRepresentative));
    dirtyFlag_[20] = true;
}


void Company::setCompanyRepresentativeToNull() noexcept
{
    companyRepresentative_.reset();
    dirtyFlag_[20] = true;
}


const uint8_t &Company::getValueOfIsDelete() const noexcept
{
    const static uint8_t defaultValue = uint8_t();
    if(isDelete_)
        return *isDelete_;
    return defaultValue;
}
const std::shared_ptr<uint8_t> &Company::getIsDelete() const noexcept
{
    return isDelete_;
}
void Company::setIsDelete(const uint8_t &pIsDelete) noexcept
{
    isDelete_ = std::make_shared<uint8_t>(pIsDelete);
    dirtyFlag_[21] = true;
}




const uint8_t &Company::getValueOfSort() const noexcept
{
    const static uint8_t defaultValue = uint8_t();
    if(sort_)
        return *sort_;
    return defaultValue;
}
const std::shared_ptr<uint8_t> &Company::getSort() const noexcept
{
    return sort_;
}
void Company::setSort(const uint8_t &pSort) noexcept
{
    sort_ = std::make_shared<uint8_t>(pSort);
    dirtyFlag_[22] = true;
}




const std::string &Company::getValueOfAccountBalance() const noexcept
{
    const static std::string defaultValue = std::string();
    if(accountBalance_)
        return *accountBalance_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Company::getAccountBalance() const noexcept
{
    return accountBalance_;
}
void Company::setAccountBalance(const std::string &pAccountBalance) noexcept
{
    accountBalance_ = std::make_shared<std::string>(pAccountBalance);
    dirtyFlag_[23] = true;
}
void Company::setAccountBalance(std::string &&pAccountBalance) noexcept
{
    accountBalance_ = std::make_shared<std::string>(std::move(pAccountBalance));
    dirtyFlag_[23] = true;
}




const std::string &Company::getValueOfCompanyBusinessLicense() const noexcept
{
    const static std::string defaultValue = std::string();
    if(companyBusinessLicense_)
        return *companyBusinessLicense_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Company::getCompanyBusinessLicense() const noexcept
{
    return companyBusinessLicense_;
}
void Company::setCompanyBusinessLicense(const std::string &pCompanyBusinessLicense) noexcept
{
    companyBusinessLicense_ = std::make_shared<std::string>(pCompanyBusinessLicense);
    dirtyFlag_[24] = true;
}
void Company::setCompanyBusinessLicense(std::string &&pCompanyBusinessLicense) noexcept
{
    companyBusinessLicense_ = std::make_shared<std::string>(std::move(pCompanyBusinessLicense));
    dirtyFlag_[24] = true;
}


void Company::setCompanyBusinessLicenseToNull() noexcept
{
    companyBusinessLicense_.reset();
    dirtyFlag_[24] = true;
}


const std::string &Company::getValueOfCompanyMailAddress() const noexcept
{
    const static std::string defaultValue = std::string();
    if(companyMailAddress_)
        return *companyMailAddress_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Company::getCompanyMailAddress() const noexcept
{
    return companyMailAddress_;
}
void Company::setCompanyMailAddress(const std::string &pCompanyMailAddress) noexcept
{
    companyMailAddress_ = std::make_shared<std::string>(pCompanyMailAddress);
    dirtyFlag_[25] = true;
}
void Company::setCompanyMailAddress(std::string &&pCompanyMailAddress) noexcept
{
    companyMailAddress_ = std::make_shared<std::string>(std::move(pCompanyMailAddress));
    dirtyFlag_[25] = true;
}


void Company::setCompanyMailAddressToNull() noexcept
{
    companyMailAddress_.reset();
    dirtyFlag_[25] = true;
}


const int64_t &Company::getValueOfProvinceId() const noexcept
{
    const static int64_t defaultValue = int64_t();
    if(provinceId_)
        return *provinceId_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &Company::getProvinceId() const noexcept
{
    return provinceId_;
}
void Company::setProvinceId(const int64_t &pProvinceId) noexcept
{
    provinceId_ = std::make_shared<int64_t>(pProvinceId);
    dirtyFlag_[26] = true;
}




const int64_t &Company::getValueOfCityId() const noexcept
{
    const static int64_t defaultValue = int64_t();
    if(cityId_)
        return *cityId_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &Company::getCityId() const noexcept
{
    return cityId_;
}
void Company::setCityId(const int64_t &pCityId) noexcept
{
    cityId_ = std::make_shared<int64_t>(pCityId);
    dirtyFlag_[27] = true;
}




const int64_t &Company::getValueOfAreaId() const noexcept
{
    const static int64_t defaultValue = int64_t();
    if(areaId_)
        return *areaId_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &Company::getAreaId() const noexcept
{
    return areaId_;
}
void Company::setAreaId(const int64_t &pAreaId) noexcept
{
    areaId_ = std::make_shared<int64_t>(pAreaId);
    dirtyFlag_[28] = true;
}




const std::string &Company::getValueOfAddress() const noexcept
{
    const static std::string defaultValue = std::string();
    if(address_)
        return *address_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Company::getAddress() const noexcept
{
    return address_;
}
void Company::setAddress(const std::string &pAddress) noexcept
{
    address_ = std::make_shared<std::string>(pAddress);
    dirtyFlag_[29] = true;
}
void Company::setAddress(std::string &&pAddress) noexcept
{
    address_ = std::make_shared<std::string>(std::move(pAddress));
    dirtyFlag_[29] = true;
}


void Company::setAddressToNull() noexcept
{
    address_.reset();
    dirtyFlag_[29] = true;
}


const std::string &Company::getValueOfCompanyPhone() const noexcept
{
    const static std::string defaultValue = std::string();
    if(companyPhone_)
        return *companyPhone_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Company::getCompanyPhone() const noexcept
{
    return companyPhone_;
}
void Company::setCompanyPhone(const std::string &pCompanyPhone) noexcept
{
    companyPhone_ = std::make_shared<std::string>(pCompanyPhone);
    dirtyFlag_[30] = true;
}
void Company::setCompanyPhone(std::string &&pCompanyPhone) noexcept
{
    companyPhone_ = std::make_shared<std::string>(std::move(pCompanyPhone));
    dirtyFlag_[30] = true;
}


void Company::setCompanyPhoneToNull() noexcept
{
    companyPhone_.reset();
    dirtyFlag_[30] = true;
}


const std::string &Company::getValueOfCompanyOpeningBank() const noexcept
{
    const static std::string defaultValue = std::string();
    if(companyOpeningBank_)
        return *companyOpeningBank_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Company::getCompanyOpeningBank() const noexcept
{
    return companyOpeningBank_;
}
void Company::setCompanyOpeningBank(const std::string &pCompanyOpeningBank) noexcept
{
    companyOpeningBank_ = std::make_shared<std::string>(pCompanyOpeningBank);
    dirtyFlag_[31] = true;
}
void Company::setCompanyOpeningBank(std::string &&pCompanyOpeningBank) noexcept
{
    companyOpeningBank_ = std::make_shared<std::string>(std::move(pCompanyOpeningBank));
    dirtyFlag_[31] = true;
}


void Company::setCompanyOpeningBankToNull() noexcept
{
    companyOpeningBank_.reset();
    dirtyFlag_[31] = true;
}


const std::string &Company::getValueOfCompanyBankAccount() const noexcept
{
    const static std::string defaultValue = std::string();
    if(companyBankAccount_)
        return *companyBankAccount_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Company::getCompanyBankAccount() const noexcept
{
    return companyBankAccount_;
}
void Company::setCompanyBankAccount(const std::string &pCompanyBankAccount) noexcept
{
    companyBankAccount_ = std::make_shared<std::string>(pCompanyBankAccount);
    dirtyFlag_[32] = true;
}
void Company::setCompanyBankAccount(std::string &&pCompanyBankAccount) noexcept
{
    companyBankAccount_ = std::make_shared<std::string>(std::move(pCompanyBankAccount));
    dirtyFlag_[32] = true;
}


void Company::setCompanyBankAccountToNull() noexcept
{
    companyBankAccount_.reset();
    dirtyFlag_[32] = true;
}


const uint8_t &Company::getValueOfSupplierLevel() const noexcept
{
    const static uint8_t defaultValue = uint8_t();
    if(supplierLevel_)
        return *supplierLevel_;
    return defaultValue;
}
const std::shared_ptr<uint8_t> &Company::getSupplierLevel() const noexcept
{
    return supplierLevel_;
}
void Company::setSupplierLevel(const uint8_t &pSupplierLevel) noexcept
{
    supplierLevel_ = std::make_shared<uint8_t>(pSupplierLevel);
    dirtyFlag_[33] = true;
}




const int32_t &Company::getValueOfK3SupplierId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(k3SupplierId_)
        return *k3SupplierId_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Company::getK3SupplierId() const noexcept
{
    return k3SupplierId_;
}
void Company::setK3SupplierId(const int32_t &pK3SupplierId) noexcept
{
    k3SupplierId_ = std::make_shared<int32_t>(pK3SupplierId);
    dirtyFlag_[34] = true;
}




const uint64_t &Company::getValueOfAdminId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(adminId_)
        return *adminId_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &Company::getAdminId() const noexcept
{
    return adminId_;
}
void Company::setAdminId(const uint64_t &pAdminId) noexcept
{
    adminId_ = std::make_shared<uint64_t>(pAdminId);
    dirtyFlag_[35] = true;
}




const std::string &Company::getValueOfScore() const noexcept
{
    const static std::string defaultValue = std::string();
    if(score_)
        return *score_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Company::getScore() const noexcept
{
    return score_;
}
void Company::setScore(const std::string &pScore) noexcept
{
    score_ = std::make_shared<std::string>(pScore);
    dirtyFlag_[36] = true;
}
void Company::setScore(std::string &&pScore) noexcept
{
    score_ = std::make_shared<std::string>(std::move(pScore));
    dirtyFlag_[36] = true;
}




const std::string &Company::getValueOfScoreJson() const noexcept
{
    const static std::string defaultValue = std::string();
    if(scoreJson_)
        return *scoreJson_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Company::getScoreJson() const noexcept
{
    return scoreJson_;
}
void Company::setScoreJson(const std::string &pScoreJson) noexcept
{
    scoreJson_ = std::make_shared<std::string>(pScoreJson);
    dirtyFlag_[37] = true;
}
void Company::setScoreJson(std::string &&pScoreJson) noexcept
{
    scoreJson_ = std::make_shared<std::string>(std::move(pScoreJson));
    dirtyFlag_[37] = true;
}


void Company::setScoreJsonToNull() noexcept
{
    scoreJson_.reset();
    dirtyFlag_[37] = true;
}


const uint8_t &Company::getValueOfScoreStatus() const noexcept
{
    const static uint8_t defaultValue = uint8_t();
    if(scoreStatus_)
        return *scoreStatus_;
    return defaultValue;
}
const std::shared_ptr<uint8_t> &Company::getScoreStatus() const noexcept
{
    return scoreStatus_;
}
void Company::setScoreStatus(const uint8_t &pScoreStatus) noexcept
{
    scoreStatus_ = std::make_shared<uint8_t>(pScoreStatus);
    dirtyFlag_[38] = true;
}




void Company::updateId(const uint64_t id)
{
    id_ = std::make_shared<uint64_t>(id);
}

const std::vector<std::string> &Company::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "create_time",
        "update_time",
        "company_name",
        "company_short_name",
        "company_type",
        "shop_id",
        "user_id",
        "company_status",
        "remark",
        "company_fax",
        "company_qq",
        "company_email",
        "company_trade_type",
        "is_lock",
        "company_logo",
        "company_tax_number",
        "company_billing_address",
        "company_billing_phone",
        "is_default",
        "company_representative",
        "is_delete",
        "sort",
        "account_balance",
        "company_business_license",
        "company_mail_address",
        "province_id",
        "city_id",
        "area_id",
        "address",
        "company_phone",
        "company_opening_bank",
        "company_bank_account",
        "supplier_level",
        "k3_supplier_id",
        "admin_id",
        "score",
        "score_json",
        "score_status"
    };
    return inCols;
}

void Company::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getCreateTime())
        {
            binder << getValueOfCreateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getUpdateTime())
        {
            binder << getValueOfUpdateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getCompanyName())
        {
            binder << getValueOfCompanyName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getCompanyShortName())
        {
            binder << getValueOfCompanyShortName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getCompanyType())
        {
            binder << getValueOfCompanyType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getShopId())
        {
            binder << getValueOfShopId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getUserId())
        {
            binder << getValueOfUserId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getCompanyStatus())
        {
            binder << getValueOfCompanyStatus();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getRemark())
        {
            binder << getValueOfRemark();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getCompanyFax())
        {
            binder << getValueOfCompanyFax();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getCompanyQq())
        {
            binder << getValueOfCompanyQq();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getCompanyEmail())
        {
            binder << getValueOfCompanyEmail();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[13])
    {
        if(getCompanyTradeType())
        {
            binder << getValueOfCompanyTradeType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[14])
    {
        if(getIsLock())
        {
            binder << getValueOfIsLock();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[15])
    {
        if(getCompanyLogo())
        {
            binder << getValueOfCompanyLogo();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[16])
    {
        if(getCompanyTaxNumber())
        {
            binder << getValueOfCompanyTaxNumber();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[17])
    {
        if(getCompanyBillingAddress())
        {
            binder << getValueOfCompanyBillingAddress();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[18])
    {
        if(getCompanyBillingPhone())
        {
            binder << getValueOfCompanyBillingPhone();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[19])
    {
        if(getIsDefault())
        {
            binder << getValueOfIsDefault();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[20])
    {
        if(getCompanyRepresentative())
        {
            binder << getValueOfCompanyRepresentative();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[21])
    {
        if(getIsDelete())
        {
            binder << getValueOfIsDelete();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[22])
    {
        if(getSort())
        {
            binder << getValueOfSort();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[23])
    {
        if(getAccountBalance())
        {
            binder << getValueOfAccountBalance();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[24])
    {
        if(getCompanyBusinessLicense())
        {
            binder << getValueOfCompanyBusinessLicense();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[25])
    {
        if(getCompanyMailAddress())
        {
            binder << getValueOfCompanyMailAddress();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[26])
    {
        if(getProvinceId())
        {
            binder << getValueOfProvinceId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[27])
    {
        if(getCityId())
        {
            binder << getValueOfCityId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[28])
    {
        if(getAreaId())
        {
            binder << getValueOfAreaId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[29])
    {
        if(getAddress())
        {
            binder << getValueOfAddress();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[30])
    {
        if(getCompanyPhone())
        {
            binder << getValueOfCompanyPhone();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[31])
    {
        if(getCompanyOpeningBank())
        {
            binder << getValueOfCompanyOpeningBank();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[32])
    {
        if(getCompanyBankAccount())
        {
            binder << getValueOfCompanyBankAccount();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[33])
    {
        if(getSupplierLevel())
        {
            binder << getValueOfSupplierLevel();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[34])
    {
        if(getK3SupplierId())
        {
            binder << getValueOfK3SupplierId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[35])
    {
        if(getAdminId())
        {
            binder << getValueOfAdminId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[36])
    {
        if(getScore())
        {
            binder << getValueOfScore();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[37])
    {
        if(getScoreJson())
        {
            binder << getValueOfScoreJson();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[38])
    {
        if(getScoreStatus())
        {
            binder << getValueOfScoreStatus();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Company::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    if(dirtyFlag_[8])
    {
        ret.push_back(getColumnName(8));
    }
    if(dirtyFlag_[9])
    {
        ret.push_back(getColumnName(9));
    }
    if(dirtyFlag_[10])
    {
        ret.push_back(getColumnName(10));
    }
    if(dirtyFlag_[11])
    {
        ret.push_back(getColumnName(11));
    }
    if(dirtyFlag_[12])
    {
        ret.push_back(getColumnName(12));
    }
    if(dirtyFlag_[13])
    {
        ret.push_back(getColumnName(13));
    }
    if(dirtyFlag_[14])
    {
        ret.push_back(getColumnName(14));
    }
    if(dirtyFlag_[15])
    {
        ret.push_back(getColumnName(15));
    }
    if(dirtyFlag_[16])
    {
        ret.push_back(getColumnName(16));
    }
    if(dirtyFlag_[17])
    {
        ret.push_back(getColumnName(17));
    }
    if(dirtyFlag_[18])
    {
        ret.push_back(getColumnName(18));
    }
    if(dirtyFlag_[19])
    {
        ret.push_back(getColumnName(19));
    }
    if(dirtyFlag_[20])
    {
        ret.push_back(getColumnName(20));
    }
    if(dirtyFlag_[21])
    {
        ret.push_back(getColumnName(21));
    }
    if(dirtyFlag_[22])
    {
        ret.push_back(getColumnName(22));
    }
    if(dirtyFlag_[23])
    {
        ret.push_back(getColumnName(23));
    }
    if(dirtyFlag_[24])
    {
        ret.push_back(getColumnName(24));
    }
    if(dirtyFlag_[25])
    {
        ret.push_back(getColumnName(25));
    }
    if(dirtyFlag_[26])
    {
        ret.push_back(getColumnName(26));
    }
    if(dirtyFlag_[27])
    {
        ret.push_back(getColumnName(27));
    }
    if(dirtyFlag_[28])
    {
        ret.push_back(getColumnName(28));
    }
    if(dirtyFlag_[29])
    {
        ret.push_back(getColumnName(29));
    }
    if(dirtyFlag_[30])
    {
        ret.push_back(getColumnName(30));
    }
    if(dirtyFlag_[31])
    {
        ret.push_back(getColumnName(31));
    }
    if(dirtyFlag_[32])
    {
        ret.push_back(getColumnName(32));
    }
    if(dirtyFlag_[33])
    {
        ret.push_back(getColumnName(33));
    }
    if(dirtyFlag_[34])
    {
        ret.push_back(getColumnName(34));
    }
    if(dirtyFlag_[35])
    {
        ret.push_back(getColumnName(35));
    }
    if(dirtyFlag_[36])
    {
        ret.push_back(getColumnName(36));
    }
    if(dirtyFlag_[37])
    {
        ret.push_back(getColumnName(37));
    }
    if(dirtyFlag_[38])
    {
        ret.push_back(getColumnName(38));
    }
    return ret;
}

void Company::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getCreateTime())
        {
            binder << getValueOfCreateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getUpdateTime())
        {
            binder << getValueOfUpdateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getCompanyName())
        {
            binder << getValueOfCompanyName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getCompanyShortName())
        {
            binder << getValueOfCompanyShortName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getCompanyType())
        {
            binder << getValueOfCompanyType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getShopId())
        {
            binder << getValueOfShopId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getUserId())
        {
            binder << getValueOfUserId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getCompanyStatus())
        {
            binder << getValueOfCompanyStatus();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getRemark())
        {
            binder << getValueOfRemark();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getCompanyFax())
        {
            binder << getValueOfCompanyFax();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getCompanyQq())
        {
            binder << getValueOfCompanyQq();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getCompanyEmail())
        {
            binder << getValueOfCompanyEmail();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[13])
    {
        if(getCompanyTradeType())
        {
            binder << getValueOfCompanyTradeType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[14])
    {
        if(getIsLock())
        {
            binder << getValueOfIsLock();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[15])
    {
        if(getCompanyLogo())
        {
            binder << getValueOfCompanyLogo();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[16])
    {
        if(getCompanyTaxNumber())
        {
            binder << getValueOfCompanyTaxNumber();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[17])
    {
        if(getCompanyBillingAddress())
        {
            binder << getValueOfCompanyBillingAddress();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[18])
    {
        if(getCompanyBillingPhone())
        {
            binder << getValueOfCompanyBillingPhone();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[19])
    {
        if(getIsDefault())
        {
            binder << getValueOfIsDefault();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[20])
    {
        if(getCompanyRepresentative())
        {
            binder << getValueOfCompanyRepresentative();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[21])
    {
        if(getIsDelete())
        {
            binder << getValueOfIsDelete();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[22])
    {
        if(getSort())
        {
            binder << getValueOfSort();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[23])
    {
        if(getAccountBalance())
        {
            binder << getValueOfAccountBalance();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[24])
    {
        if(getCompanyBusinessLicense())
        {
            binder << getValueOfCompanyBusinessLicense();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[25])
    {
        if(getCompanyMailAddress())
        {
            binder << getValueOfCompanyMailAddress();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[26])
    {
        if(getProvinceId())
        {
            binder << getValueOfProvinceId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[27])
    {
        if(getCityId())
        {
            binder << getValueOfCityId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[28])
    {
        if(getAreaId())
        {
            binder << getValueOfAreaId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[29])
    {
        if(getAddress())
        {
            binder << getValueOfAddress();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[30])
    {
        if(getCompanyPhone())
        {
            binder << getValueOfCompanyPhone();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[31])
    {
        if(getCompanyOpeningBank())
        {
            binder << getValueOfCompanyOpeningBank();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[32])
    {
        if(getCompanyBankAccount())
        {
            binder << getValueOfCompanyBankAccount();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[33])
    {
        if(getSupplierLevel())
        {
            binder << getValueOfSupplierLevel();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[34])
    {
        if(getK3SupplierId())
        {
            binder << getValueOfK3SupplierId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[35])
    {
        if(getAdminId())
        {
            binder << getValueOfAdminId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[36])
    {
        if(getScore())
        {
            binder << getValueOfScore();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[37])
    {
        if(getScoreJson())
        {
            binder << getValueOfScoreJson();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[38])
    {
        if(getScoreStatus())
        {
            binder << getValueOfScoreStatus();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Company::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=(Json::UInt64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getCreateTime())
    {
        ret["create_time"]=getCreateTime()->toDbStringLocal();
    }
    else
    {
        ret["create_time"]=Json::Value();
    }
    if(getUpdateTime())
    {
        ret["update_time"]=getUpdateTime()->toDbStringLocal();
    }
    else
    {
        ret["update_time"]=Json::Value();
    }
    if(getCompanyName())
    {
        ret["company_name"]=getValueOfCompanyName();
    }
    else
    {
        ret["company_name"]=Json::Value();
    }
    if(getCompanyShortName())
    {
        ret["company_short_name"]=getValueOfCompanyShortName();
    }
    else
    {
        ret["company_short_name"]=Json::Value();
    }
    if(getCompanyType())
    {
        ret["company_type"]=getValueOfCompanyType();
    }
    else
    {
        ret["company_type"]=Json::Value();
    }
    if(getShopId())
    {
        ret["shop_id"]=(Json::UInt64)getValueOfShopId();
    }
    else
    {
        ret["shop_id"]=Json::Value();
    }
    if(getUserId())
    {
        ret["user_id"]=(Json::UInt64)getValueOfUserId();
    }
    else
    {
        ret["user_id"]=Json::Value();
    }
    if(getCompanyStatus())
    {
        ret["company_status"]=getValueOfCompanyStatus();
    }
    else
    {
        ret["company_status"]=Json::Value();
    }
    if(getRemark())
    {
        ret["remark"]=getValueOfRemark();
    }
    else
    {
        ret["remark"]=Json::Value();
    }
    if(getCompanyFax())
    {
        ret["company_fax"]=getValueOfCompanyFax();
    }
    else
    {
        ret["company_fax"]=Json::Value();
    }
    if(getCompanyQq())
    {
        ret["company_qq"]=getValueOfCompanyQq();
    }
    else
    {
        ret["company_qq"]=Json::Value();
    }
    if(getCompanyEmail())
    {
        ret["company_email"]=getValueOfCompanyEmail();
    }
    else
    {
        ret["company_email"]=Json::Value();
    }
    if(getCompanyTradeType())
    {
        ret["company_trade_type"]=getValueOfCompanyTradeType();
    }
    else
    {
        ret["company_trade_type"]=Json::Value();
    }
    if(getIsLock())
    {
        ret["is_lock"]=getValueOfIsLock();
    }
    else
    {
        ret["is_lock"]=Json::Value();
    }
    if(getCompanyLogo())
    {
        ret["company_logo"]=getValueOfCompanyLogo();
    }
    else
    {
        ret["company_logo"]=Json::Value();
    }
    if(getCompanyTaxNumber())
    {
        ret["company_tax_number"]=getValueOfCompanyTaxNumber();
    }
    else
    {
        ret["company_tax_number"]=Json::Value();
    }
    if(getCompanyBillingAddress())
    {
        ret["company_billing_address"]=getValueOfCompanyBillingAddress();
    }
    else
    {
        ret["company_billing_address"]=Json::Value();
    }
    if(getCompanyBillingPhone())
    {
        ret["company_billing_phone"]=getValueOfCompanyBillingPhone();
    }
    else
    {
        ret["company_billing_phone"]=Json::Value();
    }
    if(getIsDefault())
    {
        ret["is_default"]=getValueOfIsDefault();
    }
    else
    {
        ret["is_default"]=Json::Value();
    }
    if(getCompanyRepresentative())
    {
        ret["company_representative"]=getValueOfCompanyRepresentative();
    }
    else
    {
        ret["company_representative"]=Json::Value();
    }
    if(getIsDelete())
    {
        ret["is_delete"]=getValueOfIsDelete();
    }
    else
    {
        ret["is_delete"]=Json::Value();
    }
    if(getSort())
    {
        ret["sort"]=getValueOfSort();
    }
    else
    {
        ret["sort"]=Json::Value();
    }
    if(getAccountBalance())
    {
        ret["account_balance"]=getValueOfAccountBalance();
    }
    else
    {
        ret["account_balance"]=Json::Value();
    }
    if(getCompanyBusinessLicense())
    {
        ret["company_business_license"]=getValueOfCompanyBusinessLicense();
    }
    else
    {
        ret["company_business_license"]=Json::Value();
    }
    if(getCompanyMailAddress())
    {
        ret["company_mail_address"]=getValueOfCompanyMailAddress();
    }
    else
    {
        ret["company_mail_address"]=Json::Value();
    }
    if(getProvinceId())
    {
        ret["province_id"]=(Json::Int64)getValueOfProvinceId();
    }
    else
    {
        ret["province_id"]=Json::Value();
    }
    if(getCityId())
    {
        ret["city_id"]=(Json::Int64)getValueOfCityId();
    }
    else
    {
        ret["city_id"]=Json::Value();
    }
    if(getAreaId())
    {
        ret["area_id"]=(Json::Int64)getValueOfAreaId();
    }
    else
    {
        ret["area_id"]=Json::Value();
    }
    if(getAddress())
    {
        ret["address"]=getValueOfAddress();
    }
    else
    {
        ret["address"]=Json::Value();
    }
    if(getCompanyPhone())
    {
        ret["company_phone"]=getValueOfCompanyPhone();
    }
    else
    {
        ret["company_phone"]=Json::Value();
    }
    if(getCompanyOpeningBank())
    {
        ret["company_opening_bank"]=getValueOfCompanyOpeningBank();
    }
    else
    {
        ret["company_opening_bank"]=Json::Value();
    }
    if(getCompanyBankAccount())
    {
        ret["company_bank_account"]=getValueOfCompanyBankAccount();
    }
    else
    {
        ret["company_bank_account"]=Json::Value();
    }
    if(getSupplierLevel())
    {
        ret["supplier_level"]=getValueOfSupplierLevel();
    }
    else
    {
        ret["supplier_level"]=Json::Value();
    }
    if(getK3SupplierId())
    {
        ret["k3_supplier_id"]=getValueOfK3SupplierId();
    }
    else
    {
        ret["k3_supplier_id"]=Json::Value();
    }
    if(getAdminId())
    {
        ret["admin_id"]=(Json::UInt64)getValueOfAdminId();
    }
    else
    {
        ret["admin_id"]=Json::Value();
    }
    if(getScore())
    {
        ret["score"]=getValueOfScore();
    }
    else
    {
        ret["score"]=Json::Value();
    }
    if(getScoreJson())
    {
        ret["score_json"]=getValueOfScoreJson();
    }
    else
    {
        ret["score_json"]=Json::Value();
    }
    if(getScoreStatus())
    {
        ret["score_status"]=getValueOfScoreStatus();
    }
    else
    {
        ret["score_status"]=Json::Value();
    }
    return ret;
}

Json::Value Company::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 39)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=(Json::UInt64)getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getCreateTime())
            {
                ret[pMasqueradingVector[1]]=getCreateTime()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getUpdateTime())
            {
                ret[pMasqueradingVector[2]]=getUpdateTime()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getCompanyName())
            {
                ret[pMasqueradingVector[3]]=getValueOfCompanyName();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getCompanyShortName())
            {
                ret[pMasqueradingVector[4]]=getValueOfCompanyShortName();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getCompanyType())
            {
                ret[pMasqueradingVector[5]]=getValueOfCompanyType();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getShopId())
            {
                ret[pMasqueradingVector[6]]=(Json::UInt64)getValueOfShopId();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getUserId())
            {
                ret[pMasqueradingVector[7]]=(Json::UInt64)getValueOfUserId();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[8].empty())
        {
            if(getCompanyStatus())
            {
                ret[pMasqueradingVector[8]]=getValueOfCompanyStatus();
            }
            else
            {
                ret[pMasqueradingVector[8]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[9].empty())
        {
            if(getRemark())
            {
                ret[pMasqueradingVector[9]]=getValueOfRemark();
            }
            else
            {
                ret[pMasqueradingVector[9]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[10].empty())
        {
            if(getCompanyFax())
            {
                ret[pMasqueradingVector[10]]=getValueOfCompanyFax();
            }
            else
            {
                ret[pMasqueradingVector[10]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[11].empty())
        {
            if(getCompanyQq())
            {
                ret[pMasqueradingVector[11]]=getValueOfCompanyQq();
            }
            else
            {
                ret[pMasqueradingVector[11]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[12].empty())
        {
            if(getCompanyEmail())
            {
                ret[pMasqueradingVector[12]]=getValueOfCompanyEmail();
            }
            else
            {
                ret[pMasqueradingVector[12]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[13].empty())
        {
            if(getCompanyTradeType())
            {
                ret[pMasqueradingVector[13]]=getValueOfCompanyTradeType();
            }
            else
            {
                ret[pMasqueradingVector[13]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[14].empty())
        {
            if(getIsLock())
            {
                ret[pMasqueradingVector[14]]=getValueOfIsLock();
            }
            else
            {
                ret[pMasqueradingVector[14]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[15].empty())
        {
            if(getCompanyLogo())
            {
                ret[pMasqueradingVector[15]]=getValueOfCompanyLogo();
            }
            else
            {
                ret[pMasqueradingVector[15]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[16].empty())
        {
            if(getCompanyTaxNumber())
            {
                ret[pMasqueradingVector[16]]=getValueOfCompanyTaxNumber();
            }
            else
            {
                ret[pMasqueradingVector[16]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[17].empty())
        {
            if(getCompanyBillingAddress())
            {
                ret[pMasqueradingVector[17]]=getValueOfCompanyBillingAddress();
            }
            else
            {
                ret[pMasqueradingVector[17]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[18].empty())
        {
            if(getCompanyBillingPhone())
            {
                ret[pMasqueradingVector[18]]=getValueOfCompanyBillingPhone();
            }
            else
            {
                ret[pMasqueradingVector[18]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[19].empty())
        {
            if(getIsDefault())
            {
                ret[pMasqueradingVector[19]]=getValueOfIsDefault();
            }
            else
            {
                ret[pMasqueradingVector[19]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[20].empty())
        {
            if(getCompanyRepresentative())
            {
                ret[pMasqueradingVector[20]]=getValueOfCompanyRepresentative();
            }
            else
            {
                ret[pMasqueradingVector[20]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[21].empty())
        {
            if(getIsDelete())
            {
                ret[pMasqueradingVector[21]]=getValueOfIsDelete();
            }
            else
            {
                ret[pMasqueradingVector[21]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[22].empty())
        {
            if(getSort())
            {
                ret[pMasqueradingVector[22]]=getValueOfSort();
            }
            else
            {
                ret[pMasqueradingVector[22]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[23].empty())
        {
            if(getAccountBalance())
            {
                ret[pMasqueradingVector[23]]=getValueOfAccountBalance();
            }
            else
            {
                ret[pMasqueradingVector[23]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[24].empty())
        {
            if(getCompanyBusinessLicense())
            {
                ret[pMasqueradingVector[24]]=getValueOfCompanyBusinessLicense();
            }
            else
            {
                ret[pMasqueradingVector[24]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[25].empty())
        {
            if(getCompanyMailAddress())
            {
                ret[pMasqueradingVector[25]]=getValueOfCompanyMailAddress();
            }
            else
            {
                ret[pMasqueradingVector[25]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[26].empty())
        {
            if(getProvinceId())
            {
                ret[pMasqueradingVector[26]]=(Json::Int64)getValueOfProvinceId();
            }
            else
            {
                ret[pMasqueradingVector[26]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[27].empty())
        {
            if(getCityId())
            {
                ret[pMasqueradingVector[27]]=(Json::Int64)getValueOfCityId();
            }
            else
            {
                ret[pMasqueradingVector[27]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[28].empty())
        {
            if(getAreaId())
            {
                ret[pMasqueradingVector[28]]=(Json::Int64)getValueOfAreaId();
            }
            else
            {
                ret[pMasqueradingVector[28]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[29].empty())
        {
            if(getAddress())
            {
                ret[pMasqueradingVector[29]]=getValueOfAddress();
            }
            else
            {
                ret[pMasqueradingVector[29]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[30].empty())
        {
            if(getCompanyPhone())
            {
                ret[pMasqueradingVector[30]]=getValueOfCompanyPhone();
            }
            else
            {
                ret[pMasqueradingVector[30]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[31].empty())
        {
            if(getCompanyOpeningBank())
            {
                ret[pMasqueradingVector[31]]=getValueOfCompanyOpeningBank();
            }
            else
            {
                ret[pMasqueradingVector[31]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[32].empty())
        {
            if(getCompanyBankAccount())
            {
                ret[pMasqueradingVector[32]]=getValueOfCompanyBankAccount();
            }
            else
            {
                ret[pMasqueradingVector[32]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[33].empty())
        {
            if(getSupplierLevel())
            {
                ret[pMasqueradingVector[33]]=getValueOfSupplierLevel();
            }
            else
            {
                ret[pMasqueradingVector[33]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[34].empty())
        {
            if(getK3SupplierId())
            {
                ret[pMasqueradingVector[34]]=getValueOfK3SupplierId();
            }
            else
            {
                ret[pMasqueradingVector[34]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[35].empty())
        {
            if(getAdminId())
            {
                ret[pMasqueradingVector[35]]=(Json::UInt64)getValueOfAdminId();
            }
            else
            {
                ret[pMasqueradingVector[35]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[36].empty())
        {
            if(getScore())
            {
                ret[pMasqueradingVector[36]]=getValueOfScore();
            }
            else
            {
                ret[pMasqueradingVector[36]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[37].empty())
        {
            if(getScoreJson())
            {
                ret[pMasqueradingVector[37]]=getValueOfScoreJson();
            }
            else
            {
                ret[pMasqueradingVector[37]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[38].empty())
        {
            if(getScoreStatus())
            {
                ret[pMasqueradingVector[38]]=getValueOfScoreStatus();
            }
            else
            {
                ret[pMasqueradingVector[38]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=(Json::UInt64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getCreateTime())
    {
        ret["create_time"]=getCreateTime()->toDbStringLocal();
    }
    else
    {
        ret["create_time"]=Json::Value();
    }
    if(getUpdateTime())
    {
        ret["update_time"]=getUpdateTime()->toDbStringLocal();
    }
    else
    {
        ret["update_time"]=Json::Value();
    }
    if(getCompanyName())
    {
        ret["company_name"]=getValueOfCompanyName();
    }
    else
    {
        ret["company_name"]=Json::Value();
    }
    if(getCompanyShortName())
    {
        ret["company_short_name"]=getValueOfCompanyShortName();
    }
    else
    {
        ret["company_short_name"]=Json::Value();
    }
    if(getCompanyType())
    {
        ret["company_type"]=getValueOfCompanyType();
    }
    else
    {
        ret["company_type"]=Json::Value();
    }
    if(getShopId())
    {
        ret["shop_id"]=(Json::UInt64)getValueOfShopId();
    }
    else
    {
        ret["shop_id"]=Json::Value();
    }
    if(getUserId())
    {
        ret["user_id"]=(Json::UInt64)getValueOfUserId();
    }
    else
    {
        ret["user_id"]=Json::Value();
    }
    if(getCompanyStatus())
    {
        ret["company_status"]=getValueOfCompanyStatus();
    }
    else
    {
        ret["company_status"]=Json::Value();
    }
    if(getRemark())
    {
        ret["remark"]=getValueOfRemark();
    }
    else
    {
        ret["remark"]=Json::Value();
    }
    if(getCompanyFax())
    {
        ret["company_fax"]=getValueOfCompanyFax();
    }
    else
    {
        ret["company_fax"]=Json::Value();
    }
    if(getCompanyQq())
    {
        ret["company_qq"]=getValueOfCompanyQq();
    }
    else
    {
        ret["company_qq"]=Json::Value();
    }
    if(getCompanyEmail())
    {
        ret["company_email"]=getValueOfCompanyEmail();
    }
    else
    {
        ret["company_email"]=Json::Value();
    }
    if(getCompanyTradeType())
    {
        ret["company_trade_type"]=getValueOfCompanyTradeType();
    }
    else
    {
        ret["company_trade_type"]=Json::Value();
    }
    if(getIsLock())
    {
        ret["is_lock"]=getValueOfIsLock();
    }
    else
    {
        ret["is_lock"]=Json::Value();
    }
    if(getCompanyLogo())
    {
        ret["company_logo"]=getValueOfCompanyLogo();
    }
    else
    {
        ret["company_logo"]=Json::Value();
    }
    if(getCompanyTaxNumber())
    {
        ret["company_tax_number"]=getValueOfCompanyTaxNumber();
    }
    else
    {
        ret["company_tax_number"]=Json::Value();
    }
    if(getCompanyBillingAddress())
    {
        ret["company_billing_address"]=getValueOfCompanyBillingAddress();
    }
    else
    {
        ret["company_billing_address"]=Json::Value();
    }
    if(getCompanyBillingPhone())
    {
        ret["company_billing_phone"]=getValueOfCompanyBillingPhone();
    }
    else
    {
        ret["company_billing_phone"]=Json::Value();
    }
    if(getIsDefault())
    {
        ret["is_default"]=getValueOfIsDefault();
    }
    else
    {
        ret["is_default"]=Json::Value();
    }
    if(getCompanyRepresentative())
    {
        ret["company_representative"]=getValueOfCompanyRepresentative();
    }
    else
    {
        ret["company_representative"]=Json::Value();
    }
    if(getIsDelete())
    {
        ret["is_delete"]=getValueOfIsDelete();
    }
    else
    {
        ret["is_delete"]=Json::Value();
    }
    if(getSort())
    {
        ret["sort"]=getValueOfSort();
    }
    else
    {
        ret["sort"]=Json::Value();
    }
    if(getAccountBalance())
    {
        ret["account_balance"]=getValueOfAccountBalance();
    }
    else
    {
        ret["account_balance"]=Json::Value();
    }
    if(getCompanyBusinessLicense())
    {
        ret["company_business_license"]=getValueOfCompanyBusinessLicense();
    }
    else
    {
        ret["company_business_license"]=Json::Value();
    }
    if(getCompanyMailAddress())
    {
        ret["company_mail_address"]=getValueOfCompanyMailAddress();
    }
    else
    {
        ret["company_mail_address"]=Json::Value();
    }
    if(getProvinceId())
    {
        ret["province_id"]=(Json::Int64)getValueOfProvinceId();
    }
    else
    {
        ret["province_id"]=Json::Value();
    }
    if(getCityId())
    {
        ret["city_id"]=(Json::Int64)getValueOfCityId();
    }
    else
    {
        ret["city_id"]=Json::Value();
    }
    if(getAreaId())
    {
        ret["area_id"]=(Json::Int64)getValueOfAreaId();
    }
    else
    {
        ret["area_id"]=Json::Value();
    }
    if(getAddress())
    {
        ret["address"]=getValueOfAddress();
    }
    else
    {
        ret["address"]=Json::Value();
    }
    if(getCompanyPhone())
    {
        ret["company_phone"]=getValueOfCompanyPhone();
    }
    else
    {
        ret["company_phone"]=Json::Value();
    }
    if(getCompanyOpeningBank())
    {
        ret["company_opening_bank"]=getValueOfCompanyOpeningBank();
    }
    else
    {
        ret["company_opening_bank"]=Json::Value();
    }
    if(getCompanyBankAccount())
    {
        ret["company_bank_account"]=getValueOfCompanyBankAccount();
    }
    else
    {
        ret["company_bank_account"]=Json::Value();
    }
    if(getSupplierLevel())
    {
        ret["supplier_level"]=getValueOfSupplierLevel();
    }
    else
    {
        ret["supplier_level"]=Json::Value();
    }
    if(getK3SupplierId())
    {
        ret["k3_supplier_id"]=getValueOfK3SupplierId();
    }
    else
    {
        ret["k3_supplier_id"]=Json::Value();
    }
    if(getAdminId())
    {
        ret["admin_id"]=(Json::UInt64)getValueOfAdminId();
    }
    else
    {
        ret["admin_id"]=Json::Value();
    }
    if(getScore())
    {
        ret["score"]=getValueOfScore();
    }
    else
    {
        ret["score"]=Json::Value();
    }
    if(getScoreJson())
    {
        ret["score_json"]=getValueOfScoreJson();
    }
    else
    {
        ret["score_json"]=Json::Value();
    }
    if(getScoreStatus())
    {
        ret["score_status"]=getValueOfScoreStatus();
    }
    else
    {
        ret["score_status"]=Json::Value();
    }
    return ret;
}

bool Company::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("create_time"))
    {
        if(!validJsonOfField(1, "create_time", pJson["create_time"], err, true))
            return false;
    }
    if(pJson.isMember("update_time"))
    {
        if(!validJsonOfField(2, "update_time", pJson["update_time"], err, true))
            return false;
    }
    if(pJson.isMember("company_name"))
    {
        if(!validJsonOfField(3, "company_name", pJson["company_name"], err, true))
            return false;
    }
    else
    {
        err="The company_name column cannot be null";
        return false;
    }
    if(pJson.isMember("company_short_name"))
    {
        if(!validJsonOfField(4, "company_short_name", pJson["company_short_name"], err, true))
            return false;
    }
    if(pJson.isMember("company_type"))
    {
        if(!validJsonOfField(5, "company_type", pJson["company_type"], err, true))
            return false;
    }
    if(pJson.isMember("shop_id"))
    {
        if(!validJsonOfField(6, "shop_id", pJson["shop_id"], err, true))
            return false;
    }
    if(pJson.isMember("user_id"))
    {
        if(!validJsonOfField(7, "user_id", pJson["user_id"], err, true))
            return false;
    }
    if(pJson.isMember("company_status"))
    {
        if(!validJsonOfField(8, "company_status", pJson["company_status"], err, true))
            return false;
    }
    if(pJson.isMember("remark"))
    {
        if(!validJsonOfField(9, "remark", pJson["remark"], err, true))
            return false;
    }
    if(pJson.isMember("company_fax"))
    {
        if(!validJsonOfField(10, "company_fax", pJson["company_fax"], err, true))
            return false;
    }
    if(pJson.isMember("company_qq"))
    {
        if(!validJsonOfField(11, "company_qq", pJson["company_qq"], err, true))
            return false;
    }
    if(pJson.isMember("company_email"))
    {
        if(!validJsonOfField(12, "company_email", pJson["company_email"], err, true))
            return false;
    }
    if(pJson.isMember("company_trade_type"))
    {
        if(!validJsonOfField(13, "company_trade_type", pJson["company_trade_type"], err, true))
            return false;
    }
    if(pJson.isMember("is_lock"))
    {
        if(!validJsonOfField(14, "is_lock", pJson["is_lock"], err, true))
            return false;
    }
    if(pJson.isMember("company_logo"))
    {
        if(!validJsonOfField(15, "company_logo", pJson["company_logo"], err, true))
            return false;
    }
    if(pJson.isMember("company_tax_number"))
    {
        if(!validJsonOfField(16, "company_tax_number", pJson["company_tax_number"], err, true))
            return false;
    }
    if(pJson.isMember("company_billing_address"))
    {
        if(!validJsonOfField(17, "company_billing_address", pJson["company_billing_address"], err, true))
            return false;
    }
    if(pJson.isMember("company_billing_phone"))
    {
        if(!validJsonOfField(18, "company_billing_phone", pJson["company_billing_phone"], err, true))
            return false;
    }
    else
    {
        err="The company_billing_phone column cannot be null";
        return false;
    }
    if(pJson.isMember("is_default"))
    {
        if(!validJsonOfField(19, "is_default", pJson["is_default"], err, true))
            return false;
    }
    if(pJson.isMember("company_representative"))
    {
        if(!validJsonOfField(20, "company_representative", pJson["company_representative"], err, true))
            return false;
    }
    if(pJson.isMember("is_delete"))
    {
        if(!validJsonOfField(21, "is_delete", pJson["is_delete"], err, true))
            return false;
    }
    if(pJson.isMember("sort"))
    {
        if(!validJsonOfField(22, "sort", pJson["sort"], err, true))
            return false;
    }
    if(pJson.isMember("account_balance"))
    {
        if(!validJsonOfField(23, "account_balance", pJson["account_balance"], err, true))
            return false;
    }
    if(pJson.isMember("company_business_license"))
    {
        if(!validJsonOfField(24, "company_business_license", pJson["company_business_license"], err, true))
            return false;
    }
    if(pJson.isMember("company_mail_address"))
    {
        if(!validJsonOfField(25, "company_mail_address", pJson["company_mail_address"], err, true))
            return false;
    }
    if(pJson.isMember("province_id"))
    {
        if(!validJsonOfField(26, "province_id", pJson["province_id"], err, true))
            return false;
    }
    if(pJson.isMember("city_id"))
    {
        if(!validJsonOfField(27, "city_id", pJson["city_id"], err, true))
            return false;
    }
    if(pJson.isMember("area_id"))
    {
        if(!validJsonOfField(28, "area_id", pJson["area_id"], err, true))
            return false;
    }
    if(pJson.isMember("address"))
    {
        if(!validJsonOfField(29, "address", pJson["address"], err, true))
            return false;
    }
    if(pJson.isMember("company_phone"))
    {
        if(!validJsonOfField(30, "company_phone", pJson["company_phone"], err, true))
            return false;
    }
    if(pJson.isMember("company_opening_bank"))
    {
        if(!validJsonOfField(31, "company_opening_bank", pJson["company_opening_bank"], err, true))
            return false;
    }
    if(pJson.isMember("company_bank_account"))
    {
        if(!validJsonOfField(32, "company_bank_account", pJson["company_bank_account"], err, true))
            return false;
    }
    if(pJson.isMember("supplier_level"))
    {
        if(!validJsonOfField(33, "supplier_level", pJson["supplier_level"], err, true))
            return false;
    }
    if(pJson.isMember("k3_supplier_id"))
    {
        if(!validJsonOfField(34, "k3_supplier_id", pJson["k3_supplier_id"], err, true))
            return false;
    }
    if(pJson.isMember("admin_id"))
    {
        if(!validJsonOfField(35, "admin_id", pJson["admin_id"], err, true))
            return false;
    }
    if(pJson.isMember("score"))
    {
        if(!validJsonOfField(36, "score", pJson["score"], err, true))
            return false;
    }
    if(pJson.isMember("score_json"))
    {
        if(!validJsonOfField(37, "score_json", pJson["score_json"], err, true))
            return false;
    }
    if(pJson.isMember("score_status"))
    {
        if(!validJsonOfField(38, "score_status", pJson["score_status"], err, true))
            return false;
    }
    return true;
}
bool Company::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                 const std::vector<std::string> &pMasqueradingVector,
                                                 std::string &err)
{
    if(pMasqueradingVector.size() != 39)
    {
        err = "Bad masquerading vector";
        return false;
    }
    if(!pMasqueradingVector[0].empty())
    {
        if(pJson.isMember(pMasqueradingVector[0]))
        {
            if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[1].empty())
    {
        if(pJson.isMember(pMasqueradingVector[1]))
        {
            if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[2].empty())
    {
        if(pJson.isMember(pMasqueradingVector[2]))
        {
            if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[3].empty())
    {
        if(pJson.isMember(pMasqueradingVector[3]))
        {
            if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                return false;
        }
        else
        {
            err="The " + pMasqueradingVector[3] + " column cannot be null";
            return false;
        }
    }
    if(!pMasqueradingVector[4].empty())
    {
        if(pJson.isMember(pMasqueradingVector[4]))
        {
            if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[5].empty())
    {
        if(pJson.isMember(pMasqueradingVector[5]))
        {
            if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[6].empty())
    {
        if(pJson.isMember(pMasqueradingVector[6]))
        {
            if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[7].empty())
    {
        if(pJson.isMember(pMasqueradingVector[7]))
        {
            if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[8].empty())
    {
        if(pJson.isMember(pMasqueradingVector[8]))
        {
            if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[9].empty())
    {
        if(pJson.isMember(pMasqueradingVector[9]))
        {
            if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[10].empty())
    {
        if(pJson.isMember(pMasqueradingVector[10]))
        {
            if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[11].empty())
    {
        if(pJson.isMember(pMasqueradingVector[11]))
        {
            if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[12].empty())
    {
        if(pJson.isMember(pMasqueradingVector[12]))
        {
            if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[13].empty())
    {
        if(pJson.isMember(pMasqueradingVector[13]))
        {
            if(!validJsonOfField(13, pMasqueradingVector[13], pJson[pMasqueradingVector[13]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[14].empty())
    {
        if(pJson.isMember(pMasqueradingVector[14]))
        {
            if(!validJsonOfField(14, pMasqueradingVector[14], pJson[pMasqueradingVector[14]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[15].empty())
    {
        if(pJson.isMember(pMasqueradingVector[15]))
        {
            if(!validJsonOfField(15, pMasqueradingVector[15], pJson[pMasqueradingVector[15]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[16].empty())
    {
        if(pJson.isMember(pMasqueradingVector[16]))
        {
            if(!validJsonOfField(16, pMasqueradingVector[16], pJson[pMasqueradingVector[16]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[17].empty())
    {
        if(pJson.isMember(pMasqueradingVector[17]))
        {
            if(!validJsonOfField(17, pMasqueradingVector[17], pJson[pMasqueradingVector[17]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[18].empty())
    {
        if(pJson.isMember(pMasqueradingVector[18]))
        {
            if(!validJsonOfField(18, pMasqueradingVector[18], pJson[pMasqueradingVector[18]], err, true))
                return false;
        }
        else
        {
            err="The " + pMasqueradingVector[18] + " column cannot be null";
            return false;
        }
    }
    if(!pMasqueradingVector[19].empty())
    {
        if(pJson.isMember(pMasqueradingVector[19]))
        {
            if(!validJsonOfField(19, pMasqueradingVector[19], pJson[pMasqueradingVector[19]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[20].empty())
    {
        if(pJson.isMember(pMasqueradingVector[20]))
        {
            if(!validJsonOfField(20, pMasqueradingVector[20], pJson[pMasqueradingVector[20]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[21].empty())
    {
        if(pJson.isMember(pMasqueradingVector[21]))
        {
            if(!validJsonOfField(21, pMasqueradingVector[21], pJson[pMasqueradingVector[21]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[22].empty())
    {
        if(pJson.isMember(pMasqueradingVector[22]))
        {
            if(!validJsonOfField(22, pMasqueradingVector[22], pJson[pMasqueradingVector[22]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[23].empty())
    {
        if(pJson.isMember(pMasqueradingVector[23]))
        {
            if(!validJsonOfField(23, pMasqueradingVector[23], pJson[pMasqueradingVector[23]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[24].empty())
    {
        if(pJson.isMember(pMasqueradingVector[24]))
        {
            if(!validJsonOfField(24, pMasqueradingVector[24], pJson[pMasqueradingVector[24]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[25].empty())
    {
        if(pJson.isMember(pMasqueradingVector[25]))
        {
            if(!validJsonOfField(25, pMasqueradingVector[25], pJson[pMasqueradingVector[25]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[26].empty())
    {
        if(pJson.isMember(pMasqueradingVector[26]))
        {
            if(!validJsonOfField(26, pMasqueradingVector[26], pJson[pMasqueradingVector[26]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[27].empty())
    {
        if(pJson.isMember(pMasqueradingVector[27]))
        {
            if(!validJsonOfField(27, pMasqueradingVector[27], pJson[pMasqueradingVector[27]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[28].empty())
    {
        if(pJson.isMember(pMasqueradingVector[28]))
        {
            if(!validJsonOfField(28, pMasqueradingVector[28], pJson[pMasqueradingVector[28]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[29].empty())
    {
        if(pJson.isMember(pMasqueradingVector[29]))
        {
            if(!validJsonOfField(29, pMasqueradingVector[29], pJson[pMasqueradingVector[29]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[30].empty())
    {
        if(pJson.isMember(pMasqueradingVector[30]))
        {
            if(!validJsonOfField(30, pMasqueradingVector[30], pJson[pMasqueradingVector[30]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[31].empty())
    {
        if(pJson.isMember(pMasqueradingVector[31]))
        {
            if(!validJsonOfField(31, pMasqueradingVector[31], pJson[pMasqueradingVector[31]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[32].empty())
    {
        if(pJson.isMember(pMasqueradingVector[32]))
        {
            if(!validJsonOfField(32, pMasqueradingVector[32], pJson[pMasqueradingVector[32]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[33].empty())
    {
        if(pJson.isMember(pMasqueradingVector[33]))
        {
            if(!validJsonOfField(33, pMasqueradingVector[33], pJson[pMasqueradingVector[33]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[34].empty())
    {
        if(pJson.isMember(pMasqueradingVector[34]))
        {
            if(!validJsonOfField(34, pMasqueradingVector[34], pJson[pMasqueradingVector[34]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[35].empty())
    {
        if(pJson.isMember(pMasqueradingVector[35]))
        {
            if(!validJsonOfField(35, pMasqueradingVector[35], pJson[pMasqueradingVector[35]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[36].empty())
    {
        if(pJson.isMember(pMasqueradingVector[36]))
        {
            if(!validJsonOfField(36, pMasqueradingVector[36], pJson[pMasqueradingVector[36]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[37].empty())
    {
        if(pJson.isMember(pMasqueradingVector[37]))
        {
            if(!validJsonOfField(37, pMasqueradingVector[37], pJson[pMasqueradingVector[37]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[38].empty())
    {
        if(pJson.isMember(pMasqueradingVector[38]))
        {
            if(!validJsonOfField(38, pMasqueradingVector[38], pJson[pMasqueradingVector[38]], err, true))
                return false;
        }
    }
    return true;
}
bool Company::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("create_time"))
    {
        if(!validJsonOfField(1, "create_time", pJson["create_time"], err, false))
            return false;
    }
    if(pJson.isMember("update_time"))
    {
        if(!validJsonOfField(2, "update_time", pJson["update_time"], err, false))
            return false;
    }
    if(pJson.isMember("company_name"))
    {
        if(!validJsonOfField(3, "company_name", pJson["company_name"], err, false))
            return false;
    }
    if(pJson.isMember("company_short_name"))
    {
        if(!validJsonOfField(4, "company_short_name", pJson["company_short_name"], err, false))
            return false;
    }
    if(pJson.isMember("company_type"))
    {
        if(!validJsonOfField(5, "company_type", pJson["company_type"], err, false))
            return false;
    }
    if(pJson.isMember("shop_id"))
    {
        if(!validJsonOfField(6, "shop_id", pJson["shop_id"], err, false))
            return false;
    }
    if(pJson.isMember("user_id"))
    {
        if(!validJsonOfField(7, "user_id", pJson["user_id"], err, false))
            return false;
    }
    if(pJson.isMember("company_status"))
    {
        if(!validJsonOfField(8, "company_status", pJson["company_status"], err, false))
            return false;
    }
    if(pJson.isMember("remark"))
    {
        if(!validJsonOfField(9, "remark", pJson["remark"], err, false))
            return false;
    }
    if(pJson.isMember("company_fax"))
    {
        if(!validJsonOfField(10, "company_fax", pJson["company_fax"], err, false))
            return false;
    }
    if(pJson.isMember("company_qq"))
    {
        if(!validJsonOfField(11, "company_qq", pJson["company_qq"], err, false))
            return false;
    }
    if(pJson.isMember("company_email"))
    {
        if(!validJsonOfField(12, "company_email", pJson["company_email"], err, false))
            return false;
    }
    if(pJson.isMember("company_trade_type"))
    {
        if(!validJsonOfField(13, "company_trade_type", pJson["company_trade_type"], err, false))
            return false;
    }
    if(pJson.isMember("is_lock"))
    {
        if(!validJsonOfField(14, "is_lock", pJson["is_lock"], err, false))
            return false;
    }
    if(pJson.isMember("company_logo"))
    {
        if(!validJsonOfField(15, "company_logo", pJson["company_logo"], err, false))
            return false;
    }
    if(pJson.isMember("company_tax_number"))
    {
        if(!validJsonOfField(16, "company_tax_number", pJson["company_tax_number"], err, false))
            return false;
    }
    if(pJson.isMember("company_billing_address"))
    {
        if(!validJsonOfField(17, "company_billing_address", pJson["company_billing_address"], err, false))
            return false;
    }
    if(pJson.isMember("company_billing_phone"))
    {
        if(!validJsonOfField(18, "company_billing_phone", pJson["company_billing_phone"], err, false))
            return false;
    }
    if(pJson.isMember("is_default"))
    {
        if(!validJsonOfField(19, "is_default", pJson["is_default"], err, false))
            return false;
    }
    if(pJson.isMember("company_representative"))
    {
        if(!validJsonOfField(20, "company_representative", pJson["company_representative"], err, false))
            return false;
    }
    if(pJson.isMember("is_delete"))
    {
        if(!validJsonOfField(21, "is_delete", pJson["is_delete"], err, false))
            return false;
    }
    if(pJson.isMember("sort"))
    {
        if(!validJsonOfField(22, "sort", pJson["sort"], err, false))
            return false;
    }
    if(pJson.isMember("account_balance"))
    {
        if(!validJsonOfField(23, "account_balance", pJson["account_balance"], err, false))
            return false;
    }
    if(pJson.isMember("company_business_license"))
    {
        if(!validJsonOfField(24, "company_business_license", pJson["company_business_license"], err, false))
            return false;
    }
    if(pJson.isMember("company_mail_address"))
    {
        if(!validJsonOfField(25, "company_mail_address", pJson["company_mail_address"], err, false))
            return false;
    }
    if(pJson.isMember("province_id"))
    {
        if(!validJsonOfField(26, "province_id", pJson["province_id"], err, false))
            return false;
    }
    if(pJson.isMember("city_id"))
    {
        if(!validJsonOfField(27, "city_id", pJson["city_id"], err, false))
            return false;
    }
    if(pJson.isMember("area_id"))
    {
        if(!validJsonOfField(28, "area_id", pJson["area_id"], err, false))
            return false;
    }
    if(pJson.isMember("address"))
    {
        if(!validJsonOfField(29, "address", pJson["address"], err, false))
            return false;
    }
    if(pJson.isMember("company_phone"))
    {
        if(!validJsonOfField(30, "company_phone", pJson["company_phone"], err, false))
            return false;
    }
    if(pJson.isMember("company_opening_bank"))
    {
        if(!validJsonOfField(31, "company_opening_bank", pJson["company_opening_bank"], err, false))
            return false;
    }
    if(pJson.isMember("company_bank_account"))
    {
        if(!validJsonOfField(32, "company_bank_account", pJson["company_bank_account"], err, false))
            return false;
    }
    if(pJson.isMember("supplier_level"))
    {
        if(!validJsonOfField(33, "supplier_level", pJson["supplier_level"], err, false))
            return false;
    }
    if(pJson.isMember("k3_supplier_id"))
    {
        if(!validJsonOfField(34, "k3_supplier_id", pJson["k3_supplier_id"], err, false))
            return false;
    }
    if(pJson.isMember("admin_id"))
    {
        if(!validJsonOfField(35, "admin_id", pJson["admin_id"], err, false))
            return false;
    }
    if(pJson.isMember("score"))
    {
        if(!validJsonOfField(36, "score", pJson["score"], err, false))
            return false;
    }
    if(pJson.isMember("score_json"))
    {
        if(!validJsonOfField(37, "score_json", pJson["score_json"], err, false))
            return false;
    }
    if(pJson.isMember("score_status"))
    {
        if(!validJsonOfField(38, "score_status", pJson["score_status"], err, false))
            return false;
    }
    return true;
}
bool Company::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                               const std::vector<std::string> &pMasqueradingVector,
                                               std::string &err)
{
    if(pMasqueradingVector.size() != 39)
    {
        err = "Bad masquerading vector";
        return false;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
            return false;
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
            return false;
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
            return false;
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
            return false;
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
            return false;
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
            return false;
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
            return false;
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, false))
            return false;
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, false))
            return false;
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, false))
            return false;
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, false))
            return false;
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, false))
            return false;
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        if(!validJsonOfField(13, pMasqueradingVector[13], pJson[pMasqueradingVector[13]], err, false))
            return false;
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        if(!validJsonOfField(14, pMasqueradingVector[14], pJson[pMasqueradingVector[14]], err, false))
            return false;
    }
    if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
    {
        if(!validJsonOfField(15, pMasqueradingVector[15], pJson[pMasqueradingVector[15]], err, false))
            return false;
    }
    if(!pMasqueradingVector[16].empty() && pJson.isMember(pMasqueradingVector[16]))
    {
        if(!validJsonOfField(16, pMasqueradingVector[16], pJson[pMasqueradingVector[16]], err, false))
            return false;
    }
    if(!pMasqueradingVector[17].empty() && pJson.isMember(pMasqueradingVector[17]))
    {
        if(!validJsonOfField(17, pMasqueradingVector[17], pJson[pMasqueradingVector[17]], err, false))
            return false;
    }
    if(!pMasqueradingVector[18].empty() && pJson.isMember(pMasqueradingVector[18]))
    {
        if(!validJsonOfField(18, pMasqueradingVector[18], pJson[pMasqueradingVector[18]], err, false))
            return false;
    }
    if(!pMasqueradingVector[19].empty() && pJson.isMember(pMasqueradingVector[19]))
    {
        if(!validJsonOfField(19, pMasqueradingVector[19], pJson[pMasqueradingVector[19]], err, false))
            return false;
    }
    if(!pMasqueradingVector[20].empty() && pJson.isMember(pMasqueradingVector[20]))
    {
        if(!validJsonOfField(20, pMasqueradingVector[20], pJson[pMasqueradingVector[20]], err, false))
            return false;
    }
    if(!pMasqueradingVector[21].empty() && pJson.isMember(pMasqueradingVector[21]))
    {
        if(!validJsonOfField(21, pMasqueradingVector[21], pJson[pMasqueradingVector[21]], err, false))
            return false;
    }
    if(!pMasqueradingVector[22].empty() && pJson.isMember(pMasqueradingVector[22]))
    {
        if(!validJsonOfField(22, pMasqueradingVector[22], pJson[pMasqueradingVector[22]], err, false))
            return false;
    }
    if(!pMasqueradingVector[23].empty() && pJson.isMember(pMasqueradingVector[23]))
    {
        if(!validJsonOfField(23, pMasqueradingVector[23], pJson[pMasqueradingVector[23]], err, false))
            return false;
    }
    if(!pMasqueradingVector[24].empty() && pJson.isMember(pMasqueradingVector[24]))
    {
        if(!validJsonOfField(24, pMasqueradingVector[24], pJson[pMasqueradingVector[24]], err, false))
            return false;
    }
    if(!pMasqueradingVector[25].empty() && pJson.isMember(pMasqueradingVector[25]))
    {
        if(!validJsonOfField(25, pMasqueradingVector[25], pJson[pMasqueradingVector[25]], err, false))
            return false;
    }
    if(!pMasqueradingVector[26].empty() && pJson.isMember(pMasqueradingVector[26]))
    {
        if(!validJsonOfField(26, pMasqueradingVector[26], pJson[pMasqueradingVector[26]], err, false))
            return false;
    }
    if(!pMasqueradingVector[27].empty() && pJson.isMember(pMasqueradingVector[27]))
    {
        if(!validJsonOfField(27, pMasqueradingVector[27], pJson[pMasqueradingVector[27]], err, false))
            return false;
    }
    if(!pMasqueradingVector[28].empty() && pJson.isMember(pMasqueradingVector[28]))
    {
        if(!validJsonOfField(28, pMasqueradingVector[28], pJson[pMasqueradingVector[28]], err, false))
            return false;
    }
    if(!pMasqueradingVector[29].empty() && pJson.isMember(pMasqueradingVector[29]))
    {
        if(!validJsonOfField(29, pMasqueradingVector[29], pJson[pMasqueradingVector[29]], err, false))
            return false;
    }
    if(!pMasqueradingVector[30].empty() && pJson.isMember(pMasqueradingVector[30]))
    {
        if(!validJsonOfField(30, pMasqueradingVector[30], pJson[pMasqueradingVector[30]], err, false))
            return false;
    }
    if(!pMasqueradingVector[31].empty() && pJson.isMember(pMasqueradingVector[31]))
    {
        if(!validJsonOfField(31, pMasqueradingVector[31], pJson[pMasqueradingVector[31]], err, false))
            return false;
    }
    if(!pMasqueradingVector[32].empty() && pJson.isMember(pMasqueradingVector[32]))
    {
        if(!validJsonOfField(32, pMasqueradingVector[32], pJson[pMasqueradingVector[32]], err, false))
            return false;
    }
    if(!pMasqueradingVector[33].empty() && pJson.isMember(pMasqueradingVector[33]))
    {
        if(!validJsonOfField(33, pMasqueradingVector[33], pJson[pMasqueradingVector[33]], err, false))
            return false;
    }
    if(!pMasqueradingVector[34].empty() && pJson.isMember(pMasqueradingVector[34]))
    {
        if(!validJsonOfField(34, pMasqueradingVector[34], pJson[pMasqueradingVector[34]], err, false))
            return false;
    }
    if(!pMasqueradingVector[35].empty() && pJson.isMember(pMasqueradingVector[35]))
    {
        if(!validJsonOfField(35, pMasqueradingVector[35], pJson[pMasqueradingVector[35]], err, false))
            return false;
    }
    if(!pMasqueradingVector[36].empty() && pJson.isMember(pMasqueradingVector[36]))
    {
        if(!validJsonOfField(36, pMasqueradingVector[36], pJson[pMasqueradingVector[36]], err, false))
            return false;
    }
    if(!pMasqueradingVector[37].empty() && pJson.isMember(pMasqueradingVector[37]))
    {
        if(!validJsonOfField(37, pMasqueradingVector[37], pJson[pMasqueradingVector[37]], err, false))
            return false;
    }
    if(!pMasqueradingVector[38].empty() && pJson.isMember(pMasqueradingVector[38]))
    {
        if(!validJsonOfField(38, pMasqueradingVector[38], pJson[pMasqueradingVector[38]], err, false))
            return false;
    }
    return true;
}
bool Company::validJsonOfField(size_t index,
                               const std::string &fieldName,
                               const Json::Value &pJson, 
                               std::string &err, 
                               bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }        
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 30)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 30)";
                return false;               
            }

            break;
        case 4:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 30)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 30)";
                return false;               
            }

            break;
        case 5:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 6:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 7:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 8:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 9:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 200)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 200)";
                return false;               
            }

            break;
        case 10:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 20)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 20)";
                return false;               
            }

            break;
        case 11:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 20)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 20)";
                return false;               
            }

            break;
        case 12:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 100)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 100)";
                return false;               
            }

            break;
        case 13:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 14:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 15:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 300)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 300)";
                return false;               
            }

            break;
        case 16:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 50)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 50)";
                return false;               
            }

            break;
        case 17:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 100)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 100)";
                return false;               
            }

            break;
        case 18:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 50)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 50)";
                return false;               
            }

            break;
        case 19:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 20:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 20)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 20)";
                return false;               
            }

            break;
        case 21:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 22:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 23:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 24:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 200)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 200)";
                return false;               
            }

            break;
        case 25:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 50)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 50)";
                return false;               
            }

            break;
        case 26:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 27:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 28:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 29:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 200)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 200)";
                return false;               
            }

            break;
        case 30:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 20)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 20)";
                return false;               
            }

            break;
        case 31:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 50)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 50)";
                return false;               
            }

            break;
        case 32:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 50)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 50)";
                return false;               
            }

            break;
        case 33:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 34:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 35:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 36:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 37:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 38:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
     
        default:
            err="Internal error in the server";
            return false;
            break;
    }
    return true;
}
