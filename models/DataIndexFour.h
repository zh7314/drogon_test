/**
 *
 *  DataIndexFour.h
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#pragma once
#include <drogon/orm/Result.h>
#include <drogon/orm/Row.h>
#include <drogon/orm/Field.h>
#include <drogon/orm/SqlBinder.h>
#include <drogon/orm/Mapper.h>
#include <trantor/utils/Date.h>
#include <trantor/utils/Logger.h>
#include <json/json.h>
#include <string>
#include <memory>
#include <vector>
#include <tuple>
#include <stdint.h>
#include <iostream>

using namespace drogon::orm;
namespace drogon
{
namespace orm
{
class DbClient;
using DbClientPtr = std::shared_ptr<DbClient>;
}
}
namespace drogon_model
{
namespace v2 
{

class DataIndexFour
{
  public:
    struct Cols
    {
        static const std::string _id;
        static const std::string _product_name;
        static const std::string _type_name;
        static const std::string _tag;
        static const std::string _interval_price;
        static const std::string _avg_price;
        static const std::string _up_down;
        static const std::string _date_from;
        static const std::string _date;
        static const std::string _create_time;
        static const std::string _update_time;
        static const std::string _shop_id;
    };

    const static int primaryKeyNumber;
    const static std::string tableName;
    const static bool hasPrimaryKey;
    const static std::string primaryKeyName;
    using PrimaryKeyType = int64_t;
    const PrimaryKeyType &getPrimaryKey() const;

    /**
     * @brief constructor
     * @param r One row of records in the SQL query result.
     * @param indexOffset Set the offset to -1 to access all columns by column names, 
     * otherwise access all columns by offsets.
     * @note If the SQL is not a style of 'select * from table_name ...' (select all 
     * columns by an asterisk), please set the offset to -1.
     */
    explicit DataIndexFour(const Row &r, const ssize_t indexOffset = 0) noexcept;

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     */
    explicit DataIndexFour(const Json::Value &pJson) noexcept(false);

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     * @param pMasqueradingVector The aliases of table columns.
     */
    DataIndexFour(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false);

    DataIndexFour() = default;
    
    void updateByJson(const Json::Value &pJson) noexcept(false);
    void updateByMasqueradedJson(const Json::Value &pJson,
                                 const std::vector<std::string> &pMasqueradingVector) noexcept(false);
    static bool validateJsonForCreation(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForCreation(const Json::Value &,
                                                const std::vector<std::string> &pMasqueradingVector,
                                                    std::string &err);
    static bool validateJsonForUpdate(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForUpdate(const Json::Value &,
                                          const std::vector<std::string> &pMasqueradingVector,
                                          std::string &err);
    static bool validJsonOfField(size_t index,
                          const std::string &fieldName,
                          const Json::Value &pJson, 
                          std::string &err, 
                          bool isForCreation);

    /**  For column id  */
    ///Get the value of the column id, returns the default value if the column is null
    const int64_t &getValueOfId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int64_t> &getId() const noexcept;

    ///Set the value of the column id
    void setId(const int64_t &pId) noexcept;


    /**  For column product_name  */
    ///Get the value of the column product_name, returns the default value if the column is null
    const std::string &getValueOfProductName() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getProductName() const noexcept;

    ///Set the value of the column product_name
    void setProductName(const std::string &pProductName) noexcept;
    void setProductName(std::string &&pProductName) noexcept;


    /**  For column type_name  */
    ///Get the value of the column type_name, returns the default value if the column is null
    const std::string &getValueOfTypeName() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getTypeName() const noexcept;

    ///Set the value of the column type_name
    void setTypeName(const std::string &pTypeName) noexcept;
    void setTypeName(std::string &&pTypeName) noexcept;


    /**  For column tag  */
    ///Get the value of the column tag, returns the default value if the column is null
    const std::string &getValueOfTag() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getTag() const noexcept;

    ///Set the value of the column tag
    void setTag(const std::string &pTag) noexcept;
    void setTag(std::string &&pTag) noexcept;


    /**  For column interval_price  */
    ///Get the value of the column interval_price, returns the default value if the column is null
    const std::string &getValueOfIntervalPrice() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getIntervalPrice() const noexcept;

    ///Set the value of the column interval_price
    void setIntervalPrice(const std::string &pIntervalPrice) noexcept;
    void setIntervalPrice(std::string &&pIntervalPrice) noexcept;


    /**  For column avg_price  */
    ///Get the value of the column avg_price, returns the default value if the column is null
    const std::string &getValueOfAvgPrice() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getAvgPrice() const noexcept;

    ///Set the value of the column avg_price
    void setAvgPrice(const std::string &pAvgPrice) noexcept;
    void setAvgPrice(std::string &&pAvgPrice) noexcept;


    /**  For column up_down  */
    ///Get the value of the column up_down, returns the default value if the column is null
    const std::string &getValueOfUpDown() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getUpDown() const noexcept;

    ///Set the value of the column up_down
    void setUpDown(const std::string &pUpDown) noexcept;
    void setUpDown(std::string &&pUpDown) noexcept;


    /**  For column date_from  */
    ///Get the value of the column date_from, returns the default value if the column is null
    const std::string &getValueOfDateFrom() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getDateFrom() const noexcept;

    ///Set the value of the column date_from
    void setDateFrom(const std::string &pDateFrom) noexcept;
    void setDateFrom(std::string &&pDateFrom) noexcept;


    /**  For column date  */
    ///Get the value of the column date, returns the default value if the column is null
    const ::trantor::Date &getValueOfDate() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getDate() const noexcept;

    ///Set the value of the column date
    void setDate(const ::trantor::Date &pDate) noexcept;


    /**  For column create_time  */
    ///Get the value of the column create_time, returns the default value if the column is null
    const ::trantor::Date &getValueOfCreateTime() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getCreateTime() const noexcept;

    ///Set the value of the column create_time
    void setCreateTime(const ::trantor::Date &pCreateTime) noexcept;


    /**  For column update_time  */
    ///Get the value of the column update_time, returns the default value if the column is null
    const ::trantor::Date &getValueOfUpdateTime() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getUpdateTime() const noexcept;

    ///Set the value of the column update_time
    void setUpdateTime(const ::trantor::Date &pUpdateTime) noexcept;


    /**  For column shop_id  */
    ///Get the value of the column shop_id, returns the default value if the column is null
    const int64_t &getValueOfShopId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int64_t> &getShopId() const noexcept;

    ///Set the value of the column shop_id
    void setShopId(const int64_t &pShopId) noexcept;



    static size_t getColumnNumber() noexcept {  return 12;  }
    static const std::string &getColumnName(size_t index) noexcept(false);

    Json::Value toJson() const;
    Json::Value toMasqueradedJson(const std::vector<std::string> &pMasqueradingVector) const;
    /// Relationship interfaces
  private:
    friend Mapper<DataIndexFour>;
    static const std::vector<std::string> &insertColumns() noexcept;
    void outputArgs(drogon::orm::internal::SqlBinder &binder) const;
    const std::vector<std::string> updateColumns() const;
    void updateArgs(drogon::orm::internal::SqlBinder &binder) const;
    ///For mysql or sqlite3
    void updateId(const uint64_t id);
    std::shared_ptr<int64_t> id_;
    std::shared_ptr<std::string> productName_;
    std::shared_ptr<std::string> typeName_;
    std::shared_ptr<std::string> tag_;
    std::shared_ptr<std::string> intervalPrice_;
    std::shared_ptr<std::string> avgPrice_;
    std::shared_ptr<std::string> upDown_;
    std::shared_ptr<std::string> dateFrom_;
    std::shared_ptr<::trantor::Date> date_;
    std::shared_ptr<::trantor::Date> createTime_;
    std::shared_ptr<::trantor::Date> updateTime_;
    std::shared_ptr<int64_t> shopId_;
    struct MetaData
    {
        const std::string colName_;
        const std::string colType_;
        const std::string colDatabaseType_;
        const ssize_t colLength_;
        const bool isAutoVal_;
        const bool isPrimaryKey_;
        const bool notNull_;
    };
    static const std::vector<MetaData> metaData_;
    bool dirtyFlag_[12]={ false };
  public:
    static const std::string &sqlForFindingByPrimaryKey()
    {
        static const std::string sql="select * from " + tableName + " where id = ?";
        return sql;                   
    }

    static const std::string &sqlForDeletingByPrimaryKey()
    {
        static const std::string sql="delete from " + tableName + " where id = ?";
        return sql;                   
    }
    std::string sqlForInserting(bool &needSelection) const
    {
        std::string sql="insert into " + tableName + " (";
        size_t parametersCount = 0;
        needSelection = false;
            sql += "id,";
            ++parametersCount;
        if(dirtyFlag_[1])
        {
            sql += "product_name,";
            ++parametersCount;
        }
        if(dirtyFlag_[2])
        {
            sql += "type_name,";
            ++parametersCount;
        }
        if(dirtyFlag_[3])
        {
            sql += "tag,";
            ++parametersCount;
        }
        if(dirtyFlag_[4])
        {
            sql += "interval_price,";
            ++parametersCount;
        }
        sql += "avg_price,";
        ++parametersCount;
        if(!dirtyFlag_[5])
        {
            needSelection=true;
        }
        sql += "up_down,";
        ++parametersCount;
        if(!dirtyFlag_[6])
        {
            needSelection=true;
        }
        if(dirtyFlag_[7])
        {
            sql += "date_from,";
            ++parametersCount;
        }
        sql += "date,";
        ++parametersCount;
        if(!dirtyFlag_[8])
        {
            needSelection=true;
        }
        sql += "create_time,";
        ++parametersCount;
        if(!dirtyFlag_[9])
        {
            needSelection=true;
        }
        sql += "update_time,";
        ++parametersCount;
        if(!dirtyFlag_[10])
        {
            needSelection=true;
        }
        sql += "shop_id,";
        ++parametersCount;
        if(!dirtyFlag_[11])
        {
            needSelection=true;
        }
        needSelection=true;
        if(parametersCount > 0)
        {
            sql[sql.length()-1]=')';
            sql += " values (";
        }
        else
            sql += ") values (";
        
        sql +="default,";
        if(dirtyFlag_[1])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[2])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[3])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[4])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[5])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[6])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[7])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[8])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[9])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[10])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[11])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(parametersCount > 0)
        {
            sql.resize(sql.length() - 1);
        }
        sql.append(1, ')');
        LOG_TRACE << sql;
        return sql;   
    }
};
} // namespace v2
} // namespace drogon_model
