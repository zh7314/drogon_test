/**
 *
 *  SaleOrderDocument.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "SaleOrderDocument.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::v2;

const std::string SaleOrderDocument::Cols::_id = "id";
const std::string SaleOrderDocument::Cols::_sale_order_id = "sale_order_id";
const std::string SaleOrderDocument::Cols::_sale_order_key = "sale_order_key";
const std::string SaleOrderDocument::Cols::_receive_doc = "receive_doc";
const std::string SaleOrderDocument::Cols::_type = "type";
const std::string SaleOrderDocument::Cols::_user_id = "user_id";
const std::string SaleOrderDocument::Cols::_admin_id = "admin_id";
const std::string SaleOrderDocument::Cols::_create_time = "create_time";
const std::string SaleOrderDocument::Cols::_update_time = "update_time";
const std::string SaleOrderDocument::Cols::_remark = "remark";
const std::string SaleOrderDocument::Cols::_shop_id = "shop_id";
const std::string SaleOrderDocument::primaryKeyName = "id";
const bool SaleOrderDocument::hasPrimaryKey = true;
const std::string SaleOrderDocument::tableName = "sale_order_document";

const std::vector<typename SaleOrderDocument::MetaData> SaleOrderDocument::metaData_={
{"id","uint64_t","bigint(20) unsigned",8,1,1,1},
{"sale_order_id","uint64_t","bigint(20) unsigned",8,0,0,1},
{"sale_order_key","std::string","varchar(60)",60,0,0,0},
{"receive_doc","std::string","text",0,0,0,0},
{"type","uint8_t","tinyint(1) unsigned",1,0,0,1},
{"user_id","uint32_t","int(20) unsigned",4,0,0,1},
{"admin_id","uint32_t","int(20) unsigned",4,0,0,1},
{"create_time","::trantor::Date","datetime",0,0,0,1},
{"update_time","::trantor::Date","datetime",0,0,0,1},
{"remark","std::string","text",0,0,0,0},
{"shop_id","int64_t","bigint(20)",8,0,0,1}
};
const std::string &SaleOrderDocument::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
SaleOrderDocument::SaleOrderDocument(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<uint64_t>(r["id"].as<uint64_t>());
        }
        if(!r["sale_order_id"].isNull())
        {
            saleOrderId_=std::make_shared<uint64_t>(r["sale_order_id"].as<uint64_t>());
        }
        if(!r["sale_order_key"].isNull())
        {
            saleOrderKey_=std::make_shared<std::string>(r["sale_order_key"].as<std::string>());
        }
        if(!r["receive_doc"].isNull())
        {
            receiveDoc_=std::make_shared<std::string>(r["receive_doc"].as<std::string>());
        }
        if(!r["type"].isNull())
        {
            type_=std::make_shared<uint8_t>(r["type"].as<uint8_t>());
        }
        if(!r["user_id"].isNull())
        {
            userId_=std::make_shared<uint32_t>(r["user_id"].as<uint32_t>());
        }
        if(!r["admin_id"].isNull())
        {
            adminId_=std::make_shared<uint32_t>(r["admin_id"].as<uint32_t>());
        }
        if(!r["create_time"].isNull())
        {
            auto timeStr = r["create_time"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        if(!r["update_time"].isNull())
        {
            auto timeStr = r["update_time"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        if(!r["remark"].isNull())
        {
            remark_=std::make_shared<std::string>(r["remark"].as<std::string>());
        }
        if(!r["shop_id"].isNull())
        {
            shopId_=std::make_shared<int64_t>(r["shop_id"].as<int64_t>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 11 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            saleOrderId_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            saleOrderKey_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            receiveDoc_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            type_=std::make_shared<uint8_t>(r[index].as<uint8_t>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            userId_=std::make_shared<uint32_t>(r[index].as<uint32_t>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            adminId_=std::make_shared<uint32_t>(r[index].as<uint32_t>());
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        index = offset + 8;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        index = offset + 9;
        if(!r[index].isNull())
        {
            remark_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 10;
        if(!r[index].isNull())
        {
            shopId_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
    }

}

SaleOrderDocument::SaleOrderDocument(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 11)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            saleOrderId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[1]].asUInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            saleOrderKey_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            receiveDoc_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            type_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[4]].asUInt64());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            userId_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[5]].asUInt64());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            adminId_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[6]].asUInt64());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[7]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[8]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            remark_=std::make_shared<std::string>(pJson[pMasqueradingVector[9]].asString());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            shopId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[10]].asInt64());
        }
    }
}

SaleOrderDocument::SaleOrderDocument(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson["id"].asUInt64());
        }
    }
    if(pJson.isMember("sale_order_id"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["sale_order_id"].isNull())
        {
            saleOrderId_=std::make_shared<uint64_t>((uint64_t)pJson["sale_order_id"].asUInt64());
        }
    }
    if(pJson.isMember("sale_order_key"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["sale_order_key"].isNull())
        {
            saleOrderKey_=std::make_shared<std::string>(pJson["sale_order_key"].asString());
        }
    }
    if(pJson.isMember("receive_doc"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["receive_doc"].isNull())
        {
            receiveDoc_=std::make_shared<std::string>(pJson["receive_doc"].asString());
        }
    }
    if(pJson.isMember("type"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["type"].isNull())
        {
            type_=std::make_shared<uint8_t>((uint8_t)pJson["type"].asUInt64());
        }
    }
    if(pJson.isMember("user_id"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["user_id"].isNull())
        {
            userId_=std::make_shared<uint32_t>((uint32_t)pJson["user_id"].asUInt64());
        }
    }
    if(pJson.isMember("admin_id"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["admin_id"].isNull())
        {
            adminId_=std::make_shared<uint32_t>((uint32_t)pJson["admin_id"].asUInt64());
        }
    }
    if(pJson.isMember("create_time"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["create_time"].isNull())
        {
            auto timeStr = pJson["create_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("update_time"))
    {
        dirtyFlag_[8]=true;
        if(!pJson["update_time"].isNull())
        {
            auto timeStr = pJson["update_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("remark"))
    {
        dirtyFlag_[9]=true;
        if(!pJson["remark"].isNull())
        {
            remark_=std::make_shared<std::string>(pJson["remark"].asString());
        }
    }
    if(pJson.isMember("shop_id"))
    {
        dirtyFlag_[10]=true;
        if(!pJson["shop_id"].isNull())
        {
            shopId_=std::make_shared<int64_t>((int64_t)pJson["shop_id"].asInt64());
        }
    }
}

void SaleOrderDocument::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 11)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            saleOrderId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[1]].asUInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            saleOrderKey_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            receiveDoc_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            type_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[4]].asUInt64());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            userId_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[5]].asUInt64());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            adminId_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[6]].asUInt64());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[7]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[8]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            remark_=std::make_shared<std::string>(pJson[pMasqueradingVector[9]].asString());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            shopId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[10]].asInt64());
        }
    }
}
                                                                    
void SaleOrderDocument::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson["id"].asUInt64());
        }
    }
    if(pJson.isMember("sale_order_id"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["sale_order_id"].isNull())
        {
            saleOrderId_=std::make_shared<uint64_t>((uint64_t)pJson["sale_order_id"].asUInt64());
        }
    }
    if(pJson.isMember("sale_order_key"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["sale_order_key"].isNull())
        {
            saleOrderKey_=std::make_shared<std::string>(pJson["sale_order_key"].asString());
        }
    }
    if(pJson.isMember("receive_doc"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["receive_doc"].isNull())
        {
            receiveDoc_=std::make_shared<std::string>(pJson["receive_doc"].asString());
        }
    }
    if(pJson.isMember("type"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["type"].isNull())
        {
            type_=std::make_shared<uint8_t>((uint8_t)pJson["type"].asUInt64());
        }
    }
    if(pJson.isMember("user_id"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["user_id"].isNull())
        {
            userId_=std::make_shared<uint32_t>((uint32_t)pJson["user_id"].asUInt64());
        }
    }
    if(pJson.isMember("admin_id"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["admin_id"].isNull())
        {
            adminId_=std::make_shared<uint32_t>((uint32_t)pJson["admin_id"].asUInt64());
        }
    }
    if(pJson.isMember("create_time"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["create_time"].isNull())
        {
            auto timeStr = pJson["create_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("update_time"))
    {
        dirtyFlag_[8] = true;
        if(!pJson["update_time"].isNull())
        {
            auto timeStr = pJson["update_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("remark"))
    {
        dirtyFlag_[9] = true;
        if(!pJson["remark"].isNull())
        {
            remark_=std::make_shared<std::string>(pJson["remark"].asString());
        }
    }
    if(pJson.isMember("shop_id"))
    {
        dirtyFlag_[10] = true;
        if(!pJson["shop_id"].isNull())
        {
            shopId_=std::make_shared<int64_t>((int64_t)pJson["shop_id"].asInt64());
        }
    }
}

const uint64_t &SaleOrderDocument::getValueOfId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &SaleOrderDocument::getId() const noexcept
{
    return id_;
}
void SaleOrderDocument::setId(const uint64_t &pId) noexcept
{
    id_ = std::make_shared<uint64_t>(pId);
    dirtyFlag_[0] = true;
}



const typename SaleOrderDocument::PrimaryKeyType & SaleOrderDocument::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const uint64_t &SaleOrderDocument::getValueOfSaleOrderId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(saleOrderId_)
        return *saleOrderId_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &SaleOrderDocument::getSaleOrderId() const noexcept
{
    return saleOrderId_;
}
void SaleOrderDocument::setSaleOrderId(const uint64_t &pSaleOrderId) noexcept
{
    saleOrderId_ = std::make_shared<uint64_t>(pSaleOrderId);
    dirtyFlag_[1] = true;
}




const std::string &SaleOrderDocument::getValueOfSaleOrderKey() const noexcept
{
    const static std::string defaultValue = std::string();
    if(saleOrderKey_)
        return *saleOrderKey_;
    return defaultValue;
}
const std::shared_ptr<std::string> &SaleOrderDocument::getSaleOrderKey() const noexcept
{
    return saleOrderKey_;
}
void SaleOrderDocument::setSaleOrderKey(const std::string &pSaleOrderKey) noexcept
{
    saleOrderKey_ = std::make_shared<std::string>(pSaleOrderKey);
    dirtyFlag_[2] = true;
}
void SaleOrderDocument::setSaleOrderKey(std::string &&pSaleOrderKey) noexcept
{
    saleOrderKey_ = std::make_shared<std::string>(std::move(pSaleOrderKey));
    dirtyFlag_[2] = true;
}


void SaleOrderDocument::setSaleOrderKeyToNull() noexcept
{
    saleOrderKey_.reset();
    dirtyFlag_[2] = true;
}


const std::string &SaleOrderDocument::getValueOfReceiveDoc() const noexcept
{
    const static std::string defaultValue = std::string();
    if(receiveDoc_)
        return *receiveDoc_;
    return defaultValue;
}
const std::shared_ptr<std::string> &SaleOrderDocument::getReceiveDoc() const noexcept
{
    return receiveDoc_;
}
void SaleOrderDocument::setReceiveDoc(const std::string &pReceiveDoc) noexcept
{
    receiveDoc_ = std::make_shared<std::string>(pReceiveDoc);
    dirtyFlag_[3] = true;
}
void SaleOrderDocument::setReceiveDoc(std::string &&pReceiveDoc) noexcept
{
    receiveDoc_ = std::make_shared<std::string>(std::move(pReceiveDoc));
    dirtyFlag_[3] = true;
}


void SaleOrderDocument::setReceiveDocToNull() noexcept
{
    receiveDoc_.reset();
    dirtyFlag_[3] = true;
}


const uint8_t &SaleOrderDocument::getValueOfType() const noexcept
{
    const static uint8_t defaultValue = uint8_t();
    if(type_)
        return *type_;
    return defaultValue;
}
const std::shared_ptr<uint8_t> &SaleOrderDocument::getType() const noexcept
{
    return type_;
}
void SaleOrderDocument::setType(const uint8_t &pType) noexcept
{
    type_ = std::make_shared<uint8_t>(pType);
    dirtyFlag_[4] = true;
}




const uint32_t &SaleOrderDocument::getValueOfUserId() const noexcept
{
    const static uint32_t defaultValue = uint32_t();
    if(userId_)
        return *userId_;
    return defaultValue;
}
const std::shared_ptr<uint32_t> &SaleOrderDocument::getUserId() const noexcept
{
    return userId_;
}
void SaleOrderDocument::setUserId(const uint32_t &pUserId) noexcept
{
    userId_ = std::make_shared<uint32_t>(pUserId);
    dirtyFlag_[5] = true;
}




const uint32_t &SaleOrderDocument::getValueOfAdminId() const noexcept
{
    const static uint32_t defaultValue = uint32_t();
    if(adminId_)
        return *adminId_;
    return defaultValue;
}
const std::shared_ptr<uint32_t> &SaleOrderDocument::getAdminId() const noexcept
{
    return adminId_;
}
void SaleOrderDocument::setAdminId(const uint32_t &pAdminId) noexcept
{
    adminId_ = std::make_shared<uint32_t>(pAdminId);
    dirtyFlag_[6] = true;
}




const ::trantor::Date &SaleOrderDocument::getValueOfCreateTime() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(createTime_)
        return *createTime_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &SaleOrderDocument::getCreateTime() const noexcept
{
    return createTime_;
}
void SaleOrderDocument::setCreateTime(const ::trantor::Date &pCreateTime) noexcept
{
    createTime_ = std::make_shared<::trantor::Date>(pCreateTime);
    dirtyFlag_[7] = true;
}




const ::trantor::Date &SaleOrderDocument::getValueOfUpdateTime() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(updateTime_)
        return *updateTime_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &SaleOrderDocument::getUpdateTime() const noexcept
{
    return updateTime_;
}
void SaleOrderDocument::setUpdateTime(const ::trantor::Date &pUpdateTime) noexcept
{
    updateTime_ = std::make_shared<::trantor::Date>(pUpdateTime);
    dirtyFlag_[8] = true;
}




const std::string &SaleOrderDocument::getValueOfRemark() const noexcept
{
    const static std::string defaultValue = std::string();
    if(remark_)
        return *remark_;
    return defaultValue;
}
const std::shared_ptr<std::string> &SaleOrderDocument::getRemark() const noexcept
{
    return remark_;
}
void SaleOrderDocument::setRemark(const std::string &pRemark) noexcept
{
    remark_ = std::make_shared<std::string>(pRemark);
    dirtyFlag_[9] = true;
}
void SaleOrderDocument::setRemark(std::string &&pRemark) noexcept
{
    remark_ = std::make_shared<std::string>(std::move(pRemark));
    dirtyFlag_[9] = true;
}


void SaleOrderDocument::setRemarkToNull() noexcept
{
    remark_.reset();
    dirtyFlag_[9] = true;
}


const int64_t &SaleOrderDocument::getValueOfShopId() const noexcept
{
    const static int64_t defaultValue = int64_t();
    if(shopId_)
        return *shopId_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &SaleOrderDocument::getShopId() const noexcept
{
    return shopId_;
}
void SaleOrderDocument::setShopId(const int64_t &pShopId) noexcept
{
    shopId_ = std::make_shared<int64_t>(pShopId);
    dirtyFlag_[10] = true;
}




void SaleOrderDocument::updateId(const uint64_t id)
{
    id_ = std::make_shared<uint64_t>(id);
}

const std::vector<std::string> &SaleOrderDocument::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "sale_order_id",
        "sale_order_key",
        "receive_doc",
        "type",
        "user_id",
        "admin_id",
        "create_time",
        "update_time",
        "remark",
        "shop_id"
    };
    return inCols;
}

void SaleOrderDocument::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getSaleOrderId())
        {
            binder << getValueOfSaleOrderId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getSaleOrderKey())
        {
            binder << getValueOfSaleOrderKey();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getReceiveDoc())
        {
            binder << getValueOfReceiveDoc();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getType())
        {
            binder << getValueOfType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getUserId())
        {
            binder << getValueOfUserId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getAdminId())
        {
            binder << getValueOfAdminId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getCreateTime())
        {
            binder << getValueOfCreateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getUpdateTime())
        {
            binder << getValueOfUpdateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getRemark())
        {
            binder << getValueOfRemark();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getShopId())
        {
            binder << getValueOfShopId();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> SaleOrderDocument::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    if(dirtyFlag_[8])
    {
        ret.push_back(getColumnName(8));
    }
    if(dirtyFlag_[9])
    {
        ret.push_back(getColumnName(9));
    }
    if(dirtyFlag_[10])
    {
        ret.push_back(getColumnName(10));
    }
    return ret;
}

void SaleOrderDocument::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getSaleOrderId())
        {
            binder << getValueOfSaleOrderId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getSaleOrderKey())
        {
            binder << getValueOfSaleOrderKey();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getReceiveDoc())
        {
            binder << getValueOfReceiveDoc();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getType())
        {
            binder << getValueOfType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getUserId())
        {
            binder << getValueOfUserId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getAdminId())
        {
            binder << getValueOfAdminId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getCreateTime())
        {
            binder << getValueOfCreateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getUpdateTime())
        {
            binder << getValueOfUpdateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getRemark())
        {
            binder << getValueOfRemark();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getShopId())
        {
            binder << getValueOfShopId();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value SaleOrderDocument::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=(Json::UInt64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getSaleOrderId())
    {
        ret["sale_order_id"]=(Json::UInt64)getValueOfSaleOrderId();
    }
    else
    {
        ret["sale_order_id"]=Json::Value();
    }
    if(getSaleOrderKey())
    {
        ret["sale_order_key"]=getValueOfSaleOrderKey();
    }
    else
    {
        ret["sale_order_key"]=Json::Value();
    }
    if(getReceiveDoc())
    {
        ret["receive_doc"]=getValueOfReceiveDoc();
    }
    else
    {
        ret["receive_doc"]=Json::Value();
    }
    if(getType())
    {
        ret["type"]=getValueOfType();
    }
    else
    {
        ret["type"]=Json::Value();
    }
    if(getUserId())
    {
        ret["user_id"]=getValueOfUserId();
    }
    else
    {
        ret["user_id"]=Json::Value();
    }
    if(getAdminId())
    {
        ret["admin_id"]=getValueOfAdminId();
    }
    else
    {
        ret["admin_id"]=Json::Value();
    }
    if(getCreateTime())
    {
        ret["create_time"]=getCreateTime()->toDbStringLocal();
    }
    else
    {
        ret["create_time"]=Json::Value();
    }
    if(getUpdateTime())
    {
        ret["update_time"]=getUpdateTime()->toDbStringLocal();
    }
    else
    {
        ret["update_time"]=Json::Value();
    }
    if(getRemark())
    {
        ret["remark"]=getValueOfRemark();
    }
    else
    {
        ret["remark"]=Json::Value();
    }
    if(getShopId())
    {
        ret["shop_id"]=(Json::Int64)getValueOfShopId();
    }
    else
    {
        ret["shop_id"]=Json::Value();
    }
    return ret;
}

Json::Value SaleOrderDocument::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 11)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=(Json::UInt64)getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getSaleOrderId())
            {
                ret[pMasqueradingVector[1]]=(Json::UInt64)getValueOfSaleOrderId();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getSaleOrderKey())
            {
                ret[pMasqueradingVector[2]]=getValueOfSaleOrderKey();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getReceiveDoc())
            {
                ret[pMasqueradingVector[3]]=getValueOfReceiveDoc();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getType())
            {
                ret[pMasqueradingVector[4]]=getValueOfType();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getUserId())
            {
                ret[pMasqueradingVector[5]]=getValueOfUserId();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getAdminId())
            {
                ret[pMasqueradingVector[6]]=getValueOfAdminId();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getCreateTime())
            {
                ret[pMasqueradingVector[7]]=getCreateTime()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[8].empty())
        {
            if(getUpdateTime())
            {
                ret[pMasqueradingVector[8]]=getUpdateTime()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[8]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[9].empty())
        {
            if(getRemark())
            {
                ret[pMasqueradingVector[9]]=getValueOfRemark();
            }
            else
            {
                ret[pMasqueradingVector[9]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[10].empty())
        {
            if(getShopId())
            {
                ret[pMasqueradingVector[10]]=(Json::Int64)getValueOfShopId();
            }
            else
            {
                ret[pMasqueradingVector[10]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=(Json::UInt64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getSaleOrderId())
    {
        ret["sale_order_id"]=(Json::UInt64)getValueOfSaleOrderId();
    }
    else
    {
        ret["sale_order_id"]=Json::Value();
    }
    if(getSaleOrderKey())
    {
        ret["sale_order_key"]=getValueOfSaleOrderKey();
    }
    else
    {
        ret["sale_order_key"]=Json::Value();
    }
    if(getReceiveDoc())
    {
        ret["receive_doc"]=getValueOfReceiveDoc();
    }
    else
    {
        ret["receive_doc"]=Json::Value();
    }
    if(getType())
    {
        ret["type"]=getValueOfType();
    }
    else
    {
        ret["type"]=Json::Value();
    }
    if(getUserId())
    {
        ret["user_id"]=getValueOfUserId();
    }
    else
    {
        ret["user_id"]=Json::Value();
    }
    if(getAdminId())
    {
        ret["admin_id"]=getValueOfAdminId();
    }
    else
    {
        ret["admin_id"]=Json::Value();
    }
    if(getCreateTime())
    {
        ret["create_time"]=getCreateTime()->toDbStringLocal();
    }
    else
    {
        ret["create_time"]=Json::Value();
    }
    if(getUpdateTime())
    {
        ret["update_time"]=getUpdateTime()->toDbStringLocal();
    }
    else
    {
        ret["update_time"]=Json::Value();
    }
    if(getRemark())
    {
        ret["remark"]=getValueOfRemark();
    }
    else
    {
        ret["remark"]=Json::Value();
    }
    if(getShopId())
    {
        ret["shop_id"]=(Json::Int64)getValueOfShopId();
    }
    else
    {
        ret["shop_id"]=Json::Value();
    }
    return ret;
}

bool SaleOrderDocument::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("sale_order_id"))
    {
        if(!validJsonOfField(1, "sale_order_id", pJson["sale_order_id"], err, true))
            return false;
    }
    if(pJson.isMember("sale_order_key"))
    {
        if(!validJsonOfField(2, "sale_order_key", pJson["sale_order_key"], err, true))
            return false;
    }
    if(pJson.isMember("receive_doc"))
    {
        if(!validJsonOfField(3, "receive_doc", pJson["receive_doc"], err, true))
            return false;
    }
    if(pJson.isMember("type"))
    {
        if(!validJsonOfField(4, "type", pJson["type"], err, true))
            return false;
    }
    if(pJson.isMember("user_id"))
    {
        if(!validJsonOfField(5, "user_id", pJson["user_id"], err, true))
            return false;
    }
    if(pJson.isMember("admin_id"))
    {
        if(!validJsonOfField(6, "admin_id", pJson["admin_id"], err, true))
            return false;
    }
    if(pJson.isMember("create_time"))
    {
        if(!validJsonOfField(7, "create_time", pJson["create_time"], err, true))
            return false;
    }
    if(pJson.isMember("update_time"))
    {
        if(!validJsonOfField(8, "update_time", pJson["update_time"], err, true))
            return false;
    }
    if(pJson.isMember("remark"))
    {
        if(!validJsonOfField(9, "remark", pJson["remark"], err, true))
            return false;
    }
    if(pJson.isMember("shop_id"))
    {
        if(!validJsonOfField(10, "shop_id", pJson["shop_id"], err, true))
            return false;
    }
    return true;
}
bool SaleOrderDocument::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                           const std::vector<std::string> &pMasqueradingVector,
                                                           std::string &err)
{
    if(pMasqueradingVector.size() != 11)
    {
        err = "Bad masquerading vector";
        return false;
    }
    if(!pMasqueradingVector[0].empty())
    {
        if(pJson.isMember(pMasqueradingVector[0]))
        {
            if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[1].empty())
    {
        if(pJson.isMember(pMasqueradingVector[1]))
        {
            if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[2].empty())
    {
        if(pJson.isMember(pMasqueradingVector[2]))
        {
            if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[3].empty())
    {
        if(pJson.isMember(pMasqueradingVector[3]))
        {
            if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[4].empty())
    {
        if(pJson.isMember(pMasqueradingVector[4]))
        {
            if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[5].empty())
    {
        if(pJson.isMember(pMasqueradingVector[5]))
        {
            if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[6].empty())
    {
        if(pJson.isMember(pMasqueradingVector[6]))
        {
            if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[7].empty())
    {
        if(pJson.isMember(pMasqueradingVector[7]))
        {
            if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[8].empty())
    {
        if(pJson.isMember(pMasqueradingVector[8]))
        {
            if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[9].empty())
    {
        if(pJson.isMember(pMasqueradingVector[9]))
        {
            if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[10].empty())
    {
        if(pJson.isMember(pMasqueradingVector[10]))
        {
            if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, true))
                return false;
        }
    }
    return true;
}
bool SaleOrderDocument::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("sale_order_id"))
    {
        if(!validJsonOfField(1, "sale_order_id", pJson["sale_order_id"], err, false))
            return false;
    }
    if(pJson.isMember("sale_order_key"))
    {
        if(!validJsonOfField(2, "sale_order_key", pJson["sale_order_key"], err, false))
            return false;
    }
    if(pJson.isMember("receive_doc"))
    {
        if(!validJsonOfField(3, "receive_doc", pJson["receive_doc"], err, false))
            return false;
    }
    if(pJson.isMember("type"))
    {
        if(!validJsonOfField(4, "type", pJson["type"], err, false))
            return false;
    }
    if(pJson.isMember("user_id"))
    {
        if(!validJsonOfField(5, "user_id", pJson["user_id"], err, false))
            return false;
    }
    if(pJson.isMember("admin_id"))
    {
        if(!validJsonOfField(6, "admin_id", pJson["admin_id"], err, false))
            return false;
    }
    if(pJson.isMember("create_time"))
    {
        if(!validJsonOfField(7, "create_time", pJson["create_time"], err, false))
            return false;
    }
    if(pJson.isMember("update_time"))
    {
        if(!validJsonOfField(8, "update_time", pJson["update_time"], err, false))
            return false;
    }
    if(pJson.isMember("remark"))
    {
        if(!validJsonOfField(9, "remark", pJson["remark"], err, false))
            return false;
    }
    if(pJson.isMember("shop_id"))
    {
        if(!validJsonOfField(10, "shop_id", pJson["shop_id"], err, false))
            return false;
    }
    return true;
}
bool SaleOrderDocument::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                         const std::vector<std::string> &pMasqueradingVector,
                                                         std::string &err)
{
    if(pMasqueradingVector.size() != 11)
    {
        err = "Bad masquerading vector";
        return false;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
            return false;
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
            return false;
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
            return false;
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
            return false;
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
            return false;
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
            return false;
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
            return false;
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, false))
            return false;
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, false))
            return false;
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, false))
            return false;
    }
    return true;
}
bool SaleOrderDocument::validJsonOfField(size_t index,
                                         const std::string &fieldName,
                                         const Json::Value &pJson, 
                                         std::string &err, 
                                         bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }        
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 60)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 60)";
                return false;               
            }

            break;
        case 3:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 5:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 6:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 7:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 8:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 9:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 10:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
     
        default:
            err="Internal error in the server";
            return false;
            break;
    }
    return true;
}
