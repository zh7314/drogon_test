/**
 *
 *  DataIndexFour.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "DataIndexFour.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::v2;

const std::string DataIndexFour::Cols::_id = "id";
const std::string DataIndexFour::Cols::_product_name = "product_name";
const std::string DataIndexFour::Cols::_type_name = "type_name";
const std::string DataIndexFour::Cols::_tag = "tag";
const std::string DataIndexFour::Cols::_interval_price = "interval_price";
const std::string DataIndexFour::Cols::_avg_price = "avg_price";
const std::string DataIndexFour::Cols::_up_down = "up_down";
const std::string DataIndexFour::Cols::_date_from = "date_from";
const std::string DataIndexFour::Cols::_date = "date";
const std::string DataIndexFour::Cols::_create_time = "create_time";
const std::string DataIndexFour::Cols::_update_time = "update_time";
const std::string DataIndexFour::Cols::_shop_id = "shop_id";
const std::string DataIndexFour::primaryKeyName = "id";
const bool DataIndexFour::hasPrimaryKey = true;
const std::string DataIndexFour::tableName = "data_index_four";

const std::vector<typename DataIndexFour::MetaData> DataIndexFour::metaData_={
{"id","int64_t","bigint(20)",8,1,1,1},
{"product_name","std::string","varchar(50)",50,0,0,1},
{"type_name","std::string","varchar(50)",50,0,0,1},
{"tag","std::string","varchar(10)",10,0,0,1},
{"interval_price","std::string","varchar(50)",50,0,0,1},
{"avg_price","std::string","varchar(20)",20,0,0,1},
{"up_down","std::string","varchar(20)",20,0,0,1},
{"date_from","std::string","varchar(50)",50,0,0,1},
{"date","::trantor::Date","date",0,0,0,1},
{"create_time","::trantor::Date","datetime",0,0,0,1},
{"update_time","::trantor::Date","datetime",0,0,0,1},
{"shop_id","int64_t","bigint(20)",8,0,0,1}
};
const std::string &DataIndexFour::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
DataIndexFour::DataIndexFour(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<int64_t>(r["id"].as<int64_t>());
        }
        if(!r["product_name"].isNull())
        {
            productName_=std::make_shared<std::string>(r["product_name"].as<std::string>());
        }
        if(!r["type_name"].isNull())
        {
            typeName_=std::make_shared<std::string>(r["type_name"].as<std::string>());
        }
        if(!r["tag"].isNull())
        {
            tag_=std::make_shared<std::string>(r["tag"].as<std::string>());
        }
        if(!r["interval_price"].isNull())
        {
            intervalPrice_=std::make_shared<std::string>(r["interval_price"].as<std::string>());
        }
        if(!r["avg_price"].isNull())
        {
            avgPrice_=std::make_shared<std::string>(r["avg_price"].as<std::string>());
        }
        if(!r["up_down"].isNull())
        {
            upDown_=std::make_shared<std::string>(r["up_down"].as<std::string>());
        }
        if(!r["date_from"].isNull())
        {
            dateFrom_=std::make_shared<std::string>(r["date_from"].as<std::string>());
        }
        if(!r["date"].isNull())
        {
            auto daysStr = r["date"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            date_=std::make_shared<::trantor::Date>(t*1000000);
        }
        if(!r["create_time"].isNull())
        {
            auto timeStr = r["create_time"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        if(!r["update_time"].isNull())
        {
            auto timeStr = r["update_time"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        if(!r["shop_id"].isNull())
        {
            shopId_=std::make_shared<int64_t>(r["shop_id"].as<int64_t>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 12 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            productName_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            typeName_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            tag_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            intervalPrice_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            avgPrice_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            upDown_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            dateFrom_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 8;
        if(!r[index].isNull())
        {
            auto daysStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            date_=std::make_shared<::trantor::Date>(t*1000000);
        }
        index = offset + 9;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        index = offset + 10;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        index = offset + 11;
        if(!r[index].isNull())
        {
            shopId_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
    }

}

DataIndexFour::DataIndexFour(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 12)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            productName_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            typeName_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            tag_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            intervalPrice_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            avgPrice_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            upDown_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            dateFrom_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            auto daysStr = pJson[pMasqueradingVector[8]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            date_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[9]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[10]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            shopId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[11]].asInt64());
        }
    }
}

DataIndexFour::DataIndexFour(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int64_t>((int64_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("product_name"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["product_name"].isNull())
        {
            productName_=std::make_shared<std::string>(pJson["product_name"].asString());
        }
    }
    if(pJson.isMember("type_name"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["type_name"].isNull())
        {
            typeName_=std::make_shared<std::string>(pJson["type_name"].asString());
        }
    }
    if(pJson.isMember("tag"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["tag"].isNull())
        {
            tag_=std::make_shared<std::string>(pJson["tag"].asString());
        }
    }
    if(pJson.isMember("interval_price"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["interval_price"].isNull())
        {
            intervalPrice_=std::make_shared<std::string>(pJson["interval_price"].asString());
        }
    }
    if(pJson.isMember("avg_price"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["avg_price"].isNull())
        {
            avgPrice_=std::make_shared<std::string>(pJson["avg_price"].asString());
        }
    }
    if(pJson.isMember("up_down"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["up_down"].isNull())
        {
            upDown_=std::make_shared<std::string>(pJson["up_down"].asString());
        }
    }
    if(pJson.isMember("date_from"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["date_from"].isNull())
        {
            dateFrom_=std::make_shared<std::string>(pJson["date_from"].asString());
        }
    }
    if(pJson.isMember("date"))
    {
        dirtyFlag_[8]=true;
        if(!pJson["date"].isNull())
        {
            auto daysStr = pJson["date"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            date_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    if(pJson.isMember("create_time"))
    {
        dirtyFlag_[9]=true;
        if(!pJson["create_time"].isNull())
        {
            auto timeStr = pJson["create_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("update_time"))
    {
        dirtyFlag_[10]=true;
        if(!pJson["update_time"].isNull())
        {
            auto timeStr = pJson["update_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("shop_id"))
    {
        dirtyFlag_[11]=true;
        if(!pJson["shop_id"].isNull())
        {
            shopId_=std::make_shared<int64_t>((int64_t)pJson["shop_id"].asInt64());
        }
    }
}

void DataIndexFour::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 12)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            productName_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            typeName_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            tag_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            intervalPrice_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            avgPrice_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            upDown_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            dateFrom_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            auto daysStr = pJson[pMasqueradingVector[8]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            date_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[9]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[10]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            shopId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[11]].asInt64());
        }
    }
}
                                                                    
void DataIndexFour::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int64_t>((int64_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("product_name"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["product_name"].isNull())
        {
            productName_=std::make_shared<std::string>(pJson["product_name"].asString());
        }
    }
    if(pJson.isMember("type_name"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["type_name"].isNull())
        {
            typeName_=std::make_shared<std::string>(pJson["type_name"].asString());
        }
    }
    if(pJson.isMember("tag"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["tag"].isNull())
        {
            tag_=std::make_shared<std::string>(pJson["tag"].asString());
        }
    }
    if(pJson.isMember("interval_price"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["interval_price"].isNull())
        {
            intervalPrice_=std::make_shared<std::string>(pJson["interval_price"].asString());
        }
    }
    if(pJson.isMember("avg_price"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["avg_price"].isNull())
        {
            avgPrice_=std::make_shared<std::string>(pJson["avg_price"].asString());
        }
    }
    if(pJson.isMember("up_down"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["up_down"].isNull())
        {
            upDown_=std::make_shared<std::string>(pJson["up_down"].asString());
        }
    }
    if(pJson.isMember("date_from"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["date_from"].isNull())
        {
            dateFrom_=std::make_shared<std::string>(pJson["date_from"].asString());
        }
    }
    if(pJson.isMember("date"))
    {
        dirtyFlag_[8] = true;
        if(!pJson["date"].isNull())
        {
            auto daysStr = pJson["date"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            date_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    if(pJson.isMember("create_time"))
    {
        dirtyFlag_[9] = true;
        if(!pJson["create_time"].isNull())
        {
            auto timeStr = pJson["create_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("update_time"))
    {
        dirtyFlag_[10] = true;
        if(!pJson["update_time"].isNull())
        {
            auto timeStr = pJson["update_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("shop_id"))
    {
        dirtyFlag_[11] = true;
        if(!pJson["shop_id"].isNull())
        {
            shopId_=std::make_shared<int64_t>((int64_t)pJson["shop_id"].asInt64());
        }
    }
}

const int64_t &DataIndexFour::getValueOfId() const noexcept
{
    const static int64_t defaultValue = int64_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &DataIndexFour::getId() const noexcept
{
    return id_;
}
void DataIndexFour::setId(const int64_t &pId) noexcept
{
    id_ = std::make_shared<int64_t>(pId);
    dirtyFlag_[0] = true;
}



const typename DataIndexFour::PrimaryKeyType & DataIndexFour::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const std::string &DataIndexFour::getValueOfProductName() const noexcept
{
    const static std::string defaultValue = std::string();
    if(productName_)
        return *productName_;
    return defaultValue;
}
const std::shared_ptr<std::string> &DataIndexFour::getProductName() const noexcept
{
    return productName_;
}
void DataIndexFour::setProductName(const std::string &pProductName) noexcept
{
    productName_ = std::make_shared<std::string>(pProductName);
    dirtyFlag_[1] = true;
}
void DataIndexFour::setProductName(std::string &&pProductName) noexcept
{
    productName_ = std::make_shared<std::string>(std::move(pProductName));
    dirtyFlag_[1] = true;
}




const std::string &DataIndexFour::getValueOfTypeName() const noexcept
{
    const static std::string defaultValue = std::string();
    if(typeName_)
        return *typeName_;
    return defaultValue;
}
const std::shared_ptr<std::string> &DataIndexFour::getTypeName() const noexcept
{
    return typeName_;
}
void DataIndexFour::setTypeName(const std::string &pTypeName) noexcept
{
    typeName_ = std::make_shared<std::string>(pTypeName);
    dirtyFlag_[2] = true;
}
void DataIndexFour::setTypeName(std::string &&pTypeName) noexcept
{
    typeName_ = std::make_shared<std::string>(std::move(pTypeName));
    dirtyFlag_[2] = true;
}




const std::string &DataIndexFour::getValueOfTag() const noexcept
{
    const static std::string defaultValue = std::string();
    if(tag_)
        return *tag_;
    return defaultValue;
}
const std::shared_ptr<std::string> &DataIndexFour::getTag() const noexcept
{
    return tag_;
}
void DataIndexFour::setTag(const std::string &pTag) noexcept
{
    tag_ = std::make_shared<std::string>(pTag);
    dirtyFlag_[3] = true;
}
void DataIndexFour::setTag(std::string &&pTag) noexcept
{
    tag_ = std::make_shared<std::string>(std::move(pTag));
    dirtyFlag_[3] = true;
}




const std::string &DataIndexFour::getValueOfIntervalPrice() const noexcept
{
    const static std::string defaultValue = std::string();
    if(intervalPrice_)
        return *intervalPrice_;
    return defaultValue;
}
const std::shared_ptr<std::string> &DataIndexFour::getIntervalPrice() const noexcept
{
    return intervalPrice_;
}
void DataIndexFour::setIntervalPrice(const std::string &pIntervalPrice) noexcept
{
    intervalPrice_ = std::make_shared<std::string>(pIntervalPrice);
    dirtyFlag_[4] = true;
}
void DataIndexFour::setIntervalPrice(std::string &&pIntervalPrice) noexcept
{
    intervalPrice_ = std::make_shared<std::string>(std::move(pIntervalPrice));
    dirtyFlag_[4] = true;
}




const std::string &DataIndexFour::getValueOfAvgPrice() const noexcept
{
    const static std::string defaultValue = std::string();
    if(avgPrice_)
        return *avgPrice_;
    return defaultValue;
}
const std::shared_ptr<std::string> &DataIndexFour::getAvgPrice() const noexcept
{
    return avgPrice_;
}
void DataIndexFour::setAvgPrice(const std::string &pAvgPrice) noexcept
{
    avgPrice_ = std::make_shared<std::string>(pAvgPrice);
    dirtyFlag_[5] = true;
}
void DataIndexFour::setAvgPrice(std::string &&pAvgPrice) noexcept
{
    avgPrice_ = std::make_shared<std::string>(std::move(pAvgPrice));
    dirtyFlag_[5] = true;
}




const std::string &DataIndexFour::getValueOfUpDown() const noexcept
{
    const static std::string defaultValue = std::string();
    if(upDown_)
        return *upDown_;
    return defaultValue;
}
const std::shared_ptr<std::string> &DataIndexFour::getUpDown() const noexcept
{
    return upDown_;
}
void DataIndexFour::setUpDown(const std::string &pUpDown) noexcept
{
    upDown_ = std::make_shared<std::string>(pUpDown);
    dirtyFlag_[6] = true;
}
void DataIndexFour::setUpDown(std::string &&pUpDown) noexcept
{
    upDown_ = std::make_shared<std::string>(std::move(pUpDown));
    dirtyFlag_[6] = true;
}




const std::string &DataIndexFour::getValueOfDateFrom() const noexcept
{
    const static std::string defaultValue = std::string();
    if(dateFrom_)
        return *dateFrom_;
    return defaultValue;
}
const std::shared_ptr<std::string> &DataIndexFour::getDateFrom() const noexcept
{
    return dateFrom_;
}
void DataIndexFour::setDateFrom(const std::string &pDateFrom) noexcept
{
    dateFrom_ = std::make_shared<std::string>(pDateFrom);
    dirtyFlag_[7] = true;
}
void DataIndexFour::setDateFrom(std::string &&pDateFrom) noexcept
{
    dateFrom_ = std::make_shared<std::string>(std::move(pDateFrom));
    dirtyFlag_[7] = true;
}




const ::trantor::Date &DataIndexFour::getValueOfDate() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(date_)
        return *date_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &DataIndexFour::getDate() const noexcept
{
    return date_;
}
void DataIndexFour::setDate(const ::trantor::Date &pDate) noexcept
{
    date_ = std::make_shared<::trantor::Date>(pDate.roundDay());
    dirtyFlag_[8] = true;
}




const ::trantor::Date &DataIndexFour::getValueOfCreateTime() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(createTime_)
        return *createTime_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &DataIndexFour::getCreateTime() const noexcept
{
    return createTime_;
}
void DataIndexFour::setCreateTime(const ::trantor::Date &pCreateTime) noexcept
{
    createTime_ = std::make_shared<::trantor::Date>(pCreateTime);
    dirtyFlag_[9] = true;
}




const ::trantor::Date &DataIndexFour::getValueOfUpdateTime() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(updateTime_)
        return *updateTime_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &DataIndexFour::getUpdateTime() const noexcept
{
    return updateTime_;
}
void DataIndexFour::setUpdateTime(const ::trantor::Date &pUpdateTime) noexcept
{
    updateTime_ = std::make_shared<::trantor::Date>(pUpdateTime);
    dirtyFlag_[10] = true;
}




const int64_t &DataIndexFour::getValueOfShopId() const noexcept
{
    const static int64_t defaultValue = int64_t();
    if(shopId_)
        return *shopId_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &DataIndexFour::getShopId() const noexcept
{
    return shopId_;
}
void DataIndexFour::setShopId(const int64_t &pShopId) noexcept
{
    shopId_ = std::make_shared<int64_t>(pShopId);
    dirtyFlag_[11] = true;
}




void DataIndexFour::updateId(const uint64_t id)
{
    id_ = std::make_shared<int64_t>(static_cast<int64_t>(id));
}

const std::vector<std::string> &DataIndexFour::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "product_name",
        "type_name",
        "tag",
        "interval_price",
        "avg_price",
        "up_down",
        "date_from",
        "date",
        "create_time",
        "update_time",
        "shop_id"
    };
    return inCols;
}

void DataIndexFour::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getProductName())
        {
            binder << getValueOfProductName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getTypeName())
        {
            binder << getValueOfTypeName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getTag())
        {
            binder << getValueOfTag();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getIntervalPrice())
        {
            binder << getValueOfIntervalPrice();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getAvgPrice())
        {
            binder << getValueOfAvgPrice();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getUpDown())
        {
            binder << getValueOfUpDown();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getDateFrom())
        {
            binder << getValueOfDateFrom();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getDate())
        {
            binder << getValueOfDate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getCreateTime())
        {
            binder << getValueOfCreateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getUpdateTime())
        {
            binder << getValueOfUpdateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getShopId())
        {
            binder << getValueOfShopId();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> DataIndexFour::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    if(dirtyFlag_[8])
    {
        ret.push_back(getColumnName(8));
    }
    if(dirtyFlag_[9])
    {
        ret.push_back(getColumnName(9));
    }
    if(dirtyFlag_[10])
    {
        ret.push_back(getColumnName(10));
    }
    if(dirtyFlag_[11])
    {
        ret.push_back(getColumnName(11));
    }
    return ret;
}

void DataIndexFour::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getProductName())
        {
            binder << getValueOfProductName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getTypeName())
        {
            binder << getValueOfTypeName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getTag())
        {
            binder << getValueOfTag();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getIntervalPrice())
        {
            binder << getValueOfIntervalPrice();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getAvgPrice())
        {
            binder << getValueOfAvgPrice();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getUpDown())
        {
            binder << getValueOfUpDown();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getDateFrom())
        {
            binder << getValueOfDateFrom();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getDate())
        {
            binder << getValueOfDate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getCreateTime())
        {
            binder << getValueOfCreateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getUpdateTime())
        {
            binder << getValueOfUpdateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getShopId())
        {
            binder << getValueOfShopId();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value DataIndexFour::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=(Json::Int64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getProductName())
    {
        ret["product_name"]=getValueOfProductName();
    }
    else
    {
        ret["product_name"]=Json::Value();
    }
    if(getTypeName())
    {
        ret["type_name"]=getValueOfTypeName();
    }
    else
    {
        ret["type_name"]=Json::Value();
    }
    if(getTag())
    {
        ret["tag"]=getValueOfTag();
    }
    else
    {
        ret["tag"]=Json::Value();
    }
    if(getIntervalPrice())
    {
        ret["interval_price"]=getValueOfIntervalPrice();
    }
    else
    {
        ret["interval_price"]=Json::Value();
    }
    if(getAvgPrice())
    {
        ret["avg_price"]=getValueOfAvgPrice();
    }
    else
    {
        ret["avg_price"]=Json::Value();
    }
    if(getUpDown())
    {
        ret["up_down"]=getValueOfUpDown();
    }
    else
    {
        ret["up_down"]=Json::Value();
    }
    if(getDateFrom())
    {
        ret["date_from"]=getValueOfDateFrom();
    }
    else
    {
        ret["date_from"]=Json::Value();
    }
    if(getDate())
    {
        ret["date"]=getDate()->toDbStringLocal();
    }
    else
    {
        ret["date"]=Json::Value();
    }
    if(getCreateTime())
    {
        ret["create_time"]=getCreateTime()->toDbStringLocal();
    }
    else
    {
        ret["create_time"]=Json::Value();
    }
    if(getUpdateTime())
    {
        ret["update_time"]=getUpdateTime()->toDbStringLocal();
    }
    else
    {
        ret["update_time"]=Json::Value();
    }
    if(getShopId())
    {
        ret["shop_id"]=(Json::Int64)getValueOfShopId();
    }
    else
    {
        ret["shop_id"]=Json::Value();
    }
    return ret;
}

Json::Value DataIndexFour::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 12)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=(Json::Int64)getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getProductName())
            {
                ret[pMasqueradingVector[1]]=getValueOfProductName();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getTypeName())
            {
                ret[pMasqueradingVector[2]]=getValueOfTypeName();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getTag())
            {
                ret[pMasqueradingVector[3]]=getValueOfTag();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getIntervalPrice())
            {
                ret[pMasqueradingVector[4]]=getValueOfIntervalPrice();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getAvgPrice())
            {
                ret[pMasqueradingVector[5]]=getValueOfAvgPrice();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getUpDown())
            {
                ret[pMasqueradingVector[6]]=getValueOfUpDown();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getDateFrom())
            {
                ret[pMasqueradingVector[7]]=getValueOfDateFrom();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[8].empty())
        {
            if(getDate())
            {
                ret[pMasqueradingVector[8]]=getDate()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[8]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[9].empty())
        {
            if(getCreateTime())
            {
                ret[pMasqueradingVector[9]]=getCreateTime()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[9]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[10].empty())
        {
            if(getUpdateTime())
            {
                ret[pMasqueradingVector[10]]=getUpdateTime()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[10]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[11].empty())
        {
            if(getShopId())
            {
                ret[pMasqueradingVector[11]]=(Json::Int64)getValueOfShopId();
            }
            else
            {
                ret[pMasqueradingVector[11]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=(Json::Int64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getProductName())
    {
        ret["product_name"]=getValueOfProductName();
    }
    else
    {
        ret["product_name"]=Json::Value();
    }
    if(getTypeName())
    {
        ret["type_name"]=getValueOfTypeName();
    }
    else
    {
        ret["type_name"]=Json::Value();
    }
    if(getTag())
    {
        ret["tag"]=getValueOfTag();
    }
    else
    {
        ret["tag"]=Json::Value();
    }
    if(getIntervalPrice())
    {
        ret["interval_price"]=getValueOfIntervalPrice();
    }
    else
    {
        ret["interval_price"]=Json::Value();
    }
    if(getAvgPrice())
    {
        ret["avg_price"]=getValueOfAvgPrice();
    }
    else
    {
        ret["avg_price"]=Json::Value();
    }
    if(getUpDown())
    {
        ret["up_down"]=getValueOfUpDown();
    }
    else
    {
        ret["up_down"]=Json::Value();
    }
    if(getDateFrom())
    {
        ret["date_from"]=getValueOfDateFrom();
    }
    else
    {
        ret["date_from"]=Json::Value();
    }
    if(getDate())
    {
        ret["date"]=getDate()->toDbStringLocal();
    }
    else
    {
        ret["date"]=Json::Value();
    }
    if(getCreateTime())
    {
        ret["create_time"]=getCreateTime()->toDbStringLocal();
    }
    else
    {
        ret["create_time"]=Json::Value();
    }
    if(getUpdateTime())
    {
        ret["update_time"]=getUpdateTime()->toDbStringLocal();
    }
    else
    {
        ret["update_time"]=Json::Value();
    }
    if(getShopId())
    {
        ret["shop_id"]=(Json::Int64)getValueOfShopId();
    }
    else
    {
        ret["shop_id"]=Json::Value();
    }
    return ret;
}

bool DataIndexFour::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("product_name"))
    {
        if(!validJsonOfField(1, "product_name", pJson["product_name"], err, true))
            return false;
    }
    else
    {
        err="The product_name column cannot be null";
        return false;
    }
    if(pJson.isMember("type_name"))
    {
        if(!validJsonOfField(2, "type_name", pJson["type_name"], err, true))
            return false;
    }
    else
    {
        err="The type_name column cannot be null";
        return false;
    }
    if(pJson.isMember("tag"))
    {
        if(!validJsonOfField(3, "tag", pJson["tag"], err, true))
            return false;
    }
    else
    {
        err="The tag column cannot be null";
        return false;
    }
    if(pJson.isMember("interval_price"))
    {
        if(!validJsonOfField(4, "interval_price", pJson["interval_price"], err, true))
            return false;
    }
    else
    {
        err="The interval_price column cannot be null";
        return false;
    }
    if(pJson.isMember("avg_price"))
    {
        if(!validJsonOfField(5, "avg_price", pJson["avg_price"], err, true))
            return false;
    }
    if(pJson.isMember("up_down"))
    {
        if(!validJsonOfField(6, "up_down", pJson["up_down"], err, true))
            return false;
    }
    if(pJson.isMember("date_from"))
    {
        if(!validJsonOfField(7, "date_from", pJson["date_from"], err, true))
            return false;
    }
    else
    {
        err="The date_from column cannot be null";
        return false;
    }
    if(pJson.isMember("date"))
    {
        if(!validJsonOfField(8, "date", pJson["date"], err, true))
            return false;
    }
    if(pJson.isMember("create_time"))
    {
        if(!validJsonOfField(9, "create_time", pJson["create_time"], err, true))
            return false;
    }
    if(pJson.isMember("update_time"))
    {
        if(!validJsonOfField(10, "update_time", pJson["update_time"], err, true))
            return false;
    }
    if(pJson.isMember("shop_id"))
    {
        if(!validJsonOfField(11, "shop_id", pJson["shop_id"], err, true))
            return false;
    }
    return true;
}
bool DataIndexFour::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                       const std::vector<std::string> &pMasqueradingVector,
                                                       std::string &err)
{
    if(pMasqueradingVector.size() != 12)
    {
        err = "Bad masquerading vector";
        return false;
    }
    if(!pMasqueradingVector[0].empty())
    {
        if(pJson.isMember(pMasqueradingVector[0]))
        {
            if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[1].empty())
    {
        if(pJson.isMember(pMasqueradingVector[1]))
        {
            if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                return false;
        }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
    }
    if(!pMasqueradingVector[2].empty())
    {
        if(pJson.isMember(pMasqueradingVector[2]))
        {
            if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                return false;
        }
        else
        {
            err="The " + pMasqueradingVector[2] + " column cannot be null";
            return false;
        }
    }
    if(!pMasqueradingVector[3].empty())
    {
        if(pJson.isMember(pMasqueradingVector[3]))
        {
            if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                return false;
        }
        else
        {
            err="The " + pMasqueradingVector[3] + " column cannot be null";
            return false;
        }
    }
    if(!pMasqueradingVector[4].empty())
    {
        if(pJson.isMember(pMasqueradingVector[4]))
        {
            if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                return false;
        }
        else
        {
            err="The " + pMasqueradingVector[4] + " column cannot be null";
            return false;
        }
    }
    if(!pMasqueradingVector[5].empty())
    {
        if(pJson.isMember(pMasqueradingVector[5]))
        {
            if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[6].empty())
    {
        if(pJson.isMember(pMasqueradingVector[6]))
        {
            if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[7].empty())
    {
        if(pJson.isMember(pMasqueradingVector[7]))
        {
            if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                return false;
        }
        else
        {
            err="The " + pMasqueradingVector[7] + " column cannot be null";
            return false;
        }
    }
    if(!pMasqueradingVector[8].empty())
    {
        if(pJson.isMember(pMasqueradingVector[8]))
        {
            if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[9].empty())
    {
        if(pJson.isMember(pMasqueradingVector[9]))
        {
            if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[10].empty())
    {
        if(pJson.isMember(pMasqueradingVector[10]))
        {
            if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[11].empty())
    {
        if(pJson.isMember(pMasqueradingVector[11]))
        {
            if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, true))
                return false;
        }
    }
    return true;
}
bool DataIndexFour::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("product_name"))
    {
        if(!validJsonOfField(1, "product_name", pJson["product_name"], err, false))
            return false;
    }
    if(pJson.isMember("type_name"))
    {
        if(!validJsonOfField(2, "type_name", pJson["type_name"], err, false))
            return false;
    }
    if(pJson.isMember("tag"))
    {
        if(!validJsonOfField(3, "tag", pJson["tag"], err, false))
            return false;
    }
    if(pJson.isMember("interval_price"))
    {
        if(!validJsonOfField(4, "interval_price", pJson["interval_price"], err, false))
            return false;
    }
    if(pJson.isMember("avg_price"))
    {
        if(!validJsonOfField(5, "avg_price", pJson["avg_price"], err, false))
            return false;
    }
    if(pJson.isMember("up_down"))
    {
        if(!validJsonOfField(6, "up_down", pJson["up_down"], err, false))
            return false;
    }
    if(pJson.isMember("date_from"))
    {
        if(!validJsonOfField(7, "date_from", pJson["date_from"], err, false))
            return false;
    }
    if(pJson.isMember("date"))
    {
        if(!validJsonOfField(8, "date", pJson["date"], err, false))
            return false;
    }
    if(pJson.isMember("create_time"))
    {
        if(!validJsonOfField(9, "create_time", pJson["create_time"], err, false))
            return false;
    }
    if(pJson.isMember("update_time"))
    {
        if(!validJsonOfField(10, "update_time", pJson["update_time"], err, false))
            return false;
    }
    if(pJson.isMember("shop_id"))
    {
        if(!validJsonOfField(11, "shop_id", pJson["shop_id"], err, false))
            return false;
    }
    return true;
}
bool DataIndexFour::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                     const std::vector<std::string> &pMasqueradingVector,
                                                     std::string &err)
{
    if(pMasqueradingVector.size() != 12)
    {
        err = "Bad masquerading vector";
        return false;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
            return false;
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
            return false;
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
            return false;
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
            return false;
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
            return false;
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
            return false;
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
            return false;
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, false))
            return false;
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, false))
            return false;
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, false))
            return false;
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, false))
            return false;
    }
    return true;
}
bool DataIndexFour::validJsonOfField(size_t index,
                                     const std::string &fieldName,
                                     const Json::Value &pJson, 
                                     std::string &err, 
                                     bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }        
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 50)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 50)";
                return false;               
            }

            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 50)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 50)";
                return false;               
            }

            break;
        case 3:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 10)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 10)";
                return false;               
            }

            break;
        case 4:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 50)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 50)";
                return false;               
            }

            break;
        case 5:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 20)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 20)";
                return false;               
            }

            break;
        case 6:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 20)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 20)";
                return false;               
            }

            break;
        case 7:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 50)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 50)";
                return false;               
            }

            break;
        case 8:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 9:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 10:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 11:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
     
        default:
            err="Internal error in the server";
            return false;
            break;
    }
    return true;
}
